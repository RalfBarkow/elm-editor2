(function(scope){
'use strict';

function F(arity, fun, wrapper) {
  wrapper.a = arity;
  wrapper.f = fun;
  return wrapper;
}

function F2(fun) {
  return F(2, fun, function(a) { return function(b) { return fun(a,b); }; })
}
function F3(fun) {
  return F(3, fun, function(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  });
}
function F4(fun) {
  return F(4, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  });
}
function F5(fun) {
  return F(5, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  });
}
function F6(fun) {
  return F(6, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  });
}
function F7(fun) {
  return F(7, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  });
}
function F8(fun) {
  return F(8, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  });
}
function F9(fun) {
  return F(9, fun, function(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  });
}

function A2(fun, a, b) {
  return fun.a === 2 ? fun.f(a, b) : fun(a)(b);
}
function A3(fun, a, b, c) {
  return fun.a === 3 ? fun.f(a, b, c) : fun(a)(b)(c);
}
function A4(fun, a, b, c, d) {
  return fun.a === 4 ? fun.f(a, b, c, d) : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e) {
  return fun.a === 5 ? fun.f(a, b, c, d, e) : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f) {
  return fun.a === 6 ? fun.f(a, b, c, d, e, f) : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g) {
  return fun.a === 7 ? fun.f(a, b, c, d, e, f, g) : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h) {
  return fun.a === 8 ? fun.f(a, b, c, d, e, f, g, h) : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i) {
  return fun.a === 9 ? fun.f(a, b, c, d, e, f, g, h, i) : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}




var _JsArray_empty = [];

function _JsArray_singleton(value)
{
    return [value];
}

function _JsArray_length(array)
{
    return array.length;
}

var _JsArray_initialize = F3(function(size, offset, func)
{
    var result = new Array(size);

    for (var i = 0; i < size; i++)
    {
        result[i] = func(offset + i);
    }

    return result;
});

var _JsArray_initializeFromList = F2(function (max, ls)
{
    var result = new Array(max);

    for (var i = 0; i < max && ls.b; i++)
    {
        result[i] = ls.a;
        ls = ls.b;
    }

    result.length = i;
    return _Utils_Tuple2(result, ls);
});

var _JsArray_unsafeGet = F2(function(index, array)
{
    return array[index];
});

var _JsArray_unsafeSet = F3(function(index, value, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[index] = value;
    return result;
});

var _JsArray_push = F2(function(value, array)
{
    var length = array.length;
    var result = new Array(length + 1);

    for (var i = 0; i < length; i++)
    {
        result[i] = array[i];
    }

    result[length] = value;
    return result;
});

var _JsArray_foldl = F3(function(func, acc, array)
{
    var length = array.length;

    for (var i = 0; i < length; i++)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_foldr = F3(function(func, acc, array)
{
    for (var i = array.length - 1; i >= 0; i--)
    {
        acc = A2(func, array[i], acc);
    }

    return acc;
});

var _JsArray_map = F2(function(func, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = func(array[i]);
    }

    return result;
});

var _JsArray_indexedMap = F3(function(func, offset, array)
{
    var length = array.length;
    var result = new Array(length);

    for (var i = 0; i < length; i++)
    {
        result[i] = A2(func, offset + i, array[i]);
    }

    return result;
});

var _JsArray_slice = F3(function(from, to, array)
{
    return array.slice(from, to);
});

var _JsArray_appendN = F3(function(n, dest, source)
{
    var destLen = dest.length;
    var itemsToCopy = n - destLen;

    if (itemsToCopy > source.length)
    {
        itemsToCopy = source.length;
    }

    var size = destLen + itemsToCopy;
    var result = new Array(size);

    for (var i = 0; i < destLen; i++)
    {
        result[i] = dest[i];
    }

    for (var i = 0; i < itemsToCopy; i++)
    {
        result[i + destLen] = source[i];
    }

    return result;
});



// LOG

var _Debug_log = F2(function(tag, value)
{
	return value;
});

var _Debug_log_UNUSED = F2(function(tag, value)
{
	console.log(tag + ': ' + _Debug_toString(value));
	return value;
});


// TODOS

function _Debug_todo(moduleName, region)
{
	return function(message) {
		_Debug_crash(8, moduleName, region, message);
	};
}

function _Debug_todoCase(moduleName, region, value)
{
	return function(message) {
		_Debug_crash(9, moduleName, region, value, message);
	};
}


// TO STRING

function _Debug_toString(value)
{
	return '<internals>';
}

function _Debug_toString_UNUSED(value)
{
	return _Debug_toAnsiString(false, value);
}

function _Debug_toAnsiString(ansi, value)
{
	if (typeof value === 'function')
	{
		return _Debug_internalColor(ansi, '<function>');
	}

	if (typeof value === 'boolean')
	{
		return _Debug_ctorColor(ansi, value ? 'True' : 'False');
	}

	if (typeof value === 'number')
	{
		return _Debug_numberColor(ansi, value + '');
	}

	if (value instanceof String)
	{
		return _Debug_charColor(ansi, "'" + _Debug_addSlashes(value, true) + "'");
	}

	if (typeof value === 'string')
	{
		return _Debug_stringColor(ansi, '"' + _Debug_addSlashes(value, false) + '"');
	}

	if (typeof value === 'object' && '$' in value)
	{
		var tag = value.$;

		if (typeof tag === 'number')
		{
			return _Debug_internalColor(ansi, '<internals>');
		}

		if (tag[0] === '#')
		{
			var output = [];
			for (var k in value)
			{
				if (k === '$') continue;
				output.push(_Debug_toAnsiString(ansi, value[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (tag === 'Set_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Set')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Set$toList(value));
		}

		if (tag === 'RBNode_elm_builtin' || tag === 'RBEmpty_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Dict')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Dict$toList(value));
		}

		if (tag === 'Array_elm_builtin')
		{
			return _Debug_ctorColor(ansi, 'Array')
				+ _Debug_fadeColor(ansi, '.fromList') + ' '
				+ _Debug_toAnsiString(ansi, $elm$core$Array$toList(value));
		}

		if (tag === '::' || tag === '[]')
		{
			var output = '[';

			value.b && (output += _Debug_toAnsiString(ansi, value.a), value = value.b)

			for (; value.b; value = value.b) // WHILE_CONS
			{
				output += ',' + _Debug_toAnsiString(ansi, value.a);
			}
			return output + ']';
		}

		var output = '';
		for (var i in value)
		{
			if (i === '$') continue;
			var str = _Debug_toAnsiString(ansi, value[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '[' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return _Debug_ctorColor(ansi, tag) + output;
	}

	if (typeof DataView === 'function' && value instanceof DataView)
	{
		return _Debug_stringColor(ansi, '<' + value.byteLength + ' bytes>');
	}

	if (typeof File !== 'undefined' && value instanceof File)
	{
		return _Debug_internalColor(ansi, '<' + value.name + '>');
	}

	if (typeof value === 'object')
	{
		var output = [];
		for (var key in value)
		{
			var field = key[0] === '_' ? key.slice(1) : key;
			output.push(_Debug_fadeColor(ansi, field) + ' = ' + _Debug_toAnsiString(ansi, value[key]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return _Debug_internalColor(ansi, '<internals>');
}

function _Debug_addSlashes(str, isChar)
{
	var s = str
		.replace(/\\/g, '\\\\')
		.replace(/\n/g, '\\n')
		.replace(/\t/g, '\\t')
		.replace(/\r/g, '\\r')
		.replace(/\v/g, '\\v')
		.replace(/\0/g, '\\0');

	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}

function _Debug_ctorColor(ansi, string)
{
	return ansi ? '\x1b[96m' + string + '\x1b[0m' : string;
}

function _Debug_numberColor(ansi, string)
{
	return ansi ? '\x1b[95m' + string + '\x1b[0m' : string;
}

function _Debug_stringColor(ansi, string)
{
	return ansi ? '\x1b[93m' + string + '\x1b[0m' : string;
}

function _Debug_charColor(ansi, string)
{
	return ansi ? '\x1b[92m' + string + '\x1b[0m' : string;
}

function _Debug_fadeColor(ansi, string)
{
	return ansi ? '\x1b[37m' + string + '\x1b[0m' : string;
}

function _Debug_internalColor(ansi, string)
{
	return ansi ? '\x1b[36m' + string + '\x1b[0m' : string;
}

function _Debug_toHexDigit(n)
{
	return String.fromCharCode(n < 10 ? 48 + n : 55 + n);
}


// CRASH


function _Debug_crash(identifier)
{
	throw new Error('https://github.com/elm/core/blob/1.0.0/hints/' + identifier + '.md');
}


function _Debug_crash_UNUSED(identifier, fact1, fact2, fact3, fact4)
{
	switch(identifier)
	{
		case 0:
			throw new Error('What node should I take over? In JavaScript I need something like:\n\n    Elm.Main.init({\n        node: document.getElementById("elm-node")\n    })\n\nYou need to do this with any Browser.sandbox or Browser.element program.');

		case 1:
			throw new Error('Browser.application programs cannot handle URLs like this:\n\n    ' + document.location.href + '\n\nWhat is the root? The root of your file system? Try looking at this program with `elm reactor` or some other server.');

		case 2:
			var jsonErrorString = fact1;
			throw new Error('Problem with the flags given to your Elm program on initialization.\n\n' + jsonErrorString);

		case 3:
			var portName = fact1;
			throw new Error('There can only be one port named `' + portName + '`, but your program has multiple.');

		case 4:
			var portName = fact1;
			var problem = fact2;
			throw new Error('Trying to send an unexpected type of value through port `' + portName + '`:\n' + problem);

		case 5:
			throw new Error('Trying to use `(==)` on functions.\nThere is no way to know if functions are "the same" in the Elm sense.\nRead more about this at https://package.elm-lang.org/packages/elm/core/latest/Basics#== which describes why it is this way and what the better version will look like.');

		case 6:
			var moduleName = fact1;
			throw new Error('Your page is loading multiple Elm scripts with a module named ' + moduleName + '. Maybe a duplicate script is getting loaded accidentally? If not, rename one of them so I know which is which!');

		case 8:
			var moduleName = fact1;
			var region = fact2;
			var message = fact3;
			throw new Error('TODO in module `' + moduleName + '` ' + _Debug_regionToString(region) + '\n\n' + message);

		case 9:
			var moduleName = fact1;
			var region = fact2;
			var value = fact3;
			var message = fact4;
			throw new Error(
				'TODO in module `' + moduleName + '` from the `case` expression '
				+ _Debug_regionToString(region) + '\n\nIt received the following value:\n\n    '
				+ _Debug_toString(value).replace('\n', '\n    ')
				+ '\n\nBut the branch that handles it says:\n\n    ' + message.replace('\n', '\n    ')
			);

		case 10:
			throw new Error('Bug in https://github.com/elm/virtual-dom/issues');

		case 11:
			throw new Error('Cannot perform mod 0. Division by zero error.');
	}
}

function _Debug_regionToString(region)
{
	if (region.g3.i === region.dN.i)
	{
		return 'on line ' + region.g3.i;
	}
	return 'on lines ' + region.g3.i + ' through ' + region.dN.i;
}



// EQUALITY

function _Utils_eq(x, y)
{
	for (
		var pair, stack = [], isEqual = _Utils_eqHelp(x, y, 0, stack);
		isEqual && (pair = stack.pop());
		isEqual = _Utils_eqHelp(pair.a, pair.b, 0, stack)
		)
	{}

	return isEqual;
}

function _Utils_eqHelp(x, y, depth, stack)
{
	if (x === y)
	{
		return true;
	}

	if (typeof x !== 'object' || x === null || y === null)
	{
		typeof x === 'function' && _Debug_crash(5);
		return false;
	}

	if (depth > 100)
	{
		stack.push(_Utils_Tuple2(x,y));
		return true;
	}

	/**_UNUSED/
	if (x.$ === 'Set_elm_builtin')
	{
		x = $elm$core$Set$toList(x);
		y = $elm$core$Set$toList(y);
	}
	if (x.$ === 'RBNode_elm_builtin' || x.$ === 'RBEmpty_elm_builtin')
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	/**/
	if (x.$ < 0)
	{
		x = $elm$core$Dict$toList(x);
		y = $elm$core$Dict$toList(y);
	}
	//*/

	for (var key in x)
	{
		if (!_Utils_eqHelp(x[key], y[key], depth + 1, stack))
		{
			return false;
		}
	}
	return true;
}

var _Utils_equal = F2(_Utils_eq);
var _Utils_notEqual = F2(function(a, b) { return !_Utils_eq(a,b); });



// COMPARISONS

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

function _Utils_cmp(x, y, ord)
{
	if (typeof x !== 'object')
	{
		return x === y ? /*EQ*/ 0 : x < y ? /*LT*/ -1 : /*GT*/ 1;
	}

	/**_UNUSED/
	if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b ? 0 : a < b ? -1 : 1;
	}
	//*/

	/**/
	if (typeof x.$ === 'undefined')
	//*/
	/**_UNUSED/
	if (x.$[0] === '#')
	//*/
	{
		return (ord = _Utils_cmp(x.a, y.a))
			? ord
			: (ord = _Utils_cmp(x.b, y.b))
				? ord
				: _Utils_cmp(x.c, y.c);
	}

	// traverse conses until end of a list or a mismatch
	for (; x.b && y.b && !(ord = _Utils_cmp(x.a, y.a)); x = x.b, y = y.b) {} // WHILE_CONSES
	return ord || (x.b ? /*GT*/ 1 : y.b ? /*LT*/ -1 : /*EQ*/ 0);
}

var _Utils_lt = F2(function(a, b) { return _Utils_cmp(a, b) < 0; });
var _Utils_le = F2(function(a, b) { return _Utils_cmp(a, b) < 1; });
var _Utils_gt = F2(function(a, b) { return _Utils_cmp(a, b) > 0; });
var _Utils_ge = F2(function(a, b) { return _Utils_cmp(a, b) >= 0; });

var _Utils_compare = F2(function(x, y)
{
	var n = _Utils_cmp(x, y);
	return n < 0 ? $elm$core$Basics$LT : n ? $elm$core$Basics$GT : $elm$core$Basics$EQ;
});


// COMMON VALUES

var _Utils_Tuple0 = 0;
var _Utils_Tuple0_UNUSED = { $: '#0' };

function _Utils_Tuple2(a, b) { return { a: a, b: b }; }
function _Utils_Tuple2_UNUSED(a, b) { return { $: '#2', a: a, b: b }; }

function _Utils_Tuple3(a, b, c) { return { a: a, b: b, c: c }; }
function _Utils_Tuple3_UNUSED(a, b, c) { return { $: '#3', a: a, b: b, c: c }; }

function _Utils_chr(c) { return c; }
function _Utils_chr_UNUSED(c) { return new String(c); }


// RECORDS

function _Utils_update(oldRecord, updatedFields)
{
	var newRecord = {};

	for (var key in oldRecord)
	{
		newRecord[key] = oldRecord[key];
	}

	for (var key in updatedFields)
	{
		newRecord[key] = updatedFields[key];
	}

	return newRecord;
}


// APPEND

var _Utils_append = F2(_Utils_ap);

function _Utils_ap(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (!xs.b)
	{
		return ys;
	}
	var root = _List_Cons(xs.a, ys);
	xs = xs.b
	for (var curr = root; xs.b; xs = xs.b) // WHILE_CONS
	{
		curr = curr.b = _List_Cons(xs.a, ys);
	}
	return root;
}



var _List_Nil = { $: 0 };
var _List_Nil_UNUSED = { $: '[]' };

function _List_Cons(hd, tl) { return { $: 1, a: hd, b: tl }; }
function _List_Cons_UNUSED(hd, tl) { return { $: '::', a: hd, b: tl }; }


var _List_cons = F2(_List_Cons);

function _List_fromArray(arr)
{
	var out = _List_Nil;
	for (var i = arr.length; i--; )
	{
		out = _List_Cons(arr[i], out);
	}
	return out;
}

function _List_toArray(xs)
{
	for (var out = []; xs.b; xs = xs.b) // WHILE_CONS
	{
		out.push(xs.a);
	}
	return out;
}

var _List_map2 = F3(function(f, xs, ys)
{
	for (var arr = []; xs.b && ys.b; xs = xs.b, ys = ys.b) // WHILE_CONSES
	{
		arr.push(A2(f, xs.a, ys.a));
	}
	return _List_fromArray(arr);
});

var _List_map3 = F4(function(f, xs, ys, zs)
{
	for (var arr = []; xs.b && ys.b && zs.b; xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A3(f, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map4 = F5(function(f, ws, xs, ys, zs)
{
	for (var arr = []; ws.b && xs.b && ys.b && zs.b; ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A4(f, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_map5 = F6(function(f, vs, ws, xs, ys, zs)
{
	for (var arr = []; vs.b && ws.b && xs.b && ys.b && zs.b; vs = vs.b, ws = ws.b, xs = xs.b, ys = ys.b, zs = zs.b) // WHILE_CONSES
	{
		arr.push(A5(f, vs.a, ws.a, xs.a, ys.a, zs.a));
	}
	return _List_fromArray(arr);
});

var _List_sortBy = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		return _Utils_cmp(f(a), f(b));
	}));
});

var _List_sortWith = F2(function(f, xs)
{
	return _List_fromArray(_List_toArray(xs).sort(function(a, b) {
		var ord = A2(f, a, b);
		return ord === $elm$core$Basics$EQ ? 0 : ord === $elm$core$Basics$LT ? -1 : 1;
	}));
});



// MATH

var _Basics_add = F2(function(a, b) { return a + b; });
var _Basics_sub = F2(function(a, b) { return a - b; });
var _Basics_mul = F2(function(a, b) { return a * b; });
var _Basics_fdiv = F2(function(a, b) { return a / b; });
var _Basics_idiv = F2(function(a, b) { return (a / b) | 0; });
var _Basics_pow = F2(Math.pow);

var _Basics_remainderBy = F2(function(b, a) { return a % b; });

// https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/divmodnote-letter.pdf
var _Basics_modBy = F2(function(modulus, x)
{
	var answer = x % modulus;
	return modulus === 0
		? _Debug_crash(11)
		:
	((answer > 0 && modulus < 0) || (answer < 0 && modulus > 0))
		? answer + modulus
		: answer;
});


// TRIGONOMETRY

var _Basics_pi = Math.PI;
var _Basics_e = Math.E;
var _Basics_cos = Math.cos;
var _Basics_sin = Math.sin;
var _Basics_tan = Math.tan;
var _Basics_acos = Math.acos;
var _Basics_asin = Math.asin;
var _Basics_atan = Math.atan;
var _Basics_atan2 = F2(Math.atan2);


// MORE MATH

function _Basics_toFloat(x) { return x; }
function _Basics_truncate(n) { return n | 0; }
function _Basics_isInfinite(n) { return n === Infinity || n === -Infinity; }

var _Basics_ceiling = Math.ceil;
var _Basics_floor = Math.floor;
var _Basics_round = Math.round;
var _Basics_sqrt = Math.sqrt;
var _Basics_log = Math.log;
var _Basics_isNaN = isNaN;


// BOOLEANS

function _Basics_not(bool) { return !bool; }
var _Basics_and = F2(function(a, b) { return a && b; });
var _Basics_or  = F2(function(a, b) { return a || b; });
var _Basics_xor = F2(function(a, b) { return a !== b; });



var _String_cons = F2(function(chr, str)
{
	return chr + str;
});

function _String_uncons(string)
{
	var word = string.charCodeAt(0);
	return !isNaN(word)
		? $elm$core$Maybe$Just(
			0xD800 <= word && word <= 0xDBFF
				? _Utils_Tuple2(_Utils_chr(string[0] + string[1]), string.slice(2))
				: _Utils_Tuple2(_Utils_chr(string[0]), string.slice(1))
		)
		: $elm$core$Maybe$Nothing;
}

var _String_append = F2(function(a, b)
{
	return a + b;
});

function _String_length(str)
{
	return str.length;
}

var _String_map = F2(function(func, string)
{
	var len = string.length;
	var array = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = string.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			array[i] = func(_Utils_chr(string[i] + string[i+1]));
			i += 2;
			continue;
		}
		array[i] = func(_Utils_chr(string[i]));
		i++;
	}
	return array.join('');
});

var _String_filter = F2(function(isGood, str)
{
	var arr = [];
	var len = str.length;
	var i = 0;
	while (i < len)
	{
		var char = str[i];
		var word = str.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += str[i];
			i++;
		}

		if (isGood(_Utils_chr(char)))
		{
			arr.push(char);
		}
	}
	return arr.join('');
});

function _String_reverse(str)
{
	var len = str.length;
	var arr = new Array(len);
	var i = 0;
	while (i < len)
	{
		var word = str.charCodeAt(i);
		if (0xD800 <= word && word <= 0xDBFF)
		{
			arr[len - i] = str[i + 1];
			i++;
			arr[len - i] = str[i - 1];
			i++;
		}
		else
		{
			arr[len - i] = str[i];
			i++;
		}
	}
	return arr.join('');
}

var _String_foldl = F3(function(func, state, string)
{
	var len = string.length;
	var i = 0;
	while (i < len)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		i++;
		if (0xD800 <= word && word <= 0xDBFF)
		{
			char += string[i];
			i++;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_foldr = F3(function(func, state, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		state = A2(func, _Utils_chr(char), state);
	}
	return state;
});

var _String_split = F2(function(sep, str)
{
	return str.split(sep);
});

var _String_join = F2(function(sep, strs)
{
	return strs.join(sep);
});

var _String_slice = F3(function(start, end, str) {
	return str.slice(start, end);
});

function _String_trim(str)
{
	return str.trim();
}

function _String_trimLeft(str)
{
	return str.replace(/^\s+/, '');
}

function _String_trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function _String_words(str)
{
	return _List_fromArray(str.trim().split(/\s+/g));
}

function _String_lines(str)
{
	return _List_fromArray(str.split(/\r\n|\r|\n/g));
}

function _String_toUpper(str)
{
	return str.toUpperCase();
}

function _String_toLower(str)
{
	return str.toLowerCase();
}

var _String_any = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (isGood(_Utils_chr(char)))
		{
			return true;
		}
	}
	return false;
});

var _String_all = F2(function(isGood, string)
{
	var i = string.length;
	while (i--)
	{
		var char = string[i];
		var word = string.charCodeAt(i);
		if (0xDC00 <= word && word <= 0xDFFF)
		{
			i--;
			char = string[i] + char;
		}
		if (!isGood(_Utils_chr(char)))
		{
			return false;
		}
	}
	return true;
});

var _String_contains = F2(function(sub, str)
{
	return str.indexOf(sub) > -1;
});

var _String_startsWith = F2(function(sub, str)
{
	return str.indexOf(sub) === 0;
});

var _String_endsWith = F2(function(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
});

var _String_indexes = F2(function(sub, str)
{
	var subLen = sub.length;

	if (subLen < 1)
	{
		return _List_Nil;
	}

	var i = 0;
	var is = [];

	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}

	return _List_fromArray(is);
});


// TO STRING

function _String_fromNumber(number)
{
	return number + '';
}


// INT CONVERSIONS

function _String_toInt(str)
{
	var total = 0;
	var code0 = str.charCodeAt(0);
	var start = code0 == 0x2B /* + */ || code0 == 0x2D /* - */ ? 1 : 0;

	for (var i = start; i < str.length; ++i)
	{
		var code = str.charCodeAt(i);
		if (code < 0x30 || 0x39 < code)
		{
			return $elm$core$Maybe$Nothing;
		}
		total = 10 * total + code - 0x30;
	}

	return i == start
		? $elm$core$Maybe$Nothing
		: $elm$core$Maybe$Just(code0 == 0x2D ? -total : total);
}


// FLOAT CONVERSIONS

function _String_toFloat(s)
{
	// check if it is a hex, octal, or binary number
	if (s.length === 0 || /[\sxbo]/.test(s))
	{
		return $elm$core$Maybe$Nothing;
	}
	var n = +s;
	// faster isNaN check
	return n === n ? $elm$core$Maybe$Just(n) : $elm$core$Maybe$Nothing;
}

function _String_fromList(chars)
{
	return _List_toArray(chars).join('');
}




function _Char_toCode(char)
{
	var code = char.charCodeAt(0);
	if (0xD800 <= code && code <= 0xDBFF)
	{
		return (code - 0xD800) * 0x400 + char.charCodeAt(1) - 0xDC00 + 0x10000
	}
	return code;
}

function _Char_fromCode(code)
{
	return _Utils_chr(
		(code < 0 || 0x10FFFF < code)
			? '\uFFFD'
			:
		(code <= 0xFFFF)
			? String.fromCharCode(code)
			:
		(code -= 0x10000,
			String.fromCharCode(Math.floor(code / 0x400) + 0xD800, code % 0x400 + 0xDC00)
		)
	);
}

function _Char_toUpper(char)
{
	return _Utils_chr(char.toUpperCase());
}

function _Char_toLower(char)
{
	return _Utils_chr(char.toLowerCase());
}

function _Char_toLocaleUpper(char)
{
	return _Utils_chr(char.toLocaleUpperCase());
}

function _Char_toLocaleLower(char)
{
	return _Utils_chr(char.toLocaleLowerCase());
}



/**_UNUSED/
function _Json_errorToString(error)
{
	return $elm$json$Json$Decode$errorToString(error);
}
//*/


// CORE DECODERS

function _Json_succeed(msg)
{
	return {
		$: 0,
		a: msg
	};
}

function _Json_fail(msg)
{
	return {
		$: 1,
		a: msg
	};
}

function _Json_decodePrim(decoder)
{
	return { $: 2, b: decoder };
}

var _Json_decodeInt = _Json_decodePrim(function(value) {
	return (typeof value !== 'number')
		? _Json_expecting('an INT', value)
		:
	(-2147483647 < value && value < 2147483647 && (value | 0) === value)
		? $elm$core$Result$Ok(value)
		:
	(isFinite(value) && !(value % 1))
		? $elm$core$Result$Ok(value)
		: _Json_expecting('an INT', value);
});

var _Json_decodeBool = _Json_decodePrim(function(value) {
	return (typeof value === 'boolean')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a BOOL', value);
});

var _Json_decodeFloat = _Json_decodePrim(function(value) {
	return (typeof value === 'number')
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FLOAT', value);
});

var _Json_decodeValue = _Json_decodePrim(function(value) {
	return $elm$core$Result$Ok(_Json_wrap(value));
});

var _Json_decodeString = _Json_decodePrim(function(value) {
	return (typeof value === 'string')
		? $elm$core$Result$Ok(value)
		: (value instanceof String)
			? $elm$core$Result$Ok(value + '')
			: _Json_expecting('a STRING', value);
});

function _Json_decodeList(decoder) { return { $: 3, b: decoder }; }
function _Json_decodeArray(decoder) { return { $: 4, b: decoder }; }

function _Json_decodeNull(value) { return { $: 5, c: value }; }

var _Json_decodeField = F2(function(field, decoder)
{
	return {
		$: 6,
		d: field,
		b: decoder
	};
});

var _Json_decodeIndex = F2(function(index, decoder)
{
	return {
		$: 7,
		e: index,
		b: decoder
	};
});

function _Json_decodeKeyValuePairs(decoder)
{
	return {
		$: 8,
		b: decoder
	};
}

function _Json_mapMany(f, decoders)
{
	return {
		$: 9,
		f: f,
		g: decoders
	};
}

var _Json_andThen = F2(function(callback, decoder)
{
	return {
		$: 10,
		b: decoder,
		h: callback
	};
});

function _Json_oneOf(decoders)
{
	return {
		$: 11,
		g: decoders
	};
}


// DECODING OBJECTS

var _Json_map1 = F2(function(f, d1)
{
	return _Json_mapMany(f, [d1]);
});

var _Json_map2 = F3(function(f, d1, d2)
{
	return _Json_mapMany(f, [d1, d2]);
});

var _Json_map3 = F4(function(f, d1, d2, d3)
{
	return _Json_mapMany(f, [d1, d2, d3]);
});

var _Json_map4 = F5(function(f, d1, d2, d3, d4)
{
	return _Json_mapMany(f, [d1, d2, d3, d4]);
});

var _Json_map5 = F6(function(f, d1, d2, d3, d4, d5)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5]);
});

var _Json_map6 = F7(function(f, d1, d2, d3, d4, d5, d6)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6]);
});

var _Json_map7 = F8(function(f, d1, d2, d3, d4, d5, d6, d7)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7]);
});

var _Json_map8 = F9(function(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return _Json_mapMany(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
});


// DECODE

var _Json_runOnString = F2(function(decoder, string)
{
	try
	{
		var value = JSON.parse(string);
		return _Json_runHelp(decoder, value);
	}
	catch (e)
	{
		return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'This is not valid JSON! ' + e.message, _Json_wrap(string)));
	}
});

var _Json_run = F2(function(decoder, value)
{
	return _Json_runHelp(decoder, _Json_unwrap(value));
});

function _Json_runHelp(decoder, value)
{
	switch (decoder.$)
	{
		case 2:
			return decoder.b(value);

		case 5:
			return (value === null)
				? $elm$core$Result$Ok(decoder.c)
				: _Json_expecting('null', value);

		case 3:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('a LIST', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _List_fromArray);

		case 4:
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			return _Json_runArrayDecoder(decoder.b, value, _Json_toElmArray);

		case 6:
			var field = decoder.d;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return _Json_expecting('an OBJECT with a field named `' + field + '`', value);
			}
			var result = _Json_runHelp(decoder.b, value[field]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, field, result.a));

		case 7:
			var index = decoder.e;
			if (!_Json_isArray(value))
			{
				return _Json_expecting('an ARRAY', value);
			}
			if (index >= value.length)
			{
				return _Json_expecting('a LONGER array. Need index ' + index + ' but only see ' + value.length + ' entries', value);
			}
			var result = _Json_runHelp(decoder.b, value[index]);
			return ($elm$core$Result$isOk(result)) ? result : $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, index, result.a));

		case 8:
			if (typeof value !== 'object' || value === null || _Json_isArray(value))
			{
				return _Json_expecting('an OBJECT', value);
			}

			var keyValuePairs = _List_Nil;
			// TODO test perf of Object.keys and switch when support is good enough
			for (var key in value)
			{
				if (value.hasOwnProperty(key))
				{
					var result = _Json_runHelp(decoder.b, value[key]);
					if (!$elm$core$Result$isOk(result))
					{
						return $elm$core$Result$Err(A2($elm$json$Json$Decode$Field, key, result.a));
					}
					keyValuePairs = _List_Cons(_Utils_Tuple2(key, result.a), keyValuePairs);
				}
			}
			return $elm$core$Result$Ok($elm$core$List$reverse(keyValuePairs));

		case 9:
			var answer = decoder.f;
			var decoders = decoder.g;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = _Json_runHelp(decoders[i], value);
				if (!$elm$core$Result$isOk(result))
				{
					return result;
				}
				answer = answer(result.a);
			}
			return $elm$core$Result$Ok(answer);

		case 10:
			var result = _Json_runHelp(decoder.b, value);
			return (!$elm$core$Result$isOk(result))
				? result
				: _Json_runHelp(decoder.h(result.a), value);

		case 11:
			var errors = _List_Nil;
			for (var temp = decoder.g; temp.b; temp = temp.b) // WHILE_CONS
			{
				var result = _Json_runHelp(temp.a, value);
				if ($elm$core$Result$isOk(result))
				{
					return result;
				}
				errors = _List_Cons(result.a, errors);
			}
			return $elm$core$Result$Err($elm$json$Json$Decode$OneOf($elm$core$List$reverse(errors)));

		case 1:
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, decoder.a, _Json_wrap(value)));

		case 0:
			return $elm$core$Result$Ok(decoder.a);
	}
}

function _Json_runArrayDecoder(decoder, value, toElmValue)
{
	var len = value.length;
	var array = new Array(len);
	for (var i = 0; i < len; i++)
	{
		var result = _Json_runHelp(decoder, value[i]);
		if (!$elm$core$Result$isOk(result))
		{
			return $elm$core$Result$Err(A2($elm$json$Json$Decode$Index, i, result.a));
		}
		array[i] = result.a;
	}
	return $elm$core$Result$Ok(toElmValue(array));
}

function _Json_isArray(value)
{
	return Array.isArray(value) || (typeof FileList !== 'undefined' && value instanceof FileList);
}

function _Json_toElmArray(array)
{
	return A2($elm$core$Array$initialize, array.length, function(i) { return array[i]; });
}

function _Json_expecting(type, value)
{
	return $elm$core$Result$Err(A2($elm$json$Json$Decode$Failure, 'Expecting ' + type, _Json_wrap(value)));
}


// EQUALITY

function _Json_equality(x, y)
{
	if (x === y)
	{
		return true;
	}

	if (x.$ !== y.$)
	{
		return false;
	}

	switch (x.$)
	{
		case 0:
		case 1:
			return x.a === y.a;

		case 2:
			return x.b === y.b;

		case 5:
			return x.c === y.c;

		case 3:
		case 4:
		case 8:
			return _Json_equality(x.b, y.b);

		case 6:
			return x.d === y.d && _Json_equality(x.b, y.b);

		case 7:
			return x.e === y.e && _Json_equality(x.b, y.b);

		case 9:
			return x.f === y.f && _Json_listEquality(x.g, y.g);

		case 10:
			return x.h === y.h && _Json_equality(x.b, y.b);

		case 11:
			return _Json_listEquality(x.g, y.g);
	}
}

function _Json_listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!_Json_equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

var _Json_encode = F2(function(indentLevel, value)
{
	return JSON.stringify(_Json_unwrap(value), null, indentLevel) + '';
});

function _Json_wrap_UNUSED(value) { return { $: 0, a: value }; }
function _Json_unwrap_UNUSED(value) { return value.a; }

function _Json_wrap(value) { return value; }
function _Json_unwrap(value) { return value; }

function _Json_emptyArray() { return []; }
function _Json_emptyObject() { return {}; }

var _Json_addField = F3(function(key, value, object)
{
	object[key] = _Json_unwrap(value);
	return object;
});

function _Json_addEntry(func)
{
	return F2(function(entry, array)
	{
		array.push(_Json_unwrap(func(entry)));
		return array;
	});
}

var _Json_encodeNull = _Json_wrap(null);



// TASKS

function _Scheduler_succeed(value)
{
	return {
		$: 0,
		a: value
	};
}

function _Scheduler_fail(error)
{
	return {
		$: 1,
		a: error
	};
}

function _Scheduler_binding(callback)
{
	return {
		$: 2,
		b: callback,
		c: null
	};
}

var _Scheduler_andThen = F2(function(callback, task)
{
	return {
		$: 3,
		b: callback,
		d: task
	};
});

var _Scheduler_onError = F2(function(callback, task)
{
	return {
		$: 4,
		b: callback,
		d: task
	};
});

function _Scheduler_receive(callback)
{
	return {
		$: 5,
		b: callback
	};
}


// PROCESSES

var _Scheduler_guid = 0;

function _Scheduler_rawSpawn(task)
{
	var proc = {
		$: 0,
		e: _Scheduler_guid++,
		f: task,
		g: null,
		h: []
	};

	_Scheduler_enqueue(proc);

	return proc;
}

function _Scheduler_spawn(task)
{
	return _Scheduler_binding(function(callback) {
		callback(_Scheduler_succeed(_Scheduler_rawSpawn(task)));
	});
}

function _Scheduler_rawSend(proc, msg)
{
	proc.h.push(msg);
	_Scheduler_enqueue(proc);
}

var _Scheduler_send = F2(function(proc, msg)
{
	return _Scheduler_binding(function(callback) {
		_Scheduler_rawSend(proc, msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});

function _Scheduler_kill(proc)
{
	return _Scheduler_binding(function(callback) {
		var task = proc.f;
		if (task.$ === 2 && task.c)
		{
			task.c();
		}

		proc.f = null;

		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
}


/* STEP PROCESSES

type alias Process =
  { $ : tag
  , id : unique_id
  , root : Task
  , stack : null | { $: SUCCEED | FAIL, a: callback, b: stack }
  , mailbox : [msg]
  }

*/


var _Scheduler_working = false;
var _Scheduler_queue = [];


function _Scheduler_enqueue(proc)
{
	_Scheduler_queue.push(proc);
	if (_Scheduler_working)
	{
		return;
	}
	_Scheduler_working = true;
	while (proc = _Scheduler_queue.shift())
	{
		_Scheduler_step(proc);
	}
	_Scheduler_working = false;
}


function _Scheduler_step(proc)
{
	while (proc.f)
	{
		var rootTag = proc.f.$;
		if (rootTag === 0 || rootTag === 1)
		{
			while (proc.g && proc.g.$ !== rootTag)
			{
				proc.g = proc.g.i;
			}
			if (!proc.g)
			{
				return;
			}
			proc.f = proc.g.b(proc.f.a);
			proc.g = proc.g.i;
		}
		else if (rootTag === 2)
		{
			proc.f.c = proc.f.b(function(newRoot) {
				proc.f = newRoot;
				_Scheduler_enqueue(proc);
			});
			return;
		}
		else if (rootTag === 5)
		{
			if (proc.h.length === 0)
			{
				return;
			}
			proc.f = proc.f.b(proc.h.shift());
		}
		else // if (rootTag === 3 || rootTag === 4)
		{
			proc.g = {
				$: rootTag === 3 ? 0 : 1,
				b: proc.f.b,
				i: proc.g
			};
			proc.f = proc.f.d;
		}
	}
}



function _Process_sleep(time)
{
	return _Scheduler_binding(function(callback) {
		var id = setTimeout(function() {
			callback(_Scheduler_succeed(_Utils_Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}




// PROGRAMS


var _Platform_worker = F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.f7,
		impl.hy,
		impl.hc,
		function() { return function() {} }
	);
});



// INITIALIZE A PROGRAM


function _Platform_initialize(flagDecoder, args, init, update, subscriptions, stepperBuilder)
{
	var result = A2(_Json_run, flagDecoder, _Json_wrap(args ? args['flags'] : undefined));
	$elm$core$Result$isOk(result) || _Debug_crash(2 /**_UNUSED/, _Json_errorToString(result.a) /**/);
	var managers = {};
	var initPair = init(result.a);
	var model = initPair.a;
	var stepper = stepperBuilder(sendToApp, model);
	var ports = _Platform_setupEffects(managers, sendToApp);

	function sendToApp(msg, viewMetadata)
	{
		var pair = A2(update, msg, model);
		stepper(model = pair.a, viewMetadata);
		_Platform_enqueueEffects(managers, pair.b, subscriptions(model));
	}

	_Platform_enqueueEffects(managers, initPair.b, subscriptions(model));

	return ports ? { ports: ports } : {};
}



// TRACK PRELOADS
//
// This is used by code in elm/browser and elm/http
// to register any HTTP requests that are triggered by init.
//


var _Platform_preload;


function _Platform_registerPreload(url)
{
	_Platform_preload.add(url);
}



// EFFECT MANAGERS


var _Platform_effectManagers = {};


function _Platform_setupEffects(managers, sendToApp)
{
	var ports;

	// setup all necessary effect managers
	for (var key in _Platform_effectManagers)
	{
		var manager = _Platform_effectManagers[key];

		if (manager.a)
		{
			ports = ports || {};
			ports[key] = manager.a(key, sendToApp);
		}

		managers[key] = _Platform_instantiateManager(manager, sendToApp);
	}

	return ports;
}


function _Platform_createManager(init, onEffects, onSelfMsg, cmdMap, subMap)
{
	return {
		b: init,
		c: onEffects,
		d: onSelfMsg,
		e: cmdMap,
		f: subMap
	};
}


function _Platform_instantiateManager(info, sendToApp)
{
	var router = {
		g: sendToApp,
		h: undefined
	};

	var onEffects = info.c;
	var onSelfMsg = info.d;
	var cmdMap = info.e;
	var subMap = info.f;

	function loop(state)
	{
		return A2(_Scheduler_andThen, loop, _Scheduler_receive(function(msg)
		{
			var value = msg.a;

			if (msg.$ === 0)
			{
				return A3(onSelfMsg, router, value, state);
			}

			return cmdMap && subMap
				? A4(onEffects, router, value.i, value.j, state)
				: A3(onEffects, router, cmdMap ? value.i : value.j, state);
		}));
	}

	return router.h = _Scheduler_rawSpawn(A2(_Scheduler_andThen, loop, info.b));
}



// ROUTING


var _Platform_sendToApp = F2(function(router, msg)
{
	return _Scheduler_binding(function(callback)
	{
		router.g(msg);
		callback(_Scheduler_succeed(_Utils_Tuple0));
	});
});


var _Platform_sendToSelf = F2(function(router, msg)
{
	return A2(_Scheduler_send, router.h, {
		$: 0,
		a: msg
	});
});



// BAGS


function _Platform_leaf(home)
{
	return function(value)
	{
		return {
			$: 1,
			k: home,
			l: value
		};
	};
}


function _Platform_batch(list)
{
	return {
		$: 2,
		m: list
	};
}


var _Platform_map = F2(function(tagger, bag)
{
	return {
		$: 3,
		n: tagger,
		o: bag
	}
});



// PIPE BAGS INTO EFFECT MANAGERS
//
// Effects must be queued!
//
// Say your init contains a synchronous command, like Time.now or Time.here
//
//   - This will produce a batch of effects (FX_1)
//   - The synchronous task triggers the subsequent `update` call
//   - This will produce a batch of effects (FX_2)
//
// If we just start dispatching FX_2, subscriptions from FX_2 can be processed
// before subscriptions from FX_1. No good! Earlier versions of this code had
// this problem, leading to these reports:
//
//   https://github.com/elm/core/issues/980
//   https://github.com/elm/core/pull/981
//   https://github.com/elm/compiler/issues/1776
//
// The queue is necessary to avoid ordering issues for synchronous commands.


// Why use true/false here? Why not just check the length of the queue?
// The goal is to detect "are we currently dispatching effects?" If we
// are, we need to bail and let the ongoing while loop handle things.
//
// Now say the queue has 1 element. When we dequeue the final element,
// the queue will be empty, but we are still actively dispatching effects.
// So you could get queue jumping in a really tricky category of cases.
//
var _Platform_effectsQueue = [];
var _Platform_effectsActive = false;


function _Platform_enqueueEffects(managers, cmdBag, subBag)
{
	_Platform_effectsQueue.push({ p: managers, q: cmdBag, r: subBag });

	if (_Platform_effectsActive) return;

	_Platform_effectsActive = true;
	for (var fx; fx = _Platform_effectsQueue.shift(); )
	{
		_Platform_dispatchEffects(fx.p, fx.q, fx.r);
	}
	_Platform_effectsActive = false;
}


function _Platform_dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	_Platform_gatherEffects(true, cmdBag, effectsDict, null);
	_Platform_gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		_Scheduler_rawSend(managers[home], {
			$: 'fx',
			a: effectsDict[home] || { i: _List_Nil, j: _List_Nil }
		});
	}
}


function _Platform_gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.$)
	{
		case 1:
			var home = bag.k;
			var effect = _Platform_toEffect(isCmd, home, taggers, bag.l);
			effectsDict[home] = _Platform_insert(isCmd, effect, effectsDict[home]);
			return;

		case 2:
			for (var list = bag.m; list.b; list = list.b) // WHILE_CONS
			{
				_Platform_gatherEffects(isCmd, list.a, effectsDict, taggers);
			}
			return;

		case 3:
			_Platform_gatherEffects(isCmd, bag.o, effectsDict, {
				s: bag.n,
				t: taggers
			});
			return;
	}
}


function _Platform_toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		for (var temp = taggers; temp; temp = temp.t)
		{
			x = temp.s(x);
		}
		return x;
	}

	var map = isCmd
		? _Platform_effectManagers[home].e
		: _Platform_effectManagers[home].f;

	return A2(map, applyTaggers, value)
}


function _Platform_insert(isCmd, newEffect, effects)
{
	effects = effects || { i: _List_Nil, j: _List_Nil };

	isCmd
		? (effects.i = _List_Cons(newEffect, effects.i))
		: (effects.j = _List_Cons(newEffect, effects.j));

	return effects;
}



// PORTS


function _Platform_checkPortName(name)
{
	if (_Platform_effectManagers[name])
	{
		_Debug_crash(3, name)
	}
}



// OUTGOING PORTS


function _Platform_outgoingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		e: _Platform_outgoingPortMap,
		u: converter,
		a: _Platform_setupOutgoingPort
	};
	return _Platform_leaf(name);
}


var _Platform_outgoingPortMap = F2(function(tagger, value) { return value; });


function _Platform_setupOutgoingPort(name)
{
	var subs = [];
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Process_sleep(0);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, cmdList, state)
	{
		for ( ; cmdList.b; cmdList = cmdList.b) // WHILE_CONS
		{
			// grab a separate reference to subs in case unsubscribe is called
			var currentSubs = subs;
			var value = _Json_unwrap(converter(cmdList.a));
			for (var i = 0; i < currentSubs.length; i++)
			{
				currentSubs[i](value);
			}
		}
		return init;
	});

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		// copy subs into a new array in case unsubscribe is called within a
		// subscribed callback
		subs = subs.slice();
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}



// INCOMING PORTS


function _Platform_incomingPort(name, converter)
{
	_Platform_checkPortName(name);
	_Platform_effectManagers[name] = {
		f: _Platform_incomingPortMap,
		u: converter,
		a: _Platform_setupIncomingPort
	};
	return _Platform_leaf(name);
}


var _Platform_incomingPortMap = F2(function(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});


function _Platform_setupIncomingPort(name, sendToApp)
{
	var subs = _List_Nil;
	var converter = _Platform_effectManagers[name].u;

	// CREATE MANAGER

	var init = _Scheduler_succeed(null);

	_Platform_effectManagers[name].b = init;
	_Platform_effectManagers[name].c = F3(function(router, subList, state)
	{
		subs = subList;
		return init;
	});

	// PUBLIC API

	function send(incomingValue)
	{
		var result = A2(_Json_run, converter, _Json_wrap(incomingValue));

		$elm$core$Result$isOk(result) || _Debug_crash(4, name, result.a);

		var value = result.a;
		for (var temp = subs; temp.b; temp = temp.b) // WHILE_CONS
		{
			sendToApp(temp.a(value));
		}
	}

	return { send: send };
}



// EXPORT ELM MODULES
//
// Have DEBUG and PROD versions so that we can (1) give nicer errors in
// debug mode and (2) not pay for the bits needed for that in prod mode.
//


function _Platform_export(exports)
{
	scope['Elm']
		? _Platform_mergeExportsProd(scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsProd(obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6)
				: _Platform_mergeExportsProd(obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}


function _Platform_export_UNUSED(exports)
{
	scope['Elm']
		? _Platform_mergeExportsDebug('Elm', scope['Elm'], exports)
		: scope['Elm'] = exports;
}


function _Platform_mergeExportsDebug(moduleName, obj, exports)
{
	for (var name in exports)
	{
		(name in obj)
			? (name == 'init')
				? _Debug_crash(6, moduleName)
				: _Platform_mergeExportsDebug(moduleName + '.' + name, obj[name], exports[name])
			: (obj[name] = exports[name]);
	}
}




// HELPERS


var _VirtualDom_divertHrefToApp;

var _VirtualDom_doc = typeof document !== 'undefined' ? document : {};


function _VirtualDom_appendChild(parent, child)
{
	parent.appendChild(child);
}

var _VirtualDom_init = F4(function(virtualNode, flagDecoder, debugMetadata, args)
{
	// NOTE: this function needs _Platform_export available to work

	/**/
	var node = args['node'];
	//*/
	/**_UNUSED/
	var node = args && args['node'] ? args['node'] : _Debug_crash(0);
	//*/

	node.parentNode.replaceChild(
		_VirtualDom_render(virtualNode, function() {}),
		node
	);

	return {};
});



// TEXT


function _VirtualDom_text(string)
{
	return {
		$: 0,
		a: string
	};
}



// NODE


var _VirtualDom_nodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 1,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_node = _VirtualDom_nodeNS(undefined);



// KEYED NODE


var _VirtualDom_keyedNodeNS = F2(function(namespace, tag)
{
	return F2(function(factList, kidList)
	{
		for (var kids = [], descendantsCount = 0; kidList.b; kidList = kidList.b) // WHILE_CONS
		{
			var kid = kidList.a;
			descendantsCount += (kid.b.b || 0);
			kids.push(kid);
		}
		descendantsCount += kids.length;

		return {
			$: 2,
			c: tag,
			d: _VirtualDom_organizeFacts(factList),
			e: kids,
			f: namespace,
			b: descendantsCount
		};
	});
});


var _VirtualDom_keyedNode = _VirtualDom_keyedNodeNS(undefined);



// CUSTOM


function _VirtualDom_custom(factList, model, render, diff)
{
	return {
		$: 3,
		d: _VirtualDom_organizeFacts(factList),
		g: model,
		h: render,
		i: diff
	};
}



// MAP


var _VirtualDom_map = F2(function(tagger, node)
{
	return {
		$: 4,
		j: tagger,
		k: node,
		b: 1 + (node.b || 0)
	};
});



// LAZY


function _VirtualDom_thunk(refs, thunk)
{
	return {
		$: 5,
		l: refs,
		m: thunk,
		k: undefined
	};
}

var _VirtualDom_lazy = F2(function(func, a)
{
	return _VirtualDom_thunk([func, a], function() {
		return func(a);
	});
});

var _VirtualDom_lazy2 = F3(function(func, a, b)
{
	return _VirtualDom_thunk([func, a, b], function() {
		return A2(func, a, b);
	});
});

var _VirtualDom_lazy3 = F4(function(func, a, b, c)
{
	return _VirtualDom_thunk([func, a, b, c], function() {
		return A3(func, a, b, c);
	});
});

var _VirtualDom_lazy4 = F5(function(func, a, b, c, d)
{
	return _VirtualDom_thunk([func, a, b, c, d], function() {
		return A4(func, a, b, c, d);
	});
});

var _VirtualDom_lazy5 = F6(function(func, a, b, c, d, e)
{
	return _VirtualDom_thunk([func, a, b, c, d, e], function() {
		return A5(func, a, b, c, d, e);
	});
});

var _VirtualDom_lazy6 = F7(function(func, a, b, c, d, e, f)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f], function() {
		return A6(func, a, b, c, d, e, f);
	});
});

var _VirtualDom_lazy7 = F8(function(func, a, b, c, d, e, f, g)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g], function() {
		return A7(func, a, b, c, d, e, f, g);
	});
});

var _VirtualDom_lazy8 = F9(function(func, a, b, c, d, e, f, g, h)
{
	return _VirtualDom_thunk([func, a, b, c, d, e, f, g, h], function() {
		return A8(func, a, b, c, d, e, f, g, h);
	});
});



// FACTS


var _VirtualDom_on = F2(function(key, handler)
{
	return {
		$: 'a0',
		n: key,
		o: handler
	};
});
var _VirtualDom_style = F2(function(key, value)
{
	return {
		$: 'a1',
		n: key,
		o: value
	};
});
var _VirtualDom_property = F2(function(key, value)
{
	return {
		$: 'a2',
		n: key,
		o: value
	};
});
var _VirtualDom_attribute = F2(function(key, value)
{
	return {
		$: 'a3',
		n: key,
		o: value
	};
});
var _VirtualDom_attributeNS = F3(function(namespace, key, value)
{
	return {
		$: 'a4',
		n: key,
		o: { f: namespace, o: value }
	};
});



// XSS ATTACK VECTOR CHECKS


function _VirtualDom_noScript(tag)
{
	return tag == 'script' ? 'p' : tag;
}

function _VirtualDom_noOnOrFormAction(key)
{
	return /^(on|formAction$)/i.test(key) ? 'data-' + key : key;
}

function _VirtualDom_noInnerHtmlOrFormAction(key)
{
	return key == 'innerHTML' || key == 'formAction' ? 'data-' + key : key;
}

function _VirtualDom_noJavaScriptUri(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,'')) ? '' : value;
}

function _VirtualDom_noJavaScriptUri_UNUSED(value)
{
	return /^javascript:/i.test(value.replace(/\s/g,''))
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}

function _VirtualDom_noJavaScriptOrHtmlUri(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value) ? '' : value;
}

function _VirtualDom_noJavaScriptOrHtmlUri_UNUSED(value)
{
	return /^\s*(javascript:|data:text\/html)/i.test(value)
		? 'javascript:alert("This is an XSS vector. Please use ports or web components instead.")'
		: value;
}



// MAP FACTS


var _VirtualDom_mapAttribute = F2(function(func, attr)
{
	return (attr.$ === 'a0')
		? A2(_VirtualDom_on, attr.n, _VirtualDom_mapHandler(func, attr.o))
		: attr;
});

function _VirtualDom_mapHandler(func, handler)
{
	var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

	// 0 = Normal
	// 1 = MayStopPropagation
	// 2 = MayPreventDefault
	// 3 = Custom

	return {
		$: handler.$,
		a:
			!tag
				? A2($elm$json$Json$Decode$map, func, handler.a)
				:
			A3($elm$json$Json$Decode$map2,
				tag < 3
					? _VirtualDom_mapEventTuple
					: _VirtualDom_mapEventRecord,
				$elm$json$Json$Decode$succeed(func),
				handler.a
			)
	};
}

var _VirtualDom_mapEventTuple = F2(function(func, tuple)
{
	return _Utils_Tuple2(func(tuple.a), tuple.b);
});

var _VirtualDom_mapEventRecord = F2(function(func, record)
{
	return {
		gm: func(record.gm),
		g8: record.g8,
		gE: record.gE
	}
});



// ORGANIZE FACTS


function _VirtualDom_organizeFacts(factList)
{
	for (var facts = {}; factList.b; factList = factList.b) // WHILE_CONS
	{
		var entry = factList.a;

		var tag = entry.$;
		var key = entry.n;
		var value = entry.o;

		if (tag === 'a2')
		{
			(key === 'className')
				? _VirtualDom_addClass(facts, key, _Json_unwrap(value))
				: facts[key] = _Json_unwrap(value);

			continue;
		}

		var subFacts = facts[tag] || (facts[tag] = {});
		(tag === 'a3' && key === 'class')
			? _VirtualDom_addClass(subFacts, key, value)
			: subFacts[key] = value;
	}

	return facts;
}

function _VirtualDom_addClass(object, key, newClass)
{
	var classes = object[key];
	object[key] = classes ? classes + ' ' + newClass : newClass;
}



// RENDER


function _VirtualDom_render(vNode, eventNode)
{
	var tag = vNode.$;

	if (tag === 5)
	{
		return _VirtualDom_render(vNode.k || (vNode.k = vNode.m()), eventNode);
	}

	if (tag === 0)
	{
		return _VirtualDom_doc.createTextNode(vNode.a);
	}

	if (tag === 4)
	{
		var subNode = vNode.k;
		var tagger = vNode.j;

		while (subNode.$ === 4)
		{
			typeof tagger !== 'object'
				? tagger = [tagger, subNode.j]
				: tagger.push(subNode.j);

			subNode = subNode.k;
		}

		var subEventRoot = { j: tagger, p: eventNode };
		var domNode = _VirtualDom_render(subNode, subEventRoot);
		domNode.elm_event_node_ref = subEventRoot;
		return domNode;
	}

	if (tag === 3)
	{
		var domNode = vNode.h(vNode.g);
		_VirtualDom_applyFacts(domNode, eventNode, vNode.d);
		return domNode;
	}

	// at this point `tag` must be 1 or 2

	var domNode = vNode.f
		? _VirtualDom_doc.createElementNS(vNode.f, vNode.c)
		: _VirtualDom_doc.createElement(vNode.c);

	if (_VirtualDom_divertHrefToApp && vNode.c == 'a')
	{
		domNode.addEventListener('click', _VirtualDom_divertHrefToApp(domNode));
	}

	_VirtualDom_applyFacts(domNode, eventNode, vNode.d);

	for (var kids = vNode.e, i = 0; i < kids.length; i++)
	{
		_VirtualDom_appendChild(domNode, _VirtualDom_render(tag === 1 ? kids[i] : kids[i].b, eventNode));
	}

	return domNode;
}



// APPLY FACTS


function _VirtualDom_applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		key === 'a1'
			? _VirtualDom_applyStyles(domNode, value)
			:
		key === 'a0'
			? _VirtualDom_applyEvents(domNode, eventNode, value)
			:
		key === 'a3'
			? _VirtualDom_applyAttrs(domNode, value)
			:
		key === 'a4'
			? _VirtualDom_applyAttrsNS(domNode, value)
			:
		((key !== 'value' && key !== 'checked') || domNode[key] !== value) && (domNode[key] = value);
	}
}



// APPLY STYLES


function _VirtualDom_applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}



// APPLY ATTRS


function _VirtualDom_applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		typeof value !== 'undefined'
			? domNode.setAttribute(key, value)
			: domNode.removeAttribute(key);
	}
}



// APPLY NAMESPACED ATTRS


function _VirtualDom_applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.f;
		var value = pair.o;

		typeof value !== 'undefined'
			? domNode.setAttributeNS(namespace, key, value)
			: domNode.removeAttributeNS(namespace, key);
	}
}



// APPLY EVENTS


function _VirtualDom_applyEvents(domNode, eventNode, events)
{
	var allCallbacks = domNode.elmFs || (domNode.elmFs = {});

	for (var key in events)
	{
		var newHandler = events[key];
		var oldCallback = allCallbacks[key];

		if (!newHandler)
		{
			domNode.removeEventListener(key, oldCallback);
			allCallbacks[key] = undefined;
			continue;
		}

		if (oldCallback)
		{
			var oldHandler = oldCallback.q;
			if (oldHandler.$ === newHandler.$)
			{
				oldCallback.q = newHandler;
				continue;
			}
			domNode.removeEventListener(key, oldCallback);
		}

		oldCallback = _VirtualDom_makeCallback(eventNode, newHandler);
		domNode.addEventListener(key, oldCallback,
			_VirtualDom_passiveSupported
			&& { passive: $elm$virtual_dom$VirtualDom$toHandlerInt(newHandler) < 2 }
		);
		allCallbacks[key] = oldCallback;
	}
}



// PASSIVE EVENTS


var _VirtualDom_passiveSupported;

try
{
	window.addEventListener('t', null, Object.defineProperty({}, 'passive', {
		get: function() { _VirtualDom_passiveSupported = true; }
	}));
}
catch(e) {}



// EVENT HANDLERS


function _VirtualDom_makeCallback(eventNode, initialHandler)
{
	function callback(event)
	{
		var handler = callback.q;
		var result = _Json_runHelp(handler.a, event);

		if (!$elm$core$Result$isOk(result))
		{
			return;
		}

		var tag = $elm$virtual_dom$VirtualDom$toHandlerInt(handler);

		// 0 = Normal
		// 1 = MayStopPropagation
		// 2 = MayPreventDefault
		// 3 = Custom

		var value = result.a;
		var message = !tag ? value : tag < 3 ? value.a : value.gm;
		var stopPropagation = tag == 1 ? value.b : tag == 3 && value.g8;
		var currentEventNode = (
			stopPropagation && event.stopPropagation(),
			(tag == 2 ? value.b : tag == 3 && value.gE) && event.preventDefault(),
			eventNode
		);
		var tagger;
		var i;
		while (tagger = currentEventNode.j)
		{
			if (typeof tagger == 'function')
			{
				message = tagger(message);
			}
			else
			{
				for (var i = tagger.length; i--; )
				{
					message = tagger[i](message);
				}
			}
			currentEventNode = currentEventNode.p;
		}
		currentEventNode(message, stopPropagation); // stopPropagation implies isSync
	}

	callback.q = initialHandler;

	return callback;
}

function _VirtualDom_equalEvents(x, y)
{
	return x.$ == y.$ && _Json_equality(x.a, y.a);
}



// DIFF


// TODO: Should we do patches like in iOS?
//
// type Patch
//   = At Int Patch
//   | Batch (List Patch)
//   | Change ...
//
// How could it not be better?
//
function _VirtualDom_diff(x, y)
{
	var patches = [];
	_VirtualDom_diffHelp(x, y, patches, 0);
	return patches;
}


function _VirtualDom_pushPatch(patches, type, index, data)
{
	var patch = {
		$: type,
		r: index,
		s: data,
		t: undefined,
		u: undefined
	};
	patches.push(patch);
	return patch;
}


function _VirtualDom_diffHelp(x, y, patches, index)
{
	if (x === y)
	{
		return;
	}

	var xType = x.$;
	var yType = y.$;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (xType !== yType)
	{
		if (xType === 1 && yType === 2)
		{
			y = _VirtualDom_dekey(y);
			yType = 1;
		}
		else
		{
			_VirtualDom_pushPatch(patches, 0, index, y);
			return;
		}
	}

	// Now we know that both nodes are the same $.
	switch (yType)
	{
		case 5:
			var xRefs = x.l;
			var yRefs = y.l;
			var i = xRefs.length;
			var same = i === yRefs.length;
			while (same && i--)
			{
				same = xRefs[i] === yRefs[i];
			}
			if (same)
			{
				y.k = x.k;
				return;
			}
			y.k = y.m();
			var subPatches = [];
			_VirtualDom_diffHelp(x.k, y.k, subPatches, 0);
			subPatches.length > 0 && _VirtualDom_pushPatch(patches, 1, index, subPatches);
			return;

		case 4:
			// gather nested taggers
			var xTaggers = x.j;
			var yTaggers = y.j;
			var nesting = false;

			var xSubNode = x.k;
			while (xSubNode.$ === 4)
			{
				nesting = true;

				typeof xTaggers !== 'object'
					? xTaggers = [xTaggers, xSubNode.j]
					: xTaggers.push(xSubNode.j);

				xSubNode = xSubNode.k;
			}

			var ySubNode = y.k;
			while (ySubNode.$ === 4)
			{
				nesting = true;

				typeof yTaggers !== 'object'
					? yTaggers = [yTaggers, ySubNode.j]
					: yTaggers.push(ySubNode.j);

				ySubNode = ySubNode.k;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && xTaggers.length !== yTaggers.length)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !_VirtualDom_pairwiseRefEqual(xTaggers, yTaggers) : xTaggers !== yTaggers)
			{
				_VirtualDom_pushPatch(patches, 2, index, yTaggers);
			}

			// diff everything below the taggers
			_VirtualDom_diffHelp(xSubNode, ySubNode, patches, index + 1);
			return;

		case 0:
			if (x.a !== y.a)
			{
				_VirtualDom_pushPatch(patches, 3, index, y.a);
			}
			return;

		case 1:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKids);
			return;

		case 2:
			_VirtualDom_diffNodes(x, y, patches, index, _VirtualDom_diffKeyedKids);
			return;

		case 3:
			if (x.h !== y.h)
			{
				_VirtualDom_pushPatch(patches, 0, index, y);
				return;
			}

			var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
			factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

			var patch = y.i(x.g, y.g);
			patch && _VirtualDom_pushPatch(patches, 5, index, patch);

			return;
	}
}

// assumes the incoming arrays are the same length
function _VirtualDom_pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}

function _VirtualDom_diffNodes(x, y, patches, index, diffKids)
{
	// Bail if obvious indicators have changed. Implies more serious
	// structural changes such that it's not worth it to diff.
	if (x.c !== y.c || x.f !== y.f)
	{
		_VirtualDom_pushPatch(patches, 0, index, y);
		return;
	}

	var factsDiff = _VirtualDom_diffFacts(x.d, y.d);
	factsDiff && _VirtualDom_pushPatch(patches, 4, index, factsDiff);

	diffKids(x, y, patches, index);
}



// DIFF FACTS


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function _VirtualDom_diffFacts(x, y, category)
{
	var diff;

	// look for changes and removals
	for (var xKey in x)
	{
		if (xKey === 'a1' || xKey === 'a0' || xKey === 'a3' || xKey === 'a4')
		{
			var subDiff = _VirtualDom_diffFacts(x[xKey], y[xKey] || {}, xKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[xKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(xKey in y))
		{
			diff = diff || {};
			diff[xKey] =
				!category
					? (typeof x[xKey] === 'string' ? '' : null)
					:
				(category === 'a1')
					? ''
					:
				(category === 'a0' || category === 'a3')
					? undefined
					:
				{ f: x[xKey].f, o: undefined };

			continue;
		}

		var xValue = x[xKey];
		var yValue = y[xKey];

		// reference equal, so don't worry about it
		if (xValue === yValue && xKey !== 'value' && xKey !== 'checked'
			|| category === 'a0' && _VirtualDom_equalEvents(xValue, yValue))
		{
			continue;
		}

		diff = diff || {};
		diff[xKey] = yValue;
	}

	// add new stuff
	for (var yKey in y)
	{
		if (!(yKey in x))
		{
			diff = diff || {};
			diff[yKey] = y[yKey];
		}
	}

	return diff;
}



// DIFF KIDS


function _VirtualDom_diffKids(xParent, yParent, patches, index)
{
	var xKids = xParent.e;
	var yKids = yParent.e;

	var xLen = xKids.length;
	var yLen = yKids.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (xLen > yLen)
	{
		_VirtualDom_pushPatch(patches, 6, index, {
			v: yLen,
			i: xLen - yLen
		});
	}
	else if (xLen < yLen)
	{
		_VirtualDom_pushPatch(patches, 7, index, {
			v: xLen,
			e: yKids
		});
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	for (var minLen = xLen < yLen ? xLen : yLen, i = 0; i < minLen; i++)
	{
		var xKid = xKids[i];
		_VirtualDom_diffHelp(xKid, yKids[i], patches, ++index);
		index += xKid.b || 0;
	}
}



// KEYED DIFF


function _VirtualDom_diffKeyedKids(xParent, yParent, patches, rootIndex)
{
	var localPatches = [];

	var changes = {}; // Dict String Entry
	var inserts = []; // Array { index : Int, entry : Entry }
	// type Entry = { tag : String, vnode : VNode, index : Int, data : _ }

	var xKids = xParent.e;
	var yKids = yParent.e;
	var xLen = xKids.length;
	var yLen = yKids.length;
	var xIndex = 0;
	var yIndex = 0;

	var index = rootIndex;

	while (xIndex < xLen && yIndex < yLen)
	{
		var x = xKids[xIndex];
		var y = yKids[yIndex];

		var xKey = x.a;
		var yKey = y.a;
		var xNode = x.b;
		var yNode = y.b;

		var newMatch = undefined;
		var oldMatch = undefined;

		// check if keys match

		if (xKey === yKey)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNode, localPatches, index);
			index += xNode.b || 0;

			xIndex++;
			yIndex++;
			continue;
		}

		// look ahead 1 to detect insertions and removals.

		var xNext = xKids[xIndex + 1];
		var yNext = yKids[yIndex + 1];

		if (xNext)
		{
			var xNextKey = xNext.a;
			var xNextNode = xNext.b;
			oldMatch = yKey === xNextKey;
		}

		if (yNext)
		{
			var yNextKey = yNext.a;
			var yNextNode = yNext.b;
			newMatch = xKey === yNextKey;
		}


		// swap x and y
		if (newMatch && oldMatch)
		{
			index++;
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			_VirtualDom_insertNode(changes, localPatches, xKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNextNode, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		// insert y
		if (newMatch)
		{
			index++;
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			_VirtualDom_diffHelp(xNode, yNextNode, localPatches, index);
			index += xNode.b || 0;

			xIndex += 1;
			yIndex += 2;
			continue;
		}

		// remove x
		if (oldMatch)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 1;
			continue;
		}

		// remove x, insert y
		if (xNext && xNextKey === yNextKey)
		{
			index++;
			_VirtualDom_removeNode(changes, localPatches, xKey, xNode, index);
			_VirtualDom_insertNode(changes, localPatches, yKey, yNode, yIndex, inserts);
			index += xNode.b || 0;

			index++;
			_VirtualDom_diffHelp(xNextNode, yNextNode, localPatches, index);
			index += xNextNode.b || 0;

			xIndex += 2;
			yIndex += 2;
			continue;
		}

		break;
	}

	// eat up any remaining nodes with removeNode and insertNode

	while (xIndex < xLen)
	{
		index++;
		var x = xKids[xIndex];
		var xNode = x.b;
		_VirtualDom_removeNode(changes, localPatches, x.a, xNode, index);
		index += xNode.b || 0;
		xIndex++;
	}

	while (yIndex < yLen)
	{
		var endInserts = endInserts || [];
		var y = yKids[yIndex];
		_VirtualDom_insertNode(changes, localPatches, y.a, y.b, undefined, endInserts);
		yIndex++;
	}

	if (localPatches.length > 0 || inserts.length > 0 || endInserts)
	{
		_VirtualDom_pushPatch(patches, 8, rootIndex, {
			w: localPatches,
			x: inserts,
			y: endInserts
		});
	}
}



// CHANGES FROM KEYED DIFF


var _VirtualDom_POSTFIX = '_elmW6BL';


function _VirtualDom_insertNode(changes, localPatches, key, vnode, yIndex, inserts)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		entry = {
			c: 0,
			z: vnode,
			r: yIndex,
			s: undefined
		};

		inserts.push({ r: yIndex, A: entry });
		changes[key] = entry;

		return;
	}

	// this key was removed earlier, a match!
	if (entry.c === 1)
	{
		inserts.push({ r: yIndex, A: entry });

		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(entry.z, vnode, subPatches, entry.r);
		entry.r = yIndex;
		entry.s.s = {
			w: subPatches,
			A: entry
		};

		return;
	}

	// this key has already been inserted or moved, a duplicate!
	_VirtualDom_insertNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, yIndex, inserts);
}


function _VirtualDom_removeNode(changes, localPatches, key, vnode, index)
{
	var entry = changes[key];

	// never seen this key before
	if (!entry)
	{
		var patch = _VirtualDom_pushPatch(localPatches, 9, index, undefined);

		changes[key] = {
			c: 1,
			z: vnode,
			r: index,
			s: patch
		};

		return;
	}

	// this key was inserted earlier, a match!
	if (entry.c === 0)
	{
		entry.c = 2;
		var subPatches = [];
		_VirtualDom_diffHelp(vnode, entry.z, subPatches, index);

		_VirtualDom_pushPatch(localPatches, 9, index, {
			w: subPatches,
			A: entry
		});

		return;
	}

	// this key has already been removed or moved, a duplicate!
	_VirtualDom_removeNode(changes, localPatches, key + _VirtualDom_POSTFIX, vnode, index);
}



// ADD DOM NODES
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function _VirtualDom_addDomNodes(domNode, vNode, patches, eventNode)
{
	_VirtualDom_addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.b, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function _VirtualDom_addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.r;

	while (index === low)
	{
		var patchType = patch.$;

		if (patchType === 1)
		{
			_VirtualDom_addDomNodes(domNode, vNode.k, patch.s, eventNode);
		}
		else if (patchType === 8)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var subPatches = patch.s.w;
			if (subPatches.length > 0)
			{
				_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
			}
		}
		else if (patchType === 9)
		{
			patch.t = domNode;
			patch.u = eventNode;

			var data = patch.s;
			if (data)
			{
				data.A.s = domNode;
				var subPatches = data.w;
				if (subPatches.length > 0)
				{
					_VirtualDom_addDomNodesHelp(domNode, vNode, subPatches, 0, low, high, eventNode);
				}
			}
		}
		else
		{
			patch.t = domNode;
			patch.u = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.r) > high)
		{
			return i;
		}
	}

	var tag = vNode.$;

	if (tag === 4)
	{
		var subNode = vNode.k;

		while (subNode.$ === 4)
		{
			subNode = subNode.k;
		}

		return _VirtualDom_addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);
	}

	// tag must be 1 or 2 at this point

	var vKids = vNode.e;
	var childNodes = domNode.childNodes;
	for (var j = 0; j < vKids.length; j++)
	{
		low++;
		var vKid = tag === 1 ? vKids[j] : vKids[j].b;
		var nextLow = low + (vKid.b || 0);
		if (low <= index && index <= nextLow)
		{
			i = _VirtualDom_addDomNodesHelp(childNodes[j], vKid, patches, i, low, nextLow, eventNode);
			if (!(patch = patches[i]) || (index = patch.r) > high)
			{
				return i;
			}
		}
		low = nextLow;
	}
	return i;
}



// APPLY PATCHES


function _VirtualDom_applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	_VirtualDom_addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return _VirtualDom_applyPatchesHelp(rootDomNode, patches);
}

function _VirtualDom_applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.t
		var newNode = _VirtualDom_applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function _VirtualDom_applyPatch(domNode, patch)
{
	switch (patch.$)
	{
		case 0:
			return _VirtualDom_applyPatchRedraw(domNode, patch.s, patch.u);

		case 4:
			_VirtualDom_applyFacts(domNode, patch.u, patch.s);
			return domNode;

		case 3:
			domNode.replaceData(0, domNode.length, patch.s);
			return domNode;

		case 1:
			return _VirtualDom_applyPatchesHelp(domNode, patch.s);

		case 2:
			if (domNode.elm_event_node_ref)
			{
				domNode.elm_event_node_ref.j = patch.s;
			}
			else
			{
				domNode.elm_event_node_ref = { j: patch.s, p: patch.u };
			}
			return domNode;

		case 6:
			var data = patch.s;
			for (var i = 0; i < data.i; i++)
			{
				domNode.removeChild(domNode.childNodes[data.v]);
			}
			return domNode;

		case 7:
			var data = patch.s;
			var kids = data.e;
			var i = data.v;
			var theEnd = domNode.childNodes[i];
			for (; i < kids.length; i++)
			{
				domNode.insertBefore(_VirtualDom_render(kids[i], patch.u), theEnd);
			}
			return domNode;

		case 9:
			var data = patch.s;
			if (!data)
			{
				domNode.parentNode.removeChild(domNode);
				return domNode;
			}
			var entry = data.A;
			if (typeof entry.r !== 'undefined')
			{
				domNode.parentNode.removeChild(domNode);
			}
			entry.s = _VirtualDom_applyPatchesHelp(domNode, data.w);
			return domNode;

		case 8:
			return _VirtualDom_applyPatchReorder(domNode, patch);

		case 5:
			return patch.s(domNode);

		default:
			_Debug_crash(10); // 'Ran into an unknown patch!'
	}
}


function _VirtualDom_applyPatchRedraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = _VirtualDom_render(vNode, eventNode);

	if (!newNode.elm_event_node_ref)
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}


function _VirtualDom_applyPatchReorder(domNode, patch)
{
	var data = patch.s;

	// remove end inserts
	var frag = _VirtualDom_applyPatchReorderEndInsertsHelp(data.y, patch);

	// removals
	domNode = _VirtualDom_applyPatchesHelp(domNode, data.w);

	// inserts
	var inserts = data.x;
	for (var i = 0; i < inserts.length; i++)
	{
		var insert = inserts[i];
		var entry = insert.A;
		var node = entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u);
		domNode.insertBefore(node, domNode.childNodes[insert.r]);
	}

	// add end inserts
	if (frag)
	{
		_VirtualDom_appendChild(domNode, frag);
	}

	return domNode;
}


function _VirtualDom_applyPatchReorderEndInsertsHelp(endInserts, patch)
{
	if (!endInserts)
	{
		return;
	}

	var frag = _VirtualDom_doc.createDocumentFragment();
	for (var i = 0; i < endInserts.length; i++)
	{
		var insert = endInserts[i];
		var entry = insert.A;
		_VirtualDom_appendChild(frag, entry.c === 2
			? entry.s
			: _VirtualDom_render(entry.z, patch.u)
		);
	}
	return frag;
}


function _VirtualDom_virtualize(node)
{
	// TEXT NODES

	if (node.nodeType === 3)
	{
		return _VirtualDom_text(node.textContent);
	}


	// WEIRD NODES

	if (node.nodeType !== 1)
	{
		return _VirtualDom_text('');
	}


	// ELEMENT NODES

	var attrList = _List_Nil;
	var attrs = node.attributes;
	for (var i = attrs.length; i--; )
	{
		var attr = attrs[i];
		var name = attr.name;
		var value = attr.value;
		attrList = _List_Cons( A2(_VirtualDom_attribute, name, value), attrList );
	}

	var tag = node.tagName.toLowerCase();
	var kidList = _List_Nil;
	var kids = node.childNodes;

	for (var i = kids.length; i--; )
	{
		kidList = _List_Cons(_VirtualDom_virtualize(kids[i]), kidList);
	}
	return A3(_VirtualDom_node, tag, attrList, kidList);
}

function _VirtualDom_dekey(keyedNode)
{
	var keyedKids = keyedNode.e;
	var len = keyedKids.length;
	var kids = new Array(len);
	for (var i = 0; i < len; i++)
	{
		kids[i] = keyedKids[i].b;
	}

	return {
		$: 1,
		c: keyedNode.c,
		d: keyedNode.d,
		e: kids,
		f: keyedNode.f,
		b: keyedNode.b
	};
}




// ELEMENT


var _Debugger_element;

var _Browser_element = _Debugger_element || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.f7,
		impl.hy,
		impl.hc,
		function(sendToApp, initialModel) {
			var view = impl.hA;
			/**/
			var domNode = args['node'];
			//*/
			/**_UNUSED/
			var domNode = args && args['node'] ? args['node'] : _Debug_crash(0);
			//*/
			var currNode = _VirtualDom_virtualize(domNode);

			return _Browser_makeAnimator(initialModel, function(model)
			{
				var nextNode = view(model);
				var patches = _VirtualDom_diff(currNode, nextNode);
				domNode = _VirtualDom_applyPatches(domNode, currNode, patches, sendToApp);
				currNode = nextNode;
			});
		}
	);
});



// DOCUMENT


var _Debugger_document;

var _Browser_document = _Debugger_document || F4(function(impl, flagDecoder, debugMetadata, args)
{
	return _Platform_initialize(
		flagDecoder,
		args,
		impl.f7,
		impl.hy,
		impl.hc,
		function(sendToApp, initialModel) {
			var divertHrefToApp = impl.dd && impl.dd(sendToApp)
			var view = impl.hA;
			var title = _VirtualDom_doc.title;
			var bodyNode = _VirtualDom_doc.body;
			var currNode = _VirtualDom_virtualize(bodyNode);
			return _Browser_makeAnimator(initialModel, function(model)
			{
				_VirtualDom_divertHrefToApp = divertHrefToApp;
				var doc = view(model);
				var nextNode = _VirtualDom_node('body')(_List_Nil)(doc.fq);
				var patches = _VirtualDom_diff(currNode, nextNode);
				bodyNode = _VirtualDom_applyPatches(bodyNode, currNode, patches, sendToApp);
				currNode = nextNode;
				_VirtualDom_divertHrefToApp = 0;
				(title !== doc.de) && (_VirtualDom_doc.title = title = doc.de);
			});
		}
	);
});



// ANIMATION


var _Browser_cancelAnimationFrame =
	typeof cancelAnimationFrame !== 'undefined'
		? cancelAnimationFrame
		: function(id) { clearTimeout(id); };

var _Browser_requestAnimationFrame =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(callback) { return setTimeout(callback, 1000 / 60); };


function _Browser_makeAnimator(model, draw)
{
	draw(model);

	var state = 0;

	function updateIfNeeded()
	{
		state = state === 1
			? 0
			: ( _Browser_requestAnimationFrame(updateIfNeeded), draw(model), 1 );
	}

	return function(nextModel, isSync)
	{
		model = nextModel;

		isSync
			? ( draw(model),
				state === 2 && (state = 1)
				)
			: ( state === 0 && _Browser_requestAnimationFrame(updateIfNeeded),
				state = 2
				);
	};
}



// APPLICATION


function _Browser_application(impl)
{
	var onUrlChange = impl.gu;
	var onUrlRequest = impl.gv;
	var key = function() { key.a(onUrlChange(_Browser_getUrl())); };

	return _Browser_document({
		dd: function(sendToApp)
		{
			key.a = sendToApp;
			_Browser_window.addEventListener('popstate', key);
			_Browser_window.navigator.userAgent.indexOf('Trident') < 0 || _Browser_window.addEventListener('hashchange', key);

			return F2(function(domNode, event)
			{
				if (!event.ctrlKey && !event.metaKey && !event.shiftKey && event.button < 1 && !domNode.target && !domNode.hasAttribute('download'))
				{
					event.preventDefault();
					var href = domNode.href;
					var curr = _Browser_getUrl();
					var next = $elm$url$Url$fromString(href).a;
					sendToApp(onUrlRequest(
						(next
							&& curr.ev === next.ev
							&& curr.dZ === next.dZ
							&& curr.eq.a === next.eq.a
						)
							? $elm$browser$Browser$Internal(next)
							: $elm$browser$Browser$External(href)
					));
				}
			});
		},
		f7: function(flags)
		{
			return A3(impl.f7, flags, _Browser_getUrl(), key);
		},
		hA: impl.hA,
		hy: impl.hy,
		hc: impl.hc
	});
}

function _Browser_getUrl()
{
	return $elm$url$Url$fromString(_VirtualDom_doc.location.href).a || _Debug_crash(1);
}

var _Browser_go = F2(function(key, n)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		n && history.go(n);
		key();
	}));
});

var _Browser_pushUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.pushState({}, '', url);
		key();
	}));
});

var _Browser_replaceUrl = F2(function(key, url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function() {
		history.replaceState({}, '', url);
		key();
	}));
});



// GLOBAL EVENTS


var _Browser_fakeNode = { addEventListener: function() {}, removeEventListener: function() {} };
var _Browser_doc = typeof document !== 'undefined' ? document : _Browser_fakeNode;
var _Browser_window = typeof window !== 'undefined' ? window : _Browser_fakeNode;

var _Browser_on = F3(function(node, eventName, sendToSelf)
{
	return _Scheduler_spawn(_Scheduler_binding(function(callback)
	{
		function handler(event)	{ _Scheduler_rawSpawn(sendToSelf(event)); }
		node.addEventListener(eventName, handler, _VirtualDom_passiveSupported && { passive: true });
		return function() { node.removeEventListener(eventName, handler); };
	}));
});

var _Browser_decodeEvent = F2(function(decoder, event)
{
	var result = _Json_runHelp(decoder, event);
	return $elm$core$Result$isOk(result) ? $elm$core$Maybe$Just(result.a) : $elm$core$Maybe$Nothing;
});



// PAGE VISIBILITY


function _Browser_visibilityInfo()
{
	return (typeof _VirtualDom_doc.hidden !== 'undefined')
		? { fZ: 'hidden', fy: 'visibilitychange' }
		:
	(typeof _VirtualDom_doc.mozHidden !== 'undefined')
		? { fZ: 'mozHidden', fy: 'mozvisibilitychange' }
		:
	(typeof _VirtualDom_doc.msHidden !== 'undefined')
		? { fZ: 'msHidden', fy: 'msvisibilitychange' }
		:
	(typeof _VirtualDom_doc.webkitHidden !== 'undefined')
		? { fZ: 'webkitHidden', fy: 'webkitvisibilitychange' }
		: { fZ: 'hidden', fy: 'visibilitychange' };
}



// ANIMATION FRAMES


function _Browser_rAF()
{
	return _Scheduler_binding(function(callback)
	{
		var id = _Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(Date.now()));
		});

		return function() {
			_Browser_cancelAnimationFrame(id);
		};
	});
}


function _Browser_now()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(Date.now()));
	});
}



// DOM STUFF


function _Browser_withNode(id, doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			var node = document.getElementById(id);
			callback(node
				? _Scheduler_succeed(doStuff(node))
				: _Scheduler_fail($elm$browser$Browser$Dom$NotFound(id))
			);
		});
	});
}


function _Browser_withWindow(doStuff)
{
	return _Scheduler_binding(function(callback)
	{
		_Browser_requestAnimationFrame(function() {
			callback(_Scheduler_succeed(doStuff()));
		});
	});
}


// FOCUS and BLUR


var _Browser_call = F2(function(functionName, id)
{
	return _Browser_withNode(id, function(node) {
		node[functionName]();
		return _Utils_Tuple0;
	});
});



// WINDOW VIEWPORT


function _Browser_getViewport()
{
	return {
		gO: _Browser_getScene(),
		hB: {
			e4: _Browser_window.pageXOffset,
			hI: _Browser_window.pageYOffset,
			hC: _Browser_doc.documentElement.clientWidth,
			cV: _Browser_doc.documentElement.clientHeight
		}
	};
}

function _Browser_getScene()
{
	var body = _Browser_doc.body;
	var elem = _Browser_doc.documentElement;
	return {
		hC: Math.max(body.scrollWidth, body.offsetWidth, elem.scrollWidth, elem.offsetWidth, elem.clientWidth),
		cV: Math.max(body.scrollHeight, body.offsetHeight, elem.scrollHeight, elem.offsetHeight, elem.clientHeight)
	};
}

var _Browser_setViewport = F2(function(x, y)
{
	return _Browser_withWindow(function()
	{
		_Browser_window.scroll(x, y);
		return _Utils_Tuple0;
	});
});



// ELEMENT VIEWPORT


function _Browser_getViewportOf(id)
{
	return _Browser_withNode(id, function(node)
	{
		return {
			gO: {
				hC: node.scrollWidth,
				cV: node.scrollHeight
			},
			hB: {
				e4: node.scrollLeft,
				hI: node.scrollTop,
				hC: node.clientWidth,
				cV: node.clientHeight
			}
		};
	});
}


var _Browser_setViewportOf = F3(function(id, x, y)
{
	return _Browser_withNode(id, function(node)
	{
		node.scrollLeft = x;
		node.scrollTop = y;
		return _Utils_Tuple0;
	});
});



// ELEMENT


function _Browser_getElement(id)
{
	return _Browser_withNode(id, function(node)
	{
		var rect = node.getBoundingClientRect();
		var x = _Browser_window.pageXOffset;
		var y = _Browser_window.pageYOffset;
		return {
			gO: _Browser_getScene(),
			hB: {
				e4: x,
				hI: y,
				hC: _Browser_doc.documentElement.clientWidth,
				cV: _Browser_doc.documentElement.clientHeight
			},
			dM: {
				e4: x + rect.left,
				hI: y + rect.top,
				hC: rect.width,
				cV: rect.height
			}
		};
	});
}



// LOAD and RELOAD


function _Browser_reload(skipCache)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		_VirtualDom_doc.location.reload(skipCache);
	}));
}

function _Browser_load(url)
{
	return A2($elm$core$Task$perform, $elm$core$Basics$never, _Scheduler_binding(function(callback)
	{
		try
		{
			_Browser_window.location = url;
		}
		catch(err)
		{
			// Only Firefox can throw a NS_ERROR_MALFORMED_URI exception here.
			// Other browsers reload the page, so let's be consistent about that.
			_VirtualDom_doc.location.reload(false);
		}
	}));
}



// SEND REQUEST

var _Http_toTask = F3(function(router, toTask, request)
{
	return _Scheduler_binding(function(callback)
	{
		function done(response) {
			callback(toTask(request.dP.a(response)));
		}

		var xhr = new XMLHttpRequest();
		xhr.addEventListener('error', function() { done($elm$http$Http$NetworkError_); });
		xhr.addEventListener('timeout', function() { done($elm$http$Http$Timeout_); });
		xhr.addEventListener('load', function() { done(_Http_toResponse(request.dP.b, xhr)); });
		$elm$core$Maybe$isJust(request.hv) && _Http_track(router, xhr, request.hv.a);

		try {
			xhr.open(request.gn, request.e_, true);
		} catch (e) {
			return done($elm$http$Http$BadUrl_(request.e_));
		}

		_Http_configureRequest(xhr, request);

		request.fq.a && xhr.setRequestHeader('Content-Type', request.fq.a);
		xhr.send(request.fq.b);

		return function() { xhr.c = true; xhr.abort(); };
	});
});


// CONFIGURE

function _Http_configureRequest(xhr, request)
{
	for (var headers = request.fY; headers.b; headers = headers.b) // WHILE_CONS
	{
		xhr.setRequestHeader(headers.a.a, headers.a.b);
	}
	xhr.timeout = request.hs.a || 0;
	xhr.responseType = request.dP.d;
	xhr.withCredentials = request.fh;
}


// RESPONSES

function _Http_toResponse(toBody, xhr)
{
	return A2(
		200 <= xhr.status && xhr.status < 300 ? $elm$http$Http$GoodStatus_ : $elm$http$Http$BadStatus_,
		_Http_toMetadata(xhr),
		toBody(xhr.response)
	);
}


// METADATA

function _Http_toMetadata(xhr)
{
	return {
		e_: xhr.responseURL,
		g4: xhr.status,
		g5: xhr.statusText,
		fY: _Http_parseHeaders(xhr.getAllResponseHeaders())
	};
}


// HEADERS

function _Http_parseHeaders(rawHeaders)
{
	if (!rawHeaders)
	{
		return $elm$core$Dict$empty;
	}

	var headers = $elm$core$Dict$empty;
	var headerPairs = rawHeaders.split('\r\n');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf(': ');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3($elm$core$Dict$update, key, function(oldValue) {
				return $elm$core$Maybe$Just($elm$core$Maybe$isJust(oldValue)
					? value + ', ' + oldValue.a
					: value
				);
			}, headers);
		}
	}
	return headers;
}


// EXPECT

var _Http_expect = F3(function(type, toBody, toValue)
{
	return {
		$: 0,
		d: type,
		b: toBody,
		a: toValue
	};
});

var _Http_mapExpect = F2(function(func, expect)
{
	return {
		$: 0,
		d: expect.d,
		b: expect.b,
		a: function(x) { return func(expect.a(x)); }
	};
});

function _Http_toDataView(arrayBuffer)
{
	return new DataView(arrayBuffer);
}


// BODY and PARTS

var _Http_emptyBody = { $: 0 };
var _Http_pair = F2(function(a, b) { return { $: 0, a: a, b: b }; });

function _Http_toFormData(parts)
{
	for (var formData = new FormData(); parts.b; parts = parts.b) // WHILE_CONS
	{
		var part = parts.a;
		formData.append(part.a, part.b);
	}
	return formData;
}

var _Http_bytesToBlob = F2(function(mime, bytes)
{
	return new Blob([bytes], { type: mime });
});


// PROGRESS

function _Http_track(router, xhr, tracker)
{
	// TODO check out lengthComputable on loadstart event

	xhr.upload.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Sending({
			gV: event.loaded,
			eQ: event.total
		}))));
	});
	xhr.addEventListener('progress', function(event) {
		if (xhr.c) { return; }
		_Scheduler_rawSpawn(A2($elm$core$Platform$sendToSelf, router, _Utils_Tuple2(tracker, $elm$http$Http$Receiving({
			gF: event.loaded,
			eQ: event.lengthComputable ? $elm$core$Maybe$Just(event.total) : $elm$core$Maybe$Nothing
		}))));
	});
}



// STRINGS


var _Parser_isSubString = F5(function(smallString, offset, row, col, bigString)
{
	var smallLength = smallString.length;
	var isGood = offset + smallLength <= bigString.length;

	for (var i = 0; isGood && i < smallLength; )
	{
		var code = bigString.charCodeAt(offset);
		isGood =
			smallString[i++] === bigString[offset++]
			&& (
				code === 0x000A /* \n */
					? ( row++, col=1 )
					: ( col++, (code & 0xF800) === 0xD800 ? smallString[i++] === bigString[offset++] : 1 )
			)
	}

	return _Utils_Tuple3(isGood ? offset : -1, row, col);
});



// CHARS


var _Parser_isSubChar = F3(function(predicate, offset, string)
{
	return (
		string.length <= offset
			? -1
			:
		(string.charCodeAt(offset) & 0xF800) === 0xD800
			? (predicate(_Utils_chr(string.substr(offset, 2))) ? offset + 2 : -1)
			:
		(predicate(_Utils_chr(string[offset]))
			? ((string[offset] === '\n') ? -2 : (offset + 1))
			: -1
		)
	);
});


var _Parser_isAsciiCode = F3(function(code, offset, string)
{
	return string.charCodeAt(offset) === code;
});



// NUMBERS


var _Parser_chompBase10 = F2(function(offset, string)
{
	for (; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (code < 0x30 || 0x39 < code)
		{
			return offset;
		}
	}
	return offset;
});


var _Parser_consumeBase = F3(function(base, offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var digit = string.charCodeAt(offset) - 0x30;
		if (digit < 0 || base <= digit) break;
		total = base * total + digit;
	}
	return _Utils_Tuple2(offset, total);
});


var _Parser_consumeBase16 = F2(function(offset, string)
{
	for (var total = 0; offset < string.length; offset++)
	{
		var code = string.charCodeAt(offset);
		if (0x30 <= code && code <= 0x39)
		{
			total = 16 * total + code - 0x30;
		}
		else if (0x41 <= code && code <= 0x46)
		{
			total = 16 * total + code - 55;
		}
		else if (0x61 <= code && code <= 0x66)
		{
			total = 16 * total + code - 87;
		}
		else
		{
			break;
		}
	}
	return _Utils_Tuple2(offset, total);
});



// FIND STRING


var _Parser_findSubString = F5(function(smallString, offset, row, col, bigString)
{
	var newOffset = bigString.indexOf(smallString, offset);
	var target = newOffset < 0 ? bigString.length : newOffset + smallString.length;

	while (offset < target)
	{
		var code = bigString.charCodeAt(offset++);
		code === 0x000A /* \n */
			? ( col=1, row++ )
			: ( col++, (code & 0xF800) === 0xD800 && offset++ )
	}

	return _Utils_Tuple3(newOffset, row, col);
});



var _Bitwise_and = F2(function(a, b)
{
	return a & b;
});

var _Bitwise_or = F2(function(a, b)
{
	return a | b;
});

var _Bitwise_xor = F2(function(a, b)
{
	return a ^ b;
});

function _Bitwise_complement(a)
{
	return ~a;
};

var _Bitwise_shiftLeftBy = F2(function(offset, a)
{
	return a << offset;
});

var _Bitwise_shiftRightBy = F2(function(offset, a)
{
	return a >> offset;
});

var _Bitwise_shiftRightZfBy = F2(function(offset, a)
{
	return a >>> offset;
});



function _Time_now(millisToPosix)
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(millisToPosix(Date.now())));
	});
}

var _Time_setInterval = F2(function(interval, task)
{
	return _Scheduler_binding(function(callback)
	{
		var id = setInterval(function() { _Scheduler_rawSpawn(task); }, interval);
		return function() { clearInterval(id); };
	});
});

function _Time_here()
{
	return _Scheduler_binding(function(callback)
	{
		callback(_Scheduler_succeed(
			A2($elm$time$Time$customZone, -(new Date().getTimezoneOffset()), _List_Nil)
		));
	});
}


function _Time_getZoneName()
{
	return _Scheduler_binding(function(callback)
	{
		try
		{
			var name = $elm$time$Time$Name(Intl.DateTimeFormat().resolvedOptions().timeZone);
		}
		catch (e)
		{
			var name = $elm$time$Time$Offset(new Date().getTimezoneOffset());
		}
		callback(_Scheduler_succeed(name));
	});
}



// DECODER

var _File_decoder = _Json_decodePrim(function(value) {
	// NOTE: checks if `File` exists in case this is run on node
	return (typeof File !== 'undefined' && value instanceof File)
		? $elm$core$Result$Ok(value)
		: _Json_expecting('a FILE', value);
});


// METADATA

function _File_name(file) { return file.name; }
function _File_mime(file) { return file.type; }
function _File_size(file) { return file.size; }

function _File_lastModified(file)
{
	return $elm$time$Time$millisToPosix(file.lastModified);
}


// DOWNLOAD

var _File_downloadNode;

function _File_getDownloadNode()
{
	return _File_downloadNode || (_File_downloadNode = document.createElement('a'));
}

var _File_download = F3(function(name, mime, content)
{
	return _Scheduler_binding(function(callback)
	{
		var blob = new Blob([content], {type: mime});

		// for IE10+
		if (navigator.msSaveOrOpenBlob)
		{
			navigator.msSaveOrOpenBlob(blob, name);
			return;
		}

		// for HTML5
		var node = _File_getDownloadNode();
		var objectUrl = URL.createObjectURL(blob);
		node.href = objectUrl;
		node.download = name;
		_File_click(node);
		URL.revokeObjectURL(objectUrl);
	});
});

function _File_downloadUrl(href)
{
	return _Scheduler_binding(function(callback)
	{
		var node = _File_getDownloadNode();
		node.href = href;
		node.download = '';
		node.origin === location.origin || (node.target = '_blank');
		_File_click(node);
	});
}


// IE COMPATIBILITY

function _File_makeBytesSafeForInternetExplorer(bytes)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/10
	// all other browsers can just run `new Blob([bytes])` directly with no problem
	//
	return new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
}

function _File_click(node)
{
	// only needed by IE10 and IE11 to fix https://github.com/elm/file/issues/11
	// all other browsers have MouseEvent and do not need this conditional stuff
	//
	if (typeof MouseEvent === 'function')
	{
		node.dispatchEvent(new MouseEvent('click'));
	}
	else
	{
		var event = document.createEvent('MouseEvents');
		event.initMouseEvent('click', true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
		document.body.appendChild(node);
		node.dispatchEvent(event);
		document.body.removeChild(node);
	}
}


// UPLOAD

var _File_node;

function _File_uploadOne(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			callback(_Scheduler_succeed(event.target.files[0]));
		});
		_File_click(_File_node);
	});
}

function _File_uploadOneOrMore(mimes)
{
	return _Scheduler_binding(function(callback)
	{
		_File_node = document.createElement('input');
		_File_node.type = 'file';
		_File_node.multiple = true;
		_File_node.accept = A2($elm$core$String$join, ',', mimes);
		_File_node.addEventListener('change', function(event)
		{
			var elmFiles = _List_fromArray(event.target.files);
			callback(_Scheduler_succeed(_Utils_Tuple2(elmFiles.a, elmFiles.b)));
		});
		_File_click(_File_node);
	});
}


// CONTENT

function _File_toString(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsText(blob);
		return function() { reader.abort(); };
	});
}

function _File_toBytes(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(new DataView(reader.result)));
		});
		reader.readAsArrayBuffer(blob);
		return function() { reader.abort(); };
	});
}

function _File_toUrl(blob)
{
	return _Scheduler_binding(function(callback)
	{
		var reader = new FileReader();
		reader.addEventListener('loadend', function() {
			callback(_Scheduler_succeed(reader.result));
		});
		reader.readAsDataURL(blob);
		return function() { reader.abort(); };
	});
}



// CREATE

var _Regex_never = /.^/;

var _Regex_fromStringWith = F2(function(options, string)
{
	var flags = 'g';
	if (options.eg) { flags += 'm'; }
	if (options.dt) { flags += 'i'; }

	try
	{
		return $elm$core$Maybe$Just(new RegExp(string, flags));
	}
	catch(error)
	{
		return $elm$core$Maybe$Nothing;
	}
});


// USE

var _Regex_contains = F2(function(re, string)
{
	return string.match(re) !== null;
});


var _Regex_findAtMost = F3(function(n, re, str)
{
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex == re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		out.push(A4($elm$regex$Regex$Match, result[0], result.index, number, _List_fromArray(subs)));
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _List_fromArray(out);
});


var _Regex_replaceAtMost = F4(function(n, re, replacer, string)
{
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch
				? $elm$core$Maybe$Just(submatch)
				: $elm$core$Maybe$Nothing;
		}
		return replacer(A4($elm$regex$Regex$Match, match, arguments[arguments.length - 2], count, _List_fromArray(submatches)));
	}
	return string.replace(re, jsReplacer);
});

var _Regex_splitAtMost = F3(function(n, re, str)
{
	var string = str;
	var out = [];
	var start = re.lastIndex;
	var restoreLastIndex = re.lastIndex;
	while (n--)
	{
		var result = re.exec(string);
		if (!result) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	re.lastIndex = restoreLastIndex;
	return _List_fromArray(out);
});

var _Regex_infinity = Infinity;
var $elm$core$List$cons = _List_cons;
var $elm$core$Elm$JsArray$foldr = _JsArray_foldr;
var $elm$core$Array$foldr = F3(
	function (func, baseCase, _v0) {
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = F2(
			function (node, acc) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
				} else {
					var values = node.a;
					return A3($elm$core$Elm$JsArray$foldr, func, acc, values);
				}
			});
		return A3(
			$elm$core$Elm$JsArray$foldr,
			helper,
			A3($elm$core$Elm$JsArray$foldr, func, baseCase, tail),
			tree);
	});
var $elm$core$Array$toList = function (array) {
	return A3($elm$core$Array$foldr, $elm$core$List$cons, _List_Nil, array);
};
var $elm$core$Dict$foldr = F3(
	function (func, acc, t) {
		foldr:
		while (true) {
			if (t.$ === -2) {
				return acc;
			} else {
				var key = t.b;
				var value = t.c;
				var left = t.d;
				var right = t.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldr, func, acc, right)),
					$temp$t = left;
				func = $temp$func;
				acc = $temp$acc;
				t = $temp$t;
				continue foldr;
			}
		}
	});
var $elm$core$Dict$toList = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2(key, value),
					list);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Dict$keys = function (dict) {
	return A3(
		$elm$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2($elm$core$List$cons, key, keyList);
			}),
		_List_Nil,
		dict);
};
var $elm$core$Set$toList = function (_v0) {
	var dict = _v0;
	return $elm$core$Dict$keys(dict);
};
var $elm$core$Basics$EQ = 1;
var $elm$core$Basics$GT = 2;
var $elm$core$Basics$LT = 0;
var $elm$core$Result$Err = function (a) {
	return {$: 1, a: a};
};
var $elm$json$Json$Decode$Failure = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$json$Json$Decode$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$json$Json$Decode$Index = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$core$Result$Ok = function (a) {
	return {$: 0, a: a};
};
var $elm$json$Json$Decode$OneOf = function (a) {
	return {$: 2, a: a};
};
var $elm$core$Basics$False = 1;
var $elm$core$Basics$add = _Basics_add;
var $elm$core$Maybe$Just = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Maybe$Nothing = {$: 1};
var $elm$core$String$all = _String_all;
var $elm$core$Basics$and = _Basics_and;
var $elm$core$Basics$append = _Utils_append;
var $elm$json$Json$Encode$encode = _Json_encode;
var $elm$core$String$fromInt = _String_fromNumber;
var $elm$core$String$join = F2(
	function (sep, chunks) {
		return A2(
			_String_join,
			sep,
			_List_toArray(chunks));
	});
var $elm$core$String$split = F2(
	function (sep, string) {
		return _List_fromArray(
			A2(_String_split, sep, string));
	});
var $elm$json$Json$Decode$indent = function (str) {
	return A2(
		$elm$core$String$join,
		'\n    ',
		A2($elm$core$String$split, '\n', str));
};
var $elm$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			if (!list.b) {
				return acc;
			} else {
				var x = list.a;
				var xs = list.b;
				var $temp$func = func,
					$temp$acc = A2(func, x, acc),
					$temp$list = xs;
				func = $temp$func;
				acc = $temp$acc;
				list = $temp$list;
				continue foldl;
			}
		}
	});
var $elm$core$List$length = function (xs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, i) {
				return i + 1;
			}),
		0,
		xs);
};
var $elm$core$List$map2 = _List_map2;
var $elm$core$Basics$le = _Utils_le;
var $elm$core$Basics$sub = _Basics_sub;
var $elm$core$List$rangeHelp = F3(
	function (lo, hi, list) {
		rangeHelp:
		while (true) {
			if (_Utils_cmp(lo, hi) < 1) {
				var $temp$lo = lo,
					$temp$hi = hi - 1,
					$temp$list = A2($elm$core$List$cons, hi, list);
				lo = $temp$lo;
				hi = $temp$hi;
				list = $temp$list;
				continue rangeHelp;
			} else {
				return list;
			}
		}
	});
var $elm$core$List$range = F2(
	function (lo, hi) {
		return A3($elm$core$List$rangeHelp, lo, hi, _List_Nil);
	});
var $elm$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$map2,
			f,
			A2(
				$elm$core$List$range,
				0,
				$elm$core$List$length(xs) - 1),
			xs);
	});
var $elm$core$Char$toCode = _Char_toCode;
var $elm$core$Char$isLower = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (97 <= code) && (code <= 122);
};
var $elm$core$Char$isUpper = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 90) && (65 <= code);
};
var $elm$core$Basics$or = _Basics_or;
var $elm$core$Char$isAlpha = function (_char) {
	return $elm$core$Char$isLower(_char) || $elm$core$Char$isUpper(_char);
};
var $elm$core$Char$isDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return (code <= 57) && (48 <= code);
};
var $elm$core$Char$isAlphaNum = function (_char) {
	return $elm$core$Char$isLower(_char) || ($elm$core$Char$isUpper(_char) || $elm$core$Char$isDigit(_char));
};
var $elm$core$List$reverse = function (list) {
	return A3($elm$core$List$foldl, $elm$core$List$cons, _List_Nil, list);
};
var $elm$core$String$uncons = _String_uncons;
var $elm$json$Json$Decode$errorOneOf = F2(
	function (i, error) {
		return '\n\n(' + ($elm$core$String$fromInt(i + 1) + (') ' + $elm$json$Json$Decode$indent(
			$elm$json$Json$Decode$errorToString(error))));
	});
var $elm$json$Json$Decode$errorToString = function (error) {
	return A2($elm$json$Json$Decode$errorToStringHelp, error, _List_Nil);
};
var $elm$json$Json$Decode$errorToStringHelp = F2(
	function (error, context) {
		errorToStringHelp:
		while (true) {
			switch (error.$) {
				case 0:
					var f = error.a;
					var err = error.b;
					var isSimple = function () {
						var _v1 = $elm$core$String$uncons(f);
						if (_v1.$ === 1) {
							return false;
						} else {
							var _v2 = _v1.a;
							var _char = _v2.a;
							var rest = _v2.b;
							return $elm$core$Char$isAlpha(_char) && A2($elm$core$String$all, $elm$core$Char$isAlphaNum, rest);
						}
					}();
					var fieldName = isSimple ? ('.' + f) : ('[\'' + (f + '\']'));
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, fieldName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 1:
					var i = error.a;
					var err = error.b;
					var indexName = '[' + ($elm$core$String$fromInt(i) + ']');
					var $temp$error = err,
						$temp$context = A2($elm$core$List$cons, indexName, context);
					error = $temp$error;
					context = $temp$context;
					continue errorToStringHelp;
				case 2:
					var errors = error.a;
					if (!errors.b) {
						return 'Ran into a Json.Decode.oneOf with no possibilities' + function () {
							if (!context.b) {
								return '!';
							} else {
								return ' at json' + A2(
									$elm$core$String$join,
									'',
									$elm$core$List$reverse(context));
							}
						}();
					} else {
						if (!errors.b.b) {
							var err = errors.a;
							var $temp$error = err,
								$temp$context = context;
							error = $temp$error;
							context = $temp$context;
							continue errorToStringHelp;
						} else {
							var starter = function () {
								if (!context.b) {
									return 'Json.Decode.oneOf';
								} else {
									return 'The Json.Decode.oneOf at json' + A2(
										$elm$core$String$join,
										'',
										$elm$core$List$reverse(context));
								}
							}();
							var introduction = starter + (' failed in the following ' + ($elm$core$String$fromInt(
								$elm$core$List$length(errors)) + ' ways:'));
							return A2(
								$elm$core$String$join,
								'\n\n',
								A2(
									$elm$core$List$cons,
									introduction,
									A2($elm$core$List$indexedMap, $elm$json$Json$Decode$errorOneOf, errors)));
						}
					}
				default:
					var msg = error.a;
					var json = error.b;
					var introduction = function () {
						if (!context.b) {
							return 'Problem with the given value:\n\n';
						} else {
							return 'Problem with the value at json' + (A2(
								$elm$core$String$join,
								'',
								$elm$core$List$reverse(context)) + ':\n\n    ');
						}
					}();
					return introduction + ($elm$json$Json$Decode$indent(
						A2($elm$json$Json$Encode$encode, 4, json)) + ('\n\n' + msg));
			}
		}
	});
var $elm$core$Array$branchFactor = 32;
var $elm$core$Array$Array_elm_builtin = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$core$Elm$JsArray$empty = _JsArray_empty;
var $elm$core$Basics$ceiling = _Basics_ceiling;
var $elm$core$Basics$fdiv = _Basics_fdiv;
var $elm$core$Basics$logBase = F2(
	function (base, number) {
		return _Basics_log(number) / _Basics_log(base);
	});
var $elm$core$Basics$toFloat = _Basics_toFloat;
var $elm$core$Array$shiftStep = $elm$core$Basics$ceiling(
	A2($elm$core$Basics$logBase, 2, $elm$core$Array$branchFactor));
var $elm$core$Array$empty = A4($elm$core$Array$Array_elm_builtin, 0, $elm$core$Array$shiftStep, $elm$core$Elm$JsArray$empty, $elm$core$Elm$JsArray$empty);
var $elm$core$Elm$JsArray$initialize = _JsArray_initialize;
var $elm$core$Array$Leaf = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$apL = F2(
	function (f, x) {
		return f(x);
	});
var $elm$core$Basics$apR = F2(
	function (x, f) {
		return f(x);
	});
var $elm$core$Basics$eq = _Utils_equal;
var $elm$core$Basics$floor = _Basics_floor;
var $elm$core$Elm$JsArray$length = _JsArray_length;
var $elm$core$Basics$gt = _Utils_gt;
var $elm$core$Basics$max = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) > 0) ? x : y;
	});
var $elm$core$Basics$mul = _Basics_mul;
var $elm$core$Array$SubTree = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Elm$JsArray$initializeFromList = _JsArray_initializeFromList;
var $elm$core$Array$compressNodes = F2(
	function (nodes, acc) {
		compressNodes:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodes);
			var node = _v0.a;
			var remainingNodes = _v0.b;
			var newAcc = A2(
				$elm$core$List$cons,
				$elm$core$Array$SubTree(node),
				acc);
			if (!remainingNodes.b) {
				return $elm$core$List$reverse(newAcc);
			} else {
				var $temp$nodes = remainingNodes,
					$temp$acc = newAcc;
				nodes = $temp$nodes;
				acc = $temp$acc;
				continue compressNodes;
			}
		}
	});
var $elm$core$Tuple$first = function (_v0) {
	var x = _v0.a;
	return x;
};
var $elm$core$Array$treeFromBuilder = F2(
	function (nodeList, nodeListSize) {
		treeFromBuilder:
		while (true) {
			var newNodeSize = $elm$core$Basics$ceiling(nodeListSize / $elm$core$Array$branchFactor);
			if (newNodeSize === 1) {
				return A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, nodeList).a;
			} else {
				var $temp$nodeList = A2($elm$core$Array$compressNodes, nodeList, _List_Nil),
					$temp$nodeListSize = newNodeSize;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue treeFromBuilder;
			}
		}
	});
var $elm$core$Array$builderToArray = F2(
	function (reverseNodeList, builder) {
		if (!builder.q) {
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.r),
				$elm$core$Array$shiftStep,
				$elm$core$Elm$JsArray$empty,
				builder.r);
		} else {
			var treeLen = builder.q * $elm$core$Array$branchFactor;
			var depth = $elm$core$Basics$floor(
				A2($elm$core$Basics$logBase, $elm$core$Array$branchFactor, treeLen - 1));
			var correctNodeList = reverseNodeList ? $elm$core$List$reverse(builder.u) : builder.u;
			var tree = A2($elm$core$Array$treeFromBuilder, correctNodeList, builder.q);
			return A4(
				$elm$core$Array$Array_elm_builtin,
				$elm$core$Elm$JsArray$length(builder.r) + treeLen,
				A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep),
				tree,
				builder.r);
		}
	});
var $elm$core$Basics$idiv = _Basics_idiv;
var $elm$core$Basics$lt = _Utils_lt;
var $elm$core$Array$initializeHelp = F5(
	function (fn, fromIndex, len, nodeList, tail) {
		initializeHelp:
		while (true) {
			if (fromIndex < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					false,
					{u: nodeList, q: (len / $elm$core$Array$branchFactor) | 0, r: tail});
			} else {
				var leaf = $elm$core$Array$Leaf(
					A3($elm$core$Elm$JsArray$initialize, $elm$core$Array$branchFactor, fromIndex, fn));
				var $temp$fn = fn,
					$temp$fromIndex = fromIndex - $elm$core$Array$branchFactor,
					$temp$len = len,
					$temp$nodeList = A2($elm$core$List$cons, leaf, nodeList),
					$temp$tail = tail;
				fn = $temp$fn;
				fromIndex = $temp$fromIndex;
				len = $temp$len;
				nodeList = $temp$nodeList;
				tail = $temp$tail;
				continue initializeHelp;
			}
		}
	});
var $elm$core$Basics$remainderBy = _Basics_remainderBy;
var $elm$core$Array$initialize = F2(
	function (len, fn) {
		if (len <= 0) {
			return $elm$core$Array$empty;
		} else {
			var tailLen = len % $elm$core$Array$branchFactor;
			var tail = A3($elm$core$Elm$JsArray$initialize, tailLen, len - tailLen, fn);
			var initialFromIndex = (len - tailLen) - $elm$core$Array$branchFactor;
			return A5($elm$core$Array$initializeHelp, fn, initialFromIndex, len, _List_Nil, tail);
		}
	});
var $elm$core$Basics$True = 0;
var $elm$core$Result$isOk = function (result) {
	if (!result.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$json$Json$Decode$andThen = _Json_andThen;
var $elm$json$Json$Decode$map = _Json_map1;
var $elm$json$Json$Decode$map2 = _Json_map2;
var $elm$json$Json$Decode$succeed = _Json_succeed;
var $elm$virtual_dom$VirtualDom$toHandlerInt = function (handler) {
	switch (handler.$) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		default:
			return 3;
	}
};
var $elm$browser$Browser$External = function (a) {
	return {$: 1, a: a};
};
var $elm$browser$Browser$Internal = function (a) {
	return {$: 0, a: a};
};
var $elm$core$Basics$identity = function (x) {
	return x;
};
var $elm$browser$Browser$Dom$NotFound = $elm$core$Basics$identity;
var $elm$url$Url$Http = 0;
var $elm$url$Url$Https = 1;
var $elm$url$Url$Url = F6(
	function (protocol, host, port_, path, query, fragment) {
		return {dS: fragment, dZ: host, eo: path, eq: port_, ev: protocol, ew: query};
	});
var $elm$core$String$contains = _String_contains;
var $elm$core$String$length = _String_length;
var $elm$core$String$slice = _String_slice;
var $elm$core$String$dropLeft = F2(
	function (n, string) {
		return (n < 1) ? string : A3(
			$elm$core$String$slice,
			n,
			$elm$core$String$length(string),
			string);
	});
var $elm$core$String$indexes = _String_indexes;
var $elm$core$String$isEmpty = function (string) {
	return string === '';
};
var $elm$core$String$left = F2(
	function (n, string) {
		return (n < 1) ? '' : A3($elm$core$String$slice, 0, n, string);
	});
var $elm$core$String$toInt = _String_toInt;
var $elm$url$Url$chompBeforePath = F5(
	function (protocol, path, params, frag, str) {
		if ($elm$core$String$isEmpty(str) || A2($elm$core$String$contains, '@', str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, ':', str);
			if (!_v0.b) {
				return $elm$core$Maybe$Just(
					A6($elm$url$Url$Url, protocol, str, $elm$core$Maybe$Nothing, path, params, frag));
			} else {
				if (!_v0.b.b) {
					var i = _v0.a;
					var _v1 = $elm$core$String$toInt(
						A2($elm$core$String$dropLeft, i + 1, str));
					if (_v1.$ === 1) {
						return $elm$core$Maybe$Nothing;
					} else {
						var port_ = _v1;
						return $elm$core$Maybe$Just(
							A6(
								$elm$url$Url$Url,
								protocol,
								A2($elm$core$String$left, i, str),
								port_,
								path,
								params,
								frag));
					}
				} else {
					return $elm$core$Maybe$Nothing;
				}
			}
		}
	});
var $elm$url$Url$chompBeforeQuery = F4(
	function (protocol, params, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '/', str);
			if (!_v0.b) {
				return A5($elm$url$Url$chompBeforePath, protocol, '/', params, frag, str);
			} else {
				var i = _v0.a;
				return A5(
					$elm$url$Url$chompBeforePath,
					protocol,
					A2($elm$core$String$dropLeft, i, str),
					params,
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompBeforeFragment = F3(
	function (protocol, frag, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '?', str);
			if (!_v0.b) {
				return A4($elm$url$Url$chompBeforeQuery, protocol, $elm$core$Maybe$Nothing, frag, str);
			} else {
				var i = _v0.a;
				return A4(
					$elm$url$Url$chompBeforeQuery,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					frag,
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$url$Url$chompAfterProtocol = F2(
	function (protocol, str) {
		if ($elm$core$String$isEmpty(str)) {
			return $elm$core$Maybe$Nothing;
		} else {
			var _v0 = A2($elm$core$String$indexes, '#', str);
			if (!_v0.b) {
				return A3($elm$url$Url$chompBeforeFragment, protocol, $elm$core$Maybe$Nothing, str);
			} else {
				var i = _v0.a;
				return A3(
					$elm$url$Url$chompBeforeFragment,
					protocol,
					$elm$core$Maybe$Just(
						A2($elm$core$String$dropLeft, i + 1, str)),
					A2($elm$core$String$left, i, str));
			}
		}
	});
var $elm$core$String$startsWith = _String_startsWith;
var $elm$url$Url$fromString = function (str) {
	return A2($elm$core$String$startsWith, 'http://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		0,
		A2($elm$core$String$dropLeft, 7, str)) : (A2($elm$core$String$startsWith, 'https://', str) ? A2(
		$elm$url$Url$chompAfterProtocol,
		1,
		A2($elm$core$String$dropLeft, 8, str)) : $elm$core$Maybe$Nothing);
};
var $elm$core$Basics$never = function (_v0) {
	never:
	while (true) {
		var nvr = _v0;
		var $temp$_v0 = nvr;
		_v0 = $temp$_v0;
		continue never;
	}
};
var $elm$core$Task$Perform = $elm$core$Basics$identity;
var $elm$core$Task$succeed = _Scheduler_succeed;
var $elm$core$Task$init = $elm$core$Task$succeed(0);
var $elm$core$List$foldrHelper = F4(
	function (fn, acc, ctr, ls) {
		if (!ls.b) {
			return acc;
		} else {
			var a = ls.a;
			var r1 = ls.b;
			if (!r1.b) {
				return A2(fn, a, acc);
			} else {
				var b = r1.a;
				var r2 = r1.b;
				if (!r2.b) {
					return A2(
						fn,
						a,
						A2(fn, b, acc));
				} else {
					var c = r2.a;
					var r3 = r2.b;
					if (!r3.b) {
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(fn, c, acc)));
					} else {
						var d = r3.a;
						var r4 = r3.b;
						var res = (ctr > 500) ? A3(
							$elm$core$List$foldl,
							fn,
							acc,
							$elm$core$List$reverse(r4)) : A4($elm$core$List$foldrHelper, fn, acc, ctr + 1, r4);
						return A2(
							fn,
							a,
							A2(
								fn,
								b,
								A2(
									fn,
									c,
									A2(fn, d, res))));
					}
				}
			}
		}
	});
var $elm$core$List$foldr = F3(
	function (fn, acc, ls) {
		return A4($elm$core$List$foldrHelper, fn, acc, 0, ls);
	});
var $elm$core$List$map = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						$elm$core$List$cons,
						f(x),
						acc);
				}),
			_List_Nil,
			xs);
	});
var $elm$core$Task$andThen = _Scheduler_andThen;
var $elm$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return $elm$core$Task$succeed(
					func(a));
			},
			taskA);
	});
var $elm$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			$elm$core$Task$andThen,
			function (a) {
				return A2(
					$elm$core$Task$andThen,
					function (b) {
						return $elm$core$Task$succeed(
							A2(func, a, b));
					},
					taskB);
			},
			taskA);
	});
var $elm$core$Task$sequence = function (tasks) {
	return A3(
		$elm$core$List$foldr,
		$elm$core$Task$map2($elm$core$List$cons),
		$elm$core$Task$succeed(_List_Nil),
		tasks);
};
var $elm$core$Platform$sendToApp = _Platform_sendToApp;
var $elm$core$Task$spawnCmd = F2(
	function (router, _v0) {
		var task = _v0;
		return _Scheduler_spawn(
			A2(
				$elm$core$Task$andThen,
				$elm$core$Platform$sendToApp(router),
				task));
	});
var $elm$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			$elm$core$Task$map,
			function (_v0) {
				return 0;
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$map,
					$elm$core$Task$spawnCmd(router),
					commands)));
	});
var $elm$core$Task$onSelfMsg = F3(
	function (_v0, _v1, _v2) {
		return $elm$core$Task$succeed(0);
	});
var $elm$core$Task$cmdMap = F2(
	function (tagger, _v0) {
		var task = _v0;
		return A2($elm$core$Task$map, tagger, task);
	});
_Platform_effectManagers['Task'] = _Platform_createManager($elm$core$Task$init, $elm$core$Task$onEffects, $elm$core$Task$onSelfMsg, $elm$core$Task$cmdMap);
var $elm$core$Task$command = _Platform_leaf('Task');
var $elm$core$Task$perform = F2(
	function (toMessage, task) {
		return $elm$core$Task$command(
			A2($elm$core$Task$map, toMessage, task));
	});
var $elm$browser$Browser$element = _Browser_element;
var $elm$json$Json$Decode$field = _Json_decodeField;
var $author$project$Umuli$LMiniLaTeX = 0;
var $author$project$Model$MiniLaTeX = 0;
var $author$project$Model$PrintWaiting = 0;
var $author$project$Model$Server = 0;
var $author$project$Model$ServerIsAlive = function (a) {
	return {$: 26, a: a};
};
var $elm$http$Http$BadStatus_ = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $elm$http$Http$BadUrl_ = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$GoodStatus_ = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $elm$http$Http$NetworkError_ = {$: 2};
var $elm$http$Http$Receiving = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$Sending = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$Timeout_ = {$: 1};
var $elm$core$Dict$RBEmpty_elm_builtin = {$: -2};
var $elm$core$Dict$empty = $elm$core$Dict$RBEmpty_elm_builtin;
var $elm$core$Maybe$isJust = function (maybe) {
	if (!maybe.$) {
		return true;
	} else {
		return false;
	}
};
var $elm$core$Platform$sendToSelf = _Platform_sendToSelf;
var $elm$core$Basics$compare = _Utils_compare;
var $elm$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			if (dict.$ === -2) {
				return $elm$core$Maybe$Nothing;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var _v1 = A2($elm$core$Basics$compare, targetKey, key);
				switch (_v1) {
					case 0:
						var $temp$targetKey = targetKey,
							$temp$dict = left;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
					case 1:
						return $elm$core$Maybe$Just(value);
					default:
						var $temp$targetKey = targetKey,
							$temp$dict = right;
						targetKey = $temp$targetKey;
						dict = $temp$dict;
						continue get;
				}
			}
		}
	});
var $elm$core$Dict$Black = 1;
var $elm$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {$: -1, a: a, b: b, c: c, d: d, e: e};
	});
var $elm$core$Dict$Red = 0;
var $elm$core$Dict$balance = F5(
	function (color, key, value, left, right) {
		if ((right.$ === -1) && (!right.a)) {
			var _v1 = right.a;
			var rK = right.b;
			var rV = right.c;
			var rLeft = right.d;
			var rRight = right.e;
			if ((left.$ === -1) && (!left.a)) {
				var _v3 = left.a;
				var lK = left.b;
				var lV = left.c;
				var lLeft = left.d;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					key,
					value,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					rK,
					rV,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, left, rLeft),
					rRight);
			}
		} else {
			if ((((left.$ === -1) && (!left.a)) && (left.d.$ === -1)) && (!left.d.a)) {
				var _v5 = left.a;
				var lK = left.b;
				var lV = left.c;
				var _v6 = left.d;
				var _v7 = _v6.a;
				var llK = _v6.b;
				var llV = _v6.c;
				var llLeft = _v6.d;
				var llRight = _v6.e;
				var lRight = left.e;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					0,
					lK,
					lV,
					A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 1, key, value, lRight, right));
			} else {
				return A5($elm$core$Dict$RBNode_elm_builtin, color, key, value, left, right);
			}
		}
	});
var $elm$core$Dict$insertHelp = F3(
	function (key, value, dict) {
		if (dict.$ === -2) {
			return A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, $elm$core$Dict$RBEmpty_elm_builtin, $elm$core$Dict$RBEmpty_elm_builtin);
		} else {
			var nColor = dict.a;
			var nKey = dict.b;
			var nValue = dict.c;
			var nLeft = dict.d;
			var nRight = dict.e;
			var _v1 = A2($elm$core$Basics$compare, key, nKey);
			switch (_v1) {
				case 0:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						A3($elm$core$Dict$insertHelp, key, value, nLeft),
						nRight);
				case 1:
					return A5($elm$core$Dict$RBNode_elm_builtin, nColor, nKey, value, nLeft, nRight);
				default:
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						nLeft,
						A3($elm$core$Dict$insertHelp, key, value, nRight));
			}
		}
	});
var $elm$core$Dict$insert = F3(
	function (key, value, dict) {
		var _v0 = A3($elm$core$Dict$insertHelp, key, value, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$getMin = function (dict) {
	getMin:
	while (true) {
		if ((dict.$ === -1) && (dict.d.$ === -1)) {
			var left = dict.d;
			var $temp$dict = left;
			dict = $temp$dict;
			continue getMin;
		} else {
			return dict;
		}
	}
};
var $elm$core$Dict$moveRedLeft = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.e.d.$ === -1) && (!dict.e.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var lLeft = _v1.d;
			var lRight = _v1.e;
			var _v2 = dict.e;
			var rClr = _v2.a;
			var rK = _v2.b;
			var rV = _v2.c;
			var rLeft = _v2.d;
			var _v3 = rLeft.a;
			var rlK = rLeft.b;
			var rlV = rLeft.c;
			var rlL = rLeft.d;
			var rlR = rLeft.e;
			var rRight = _v2.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				rlK,
				rlV,
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					rlL),
				A5($elm$core$Dict$RBNode_elm_builtin, 1, rK, rV, rlR, rRight));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v4 = dict.d;
			var lClr = _v4.a;
			var lK = _v4.b;
			var lV = _v4.c;
			var lLeft = _v4.d;
			var lRight = _v4.e;
			var _v5 = dict.e;
			var rClr = _v5.a;
			var rK = _v5.b;
			var rV = _v5.c;
			var rLeft = _v5.d;
			var rRight = _v5.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$moveRedRight = function (dict) {
	if (((dict.$ === -1) && (dict.d.$ === -1)) && (dict.e.$ === -1)) {
		if ((dict.d.d.$ === -1) && (!dict.d.d.a)) {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v1 = dict.d;
			var lClr = _v1.a;
			var lK = _v1.b;
			var lV = _v1.c;
			var _v2 = _v1.d;
			var _v3 = _v2.a;
			var llK = _v2.b;
			var llV = _v2.c;
			var llLeft = _v2.d;
			var llRight = _v2.e;
			var lRight = _v1.e;
			var _v4 = dict.e;
			var rClr = _v4.a;
			var rK = _v4.b;
			var rV = _v4.c;
			var rLeft = _v4.d;
			var rRight = _v4.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				0,
				lK,
				lV,
				A5($elm$core$Dict$RBNode_elm_builtin, 1, llK, llV, llLeft, llRight),
				A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					lRight,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight)));
		} else {
			var clr = dict.a;
			var k = dict.b;
			var v = dict.c;
			var _v5 = dict.d;
			var lClr = _v5.a;
			var lK = _v5.b;
			var lV = _v5.c;
			var lLeft = _v5.d;
			var lRight = _v5.e;
			var _v6 = dict.e;
			var rClr = _v6.a;
			var rK = _v6.b;
			var rV = _v6.c;
			var rLeft = _v6.d;
			var rRight = _v6.e;
			if (clr === 1) {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			} else {
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					1,
					k,
					v,
					A5($elm$core$Dict$RBNode_elm_builtin, 0, lK, lV, lLeft, lRight),
					A5($elm$core$Dict$RBNode_elm_builtin, 0, rK, rV, rLeft, rRight));
			}
		}
	} else {
		return dict;
	}
};
var $elm$core$Dict$removeHelpPrepEQGT = F7(
	function (targetKey, dict, color, key, value, left, right) {
		if ((left.$ === -1) && (!left.a)) {
			var _v1 = left.a;
			var lK = left.b;
			var lV = left.c;
			var lLeft = left.d;
			var lRight = left.e;
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				lK,
				lV,
				lLeft,
				A5($elm$core$Dict$RBNode_elm_builtin, 0, key, value, lRight, right));
		} else {
			_v2$2:
			while (true) {
				if ((right.$ === -1) && (right.a === 1)) {
					if (right.d.$ === -1) {
						if (right.d.a === 1) {
							var _v3 = right.a;
							var _v4 = right.d;
							var _v5 = _v4.a;
							return $elm$core$Dict$moveRedRight(dict);
						} else {
							break _v2$2;
						}
					} else {
						var _v6 = right.a;
						var _v7 = right.d;
						return $elm$core$Dict$moveRedRight(dict);
					}
				} else {
					break _v2$2;
				}
			}
			return dict;
		}
	});
var $elm$core$Dict$removeMin = function (dict) {
	if ((dict.$ === -1) && (dict.d.$ === -1)) {
		var color = dict.a;
		var key = dict.b;
		var value = dict.c;
		var left = dict.d;
		var lColor = left.a;
		var lLeft = left.d;
		var right = dict.e;
		if (lColor === 1) {
			if ((lLeft.$ === -1) && (!lLeft.a)) {
				var _v3 = lLeft.a;
				return A5(
					$elm$core$Dict$RBNode_elm_builtin,
					color,
					key,
					value,
					$elm$core$Dict$removeMin(left),
					right);
			} else {
				var _v4 = $elm$core$Dict$moveRedLeft(dict);
				if (_v4.$ === -1) {
					var nColor = _v4.a;
					var nKey = _v4.b;
					var nValue = _v4.c;
					var nLeft = _v4.d;
					var nRight = _v4.e;
					return A5(
						$elm$core$Dict$balance,
						nColor,
						nKey,
						nValue,
						$elm$core$Dict$removeMin(nLeft),
						nRight);
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			}
		} else {
			return A5(
				$elm$core$Dict$RBNode_elm_builtin,
				color,
				key,
				value,
				$elm$core$Dict$removeMin(left),
				right);
		}
	} else {
		return $elm$core$Dict$RBEmpty_elm_builtin;
	}
};
var $elm$core$Dict$removeHelp = F2(
	function (targetKey, dict) {
		if (dict.$ === -2) {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		} else {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_cmp(targetKey, key) < 0) {
				if ((left.$ === -1) && (left.a === 1)) {
					var _v4 = left.a;
					var lLeft = left.d;
					if ((lLeft.$ === -1) && (!lLeft.a)) {
						var _v6 = lLeft.a;
						return A5(
							$elm$core$Dict$RBNode_elm_builtin,
							color,
							key,
							value,
							A2($elm$core$Dict$removeHelp, targetKey, left),
							right);
					} else {
						var _v7 = $elm$core$Dict$moveRedLeft(dict);
						if (_v7.$ === -1) {
							var nColor = _v7.a;
							var nKey = _v7.b;
							var nValue = _v7.c;
							var nLeft = _v7.d;
							var nRight = _v7.e;
							return A5(
								$elm$core$Dict$balance,
								nColor,
								nKey,
								nValue,
								A2($elm$core$Dict$removeHelp, targetKey, nLeft),
								nRight);
						} else {
							return $elm$core$Dict$RBEmpty_elm_builtin;
						}
					}
				} else {
					return A5(
						$elm$core$Dict$RBNode_elm_builtin,
						color,
						key,
						value,
						A2($elm$core$Dict$removeHelp, targetKey, left),
						right);
				}
			} else {
				return A2(
					$elm$core$Dict$removeHelpEQGT,
					targetKey,
					A7($elm$core$Dict$removeHelpPrepEQGT, targetKey, dict, color, key, value, left, right));
			}
		}
	});
var $elm$core$Dict$removeHelpEQGT = F2(
	function (targetKey, dict) {
		if (dict.$ === -1) {
			var color = dict.a;
			var key = dict.b;
			var value = dict.c;
			var left = dict.d;
			var right = dict.e;
			if (_Utils_eq(targetKey, key)) {
				var _v1 = $elm$core$Dict$getMin(right);
				if (_v1.$ === -1) {
					var minKey = _v1.b;
					var minValue = _v1.c;
					return A5(
						$elm$core$Dict$balance,
						color,
						minKey,
						minValue,
						left,
						$elm$core$Dict$removeMin(right));
				} else {
					return $elm$core$Dict$RBEmpty_elm_builtin;
				}
			} else {
				return A5(
					$elm$core$Dict$balance,
					color,
					key,
					value,
					left,
					A2($elm$core$Dict$removeHelp, targetKey, right));
			}
		} else {
			return $elm$core$Dict$RBEmpty_elm_builtin;
		}
	});
var $elm$core$Dict$remove = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$removeHelp, key, dict);
		if ((_v0.$ === -1) && (!_v0.a)) {
			var _v1 = _v0.a;
			var k = _v0.b;
			var v = _v0.c;
			var l = _v0.d;
			var r = _v0.e;
			return A5($elm$core$Dict$RBNode_elm_builtin, 1, k, v, l, r);
		} else {
			var x = _v0;
			return x;
		}
	});
var $elm$core$Dict$update = F3(
	function (targetKey, alter, dictionary) {
		var _v0 = alter(
			A2($elm$core$Dict$get, targetKey, dictionary));
		if (!_v0.$) {
			var value = _v0.a;
			return A3($elm$core$Dict$insert, targetKey, value, dictionary);
		} else {
			return A2($elm$core$Dict$remove, targetKey, dictionary);
		}
	});
var $elm$core$Basics$composeR = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var $elm$http$Http$expectStringResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'',
			$elm$core$Basics$identity,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$BadBody = function (a) {
	return {$: 4, a: a};
};
var $elm$http$Http$BadStatus = function (a) {
	return {$: 3, a: a};
};
var $elm$http$Http$BadUrl = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$NetworkError = {$: 2};
var $elm$http$Http$Timeout = {$: 1};
var $elm$core$Result$mapError = F2(
	function (f, result) {
		if (!result.$) {
			var v = result.a;
			return $elm$core$Result$Ok(v);
		} else {
			var e = result.a;
			return $elm$core$Result$Err(
				f(e));
		}
	});
var $elm$http$Http$resolve = F2(
	function (toResult, response) {
		switch (response.$) {
			case 0:
				var url = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadUrl(url));
			case 1:
				return $elm$core$Result$Err($elm$http$Http$Timeout);
			case 2:
				return $elm$core$Result$Err($elm$http$Http$NetworkError);
			case 3:
				var metadata = response.a;
				return $elm$core$Result$Err(
					$elm$http$Http$BadStatus(metadata.g4));
			default:
				var body = response.b;
				return A2(
					$elm$core$Result$mapError,
					$elm$http$Http$BadBody,
					toResult(body));
		}
	});
var $elm$http$Http$expectString = function (toMsg) {
	return A2(
		$elm$http$Http$expectStringResponse,
		toMsg,
		$elm$http$Http$resolve($elm$core$Result$Ok));
};
var $author$project$Config$fileServer = 'http://localhost:8077';
var $elm$http$Http$emptyBody = _Http_emptyBody;
var $elm$http$Http$Request = function (a) {
	return {$: 1, a: a};
};
var $elm$http$Http$State = F2(
	function (reqs, subs) {
		return {eB: reqs, eU: subs};
	});
var $elm$http$Http$init = $elm$core$Task$succeed(
	A2($elm$http$Http$State, $elm$core$Dict$empty, _List_Nil));
var $elm$core$Process$kill = _Scheduler_kill;
var $elm$core$Process$spawn = _Scheduler_spawn;
var $elm$http$Http$updateReqs = F3(
	function (router, cmds, reqs) {
		updateReqs:
		while (true) {
			if (!cmds.b) {
				return $elm$core$Task$succeed(reqs);
			} else {
				var cmd = cmds.a;
				var otherCmds = cmds.b;
				if (!cmd.$) {
					var tracker = cmd.a;
					var _v2 = A2($elm$core$Dict$get, tracker, reqs);
					if (_v2.$ === 1) {
						var $temp$router = router,
							$temp$cmds = otherCmds,
							$temp$reqs = reqs;
						router = $temp$router;
						cmds = $temp$cmds;
						reqs = $temp$reqs;
						continue updateReqs;
					} else {
						var pid = _v2.a;
						return A2(
							$elm$core$Task$andThen,
							function (_v3) {
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A2($elm$core$Dict$remove, tracker, reqs));
							},
							$elm$core$Process$kill(pid));
					}
				} else {
					var req = cmd.a;
					return A2(
						$elm$core$Task$andThen,
						function (pid) {
							var _v4 = req.hv;
							if (_v4.$ === 1) {
								return A3($elm$http$Http$updateReqs, router, otherCmds, reqs);
							} else {
								var tracker = _v4.a;
								return A3(
									$elm$http$Http$updateReqs,
									router,
									otherCmds,
									A3($elm$core$Dict$insert, tracker, pid, reqs));
							}
						},
						$elm$core$Process$spawn(
							A3(
								_Http_toTask,
								router,
								$elm$core$Platform$sendToApp(router),
								req)));
				}
			}
		}
	});
var $elm$http$Http$onEffects = F4(
	function (router, cmds, subs, state) {
		return A2(
			$elm$core$Task$andThen,
			function (reqs) {
				return $elm$core$Task$succeed(
					A2($elm$http$Http$State, reqs, subs));
			},
			A3($elm$http$Http$updateReqs, router, cmds, state.eB));
	});
var $elm$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _v0 = f(mx);
		if (!_v0.$) {
			var x = _v0.a;
			return A2($elm$core$List$cons, x, xs);
		} else {
			return xs;
		}
	});
var $elm$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			$elm$core$List$foldr,
			$elm$core$List$maybeCons(f),
			_List_Nil,
			xs);
	});
var $elm$http$Http$maybeSend = F4(
	function (router, desiredTracker, progress, _v0) {
		var actualTracker = _v0.a;
		var toMsg = _v0.b;
		return _Utils_eq(desiredTracker, actualTracker) ? $elm$core$Maybe$Just(
			A2(
				$elm$core$Platform$sendToApp,
				router,
				toMsg(progress))) : $elm$core$Maybe$Nothing;
	});
var $elm$http$Http$onSelfMsg = F3(
	function (router, _v0, state) {
		var tracker = _v0.a;
		var progress = _v0.b;
		return A2(
			$elm$core$Task$andThen,
			function (_v1) {
				return $elm$core$Task$succeed(state);
			},
			$elm$core$Task$sequence(
				A2(
					$elm$core$List$filterMap,
					A3($elm$http$Http$maybeSend, router, tracker, progress),
					state.eU)));
	});
var $elm$http$Http$Cancel = function (a) {
	return {$: 0, a: a};
};
var $elm$http$Http$cmdMap = F2(
	function (func, cmd) {
		if (!cmd.$) {
			var tracker = cmd.a;
			return $elm$http$Http$Cancel(tracker);
		} else {
			var r = cmd.a;
			return $elm$http$Http$Request(
				{
					fh: r.fh,
					fq: r.fq,
					dP: A2(_Http_mapExpect, func, r.dP),
					fY: r.fY,
					gn: r.gn,
					hs: r.hs,
					hv: r.hv,
					e_: r.e_
				});
		}
	});
var $elm$http$Http$MySub = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$http$Http$subMap = F2(
	function (func, _v0) {
		var tracker = _v0.a;
		var toMsg = _v0.b;
		return A2(
			$elm$http$Http$MySub,
			tracker,
			A2($elm$core$Basics$composeR, toMsg, func));
	});
_Platform_effectManagers['Http'] = _Platform_createManager($elm$http$Http$init, $elm$http$Http$onEffects, $elm$http$Http$onSelfMsg, $elm$http$Http$cmdMap, $elm$http$Http$subMap);
var $elm$http$Http$command = _Platform_leaf('Http');
var $elm$http$Http$subscription = _Platform_leaf('Http');
var $elm$http$Http$request = function (r) {
	return $elm$http$Http$command(
		$elm$http$Http$Request(
			{fh: false, fq: r.fq, dP: r.dP, fY: r.fY, gn: r.gn, hs: r.hs, hv: r.hv, e_: r.e_}));
};
var $elm$http$Http$get = function (r) {
	return $elm$http$Http$request(
		{fq: $elm$http$Http$emptyBody, dP: r.dP, fY: _List_Nil, gn: 'GET', hs: $elm$core$Maybe$Nothing, hv: $elm$core$Maybe$Nothing, e_: r.e_});
};
var $author$project$Helper$File$checkServer = $elm$http$Http$get(
	{
		dP: $elm$http$Http$expectString($author$project$Model$ServerIsAlive),
		e_: $author$project$Config$fileServer + '/hello'
	});
var $jinjor$elm_debounce$Debounce$Debounce = $elm$core$Basics$identity;
var $jinjor$elm_debounce$Debounce$init = {a4: _List_Nil, ax: false};
var $author$project$Umuli$CY = function (a) {
	return {$: 2, a: a};
};
var $author$project$Umuli$MD = function (a) {
	return {$: 1, a: a};
};
var $author$project$Umuli$ML = function (a) {
	return {$: 0, a: a};
};
var $author$project$Umuli$TT = function (a) {
	return {$: 3, a: a};
};
var $author$project$CaYaTeX$init = F2(
	function (generation, text) {
		return {cK: text, bR: generation};
	});
var $author$project$Markdown$Data$init = F2(
	function (version, content) {
		return {gZ: content};
	});
var $author$project$Internal$DifferSimple$EditRecord = F6(
	function (source, mpreamble, paragraphs, astList, idList, latexState) {
		return {bJ: astList, a3: idList, d6: latexState, c2: mpreamble, cq: paragraphs, gZ: source};
	});
var $elm$core$Dict$fromList = function (assocs) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (_v0, dict) {
				var key = _v0.a;
				var value = _v0.b;
				return A3($elm$core$Dict$insert, key, value, dict);
			}),
		$elm$core$Dict$empty,
		assocs);
};
var $author$project$Internal$LatexState$initialCounters = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('s1', 0),
			_Utils_Tuple2('s2', 0),
			_Utils_Tuple2('s3', 0),
			_Utils_Tuple2('tno', 0),
			_Utils_Tuple2('eqno', 0)
		]));
var $author$project$Internal$LatexState$emptyLatexState = {a$: $author$project$Internal$LatexState$initialCounters, dA: $elm$core$Dict$empty, dH: $elm$core$Dict$empty, d9: $elm$core$Dict$empty, gl: $elm$core$Dict$empty, eV: _List_Nil};
var $author$project$Internal$DifferSimple$emptyEditRecord = A6($author$project$Internal$DifferSimple$EditRecord, '', $elm$core$Maybe$Nothing, _List_Nil, _List_Nil, _List_Nil, $author$project$Internal$LatexState$emptyLatexState);
var $author$project$Internal$Parser$LXError = function (a) {
	return {$: 10, a: a};
};
var $author$project$Internal$Parser$LXString = function (a) {
	return {$: 0, a: a};
};
var $author$project$Internal$Parser$Environment = F3(
	function (a, b, c) {
		return {$: 7, a: a, b: b, c: c};
	});
var $author$project$Internal$Parser$ExpectingEndWord = function (a) {
	return {$: 35, a: a};
};
var $author$project$Internal$Parser$ExpectingEndWordInItemList = function (a) {
	return {$: 36, a: a};
};
var $author$project$Internal$Parser$LatexList = function (a) {
	return {$: 8, a: a};
};
var $author$project$Internal$Parser$SMacro = F4(
	function (a, b, c, d) {
		return {$: 5, a: a, b: b, c: c, d: d};
	});
var $elm$parser$Parser$Advanced$Token = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Bad = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$Good = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $elm$parser$Parser$Advanced$Parser = $elm$core$Basics$identity;
var $elm$parser$Parser$Advanced$andThen = F2(
	function (callback, _v0) {
		var parseA = _v0;
		return function (s0) {
			var _v1 = parseA(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				var _v2 = callback(a);
				var parseB = _v2;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3($elm$parser$Parser$Advanced$Good, p1 || p2, b, s2);
				}
			}
		};
	});
var $author$project$Internal$Parser$CArg = function (a) {
	return {$: 0, a: a};
};
var $author$project$Internal$Parser$ExpectingLeftBrace = {$: 11};
var $author$project$Internal$Parser$ExpectingRightBrace = {$: 12};
var $author$project$Internal$Parser$Macro = F3(
	function (a, b, c) {
		return {$: 6, a: a, b: b, c: c};
	});
var $elm$core$Basics$always = F2(
	function (a, _v0) {
		return a;
	});
var $elm$parser$Parser$Advanced$map2 = F3(
	function (func, _v0, _v1) {
		var parseA = _v0;
		var parseB = _v1;
		return function (s0) {
			var _v2 = parseA(s0);
			if (_v2.$ === 1) {
				var p = _v2.a;
				var x = _v2.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p1 = _v2.a;
				var a = _v2.b;
				var s1 = _v2.c;
				var _v3 = parseB(s1);
				if (_v3.$ === 1) {
					var p2 = _v3.a;
					var x = _v3.b;
					return A2($elm$parser$Parser$Advanced$Bad, p1 || p2, x);
				} else {
					var p2 = _v3.a;
					var b = _v3.b;
					var s2 = _v3.c;
					return A3(
						$elm$parser$Parser$Advanced$Good,
						p1 || p2,
						A2(func, a, b),
						s2);
				}
			}
		};
	});
var $elm$parser$Parser$Advanced$ignorer = F2(
	function (keepParser, ignoreParser) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$always, keepParser, ignoreParser);
	});
var $elm$parser$Parser$Advanced$Located = F3(
	function (row, col, context) {
		return {fC: col, e: context, gM: row};
	});
var $elm$parser$Parser$Advanced$changeContext = F2(
	function (newContext, s) {
		return {fC: s.fC, e: newContext, g: s.g, bZ: s.bZ, gM: s.gM, g2: s.g2};
	});
var $elm$parser$Parser$Advanced$inContext = F2(
	function (context, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(
				A2(
					$elm$parser$Parser$Advanced$changeContext,
					A2(
						$elm$core$List$cons,
						A3($elm$parser$Parser$Advanced$Located, s0.gM, s0.fC, context),
						s0.e),
					s0));
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					a,
					A2($elm$parser$Parser$Advanced$changeContext, s0.e, s1));
			} else {
				var step = _v1;
				return step;
			}
		};
	});
var $author$project$Internal$Parser$ExpectingEndForInlineMath = {$: 0};
var $author$project$Internal$Parser$ExpectingLeadingDollarSign = {$: 23};
var $author$project$Internal$Parser$InlineMath = function (a) {
	return {$: 3, a: a};
};
var $elm$parser$Parser$Advanced$keeper = F2(
	function (parseFunc, parseArg) {
		return A3($elm$parser$Parser$Advanced$map2, $elm$core$Basics$apL, parseFunc, parseArg);
	});
var $elm$parser$Parser$Advanced$chompUntilEndOr = function (str) {
	return function (s) {
		var _v0 = A5(_Parser_findSubString, str, s.bZ, s.gM, s.fC, s.g2);
		var newOffset = _v0.a;
		var newRow = _v0.b;
		var newCol = _v0.c;
		var adjustedOffset = (newOffset < 0) ? $elm$core$String$length(s.g2) : newOffset;
		return A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.bZ, adjustedOffset) < 0,
			0,
			{fC: newCol, e: s.e, g: s.g, bZ: adjustedOffset, gM: newRow, g2: s.g2});
	};
};
var $elm$core$Basics$negate = function (n) {
	return -n;
};
var $elm$core$String$dropRight = F2(
	function (n, string) {
		return (n < 1) ? string : A3($elm$core$String$slice, 0, -n, string);
	});
var $elm$parser$Parser$Advanced$mapChompedString = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (_v1.$ === 1) {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			} else {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					A2(
						func,
						A3($elm$core$String$slice, s0.bZ, s1.bZ, s0.g2),
						a),
					s1);
			}
		};
	});
var $elm$parser$Parser$Advanced$getChompedString = function (parser) {
	return A2($elm$parser$Parser$Advanced$mapChompedString, $elm$core$Basics$always, parser);
};
var $elm$parser$Parser$Advanced$map = F2(
	function (func, _v0) {
		var parse = _v0;
		return function (s0) {
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p = _v1.a;
				var a = _v1.b;
				var s1 = _v1.c;
				return A3(
					$elm$parser$Parser$Advanced$Good,
					p,
					func(a),
					s1);
			} else {
				var p = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p, x);
			}
		};
	});
var $elm$parser$Parser$Advanced$succeed = function (a) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$Good, false, a, s);
	};
};
var $elm$parser$Parser$Advanced$AddRight = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$DeadEnd = F4(
	function (row, col, problem, contextStack) {
		return {fC: col, fF: contextStack, es: problem, gM: row};
	});
var $elm$parser$Parser$Advanced$Empty = {$: 0};
var $elm$parser$Parser$Advanced$fromState = F2(
	function (s, x) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, s.gM, s.fC, x, s.e));
	});
var $elm$parser$Parser$Advanced$isSubString = _Parser_isSubString;
var $elm$core$Basics$not = _Basics_not;
var $elm$parser$Parser$Advanced$token = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(str);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, str, s.bZ, s.gM, s.fC, s.g2);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{fC: newCol, e: s.e, g: s.g, bZ: newOffset, gM: newRow, g2: s.g2});
	};
};
var $elm$parser$Parser$Advanced$symbol = $elm$parser$Parser$Advanced$token;
var $author$project$Internal$Parser$parseToSymbol = F2(
	function (problem, marker) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			$elm$core$String$dropRight(
				$elm$core$String$length(marker)),
			$elm$parser$Parser$Advanced$getChompedString(
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$chompUntilEndOr(marker),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, marker, problem))))));
	});
var $author$project$Internal$Parser$inlineMath = function (wsParser) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($author$project$Internal$Parser$InlineMath),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '$', $author$project$Internal$Parser$ExpectingLeadingDollarSign))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2($author$project$Internal$Parser$parseToSymbol, $author$project$Internal$Parser$ExpectingEndForInlineMath, '$'),
			wsParser));
};
var $elm$parser$Parser$Advanced$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Advanced$Loop = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$Advanced$Append = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $elm$parser$Parser$Advanced$oneOfHelp = F3(
	function (s0, bag, parsers) {
		oneOfHelp:
		while (true) {
			if (!parsers.b) {
				return A2($elm$parser$Parser$Advanced$Bad, false, bag);
			} else {
				var parse = parsers.a;
				var remainingParsers = parsers.b;
				var _v1 = parse(s0);
				if (!_v1.$) {
					var step = _v1;
					return step;
				} else {
					var step = _v1;
					var p = step.a;
					var x = step.b;
					if (p) {
						return step;
					} else {
						var $temp$s0 = s0,
							$temp$bag = A2($elm$parser$Parser$Advanced$Append, bag, x),
							$temp$parsers = remainingParsers;
						s0 = $temp$s0;
						bag = $temp$bag;
						parsers = $temp$parsers;
						continue oneOfHelp;
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$oneOf = function (parsers) {
	return function (s) {
		return A3($elm$parser$Parser$Advanced$oneOfHelp, s, $elm$parser$Parser$Advanced$Empty, parsers);
	};
};
var $author$project$Internal$Parser$itemListHelper = F2(
	function (itemParser, revItems) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (item_) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, item_, revItems));
						}),
					itemParser),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(revItems));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $elm$parser$Parser$Advanced$loopHelp = F4(
	function (p, state, callback, s0) {
		loopHelp:
		while (true) {
			var _v0 = callback(state);
			var parse = _v0;
			var _v1 = parse(s0);
			if (!_v1.$) {
				var p1 = _v1.a;
				var step = _v1.b;
				var s1 = _v1.c;
				if (!step.$) {
					var newState = step.a;
					var $temp$p = p || p1,
						$temp$state = newState,
						$temp$callback = callback,
						$temp$s0 = s1;
					p = $temp$p;
					state = $temp$state;
					callback = $temp$callback;
					s0 = $temp$s0;
					continue loopHelp;
				} else {
					var result = step.a;
					return A3($elm$parser$Parser$Advanced$Good, p || p1, result, s1);
				}
			} else {
				var p1 = _v1.a;
				var x = _v1.b;
				return A2($elm$parser$Parser$Advanced$Bad, p || p1, x);
			}
		}
	});
var $elm$parser$Parser$Advanced$loop = F2(
	function (state, callback) {
		return function (s) {
			return A4($elm$parser$Parser$Advanced$loopHelp, false, state, callback, s);
		};
	});
var $author$project$Internal$Parser$itemList_ = F2(
	function (initialList, itemParser) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			initialList,
			$author$project$Internal$Parser$itemListHelper(itemParser));
	});
var $author$project$Internal$Parser$itemList = function (itemParser) {
	return A2($author$project$Internal$Parser$itemList_, _List_Nil, itemParser);
};
var $elm$parser$Parser$Advanced$lazy = function (thunk) {
	return function (s) {
		var _v0 = thunk(0);
		var parse = _v0;
		return parse(s);
	};
};
var $author$project$Internal$Parser$ExpectingValidMacroArgWord = {$: 9};
var $author$project$Internal$Parser$inMacroArg = function (c) {
	return !((c === '\\') || ((c === '$') || ((c === '}') || ((c === ' ') || (c === '\n')))));
};
var $author$project$Internal$Parser$nonEmptyItemList = function (itemParser) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (x) {
			return A2(
				$author$project$Internal$Parser$itemList_,
				_List_fromArray(
					[x]),
				itemParser);
		},
		itemParser);
};
var $elm$parser$Parser$Advanced$isSubChar = _Parser_isSubChar;
var $elm$parser$Parser$Advanced$chompIf = F2(
	function (isGood, expecting) {
		return function (s) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, s.bZ, s.g2);
			return _Utils_eq(newOffset, -1) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : (_Utils_eq(newOffset, -2) ? A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{fC: 1, e: s.e, g: s.g, bZ: s.bZ + 1, gM: s.gM + 1, g2: s.g2}) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				0,
				{fC: s.fC + 1, e: s.e, g: s.g, bZ: newOffset, gM: s.gM, g2: s.g2}));
		};
	});
var $elm$parser$Parser$Advanced$chompWhileHelp = F5(
	function (isGood, offset, row, col, s0) {
		chompWhileHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, s0.g2);
			if (_Utils_eq(newOffset, -1)) {
				return A3(
					$elm$parser$Parser$Advanced$Good,
					_Utils_cmp(s0.bZ, offset) < 0,
					0,
					{fC: col, e: s0.e, g: s0.g, bZ: offset, gM: row, g2: s0.g2});
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$s0 = s0;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					s0 = $temp$s0;
					continue chompWhileHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$chompWhile = function (isGood) {
	return function (s) {
		return A5($elm$parser$Parser$Advanced$chompWhileHelp, isGood, s.bZ, s.gM, s.fC, s);
	};
};
var $elm$parser$Parser$Advanced$getOffset = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.bZ, s);
};
var $elm$parser$Parser$Advanced$getSource = function (s) {
	return A3($elm$parser$Parser$Advanced$Good, false, s.g2, s);
};
var $author$project$Internal$Parser$ws = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return (c === ' ') || (c === '\n');
	});
var $author$project$Internal$Parser$word = F2(
	function (problem, inWord) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
						$author$project$Internal$Parser$ws),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$getOffset,
								A2($elm$parser$Parser$Advanced$chompIf, inWord, problem)),
							$elm$parser$Parser$Advanced$chompWhile(inWord)),
						$author$project$Internal$Parser$ws)),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$Internal$Parser$macroArgWords = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Internal$Parser$LXString,
	A2(
		$elm$parser$Parser$Advanced$map,
		$elm$core$String$join(' '),
		$author$project$Internal$Parser$nonEmptyItemList(
			A2($author$project$Internal$Parser$word, $author$project$Internal$Parser$ExpectingValidMacroArgWord, $author$project$Internal$Parser$inMacroArg))));
var $author$project$Internal$Parser$ExpectingMacroReservedWord = {$: 19};
var $elm$core$Set$Set_elm_builtin = $elm$core$Basics$identity;
var $elm$core$Set$empty = $elm$core$Dict$empty;
var $elm$core$Set$insert = F2(
	function (key, _v0) {
		var dict = _v0;
		return A3($elm$core$Dict$insert, key, 0, dict);
	});
var $elm$core$Set$fromList = function (list) {
	return A3($elm$core$List$foldl, $elm$core$Set$insert, $elm$core$Set$empty, list);
};
var $elm$core$Dict$member = F2(
	function (key, dict) {
		var _v0 = A2($elm$core$Dict$get, key, dict);
		if (!_v0.$) {
			return true;
		} else {
			return false;
		}
	});
var $elm$core$Set$member = F2(
	function (key, _v0) {
		var dict = _v0;
		return A2($elm$core$Dict$member, key, dict);
	});
var $elm$parser$Parser$Advanced$varHelp = F7(
	function (isGood, offset, row, col, src, indent, context) {
		varHelp:
		while (true) {
			var newOffset = A3($elm$parser$Parser$Advanced$isSubChar, isGood, offset, src);
			if (_Utils_eq(newOffset, -1)) {
				return {fC: col, e: context, g: indent, bZ: offset, gM: row, g2: src};
			} else {
				if (_Utils_eq(newOffset, -2)) {
					var $temp$isGood = isGood,
						$temp$offset = offset + 1,
						$temp$row = row + 1,
						$temp$col = 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				} else {
					var $temp$isGood = isGood,
						$temp$offset = newOffset,
						$temp$row = row,
						$temp$col = col + 1,
						$temp$src = src,
						$temp$indent = indent,
						$temp$context = context;
					isGood = $temp$isGood;
					offset = $temp$offset;
					row = $temp$row;
					col = $temp$col;
					src = $temp$src;
					indent = $temp$indent;
					context = $temp$context;
					continue varHelp;
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$variable = function (i) {
	return function (s) {
		var firstOffset = A3($elm$parser$Parser$Advanced$isSubChar, i.g3, s.bZ, s.g2);
		if (_Utils_eq(firstOffset, -1)) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, i.fO));
		} else {
			var s1 = _Utils_eq(firstOffset, -2) ? A7($elm$parser$Parser$Advanced$varHelp, i.f8, s.bZ + 1, s.gM + 1, 1, s.g2, s.g, s.e) : A7($elm$parser$Parser$Advanced$varHelp, i.f8, firstOffset, s.gM, s.fC + 1, s.g2, s.g, s.e);
			var name = A3($elm$core$String$slice, s.bZ, s1.bZ, s.g2);
			return A2($elm$core$Set$member, name, i.gJ) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				false,
				A2($elm$parser$Parser$Advanced$fromState, s, i.fO)) : A3($elm$parser$Parser$Advanced$Good, true, name, s1);
		}
	};
};
var $author$project$Internal$Parser$macroName = A2(
	$elm$parser$Parser$Advanced$map,
	$elm$core$String$dropLeft(1),
	$elm$parser$Parser$Advanced$variable(
		{
			fO: $author$project$Internal$Parser$ExpectingMacroReservedWord,
			f8: function (c) {
				return $elm$core$Char$isAlphaNum(c) || (c === '*');
			},
			gJ: $elm$core$Set$fromList(
				_List_fromArray(
					['\\begin', '\\end', '\\item', '\\bibitem'])),
			g3: function (c) {
				return c === '\\';
			}
		}));
var $author$project$Internal$Parser$ExpectingLeftBracket = {$: 13};
var $author$project$Internal$Parser$ExpectingRightBracket = {$: 14};
var $author$project$Internal$Parser$ExpectingValidOptionArgWord = {$: 8};
var $author$project$Internal$Parser$inOptionArgWord = function (c) {
	return !((c === '\\') || ((c === '$') || ((c === ']') || ((c === ' ') || (c === '\n')))));
};
var $author$project$Internal$Parser$optionArgWords = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Internal$Parser$LXString,
	A2(
		$elm$parser$Parser$Advanced$map,
		$elm$core$String$join(' '),
		$author$project$Internal$Parser$nonEmptyItemList(
			A2($author$project$Internal$Parser$word, $author$project$Internal$Parser$ExpectingValidOptionArgWord, $author$project$Internal$Parser$inOptionArgWord))));
var $author$project$Internal$Parser$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return c === ' ';
	});
var $author$project$Internal$Parser$optionalArg = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Internal$Parser$LatexList,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '[', $author$project$Internal$Parser$ExpectingLeftBracket))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$Internal$Parser$itemList(
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$author$project$Internal$Parser$optionArgWords,
							$author$project$Internal$Parser$inlineMath($author$project$Internal$Parser$spaces)
						]))),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, ']', $author$project$Internal$Parser$ExpectingRightBracket)))));
var $author$project$Internal$Parser$macro = function (wsParser) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($author$project$Internal$Parser$Macro),
				$author$project$Internal$Parser$macroName),
			$author$project$Internal$Parser$itemList($author$project$Internal$Parser$optionalArg)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$Internal$Parser$itemList(
				$author$project$Internal$Parser$cyclic$arg()),
			wsParser));
};
function $author$project$Internal$Parser$cyclic$arg() {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		$author$project$Internal$Parser$CArg('arg'),
		A2(
			$elm$parser$Parser$Advanced$map,
			$author$project$Internal$Parser$LatexList,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '{', $author$project$Internal$Parser$ExpectingLeftBrace))),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$author$project$Internal$Parser$itemList(
						$elm$parser$Parser$Advanced$oneOf(
							_List_fromArray(
								[
									$author$project$Internal$Parser$macroArgWords,
									$author$project$Internal$Parser$inlineMath($author$project$Internal$Parser$spaces),
									$elm$parser$Parser$Advanced$lazy(
									function (_v0) {
										return $author$project$Internal$Parser$macro($author$project$Internal$Parser$spaces);
									})
								]))),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '}', $author$project$Internal$Parser$ExpectingRightBrace))))));
}
var $author$project$Internal$Parser$arg = $author$project$Internal$Parser$cyclic$arg();
$author$project$Internal$Parser$cyclic$arg = function () {
	return $author$project$Internal$Parser$arg;
};
var $author$project$Internal$Parser$DisplayMath = function (a) {
	return {$: 4, a: a};
};
var $author$project$Internal$Parser$ExpectingBeginDisplayMathModeBracket = {$: 4};
var $author$project$Internal$Parser$ExpectingEndDisplayMathModeBracket = {$: 5};
var $author$project$Internal$Parser$displayMathBrackets = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($author$project$Internal$Parser$DisplayMath),
			$author$project$Internal$Parser$spaces),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '\\[', $author$project$Internal$Parser$ExpectingBeginDisplayMathModeBracket))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($author$project$Internal$Parser$parseToSymbol, $author$project$Internal$Parser$ExpectingEndDisplayMathModeBracket, '\\]'),
		$author$project$Internal$Parser$ws));
var $author$project$Internal$Parser$ExpectingBeginDisplayMathModeDollarSign = {$: 2};
var $author$project$Internal$Parser$ExpectingEndDisplayMathModeDollarSign = {$: 3};
var $author$project$Internal$Parser$displayMathDollar = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($author$project$Internal$Parser$DisplayMath),
			$author$project$Internal$Parser$spaces),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '$$', $author$project$Internal$Parser$ExpectingBeginDisplayMathModeDollarSign))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($author$project$Internal$Parser$parseToSymbol, $author$project$Internal$Parser$ExpectingEndDisplayMathModeDollarSign, '$$'),
		$author$project$Internal$Parser$ws));
var $author$project$Internal$Parser$EnvName = {$: 1};
var $author$project$Internal$Parser$ExpectingEndOfEnvironmentName = {$: 1};
var $author$project$Internal$Parser$ExpectingEnvironmentNameBegin = {$: 24};
var $author$project$Internal$Parser$envName = A2(
	$elm$parser$Parser$Advanced$inContext,
	$author$project$Internal$Parser$EnvName,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$author$project$Internal$Parser$spaces),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '\\begin{', $author$project$Internal$Parser$ExpectingEnvironmentNameBegin))),
		A2($author$project$Internal$Parser$parseToSymbol, $author$project$Internal$Parser$ExpectingEndOfEnvironmentName, '}')));
var $author$project$Internal$Parser$ExpectingEscapedItem = {$: 30};
var $author$project$Internal$Parser$ExpectingSpaceAfterItem = {$: 31};
var $author$project$Internal$Parser$Item = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Internal$Parser$ExpectingWords = {$: 10};
var $author$project$Internal$Parser$ExpectingDoubleNewline = {$: 29};
var $author$project$Internal$Parser$blank = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$Internal$Parser$LXString('\n\n');
	},
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '\n\n', $author$project$Internal$Parser$ExpectingDoubleNewline)));
var $author$project$Internal$Parser$notSpaceOrSpecialCharacters = function (c) {
	return !((c === ' ') || ((c === '\n') || ((c === '\\') || (c === '$'))));
};
var $author$project$Internal$Parser$words_ = function (problem) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Internal$Parser$LXString,
		A2(
			$elm$parser$Parser$Advanced$map,
			$elm$core$String$join(' '),
			$author$project$Internal$Parser$nonEmptyItemList(
				A2($author$project$Internal$Parser$word, problem, $author$project$Internal$Parser$notSpaceOrSpecialCharacters))));
};
var $author$project$Internal$Parser$words = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$author$project$Internal$Parser$blank,
			A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$author$project$Internal$Parser$ws),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$Internal$Parser$words_($author$project$Internal$Parser$ExpectingWords),
				$author$project$Internal$Parser$ws))
		]));
var $author$project$Internal$Parser$item = A2(
	$elm$parser$Parser$Advanced$map,
	function (x) {
		return A2(
			$author$project$Internal$Parser$Item,
			1,
			$author$project$Internal$Parser$LatexList(x));
	},
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$author$project$Internal$Parser$spaces),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '\\item', $author$project$Internal$Parser$ExpectingEscapedItem))),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, ' ', $author$project$Internal$Parser$ExpectingSpaceAfterItem))),
			$author$project$Internal$Parser$spaces),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$Internal$Parser$itemList(
				$elm$parser$Parser$Advanced$oneOf(
					_List_fromArray(
						[
							$author$project$Internal$Parser$words,
							$author$project$Internal$Parser$inlineMath($author$project$Internal$Parser$ws),
							$author$project$Internal$Parser$macro($author$project$Internal$Parser$ws)
						]))),
			$author$project$Internal$Parser$ws)));
var $elm$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			if (!list.b) {
				return false;
			} else {
				var x = list.a;
				var xs = list.b;
				if (isOkay(x)) {
					return true;
				} else {
					var $temp$isOkay = isOkay,
						$temp$list = xs;
					isOkay = $temp$isOkay;
					list = $temp$list;
					continue any;
				}
			}
		}
	});
var $elm$core$List$member = F2(
	function (x, xs) {
		return A2(
			$elm$core$List$any,
			function (a) {
				return _Utils_eq(a, x);
			},
			xs);
	});
var $author$project$Internal$Parser$ExpectingEscapedNewcommandAndBrace = {$: 34};
var $author$project$Internal$Parser$NewCommand = F3(
	function (a, b, c) {
		return {$: 9, a: a, b: b, c: c};
	});
var $elm$core$List$head = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(x);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Internal$Parser$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (v) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					A2($elm$parser$Parser$Advanced$ignorer, p, $author$project$Internal$Parser$spaces)),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $author$project$Internal$Parser$many = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$author$project$Internal$Parser$manyHelp(p));
};
var $author$project$Internal$Parser$ExpectingInt = {$: 21};
var $author$project$Internal$Parser$InvalidInt = {$: 22};
var $elm$parser$Parser$Advanced$consumeBase = _Parser_consumeBase;
var $elm$parser$Parser$Advanced$consumeBase16 = _Parser_consumeBase16;
var $elm$parser$Parser$Advanced$bumpOffset = F2(
	function (newOffset, s) {
		return {fC: s.fC + (newOffset - s.bZ), e: s.e, g: s.g, bZ: newOffset, gM: s.gM, g2: s.g2};
	});
var $elm$parser$Parser$Advanced$chompBase10 = _Parser_chompBase10;
var $elm$parser$Parser$Advanced$isAsciiCode = _Parser_isAsciiCode;
var $elm$parser$Parser$Advanced$consumeExp = F2(
	function (offset, src) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 101, offset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 69, offset, src)) {
			var eOffset = offset + 1;
			var expOffset = (A3($elm$parser$Parser$Advanced$isAsciiCode, 43, eOffset, src) || A3($elm$parser$Parser$Advanced$isAsciiCode, 45, eOffset, src)) ? (eOffset + 1) : eOffset;
			var newOffset = A2($elm$parser$Parser$Advanced$chompBase10, expOffset, src);
			return _Utils_eq(expOffset, newOffset) ? (-newOffset) : newOffset;
		} else {
			return offset;
		}
	});
var $elm$parser$Parser$Advanced$consumeDotAndExp = F2(
	function (offset, src) {
		return A3($elm$parser$Parser$Advanced$isAsciiCode, 46, offset, src) ? A2(
			$elm$parser$Parser$Advanced$consumeExp,
			A2($elm$parser$Parser$Advanced$chompBase10, offset + 1, src),
			src) : A2($elm$parser$Parser$Advanced$consumeExp, offset, src);
	});
var $elm$parser$Parser$Advanced$finalizeInt = F5(
	function (invalid, handler, startOffset, _v0, s) {
		var endOffset = _v0.a;
		var n = _v0.b;
		if (handler.$ === 1) {
			var x = handler.a;
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A2($elm$parser$Parser$Advanced$fromState, s, x));
		} else {
			var toValue = handler.a;
			return _Utils_eq(startOffset, endOffset) ? A2(
				$elm$parser$Parser$Advanced$Bad,
				_Utils_cmp(s.bZ, startOffset) < 0,
				A2($elm$parser$Parser$Advanced$fromState, s, invalid)) : A3(
				$elm$parser$Parser$Advanced$Good,
				true,
				toValue(n),
				A2($elm$parser$Parser$Advanced$bumpOffset, endOffset, s));
		}
	});
var $elm$parser$Parser$Advanced$fromInfo = F4(
	function (row, col, x, context) {
		return A2(
			$elm$parser$Parser$Advanced$AddRight,
			$elm$parser$Parser$Advanced$Empty,
			A4($elm$parser$Parser$Advanced$DeadEnd, row, col, x, context));
	});
var $elm$core$String$toFloat = _String_toFloat;
var $elm$parser$Parser$Advanced$finalizeFloat = F6(
	function (invalid, expecting, intSettings, floatSettings, intPair, s) {
		var intOffset = intPair.a;
		var floatOffset = A2($elm$parser$Parser$Advanced$consumeDotAndExp, intOffset, s.g2);
		if (floatOffset < 0) {
			return A2(
				$elm$parser$Parser$Advanced$Bad,
				true,
				A4($elm$parser$Parser$Advanced$fromInfo, s.gM, s.fC - (floatOffset + s.bZ), invalid, s.e));
		} else {
			if (_Utils_eq(s.bZ, floatOffset)) {
				return A2(
					$elm$parser$Parser$Advanced$Bad,
					false,
					A2($elm$parser$Parser$Advanced$fromState, s, expecting));
			} else {
				if (_Utils_eq(intOffset, floatOffset)) {
					return A5($elm$parser$Parser$Advanced$finalizeInt, invalid, intSettings, s.bZ, intPair, s);
				} else {
					if (floatSettings.$ === 1) {
						var x = floatSettings.a;
						return A2(
							$elm$parser$Parser$Advanced$Bad,
							true,
							A2($elm$parser$Parser$Advanced$fromState, s, invalid));
					} else {
						var toValue = floatSettings.a;
						var _v1 = $elm$core$String$toFloat(
							A3($elm$core$String$slice, s.bZ, floatOffset, s.g2));
						if (_v1.$ === 1) {
							return A2(
								$elm$parser$Parser$Advanced$Bad,
								true,
								A2($elm$parser$Parser$Advanced$fromState, s, invalid));
						} else {
							var n = _v1.a;
							return A3(
								$elm$parser$Parser$Advanced$Good,
								true,
								toValue(n),
								A2($elm$parser$Parser$Advanced$bumpOffset, floatOffset, s));
						}
					}
				}
			}
		}
	});
var $elm$parser$Parser$Advanced$number = function (c) {
	return function (s) {
		if (A3($elm$parser$Parser$Advanced$isAsciiCode, 48, s.bZ, s.g2)) {
			var zeroOffset = s.bZ + 1;
			var baseOffset = zeroOffset + 1;
			return A3($elm$parser$Parser$Advanced$isAsciiCode, 120, zeroOffset, s.g2) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.ge,
				c.dX,
				baseOffset,
				A2($elm$parser$Parser$Advanced$consumeBase16, baseOffset, s.g2),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 111, zeroOffset, s.g2) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.ge,
				c.ej,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 8, baseOffset, s.g2),
				s) : (A3($elm$parser$Parser$Advanced$isAsciiCode, 98, zeroOffset, s.g2) ? A5(
				$elm$parser$Parser$Advanced$finalizeInt,
				c.ge,
				c.dp,
				baseOffset,
				A3($elm$parser$Parser$Advanced$consumeBase, 2, baseOffset, s.g2),
				s) : A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.ge,
				c.fO,
				c.d1,
				c.fR,
				_Utils_Tuple2(zeroOffset, 0),
				s)));
		} else {
			return A6(
				$elm$parser$Parser$Advanced$finalizeFloat,
				c.ge,
				c.fO,
				c.d1,
				c.fR,
				A3($elm$parser$Parser$Advanced$consumeBase, 10, s.bZ, s.g2),
				s);
		}
	};
};
var $elm$parser$Parser$Advanced$int = F2(
	function (expecting, invalid) {
		return $elm$parser$Parser$Advanced$number(
			{
				dp: $elm$core$Result$Err(invalid),
				fO: expecting,
				fR: $elm$core$Result$Err(invalid),
				dX: $elm$core$Result$Err(invalid),
				d1: $elm$core$Result$Ok($elm$core$Basics$identity),
				ge: invalid,
				ej: $elm$core$Result$Err(invalid)
			});
	});
var $author$project$Internal$Parser$numberOfArgs_ = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '[', $author$project$Internal$Parser$ExpectingLeftBracket))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($elm$parser$Parser$Advanced$int, $author$project$Internal$Parser$ExpectingInt, $author$project$Internal$Parser$InvalidInt),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, ']', $author$project$Internal$Parser$ExpectingRightBracket))));
var $elm$core$Maybe$withDefault = F2(
	function (_default, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return value;
		} else {
			return _default;
		}
	});
var $author$project$Internal$Parser$numberOfArgs = A2(
	$elm$parser$Parser$Advanced$map,
	$elm$core$Maybe$withDefault(0),
	A2(
		$elm$parser$Parser$Advanced$map,
		$elm$core$List$head,
		$author$project$Internal$Parser$many($author$project$Internal$Parser$numberOfArgs_)));
var $author$project$Internal$Parser$newcommand = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($author$project$Internal$Parser$NewCommand),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '\\newcommand{', $author$project$Internal$Parser$ExpectingEscapedNewcommandAndBrace))),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$Internal$Parser$macroName,
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '}', $author$project$Internal$Parser$ExpectingRightBrace)))),
		$author$project$Internal$Parser$numberOfArgs),
	A2($elm$parser$Parser$Advanced$ignorer, $author$project$Internal$Parser$arg, $author$project$Internal$Parser$ws));
var $author$project$Internal$Parser$ExpectingEndForPassThroughBody = {$: 6};
var $elm$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (n <= 0) {
				return list;
			} else {
				if (!list.b) {
					return list;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs;
					n = $temp$n;
					list = $temp$list;
					continue drop;
				}
			}
		}
	});
var $elm$core$List$filter = F2(
	function (isGood, list) {
		return A3(
			$elm$core$List$foldr,
			F2(
				function (x, xs) {
					return isGood(x) ? A2($elm$core$List$cons, x, xs) : xs;
				}),
			_List_Nil,
			list);
	});
var $elm$core$String$lines = _String_lines;
var $elm$parser$Parser$Advanced$bagToList = F2(
	function (bag, list) {
		bagToList:
		while (true) {
			switch (bag.$) {
				case 0:
					return list;
				case 1:
					var bag1 = bag.a;
					var x = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$core$List$cons, x, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
				default:
					var bag1 = bag.a;
					var bag2 = bag.b;
					var $temp$bag = bag1,
						$temp$list = A2($elm$parser$Parser$Advanced$bagToList, bag2, list);
					bag = $temp$bag;
					list = $temp$list;
					continue bagToList;
			}
		}
	});
var $elm$parser$Parser$Advanced$run = F2(
	function (_v0, src) {
		var parse = _v0;
		var _v1 = parse(
			{fC: 1, e: _List_Nil, g: 1, bZ: 0, gM: 1, g2: src});
		if (!_v1.$) {
			var value = _v1.b;
			return $elm$core$Result$Ok(value);
		} else {
			var bag = _v1.b;
			return $elm$core$Result$Err(
				A2($elm$parser$Parser$Advanced$bagToList, bag, _List_Nil));
		}
	});
var $author$project$Internal$Parser$runParser = F2(
	function (p, str) {
		var expr = A2($elm$parser$Parser$Advanced$run, p, str);
		if (!expr.$) {
			var latexExpr = expr.a;
			return latexExpr;
		} else {
			var error = expr.a;
			return _List_fromArray(
				[
					$author$project$Internal$Parser$LXError(error)
				]);
		}
	});
var $elm$core$String$trim = _String_trim;
var $author$project$Internal$Parser$passThroughEnv = F2(
	function (envType, source) {
		var lines = A2(
			$elm$core$List$filter,
			function (l) {
				return $elm$core$String$length(l) > 0;
			},
			$elm$core$String$lines(
				$elm$core$String$trim(source)));
		var optArgs_ = A2(
			$author$project$Internal$Parser$runParser,
			$author$project$Internal$Parser$itemList($author$project$Internal$Parser$optionalArg),
			A2(
				$elm$core$Maybe$withDefault,
				'',
				$elm$core$List$head(lines)));
		var body = _Utils_eq(optArgs_, _List_Nil) ? A2($elm$core$String$join, '\n', lines) : A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$drop, 1, lines));
		return A3(
			$author$project$Internal$Parser$Environment,
			envType,
			optArgs_,
			$author$project$Internal$Parser$LXString(body));
	});
var $author$project$Internal$Parser$passThroughBody = F2(
	function (endWoord, envType) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			$author$project$Internal$Parser$passThroughEnv(envType),
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2($author$project$Internal$Parser$parseToSymbol, $author$project$Internal$Parser$ExpectingEndForPassThroughBody, endWoord),
					$author$project$Internal$Parser$ws)));
	});
var $author$project$Internal$Parser$ExpectingmSMacroReservedWord = {$: 20};
var $author$project$Internal$Parser$smacroName = A2(
	$elm$parser$Parser$Advanced$map,
	$elm$core$String$dropLeft(1),
	$elm$parser$Parser$Advanced$variable(
		{
			fO: $author$project$Internal$Parser$ExpectingmSMacroReservedWord,
			f8: function (c) {
				return $elm$core$Char$isAlphaNum(c);
			},
			gJ: $elm$core$Set$fromList(
				_List_fromArray(
					['\\begin', '\\end', '\\item'])),
			g3: function (c) {
				return c === '\\';
			}
		}));
var $author$project$Internal$Parser$ExpectingDoubleEscapeAndNewline = {$: 33};
var $author$project$Internal$Parser$ExpectingNewline = {$: 17};
var $author$project$Internal$Parser$ExpectingValidTableCell = {$: 7};
var $author$project$Internal$Parser$inTableCellWord = function (c) {
	return !((c === ' ') || ((c === '\n') || ((c === '\\') || ((c === '$') || (c === '&')))));
};
var $author$project$Internal$Parser$tableCellWords = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Internal$Parser$LXString,
	A2(
		$elm$parser$Parser$Advanced$map,
		$elm$core$String$trim,
		A2(
			$elm$parser$Parser$Advanced$map,
			$elm$core$String$join(' '),
			$author$project$Internal$Parser$nonEmptyItemList(
				A2($author$project$Internal$Parser$word, $author$project$Internal$Parser$ExpectingValidTableCell, $author$project$Internal$Parser$inTableCellWord)))));
var $author$project$Internal$Parser$tableCell = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
	$elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Internal$Parser$displayMathBrackets,
				$author$project$Internal$Parser$macro($author$project$Internal$Parser$ws),
				$author$project$Internal$Parser$displayMathDollar,
				$author$project$Internal$Parser$inlineMath($author$project$Internal$Parser$ws),
				$author$project$Internal$Parser$tableCellWords
			])));
var $author$project$Internal$Parser$ExpectingAmpersand = {$: 32};
var $author$project$Internal$Parser$nextCell = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '&', $author$project$Internal$Parser$ExpectingAmpersand))),
		$author$project$Internal$Parser$spaces),
	$author$project$Internal$Parser$tableCell);
var $author$project$Internal$Parser$tableCellHelp = function (revCells) {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$Advanced$andThen,
				function (c) {
					return $author$project$Internal$Parser$tableCellHelp(
						A2($elm$core$List$cons, c, revCells));
				},
				$author$project$Internal$Parser$nextCell),
				$elm$parser$Parser$Advanced$succeed(
				$elm$core$List$reverse(revCells))
			]));
};
var $author$project$Internal$Parser$tableRow = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Internal$Parser$LatexList,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$author$project$Internal$Parser$spaces),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$andThen,
					function (c) {
						return $author$project$Internal$Parser$tableCellHelp(
							_List_fromArray(
								[c]));
					},
					$author$project$Internal$Parser$tableCell),
				$author$project$Internal$Parser$spaces),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '\n', $author$project$Internal$Parser$ExpectingNewline)),
						$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '\\\\\n', $author$project$Internal$Parser$ExpectingDoubleEscapeAndNewline))
					])))));
var $author$project$Internal$Parser$tableBody = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Internal$Parser$LatexList,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$author$project$Internal$Parser$ws),
		$author$project$Internal$Parser$nonEmptyItemList($author$project$Internal$Parser$tableRow)));
var $author$project$Internal$Parser$tabularEnvironmentBody = F2(
	function (endWoord, envType) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$author$project$Internal$Parser$Environment(envType)),
					$author$project$Internal$Parser$ws),
				$author$project$Internal$Parser$itemList($author$project$Internal$Parser$arg)),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2($elm$parser$Parser$Advanced$ignorer, $author$project$Internal$Parser$tableBody, $author$project$Internal$Parser$ws),
					$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							endWoord,
							$author$project$Internal$Parser$ExpectingEndWord(endWoord)))),
				$author$project$Internal$Parser$ws));
	});
var $author$project$Internal$Parser$Comment = function (a) {
	return {$: 1, a: a};
};
var $author$project$Internal$Parser$ExpectingPercent = {$: 18};
var $elm$core$Basics$neq = _Utils_notEqual;
var $author$project$Internal$Parser$texComment = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Internal$Parser$Comment,
	$elm$parser$Parser$Advanced$getChompedString(
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(0),
						A2(
							$elm$parser$Parser$Advanced$chompIf,
							function (c) {
								return c === '%';
							},
							$author$project$Internal$Parser$ExpectingPercent)),
					$elm$parser$Parser$Advanced$chompWhile(
						function (c) {
							return c !== '\n';
						})),
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					function (c) {
						return c === '\n';
					},
					$author$project$Internal$Parser$ExpectingNewline)),
			$author$project$Internal$Parser$ws)));
var $author$project$Internal$Parser$biblioEnvironmentBody = F2(
	function (endWoord, envType) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			A2($author$project$Internal$Parser$Environment, envType, _List_Nil),
			A2(
				$elm$parser$Parser$Advanced$map,
				$author$project$Internal$Parser$LatexList,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$author$project$Internal$Parser$ws),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$author$project$Internal$Parser$itemList(
									$author$project$Internal$Parser$cyclic$smacro()),
								$author$project$Internal$Parser$ws),
							$elm$parser$Parser$Advanced$symbol(
								A2(
									$elm$parser$Parser$Advanced$Token,
									endWoord,
									$author$project$Internal$Parser$ExpectingEndWord(endWoord)))),
						$author$project$Internal$Parser$ws))));
	});
var $author$project$Internal$Parser$environmentOfType = function (envType) {
	var theEndWord = '\\end{' + (envType + '}');
	var katex = _List_fromArray(
		['align', 'matrix', 'pmatrix', 'bmatrix', 'Bmatrix', 'vmatrix', 'Vmatrix']);
	var envKind = A2(
		$elm$core$List$member,
		envType,
		_Utils_ap(
			_List_fromArray(
				['equation', 'eqnarray', 'verbatim', 'colored', 'CD', 'mathmacro', 'textmacro', 'listing', 'verse']),
			katex)) ? 'passThrough' : envType;
	return A3($author$project$Internal$Parser$environmentParser, envKind, theEndWord, envType);
};
var $author$project$Internal$Parser$environmentParser = F3(
	function (envKind, theEndWord, envType) {
		var _v3 = A2(
			$elm$core$Dict$get,
			envKind,
			$author$project$Internal$Parser$cyclic$parseEnvironmentDict());
		if (!_v3.$) {
			var p = _v3.a;
			return A2(p, theEndWord, envType);
		} else {
			return A2($author$project$Internal$Parser$standardEnvironmentBody, theEndWord, envType);
		}
	});
var $author$project$Internal$Parser$itemEnvironmentBody = F2(
	function (endWoord, envType) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			A2($author$project$Internal$Parser$Environment, envType, _List_Nil),
			A2(
				$elm$parser$Parser$Advanced$map,
				$author$project$Internal$Parser$LatexList,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$author$project$Internal$Parser$ws),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$author$project$Internal$Parser$itemList(
									$elm$parser$Parser$Advanced$oneOf(
										_List_fromArray(
											[
												$author$project$Internal$Parser$item,
												$elm$parser$Parser$Advanced$lazy(
												function (_v2) {
													return $author$project$Internal$Parser$cyclic$environment();
												})
											]))),
								$author$project$Internal$Parser$ws),
							$elm$parser$Parser$Advanced$symbol(
								A2(
									$elm$parser$Parser$Advanced$Token,
									endWoord,
									$author$project$Internal$Parser$ExpectingEndWordInItemList(endWoord)))),
						$author$project$Internal$Parser$ws))));
	});
var $author$project$Internal$Parser$standardEnvironmentBody = F2(
	function (endWoord, envType) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(
						$author$project$Internal$Parser$Environment(envType)),
					$author$project$Internal$Parser$ws),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$author$project$Internal$Parser$itemList($author$project$Internal$Parser$optionalArg),
					$author$project$Internal$Parser$ws)),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$map,
							$author$project$Internal$Parser$LatexList,
							$author$project$Internal$Parser$nonEmptyItemList(
								$author$project$Internal$Parser$cyclic$latexExpression())),
						$author$project$Internal$Parser$ws),
					$elm$parser$Parser$Advanced$symbol(
						A2(
							$elm$parser$Parser$Advanced$Token,
							endWoord,
							$author$project$Internal$Parser$ExpectingEndWord(endWoord)))),
				$author$project$Internal$Parser$ws));
	});
function $author$project$Internal$Parser$cyclic$environment() {
	return A2($elm$parser$Parser$Advanced$andThen, $author$project$Internal$Parser$environmentOfType, $author$project$Internal$Parser$envName);
}
function $author$project$Internal$Parser$cyclic$latexList() {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Internal$Parser$LatexList,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$author$project$Internal$Parser$ws),
			$author$project$Internal$Parser$itemList(
				$author$project$Internal$Parser$cyclic$latexExpression())));
}
function $author$project$Internal$Parser$cyclic$latexExpression() {
	return $elm$parser$Parser$Advanced$oneOf(
		_List_fromArray(
			[
				$author$project$Internal$Parser$texComment,
				$author$project$Internal$Parser$displayMathDollar,
				$author$project$Internal$Parser$displayMathBrackets,
				$author$project$Internal$Parser$inlineMath($author$project$Internal$Parser$ws),
				$author$project$Internal$Parser$newcommand,
				$author$project$Internal$Parser$macro($author$project$Internal$Parser$ws),
				$author$project$Internal$Parser$cyclic$smacro(),
				$author$project$Internal$Parser$words,
				$elm$parser$Parser$Advanced$lazy(
				function (_v1) {
					return $author$project$Internal$Parser$cyclic$environment();
				})
			]));
}
function $author$project$Internal$Parser$cyclic$parseEnvironmentDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'enumerate',
				F2(
					function (endWoord, envType) {
						return A2($author$project$Internal$Parser$itemEnvironmentBody, endWoord, envType);
					})),
				_Utils_Tuple2(
				'itemize',
				F2(
					function (endWoord, envType) {
						return A2($author$project$Internal$Parser$itemEnvironmentBody, endWoord, envType);
					})),
				_Utils_Tuple2(
				'thebibliography',
				F2(
					function (endWoord, envType) {
						return A2($author$project$Internal$Parser$biblioEnvironmentBody, endWoord, envType);
					})),
				_Utils_Tuple2(
				'tabular',
				F2(
					function (endWoord, envType) {
						return A2($author$project$Internal$Parser$tabularEnvironmentBody, endWoord, envType);
					})),
				_Utils_Tuple2(
				'passThrough',
				F2(
					function (endWoord, envType) {
						return A2($author$project$Internal$Parser$passThroughBody, endWoord, envType);
					}))
			]));
}
function $author$project$Internal$Parser$cyclic$smacro() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed($author$project$Internal$Parser$SMacro),
					$author$project$Internal$Parser$smacroName),
				$author$project$Internal$Parser$itemList($author$project$Internal$Parser$optionalArg)),
			$author$project$Internal$Parser$itemList($author$project$Internal$Parser$arg)),
		$elm$parser$Parser$Advanced$lazy(
			function (_v0) {
				return $author$project$Internal$Parser$cyclic$latexList();
			}));
}
var $author$project$Internal$Parser$environment = $author$project$Internal$Parser$cyclic$environment();
$author$project$Internal$Parser$cyclic$environment = function () {
	return $author$project$Internal$Parser$environment;
};
var $author$project$Internal$Parser$latexList = $author$project$Internal$Parser$cyclic$latexList();
$author$project$Internal$Parser$cyclic$latexList = function () {
	return $author$project$Internal$Parser$latexList;
};
var $author$project$Internal$Parser$latexExpression = $author$project$Internal$Parser$cyclic$latexExpression();
$author$project$Internal$Parser$cyclic$latexExpression = function () {
	return $author$project$Internal$Parser$latexExpression;
};
var $author$project$Internal$Parser$parseEnvironmentDict = $author$project$Internal$Parser$cyclic$parseEnvironmentDict();
$author$project$Internal$Parser$cyclic$parseEnvironmentDict = function () {
	return $author$project$Internal$Parser$parseEnvironmentDict;
};
var $author$project$Internal$Parser$smacro = $author$project$Internal$Parser$cyclic$smacro();
$author$project$Internal$Parser$cyclic$smacro = function () {
	return $author$project$Internal$Parser$smacro;
};
var $author$project$Internal$Parser$parse = function (text) {
	var expr = A2($elm$parser$Parser$Advanced$run, $author$project$Internal$Parser$latexList, text);
	if (!expr.$) {
		if (expr.a.$ === 8) {
			var list = expr.a.a;
			return list;
		} else {
			return _List_fromArray(
				[
					$author$project$Internal$Parser$LXString('Dude! not great code here.')
				]);
		}
	} else {
		var error = expr.a;
		return _List_fromArray(
			[
				$author$project$Internal$Parser$LXError(error)
			]);
	}
};
var $author$project$Internal$LatexDifferSimple$addPreamble = F2(
	function (text, mpreamble) {
		if (mpreamble.$ === 1) {
			return text;
		} else {
			var str = mpreamble.a;
			return str + ('\n\n' + text);
		}
	});
var $author$project$Internal$Paragraph$Start = {$: 0};
var $author$project$Internal$Stack$Stack = $elm$core$Basics$identity;
var $author$project$Internal$Stack$empty = _List_Nil;
var $author$project$Internal$Paragraph$fixLine = function (line) {
	return (line === '') ? '\n' : line;
};
var $author$project$Internal$Paragraph$Error = {$: 5};
var $author$project$Internal$Paragraph$IgnoreLine = {$: 4};
var $author$project$Internal$Paragraph$InBlock = function (a) {
	return {$: 2, a: a};
};
var $author$project$Internal$Paragraph$InMathBlock = {$: 3};
var $author$project$Internal$Paragraph$InParagraph = {$: 1};
var $elm$core$String$endsWith = _String_endsWith;
var $author$project$Internal$Paragraph$BeginBlock = function (a) {
	return {$: 3, a: a};
};
var $author$project$Internal$Paragraph$Blank = {$: 0};
var $author$project$Internal$Paragraph$EndBlock = function (a) {
	return {$: 4, a: a};
};
var $author$project$Internal$Paragraph$MathBlock = {$: 5};
var $author$project$Internal$Paragraph$Text = {$: 2};
var $author$project$Internal$Paragraph$getBeginArg = function (line) {
	var parseResult = A2($elm$parser$Parser$Advanced$run, $author$project$Internal$Parser$envName, line);
	var arg = function () {
		if (!parseResult.$) {
			var word = parseResult.a;
			return word;
		} else {
			return '';
		}
	}();
	return arg;
};
var $author$project$Internal$Parser$ExpectingEndAndRightBrace = {$: 27};
var $author$project$Internal$Parser$ExpectingEnvironmentNameEnd = {$: 25};
var $author$project$Internal$Parser$endWord = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$author$project$Internal$Parser$spaces),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '\\end{', $author$project$Internal$Parser$ExpectingEnvironmentNameEnd))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2($author$project$Internal$Parser$parseToSymbol, $author$project$Internal$Parser$ExpectingEndAndRightBrace, '}'),
		$author$project$Internal$Parser$ws));
var $author$project$Internal$Paragraph$getEndArg = function (line) {
	var parseResult = A2($elm$parser$Parser$Advanced$run, $author$project$Internal$Parser$endWord, line);
	var arg = function () {
		if (!parseResult.$) {
			var word = parseResult.a;
			return word;
		} else {
			return '';
		}
	}();
	return arg;
};
var $author$project$Internal$Paragraph$lineType = function (line) {
	return (line === '') ? $author$project$Internal$Paragraph$Blank : (A2($elm$core$String$startsWith, '\\begin', line) ? $author$project$Internal$Paragraph$BeginBlock(
		$author$project$Internal$Paragraph$getBeginArg(line)) : (A2($elm$core$String$startsWith, '\\end', line) ? $author$project$Internal$Paragraph$EndBlock(
		$author$project$Internal$Paragraph$getEndArg(line)) : (A2($elm$core$String$startsWith, '$$', line) ? $author$project$Internal$Paragraph$MathBlock : $author$project$Internal$Paragraph$Text)));
};
var $elm$core$List$tail = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(xs);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Internal$Stack$pop = function (_v0) {
	var list = _v0;
	var _v1 = $elm$core$List$tail(list);
	if (_v1.$ === 1) {
		return _List_Nil;
	} else {
		var tail = _v1.a;
		return tail;
	}
};
var $author$project$Internal$Stack$push = F2(
	function (element, _v0) {
		var list = _v0;
		return A2($elm$core$List$cons, element, list);
	});
var $author$project$Internal$Stack$top = function (_v0) {
	var list = _v0;
	return $elm$core$List$head(list);
};
var $author$project$Internal$Paragraph$getNextState = F2(
	function (line, _v0) {
		var parserState = _v0.a;
		var stack = _v0.b;
		var _v1 = _Utils_Tuple2(
			parserState,
			$author$project$Internal$Paragraph$lineType(line));
		_v1$23:
		while (true) {
			switch (_v1.a.$) {
				case 0:
					switch (_v1.b.$) {
						case 0:
							var _v2 = _v1.a;
							var _v3 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$Start, stack);
						case 2:
							var _v4 = _v1.a;
							var _v5 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$InParagraph, stack);
						case 3:
							var _v6 = _v1.a;
							var arg = _v1.b.a;
							return _Utils_Tuple2(
								$author$project$Internal$Paragraph$InBlock(arg),
								A2($author$project$Internal$Stack$push, arg, stack));
						case 5:
							var _v7 = _v1.a;
							var _v8 = _v1.b;
							return A2(
								$elm$core$String$endsWith,
								'$$',
								A2($elm$core$String$dropLeft, 2, line)) ? _Utils_Tuple2($author$project$Internal$Paragraph$Start, stack) : _Utils_Tuple2($author$project$Internal$Paragraph$InMathBlock, stack);
						case 1:
							var _v9 = _v1.a;
							var _v10 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$IgnoreLine, stack);
						default:
							break _v1$23;
					}
				case 4:
					switch (_v1.b.$) {
						case 0:
							var _v11 = _v1.a;
							var _v12 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$Start, stack);
						case 2:
							var _v13 = _v1.a;
							var _v14 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$InParagraph, stack);
						case 3:
							var _v15 = _v1.a;
							var arg = _v1.b.a;
							return _Utils_Tuple2(
								$author$project$Internal$Paragraph$InBlock(arg),
								A2($author$project$Internal$Stack$push, arg, stack));
						case 5:
							var _v16 = _v1.a;
							var _v17 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$InMathBlock, stack);
						default:
							break _v1$23;
					}
				case 2:
					switch (_v1.b.$) {
						case 0:
							var arg = _v1.a.a;
							var _v18 = _v1.b;
							return _Utils_Tuple2(
								$author$project$Internal$Paragraph$InBlock(arg),
								stack);
						case 2:
							var arg = _v1.a.a;
							var _v19 = _v1.b;
							return _Utils_Tuple2(
								$author$project$Internal$Paragraph$InBlock(arg),
								stack);
						case 5:
							var arg = _v1.a.a;
							var _v20 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$InMathBlock, stack);
						case 3:
							var arg = _v1.a.a;
							var arg2 = _v1.b.a;
							return _Utils_Tuple2(
								$author$project$Internal$Paragraph$InBlock(arg),
								A2($author$project$Internal$Stack$push, arg2, stack));
						case 4:
							var arg1 = _v1.a.a;
							var arg2 = _v1.b.a;
							var _v21 = _Utils_Tuple2(
								$author$project$Internal$Stack$pop(stack),
								line);
							var nextStack = _v21.a;
							var line_ = _v21.b;
							var _v22 = $author$project$Internal$Stack$top(nextStack);
							if (_v22.$ === 1) {
								return _Utils_Tuple2($author$project$Internal$Paragraph$Start, nextStack);
							} else {
								var arg = _v22.a;
								return _Utils_Tuple2(
									$author$project$Internal$Paragraph$InBlock(arg),
									nextStack);
							}
						default:
							break _v1$23;
					}
				case 1:
					switch (_v1.b.$) {
						case 2:
							var _v23 = _v1.a;
							var _v24 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$InParagraph, stack);
						case 3:
							var _v25 = _v1.a;
							var str = _v1.b.a;
							return _Utils_Tuple2(
								$author$project$Internal$Paragraph$InParagraph,
								A2($author$project$Internal$Stack$push, str, stack));
						case 5:
							var _v26 = _v1.a;
							var _v27 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$InMathBlock, stack);
						case 4:
							var _v28 = _v1.a;
							var arg = _v1.b.a;
							return _Utils_Tuple2($author$project$Internal$Paragraph$Error, stack);
						case 0:
							var _v29 = _v1.a;
							var _v30 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$Start, stack);
						default:
							break _v1$23;
					}
				case 3:
					switch (_v1.b.$) {
						case 3:
							var _v31 = _v1.a;
							var str = _v1.b.a;
							return _Utils_Tuple2($author$project$Internal$Paragraph$InMathBlock, stack);
						case 4:
							var _v32 = _v1.a;
							var str = _v1.b.a;
							return _Utils_Tuple2($author$project$Internal$Paragraph$InMathBlock, stack);
						case 5:
							var _v33 = _v1.a;
							var _v34 = _v1.b;
							return _Utils_Tuple2($author$project$Internal$Paragraph$Start, stack);
						default:
							var _v35 = _v1.a;
							return A2(
								$elm$core$String$endsWith,
								'$$',
								A2($elm$core$String$dropLeft, 2, line)) ? _Utils_Tuple2($author$project$Internal$Paragraph$Start, stack) : ((line === '') ? _Utils_Tuple2($author$project$Internal$Paragraph$Start, stack) : _Utils_Tuple2($author$project$Internal$Paragraph$InMathBlock, stack));
					}
				default:
					break _v1$23;
			}
		}
		return _Utils_Tuple2($author$project$Internal$Paragraph$Error, stack);
	});
var $author$project$Internal$Paragraph$joinLines = F2(
	function (a, b) {
		var _v0 = _Utils_Tuple2(a, b);
		_v0$1:
		while (true) {
			_v0$2:
			while (true) {
				switch (_v0.a) {
					case '':
						return b;
					case '\n':
						switch (_v0.b) {
							case '':
								break _v0$1;
							case '\n':
								break _v0$2;
							default:
								break _v0$2;
						}
					default:
						switch (_v0.b) {
							case '':
								break _v0$1;
							case '\n':
								return a + '\n';
							default:
								var aa = _v0.a;
								var bb = _v0.b;
								return aa + ('\n' + bb);
						}
				}
			}
			return '\n' + b;
		}
		return a;
	});
var $author$project$Internal$Paragraph$updateParserRecord = F2(
	function (line, parserRecord) {
		var _v0 = A2(
			$author$project$Internal$Paragraph$getNextState,
			line,
			_Utils_Tuple2(parserRecord.bC, parserRecord.aB));
		var nextState = _v0.a;
		var nextStack = _v0.b;
		switch (nextState.$) {
			case 0:
				return _Utils_update(
					parserRecord,
					{
						U: '',
						b$: _Utils_ap(
							parserRecord.b$,
							_List_fromArray(
								[
									A2($author$project$Internal$Paragraph$joinLines, parserRecord.U, line)
								])),
						aB: nextStack,
						bC: nextState
					});
			case 1:
				return _Utils_update(
					parserRecord,
					{
						U: A2($author$project$Internal$Paragraph$joinLines, parserRecord.U, line),
						aB: nextStack,
						bC: nextState
					});
			case 3:
				return _Utils_update(
					parserRecord,
					{
						U: A2($author$project$Internal$Paragraph$joinLines, parserRecord.U, line),
						aB: nextStack,
						bC: nextState
					});
			case 2:
				var arg = nextState.a;
				return _Utils_update(
					parserRecord,
					{
						U: A2(
							$author$project$Internal$Paragraph$joinLines,
							parserRecord.U,
							$author$project$Internal$Paragraph$fixLine(line)),
						aB: nextStack,
						bC: nextState
					});
			case 4:
				return _Utils_update(
					parserRecord,
					{aB: nextStack, bC: nextState});
			default:
				return _Utils_update(
					parserRecord,
					{aB: nextStack});
		}
	});
var $author$project$Internal$Paragraph$logicalParagraphParse = function (text) {
	return A3(
		$elm$core$List$foldl,
		$author$project$Internal$Paragraph$updateParserRecord,
		{U: '', b$: _List_Nil, aB: $author$project$Internal$Stack$empty, bC: $author$project$Internal$Paragraph$Start},
		A2($elm$core$String$split, '\n', text + '\n'));
};
var $author$project$Internal$Paragraph$logicalParagraphify = function (text) {
	var lastState = $author$project$Internal$Paragraph$logicalParagraphParse(text);
	return A2(
		$elm$core$List$map,
		function (paragraph) {
			return $elm$core$String$trim(paragraph) + '\n\n';
		},
		A2(
			$elm$core$List$filter,
			function (x) {
				return x !== '';
			},
			_Utils_ap(
				lastState.b$,
				_List_fromArray(
					[lastState.U]))));
};
var $author$project$Internal$DifferSimple$prefixer = F2(
	function (b, k) {
		return 'p.' + ($elm$core$String$fromInt(b) + ('.' + $elm$core$String$fromInt(k)));
	});
var $author$project$Internal$LatexDifferSimple$makeIdListWithSeed = F2(
	function (seed, paragraphs) {
		return A2(
			$elm$core$List$map,
			$author$project$Internal$DifferSimple$prefixer(seed),
			A2(
				$elm$core$List$range,
				1,
				$elm$core$List$length(paragraphs)));
	});
var $author$project$Internal$MathMacro$MacroBody = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Internal$MathMacro$MathText = function (a) {
	return {$: 0, a: a};
};
var $author$project$Internal$MathMacro$makeEntry = function (mathExpression_) {
	if (mathExpression_.$ === 2) {
		var macroName_ = mathExpression_.a;
		var nArgs = mathExpression_.b;
		var body = mathExpression_.c;
		return _Utils_Tuple2(
			macroName_,
			A2(
				$author$project$Internal$MathMacro$MacroBody,
				A2(
					$elm$core$Maybe$withDefault,
					0,
					$elm$core$String$toInt(nArgs)),
				body));
	} else {
		return _Utils_Tuple2(
			'nullMacro',
			A2(
				$author$project$Internal$MathMacro$MacroBody,
				0,
				_List_fromArray(
					[
						$author$project$Internal$MathMacro$MathText('0')
					])));
	}
};
var $author$project$Internal$MathMacro$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return c === ' ';
	});
var $author$project$Internal$MathMacro$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (v) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					A2($elm$parser$Parser$Advanced$ignorer, p, $author$project$Internal$MathMacro$spaces)),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $author$project$Internal$MathMacro$many = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$author$project$Internal$MathMacro$manyHelp(p));
};
var $elm$parser$Parser$Advanced$backtrackable = function (_v0) {
	var parse = _v0;
	return function (s0) {
		var _v1 = parse(s0);
		if (_v1.$ === 1) {
			var x = _v1.b;
			return A2($elm$parser$Parser$Advanced$Bad, false, x);
		} else {
			var a = _v1.b;
			var s1 = _v1.c;
			return A3($elm$parser$Parser$Advanced$Good, false, a, s1);
		}
	};
};
var $author$project$Internal$MathMacro$CArg = function (a) {
	return {$: 0, a: a};
};
var $author$project$Internal$MathMacro$ExpectingLeftBrace = 0;
var $author$project$Internal$MathMacro$ExpectingRightBrace = 1;
var $author$project$Internal$MathMacro$Macro = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $author$project$Internal$MathMacro$MathList = function (a) {
	return {$: 3, a: a};
};
var $author$project$Internal$MathMacro$itemListHelper = F2(
	function (itemParser, revItems) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (item_) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, item_, revItems));
						}),
					itemParser),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(revItems));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $author$project$Internal$MathMacro$itemList_ = F2(
	function (initialList, itemParser) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			initialList,
			$author$project$Internal$MathMacro$itemListHelper(itemParser));
	});
var $author$project$Internal$MathMacro$itemList = function (itemParser) {
	return A2($author$project$Internal$MathMacro$itemList_, _List_Nil, itemParser);
};
var $author$project$Internal$MathMacro$ExpectingValidMacroArgWord = 3;
var $author$project$Internal$MathMacro$inMacroArg = function (c) {
	return !((c === '\\') || ((c === '$') || ((c === '}') || ((c === ' ') || (c === '\n')))));
};
var $author$project$Internal$MathMacro$nonEmptyItemList = function (itemParser) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (x) {
			return A2(
				$author$project$Internal$MathMacro$itemList_,
				_List_fromArray(
					[x]),
				itemParser);
		},
		itemParser);
};
var $author$project$Internal$MathMacro$ws = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return (c === ' ') || (c === '\n');
	});
var $author$project$Internal$MathMacro$word = F2(
	function (problem, inWord) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
						$author$project$Internal$MathMacro$ws),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$getOffset,
								A2($elm$parser$Parser$Advanced$chompIf, inWord, problem)),
							$elm$parser$Parser$Advanced$chompWhile(inWord)),
						$author$project$Internal$MathMacro$ws)),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$Internal$MathMacro$macroArgWords = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Internal$MathMacro$MathText,
	A2(
		$elm$parser$Parser$Advanced$map,
		$elm$core$String$join(' '),
		$author$project$Internal$MathMacro$nonEmptyItemList(
			A2($author$project$Internal$MathMacro$word, 3, $author$project$Internal$MathMacro$inMacroArg))));
var $author$project$Internal$MathMacro$ExpectingMacroReservedWord = 2;
var $author$project$Internal$MathMacro$macroName = A2(
	$elm$parser$Parser$Advanced$map,
	$elm$core$String$dropLeft(1),
	$elm$parser$Parser$Advanced$variable(
		{
			fO: 2,
			f8: function (c) {
				return $elm$core$Char$isAlphaNum(c) || (c === '*');
			},
			gJ: $elm$core$Set$fromList(
				_List_fromArray(
					['\\item', '\\bibitem'])),
			g3: function (c) {
				return c === '\\';
			}
		}));
function $author$project$Internal$MathMacro$cyclic$macro() {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($author$project$Internal$MathMacro$Macro),
			$author$project$Internal$MathMacro$macroName),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$Internal$MathMacro$itemList(
				$author$project$Internal$MathMacro$cyclic$arg()),
			$author$project$Internal$MathMacro$ws));
}
function $author$project$Internal$MathMacro$cyclic$arg() {
	return A2(
		$elm$parser$Parser$Advanced$inContext,
		$author$project$Internal$MathMacro$CArg('arg'),
		A2(
			$elm$parser$Parser$Advanced$map,
			$author$project$Internal$MathMacro$MathList,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, '{', 0))),
					$author$project$Internal$MathMacro$ws),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$author$project$Internal$MathMacro$cyclic$argList(),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '}', 1))))));
}
function $author$project$Internal$MathMacro$cyclic$argList() {
	return $author$project$Internal$MathMacro$itemList(
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$author$project$Internal$MathMacro$macroArgWords,
					$elm$parser$Parser$Advanced$lazy(
					function (_v0) {
						return $author$project$Internal$MathMacro$cyclic$macro();
					})
				])));
}
var $author$project$Internal$MathMacro$macro = $author$project$Internal$MathMacro$cyclic$macro();
$author$project$Internal$MathMacro$cyclic$macro = function () {
	return $author$project$Internal$MathMacro$macro;
};
var $author$project$Internal$MathMacro$arg = $author$project$Internal$MathMacro$cyclic$arg();
$author$project$Internal$MathMacro$cyclic$arg = function () {
	return $author$project$Internal$MathMacro$arg;
};
var $author$project$Internal$MathMacro$argList = $author$project$Internal$MathMacro$cyclic$argList();
$author$project$Internal$MathMacro$cyclic$argList = function () {
	return $author$project$Internal$MathMacro$argList;
};
var $author$project$Internal$MathMacro$ExpectingStuff = 8;
var $author$project$Internal$MathMacro$inStuff = function (c) {
	return !(c === '\\');
};
var $author$project$Internal$MathMacro$stuff = F2(
	function (problem, inWord) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
						$author$project$Internal$MathMacro$ws),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$getOffset,
								A2($elm$parser$Parser$Advanced$chompIf, $author$project$Internal$MathMacro$inStuff, problem)),
							$elm$parser$Parser$Advanced$chompWhile($author$project$Internal$MathMacro$inStuff)),
						$author$project$Internal$MathMacro$ws)),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$Internal$MathMacro$mathStuff = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$Internal$MathMacro$MathText,
	A2($author$project$Internal$MathMacro$stuff, 8, $author$project$Internal$MathMacro$inStuff));
var $author$project$Internal$MathMacro$ExpectingLeftBracket = 4;
var $author$project$Internal$MathMacro$ExpectingNewCommand = 9;
var $author$project$Internal$MathMacro$ExpectingRightBracket = 6;
var $author$project$Internal$MathMacro$NewCommand = F3(
	function (a, b, c) {
		return {$: 2, a: a, b: b, c: c};
	});
var $author$project$Internal$MathMacro$ExpectingBackslash = 10;
var $author$project$Internal$MathMacro$newMacroName = A2(
	$elm$parser$Parser$Advanced$inContext,
	$author$project$Internal$MathMacro$CArg('arg'),
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '{', 0))),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '\\', 10))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$author$project$Internal$MathMacro$word,
				1,
				function (c) {
					return c !== '}';
				}),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '}', 1)))));
var $author$project$Internal$MathMacro$newCommand1 = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($author$project$Internal$MathMacro$NewCommand),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '\\newcommand', 9))),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$Internal$MathMacro$newMacroName,
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '[', 4)))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$author$project$Internal$MathMacro$word,
				6,
				function (c) {
					return c !== ']';
				}),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, ']', 6)))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$author$project$Internal$MathMacro$itemList($author$project$Internal$MathMacro$arg),
		$author$project$Internal$MathMacro$ws));
var $author$project$Internal$MathMacro$newCommand2 = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (x, y) {
						return A3($author$project$Internal$MathMacro$NewCommand, x, '0', y);
					})),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '\\newcommand', 9))),
		$author$project$Internal$MathMacro$newMacroName),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$author$project$Internal$MathMacro$itemList($author$project$Internal$MathMacro$arg),
		$author$project$Internal$MathMacro$ws));
var $author$project$Internal$MathMacro$newCommand = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$backtrackable($author$project$Internal$MathMacro$newCommand1),
			$author$project$Internal$MathMacro$newCommand2
		]));
var $author$project$Internal$MathMacro$mathExpression = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$backtrackable($author$project$Internal$MathMacro$newCommand),
			$author$project$Internal$MathMacro$macro,
			$author$project$Internal$MathMacro$mathStuff
		]));
var $author$project$Internal$MathMacro$parse = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$run,
		$author$project$Internal$MathMacro$many($author$project$Internal$MathMacro$mathExpression),
		str);
};
var $author$project$Internal$MathMacro$makeMacroDict = function (str) {
	var _v0 = $author$project$Internal$MathMacro$parse(str);
	if (!_v0.$) {
		var list = _v0.a;
		return $elm$core$Dict$fromList(
			A2($elm$core$List$map, $author$project$Internal$MathMacro$makeEntry, list));
	} else {
		return $elm$core$Dict$empty;
	}
};
var $author$project$Internal$LatexState$setMacroDefinition = F3(
	function (macroName, macroDefinition, latexState) {
		var macroDictionary = latexState.d9;
		var newMacroDictionary = A3($elm$core$Dict$insert, macroName, macroDefinition, macroDictionary);
		return _Utils_update(
			latexState,
			{d9: newMacroDictionary});
	});
var $author$project$Internal$StateReducerHelpers$setMacroDefinition = F3(
	function (name, body, latexState) {
		return A3(
			$author$project$Internal$LatexState$setMacroDefinition,
			name,
			A3($author$project$Internal$Parser$NewCommand, name, 0, body),
			latexState);
	});
var $author$project$Internal$StateReducerHelpers$macroDictReducer = F2(
	function (lexpr, state) {
		if (lexpr.$ === 9) {
			var name = lexpr.a;
			var nArgs = lexpr.b;
			var body = lexpr.c;
			return A3($author$project$Internal$StateReducerHelpers$setMacroDefinition, name, body, state);
		} else {
			return state;
		}
	});
var $author$project$Internal$StateReducerHelpers$setDictionaryAux = F2(
	function (list, latexState) {
		return A3($elm$core$List$foldl, $author$project$Internal$StateReducerHelpers$macroDictReducer, latexState, list);
	});
var $author$project$Internal$StateReducerHelpers$setDictionary = F2(
	function (str, latexState) {
		return A2(
			$author$project$Internal$StateReducerHelpers$setDictionaryAux,
			$author$project$Internal$Parser$parse(str),
			latexState);
	});
var $author$project$Internal$LatexState$getCounter = F2(
	function (name, latexState) {
		var _v0 = A2($elm$core$Dict$get, name, latexState.a$);
		if (!_v0.$) {
			var k = _v0.a;
			return k;
		} else {
			return 0;
		}
	});
var $author$project$Internal$ParserTools$latexList2List = function (latexExpression) {
	if (latexExpression.$ === 8) {
		var list = latexExpression.a;
		return list;
	} else {
		return _List_Nil;
	}
};
var $author$project$Internal$ParserTools$getMacroArgs = F2(
	function (macroName, latexExpression) {
		if (latexExpression.$ === 6) {
			var name = latexExpression.a;
			var optArgs = latexExpression.b;
			var args = latexExpression.c;
			return _Utils_eq(name, macroName) ? A2($elm$core$List$map, $author$project$Internal$ParserTools$latexList2List, args) : _List_Nil;
		} else {
			return _List_Nil;
		}
	});
var $author$project$Internal$ParserTools$list2LeadingString = function (list) {
	var head_ = $elm$core$List$head(list);
	var value = function () {
		if (!head_.$) {
			var value_ = head_.a;
			return value_;
		} else {
			return $author$project$Internal$Parser$LXString('');
		}
	}();
	if (!value.$) {
		var str = value.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Internal$ParserTools$getSimpleMacroArgs = F2(
	function (macroName, latexExpression) {
		return A2(
			$elm$core$List$map,
			$author$project$Internal$ParserTools$list2LeadingString,
			A2($author$project$Internal$ParserTools$getMacroArgs, macroName, latexExpression));
	});
var $author$project$Internal$ParserTools$getFirstMacroArg = F2(
	function (macroName, latexExpression) {
		var arg = $elm$core$List$head(
			A2($author$project$Internal$ParserTools$getSimpleMacroArgs, macroName, latexExpression));
		if (!arg.$) {
			var value = arg.a;
			return value;
		} else {
			return '';
		}
	});
var $author$project$Internal$StateReducerHelpers$getLabel = function (str) {
	var maybeMacro = A2(
		$elm$parser$Parser$Advanced$run,
		$author$project$Internal$Parser$macro($author$project$Internal$Parser$ws),
		$elm$core$String$trim(str));
	if (!maybeMacro.$) {
		var macro = maybeMacro.a;
		return A2($author$project$Internal$ParserTools$getFirstMacroArg, 'label', macro);
	} else {
		return '';
	}
};
var $elm$core$Maybe$map = F2(
	function (f, maybe) {
		if (!maybe.$) {
			var value = maybe.a;
			return $elm$core$Maybe$Just(
				f(value));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Internal$LatexState$incrementCounter = F2(
	function (name, latexState) {
		var maybeInc = $elm$core$Maybe$map(
			function (x) {
				return x + 1;
			});
		var newCounters = A3($elm$core$Dict$update, name, maybeInc, latexState.a$);
		return _Utils_update(
			latexState,
			{a$: newCounters});
	});
var $author$project$Internal$LatexState$setCrossReference = F3(
	function (label, value, latexState) {
		var crossReferences = latexState.dA;
		var newCrossReferences = A3($elm$core$Dict$insert, label, value, crossReferences);
		return _Utils_update(
			latexState,
			{dA: newCrossReferences});
	});
var $author$project$Internal$StateReducerHelpers$setEquationNumber = F2(
	function (body, latexState) {
		var latexState1 = A2($author$project$Internal$LatexState$incrementCounter, 'eqno', latexState);
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState1);
		var label = function () {
			if (!body.$) {
				var str = body.a;
				return $author$project$Internal$StateReducerHelpers$getLabel(str);
			} else {
				return '';
			}
		}();
		var eqno = A2($author$project$Internal$LatexState$getCounter, 'eqno', latexState1);
		var latexState2 = (label !== '') ? A3(
			$author$project$Internal$LatexState$setCrossReference,
			label,
			$elm$core$String$fromInt(s1) + ('.' + $elm$core$String$fromInt(eqno)),
			latexState1) : latexState1;
		return latexState2;
	});
var $elm$core$Maybe$andThen = F2(
	function (callback, maybeValue) {
		if (!maybeValue.$) {
			var value = maybeValue.a;
			return callback(value);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Internal$ParserTools$isMacro = F2(
	function (macroName, latexExpression) {
		if (latexExpression.$ === 6) {
			var name = latexExpression.a;
			return _Utils_eq(name, macroName);
		} else {
			return false;
		}
	});
var $author$project$Internal$ParserTools$filterMacro = F2(
	function (macroName, list) {
		return A2(
			$elm$core$List$filter,
			$author$project$Internal$ParserTools$isMacro(macroName),
			list);
	});
var $author$project$Internal$ParserTools$getMacroArgs2 = function (latexExpression) {
	if (latexExpression.$ === 6) {
		var name = latexExpression.a;
		var optArgs = latexExpression.b;
		var args = latexExpression.c;
		return A2($elm$core$List$map, $author$project$Internal$ParserTools$latexList2List, args);
	} else {
		return _List_Nil;
	}
};
var $author$project$Internal$ParserTools$getString = function (latexString) {
	if (!latexString.$) {
		var str = latexString.a;
		return str;
	} else {
		return '';
	}
};
var $author$project$Internal$ParserTools$macroValue_ = F2(
	function (macroName, list) {
		return A2(
			$elm$core$Maybe$map,
			$author$project$Internal$ParserTools$getString,
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$List$head,
				A2(
					$elm$core$Maybe$andThen,
					$elm$core$List$head,
					A2(
						$elm$core$Maybe$map,
						$author$project$Internal$ParserTools$getMacroArgs2,
						$elm$core$List$head(
							A2($author$project$Internal$ParserTools$filterMacro, macroName, list))))));
	});
var $author$project$Internal$ParserTools$macroValue = F2(
	function (macroName, envBody) {
		if (envBody.$ === 8) {
			var list = envBody.a;
			return A2($author$project$Internal$ParserTools$macroValue_, macroName, list);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Internal$StateReducerHelpers$setTheoremNumber = F2(
	function (body, latexState) {
		var latexState1 = A2($author$project$Internal$LatexState$incrementCounter, 'tno', latexState);
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState1);
		var tno = A2($author$project$Internal$LatexState$getCounter, 'tno', latexState1);
		var label = function () {
			var _v0 = A2($author$project$Internal$ParserTools$macroValue, 'label', body);
			if (!_v0.$) {
				var str = _v0.a;
				return str;
			} else {
				return '';
			}
		}();
		var latexState2 = (label !== '') ? A3(
			$author$project$Internal$LatexState$setCrossReference,
			label,
			$elm$core$String$fromInt(s1) + ('.' + $elm$core$String$fromInt(tno)),
			latexState1) : latexState1;
		return latexState2;
	});
var $author$project$Internal$Accumulator$theoremWords = _List_fromArray(
	['theorem', 'proposition', 'corollary', 'lemma', 'definition', 'problem']);
var $author$project$Internal$Accumulator$envReducer = F4(
	function (name, optonalArgs, body, state) {
		if (A2($elm$core$List$member, name, $author$project$Internal$Accumulator$theoremWords)) {
			return A2($author$project$Internal$StateReducerHelpers$setTheoremNumber, body, state);
		} else {
			switch (name) {
				case 'equation':
					return A2($author$project$Internal$StateReducerHelpers$setEquationNumber, body, state);
				case 'align':
					return A2($author$project$Internal$StateReducerHelpers$setEquationNumber, body, state);
				case 'mathmacro':
					if (!body.$) {
						var str = body.a;
						var mathDict = $author$project$Internal$MathMacro$makeMacroDict(
							$elm$core$String$trim(str));
						return _Utils_update(
							state,
							{gl: mathDict});
					} else {
						return state;
					}
				case 'textmacro':
					if (!body.$) {
						var str = body.a;
						return A2($author$project$Internal$StateReducerHelpers$setDictionary, str, state);
					} else {
						return state;
					}
				default:
					return state;
			}
		}
	});
var $author$project$Internal$Accumulator$dictionaryWords = _List_fromArray(
	['title', 'author', 'date', 'email', 'revision', 'host', 'setclient', 'setdocid']);
var $author$project$Internal$LatexState$setDictionaryItem = F3(
	function (key, value, latexState) {
		var dictionary = latexState.dH;
		var newDictionary = A3($elm$core$Dict$insert, key, value, dictionary);
		return _Utils_update(
			latexState,
			{dH: newDictionary});
	});
var $author$project$Internal$ParserTools$headLatexExpression = function (list) {
	var he = function () {
		var _v0 = $elm$core$List$head(list);
		if (!_v0.$) {
			var expr = _v0.a;
			return expr;
		} else {
			return $author$project$Internal$Parser$LatexList(_List_Nil);
		}
	}();
	return he;
};
var $author$project$Internal$ParserTools$valueOfLXString = function (expr) {
	if (!expr.$) {
		var str = expr.a;
		return str;
	} else {
		return 'Error getting value of LatexString';
	}
};
var $author$project$Internal$ParserTools$valueOfLatexList = function (latexList) {
	if (latexList.$ === 8) {
		var value = latexList.a;
		return value;
	} else {
		return _List_fromArray(
			[
				$author$project$Internal$Parser$LXString('Error getting value of LatexList')
			]);
	}
};
var $author$project$Internal$ParserTools$unpackString = function (expr) {
	return $author$project$Internal$ParserTools$valueOfLXString(
		$author$project$Internal$ParserTools$headLatexExpression(
			$author$project$Internal$ParserTools$valueOfLatexList(
				$author$project$Internal$ParserTools$headLatexExpression(expr))));
};
var $author$project$Internal$StateReducerHelpers$setDictionaryItemForMacro = F3(
	function (name, args, latexState) {
		var value = $author$project$Internal$ParserTools$unpackString(args);
		return A3($author$project$Internal$LatexState$setDictionaryItem, name, value, latexState);
	});
var $author$project$Internal$Utility$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$Internal$StateReducerHelpers$getAt = F2(
	function (k, list_) {
		return A2(
			$elm$core$Maybe$withDefault,
			'xxx',
			A2($author$project$Internal$Utility$getAt, k, list_));
	});
var $author$project$Internal$LatexState$updateCounter = F3(
	function (name, value, latexState) {
		var maybeSet = $elm$core$Maybe$map(
			function (x) {
				return value;
			});
		var newCounters = A3($elm$core$Dict$update, name, maybeSet, latexState.a$);
		return _Utils_update(
			latexState,
			{a$: newCounters});
	});
var $author$project$Internal$StateReducerHelpers$setSectionCounters = F2(
	function (macroArgs, latexState) {
		var argList = A2(
			$elm$core$List$map,
			$author$project$Internal$ParserTools$list2LeadingString,
			A2($elm$core$List$map, $author$project$Internal$ParserTools$latexList2List, macroArgs));
		var arg2 = A2($author$project$Internal$StateReducerHelpers$getAt, 1, argList);
		var arg1 = A2($author$project$Internal$StateReducerHelpers$getAt, 0, argList);
		var initialSectionNumber = (arg1 === 'section') ? A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$String$toInt(arg2)) : (-1);
		return (_Utils_cmp(initialSectionNumber, -1) > 0) ? A3(
			$author$project$Internal$LatexState$updateCounter,
			's3',
			0,
			A3(
				$author$project$Internal$LatexState$updateCounter,
				's2',
				0,
				A3($author$project$Internal$LatexState$updateCounter, 's1', initialSectionNumber - 1, latexState))) : latexState;
	});
var $author$project$Internal$LatexState$TocEntry = F3(
	function (name, label, level) {
		return {gi: label, gk: level, gp: name};
	});
var $author$project$Internal$LatexState$addSection = F4(
	function (sectionName, label, level, latexState) {
		var newEntry = A3($author$project$Internal$LatexState$TocEntry, sectionName, label, level);
		var toc = _Utils_ap(
			latexState.eV,
			_List_fromArray(
				[newEntry]));
		return _Utils_update(
			latexState,
			{eV: toc});
	});
var $author$project$Internal$StateReducerHelpers$updateSectionNumber = F2(
	function (macroArgs, latexState) {
		var label = $elm$core$String$fromInt(
			function (x) {
				return x + 1;
			}(
				A2($author$project$Internal$LatexState$getCounter, 's1', latexState)));
		return A4(
			$author$project$Internal$LatexState$addSection,
			$author$project$Internal$ParserTools$unpackString(macroArgs),
			label,
			1,
			A3(
				$author$project$Internal$LatexState$updateCounter,
				's3',
				0,
				A3(
					$author$project$Internal$LatexState$updateCounter,
					's2',
					0,
					A2($author$project$Internal$LatexState$incrementCounter, 's1', latexState))));
	});
var $author$project$Internal$StateReducerHelpers$updateSubsectionNumber = F2(
	function (macroArgs, latexState) {
		var s2 = $elm$core$String$fromInt(
			function (x) {
				return x + 1;
			}(
				A2($author$project$Internal$LatexState$getCounter, 's2', latexState)));
		var s1 = $elm$core$String$fromInt(
			A2($author$project$Internal$LatexState$getCounter, 's1', latexState));
		var label = s1 + ('.' + s2);
		return A4(
			$author$project$Internal$LatexState$addSection,
			$author$project$Internal$ParserTools$unpackString(macroArgs),
			label,
			2,
			A3(
				$author$project$Internal$LatexState$updateCounter,
				's3',
				0,
				A2($author$project$Internal$LatexState$incrementCounter, 's2', latexState)));
	});
var $author$project$Internal$StateReducerHelpers$updateSubsubsectionNumber = F2(
	function (macroArgs, latexState) {
		var s3 = $elm$core$String$fromInt(
			function (x) {
				return x + 1;
			}(
				A2($author$project$Internal$LatexState$getCounter, 's3', latexState)));
		var s2 = $elm$core$String$fromInt(
			A2($author$project$Internal$LatexState$getCounter, 's2', latexState));
		var s1 = $elm$core$String$fromInt(
			A2($author$project$Internal$LatexState$getCounter, 's1', latexState));
		var label = s1 + ('.' + (s2 + ('.' + s3)));
		return A4(
			$author$project$Internal$LatexState$addSection,
			$author$project$Internal$ParserTools$unpackString(macroArgs),
			label,
			2,
			A2($author$project$Internal$LatexState$incrementCounter, 's3', latexState));
	});
var $author$project$Internal$Accumulator$macroReducer = F4(
	function (name, optionalArgs, args, state) {
		if (A2($elm$core$List$member, name, $author$project$Internal$Accumulator$dictionaryWords)) {
			return A3($author$project$Internal$StateReducerHelpers$setDictionaryItemForMacro, name, args, state);
		} else {
			switch (name) {
				case 'section':
					return A2($author$project$Internal$StateReducerHelpers$updateSectionNumber, args, state);
				case 'subsection':
					return A2($author$project$Internal$StateReducerHelpers$updateSubsectionNumber, args, state);
				case 'subsubsection':
					return A2($author$project$Internal$StateReducerHelpers$updateSubsubsectionNumber, args, state);
				case 'setcounter':
					return A2($author$project$Internal$StateReducerHelpers$setSectionCounters, args, state);
				default:
					return state;
			}
		}
	});
var $author$project$Internal$StateReducerHelpers$setBibItemXRef = F3(
	function (optionalArgs, args, latexState) {
		var label = $author$project$Internal$ParserTools$unpackString(args);
		var value = _Utils_eq(optionalArgs, _List_Nil) ? label : $author$project$Internal$ParserTools$unpackString(optionalArgs);
		return A3($author$project$Internal$LatexState$setDictionaryItem, 'bibitem:' + label, value, latexState);
	});
var $author$project$Internal$Accumulator$smacroReducer = F5(
	function (name, optionalArgs, args, latexExpression, state) {
		if (name === 'bibitem') {
			return A3($author$project$Internal$StateReducerHelpers$setBibItemXRef, optionalArgs, args, state);
		} else {
			return state;
		}
	});
var $author$project$Internal$Accumulator$latexStateReducerAux = F2(
	function (lexpr, state) {
		switch (lexpr.$) {
			case 6:
				var name = lexpr.a;
				var optionalArgs = lexpr.b;
				var args = lexpr.c;
				return A4($author$project$Internal$Accumulator$macroReducer, name, optionalArgs, args, state);
			case 5:
				var name = lexpr.a;
				var optionalArgs = lexpr.b;
				var args = lexpr.c;
				var latexExpression = lexpr.d;
				return A5($author$project$Internal$Accumulator$smacroReducer, name, optionalArgs, args, latexExpression, state);
			case 9:
				var name = lexpr.a;
				var nArgs = lexpr.b;
				var body = lexpr.c;
				return A3($author$project$Internal$StateReducerHelpers$setMacroDefinition, name, body, state);
			case 7:
				var name = lexpr.a;
				var optonalArgs = lexpr.b;
				var body = lexpr.c;
				return A4($author$project$Internal$Accumulator$envReducer, name, optonalArgs, body, state);
			case 8:
				var list = lexpr.a;
				return A3($elm$core$List$foldr, $author$project$Internal$Accumulator$latexStateReducerAux, state, list);
			default:
				return state;
		}
	});
var $author$project$Internal$Accumulator$latexStateReducer = F2(
	function (list, state) {
		return A3($elm$core$List$foldr, $author$project$Internal$Accumulator$latexStateReducerAux, state, list);
	});
var $elm$core$Tuple$second = function (_v0) {
	var y = _v0.b;
	return y;
};
var $author$project$Internal$Accumulator$parseReducer = F2(
	function (inputString, _v0) {
		var latexState = _v0.a;
		var inputList = _v0.b;
		var parsedInput = _Utils_Tuple2(
			inputString,
			$author$project$Internal$Parser$parse(inputString));
		var newLatexState = A2($author$project$Internal$Accumulator$latexStateReducer, parsedInput.b, latexState);
		return _Utils_Tuple2(
			newLatexState,
			_Utils_ap(
				inputList,
				_List_fromArray(
					[parsedInput])));
	});
var $author$project$Internal$Accumulator$parse = F2(
	function (latexState, paragraphs) {
		return A3(
			$elm$core$List$foldl,
			$author$project$Internal$Accumulator$parseReducer,
			_Utils_Tuple2(latexState, _List_Nil),
			paragraphs);
	});
var $author$project$Internal$LatexDifferSimple$initWithSeed = F5(
	function (seed, parser, latexState, text, mpreamble) {
		var paragraphs = $author$project$Internal$Paragraph$logicalParagraphify(
			A2($author$project$Internal$LatexDifferSimple$addPreamble, text, mpreamble));
		var idList = A2($author$project$Internal$LatexDifferSimple$makeIdListWithSeed, seed, paragraphs);
		var _v0 = A2($author$project$Internal$Accumulator$parse, $author$project$Internal$LatexState$emptyLatexState, paragraphs);
		var latexState1 = _v0.a;
		var latexExpressionList = _v0.b;
		var latexState2 = _Utils_update(
			$author$project$Internal$LatexState$emptyLatexState,
			{dA: latexState1.dA, dH: latexState1.dH, d9: latexState1.d9, gl: latexState1.gl, eV: latexState1.eV});
		return A6($author$project$Internal$DifferSimple$EditRecord, text, mpreamble, paragraphs, latexExpressionList, idList, latexState2);
	});
var $author$project$Internal$LatexDifferSimple$init = F4(
	function (parser, latexState, text, mpreamble) {
		return A5($author$project$Internal$LatexDifferSimple$initWithSeed, 0, parser, latexState, text, mpreamble);
	});
var $author$project$Internal$DifferSimple$isEmpty = function (editRecord) {
	return _Utils_eq(editRecord.cq, _List_Nil);
};
var $author$project$Internal$DifferSimple$addPreamble = F2(
	function (text, mpreamble) {
		if (mpreamble.$ === 1) {
			return text;
		} else {
			var str = mpreamble.a;
			return str + ('\n\n' + text);
		}
	});
var $author$project$Internal$DifferSimple$DiffRecord = F4(
	function (commonInitialSegment, commonTerminalSegment, middleSegmentInSource, middleSegmentInTarget) {
		return {bM: commonInitialSegment, bN: commonTerminalSegment, ed: middleSegmentInSource, bX: middleSegmentInTarget};
	});
var $elm$core$List$takeReverse = F3(
	function (n, list, kept) {
		takeReverse:
		while (true) {
			if (n <= 0) {
				return kept;
			} else {
				if (!list.b) {
					return kept;
				} else {
					var x = list.a;
					var xs = list.b;
					var $temp$n = n - 1,
						$temp$list = xs,
						$temp$kept = A2($elm$core$List$cons, x, kept);
					n = $temp$n;
					list = $temp$list;
					kept = $temp$kept;
					continue takeReverse;
				}
			}
		}
	});
var $elm$core$List$takeTailRec = F2(
	function (n, list) {
		return $elm$core$List$reverse(
			A3($elm$core$List$takeReverse, n, list, _List_Nil));
	});
var $elm$core$List$takeFast = F3(
	function (ctr, n, list) {
		if (n <= 0) {
			return _List_Nil;
		} else {
			var _v0 = _Utils_Tuple2(n, list);
			_v0$1:
			while (true) {
				_v0$5:
				while (true) {
					if (!_v0.b.b) {
						return list;
					} else {
						if (_v0.b.b.b) {
							switch (_v0.a) {
								case 1:
									break _v0$1;
								case 2:
									var _v2 = _v0.b;
									var x = _v2.a;
									var _v3 = _v2.b;
									var y = _v3.a;
									return _List_fromArray(
										[x, y]);
								case 3:
									if (_v0.b.b.b.b) {
										var _v4 = _v0.b;
										var x = _v4.a;
										var _v5 = _v4.b;
										var y = _v5.a;
										var _v6 = _v5.b;
										var z = _v6.a;
										return _List_fromArray(
											[x, y, z]);
									} else {
										break _v0$5;
									}
								default:
									if (_v0.b.b.b.b && _v0.b.b.b.b.b) {
										var _v7 = _v0.b;
										var x = _v7.a;
										var _v8 = _v7.b;
										var y = _v8.a;
										var _v9 = _v8.b;
										var z = _v9.a;
										var _v10 = _v9.b;
										var w = _v10.a;
										var tl = _v10.b;
										return (ctr > 1000) ? A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A2($elm$core$List$takeTailRec, n - 4, tl))))) : A2(
											$elm$core$List$cons,
											x,
											A2(
												$elm$core$List$cons,
												y,
												A2(
													$elm$core$List$cons,
													z,
													A2(
														$elm$core$List$cons,
														w,
														A3($elm$core$List$takeFast, ctr + 1, n - 4, tl)))));
									} else {
										break _v0$5;
									}
							}
						} else {
							if (_v0.a === 1) {
								break _v0$1;
							} else {
								break _v0$5;
							}
						}
					}
				}
				return list;
			}
			var _v1 = _v0.b;
			var x = _v1.a;
			return _List_fromArray(
				[x]);
		}
	});
var $elm$core$List$take = F2(
	function (n, list) {
		return A3($elm$core$List$takeFast, 0, n, list);
	});
var $author$project$Internal$DifferSimple$commonInitialSegment = F2(
	function (x, y) {
		if (_Utils_eq(x, _List_Nil)) {
			return _List_Nil;
		} else {
			if (_Utils_eq(y, _List_Nil)) {
				return _List_Nil;
			} else {
				var b = A2($elm$core$List$take, 1, y);
				var a = A2($elm$core$List$take, 1, x);
				return _Utils_eq(a, b) ? _Utils_ap(
					a,
					A2(
						$author$project$Internal$DifferSimple$commonInitialSegment,
						A2($elm$core$List$drop, 1, x),
						A2($elm$core$List$drop, 1, y))) : _List_Nil;
			}
		}
	});
var $author$project$Internal$DifferSimple$commonTerminalSegmentAux = F3(
	function (cis, x, y) {
		var n = $elm$core$List$length(cis);
		var xx = $elm$core$List$reverse(
			A2($elm$core$List$drop, n, x));
		var yy = $elm$core$List$reverse(
			A2($elm$core$List$drop, n, y));
		return $elm$core$List$reverse(
			A2($author$project$Internal$DifferSimple$commonInitialSegment, xx, yy));
	});
var $author$project$Internal$DifferSimple$dropLast = F2(
	function (k, x) {
		return $elm$core$List$reverse(
			A2(
				$elm$core$List$drop,
				k,
				$elm$core$List$reverse(x)));
	});
var $author$project$Internal$DifferSimple$diff = F2(
	function (u, v) {
		var a = A2($author$project$Internal$DifferSimple$commonInitialSegment, u, v);
		var b_ = A3($author$project$Internal$DifferSimple$commonTerminalSegmentAux, a, u, v);
		var lb = $elm$core$List$length(b_);
		var la = $elm$core$List$length(a);
		var b = _Utils_eq(
			la,
			$elm$core$List$length(u)) ? _List_Nil : b_;
		var x = A2(
			$author$project$Internal$DifferSimple$dropLast,
			lb,
			A2($elm$core$List$drop, la, u));
		var y = A2(
			$author$project$Internal$DifferSimple$dropLast,
			lb,
			A2($elm$core$List$drop, la, v));
		return A4($author$project$Internal$DifferSimple$DiffRecord, a, b, x, y);
	});
var $author$project$Internal$DifferSimple$takeLast = F2(
	function (k, x) {
		return $elm$core$List$reverse(
			A2(
				$elm$core$List$take,
				k,
				$elm$core$List$reverse(x)));
	});
var $author$project$Internal$DifferSimple$differentialCompiler = F3(
	function (parser, diffRecord, editRecord) {
		var middleSegmentParsed = A2(
			$elm$core$List$map,
			function (p) {
				return _Utils_Tuple2(
					p,
					parser(p));
			},
			diffRecord.bX);
		var it = $elm$core$List$length(diffRecord.bN);
		var terminalSegmentParsed = A2($author$project$Internal$DifferSimple$takeLast, it, editRecord.bJ);
		var ii = $elm$core$List$length(diffRecord.bM);
		var initialSegmentParsed = A2($elm$core$List$take, ii, editRecord.bJ);
		return _Utils_ap(
			initialSegmentParsed,
			_Utils_ap(middleSegmentParsed, terminalSegmentParsed));
	});
var $author$project$Internal$DifferSimple$differentialIdList = F3(
	function (seed, diffRecord, editRecord) {
		var nt = $elm$core$List$length(diffRecord.bX);
		var ns = $elm$core$List$length(diffRecord.ed);
		var it = $elm$core$List$length(diffRecord.bN);
		var ii = $elm$core$List$length(diffRecord.bM);
		var idListTerminal = A2($elm$core$List$drop, ii + ns, editRecord.a3);
		var idListMiddle = A2(
			$elm$core$List$map,
			$author$project$Internal$DifferSimple$prefixer(seed),
			A2($elm$core$List$range, ii + 1, ii + nt));
		var idListInitial = A2($elm$core$List$take, ii, editRecord.a3);
		var idList = _Utils_ap(
			idListInitial,
			_Utils_ap(idListMiddle, idListTerminal));
		var _v0 = (!nt) ? _Utils_Tuple2($elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing) : _Utils_Tuple2(
			$elm$core$Maybe$Just(ii),
			$elm$core$Maybe$Just((ii + nt) - 1));
		var newIdsStart = _v0.a;
		var newIdsEnd = _v0.b;
		return {a3: idList, c3: newIdsEnd, c4: newIdsStart};
	});
var $author$project$Internal$DifferSimple$update = F5(
	function (seed, parser, editRecord, text, mpreamble) {
		var newParagraphs = function () {
			if (mpreamble.$ === 1) {
				return $author$project$Internal$Paragraph$logicalParagraphify(
					A2($author$project$Internal$DifferSimple$addPreamble, text, editRecord.c2));
			} else {
				var preamble = mpreamble.a;
				return $author$project$Internal$Paragraph$logicalParagraphify(preamble + ('\n\n' + text));
			}
		}();
		var diffRecord = A2($author$project$Internal$DifferSimple$diff, editRecord.cq, newParagraphs);
		var p = A3($author$project$Internal$DifferSimple$differentialIdList, seed, diffRecord, editRecord);
		var astList = A3($author$project$Internal$DifferSimple$differentialCompiler, parser, diffRecord, editRecord);
		return A6($author$project$Internal$DifferSimple$EditRecord, text, editRecord.c2, newParagraphs, astList, p.a3, editRecord.d6);
	});
var $author$project$Internal$LatexDifferSimple$update = F5(
	function (seed, parser, editRecord, source, mpreamble) {
		return $author$project$Internal$DifferSimple$isEmpty(editRecord) ? A4($author$project$Internal$LatexDifferSimple$init, parser, $author$project$Internal$LatexState$emptyLatexState, source, mpreamble) : A5($author$project$Internal$DifferSimple$update, seed, parser, editRecord, source, mpreamble);
	});
var $author$project$MiniLatex$EditSimple$init = F3(
	function (seed, source, mpreamble) {
		return A5($author$project$Internal$LatexDifferSimple$update, seed, $author$project$Internal$Parser$parse, $author$project$Internal$DifferSimple$emptyEditRecord, source, mpreamble);
	});
var $author$project$Umuli$init = F4(
	function (lang, version, content, mpreamble) {
		switch (lang) {
			case 0:
				return $author$project$Umuli$ML(
					A3($author$project$MiniLatex$EditSimple$init, version, content, mpreamble));
			case 1:
				return $author$project$Umuli$MD(
					A2($author$project$Markdown$Data$init, version, content));
			case 2:
				return $author$project$Umuli$CY(
					A2($author$project$CaYaTeX$init, version, content));
			default:
				return $author$project$Umuli$TT(content);
		}
	});
var $author$project$Editor$Editor = $elm$core$Basics$identity;
var $elm$core$Array$fromListHelp = F3(
	function (list, nodeList, nodeListSize) {
		fromListHelp:
		while (true) {
			var _v0 = A2($elm$core$Elm$JsArray$initializeFromList, $elm$core$Array$branchFactor, list);
			var jsArray = _v0.a;
			var remainingItems = _v0.b;
			if (_Utils_cmp(
				$elm$core$Elm$JsArray$length(jsArray),
				$elm$core$Array$branchFactor) < 0) {
				return A2(
					$elm$core$Array$builderToArray,
					true,
					{u: nodeList, q: nodeListSize, r: jsArray});
			} else {
				var $temp$list = remainingItems,
					$temp$nodeList = A2(
					$elm$core$List$cons,
					$elm$core$Array$Leaf(jsArray),
					nodeList),
					$temp$nodeListSize = nodeListSize + 1;
				list = $temp$list;
				nodeList = $temp$nodeList;
				nodeListSize = $temp$nodeListSize;
				continue fromListHelp;
			}
		}
	});
var $elm$core$Array$fromList = function (list) {
	if (!list.b) {
		return $elm$core$Array$empty;
	} else {
		return A3($elm$core$Array$fromListHelp, list, _List_Nil, 0);
	}
};
var $jinjor$elm_contextmenu$ContextMenu$ContextMenu = $elm$core$Basics$identity;
var $elm$core$Platform$Cmd$batch = _Platform_batch;
var $elm$core$Platform$Cmd$none = $elm$core$Platform$Cmd$batch(_List_Nil);
var $jinjor$elm_contextmenu$ContextMenu$init = _Utils_Tuple2(
	{cb: false, x: $elm$core$Maybe$Nothing},
	$elm$core$Platform$Cmd$none);
var $author$project$EditorModel$AutoLineBreakON = 0;
var $author$project$EditorModel$HelpOff = 1;
var $author$project$EditorMsg$NoHover = {$: 0};
var $author$project$EditorMsg$NoSelection = {$: 0};
var $author$project$EditorMsg$Position = F2(
	function (line, column) {
		return {ac: column, i: line};
	});
var $author$project$EditorModel$StandardEditor = {$: 0};
var $author$project$History$History = $elm$core$Basics$identity;
var $author$project$History$empty = {a2: _List_Nil, aV: _List_Nil};
var $lovasoa$elm_rolling_list$RollingList$fromList = function (l) {
	return {H: l, I: _List_Nil};
};
var $author$project$Vim$VNormal = 1;
var $author$project$Vim$init = {dr: '', bC: 1};
var $author$project$Window$init = function (height) {
	return {cV: height, bZ: 0};
};
var $author$project$EditorModel$init = function (_v0) {
	var config = _v0.a;
	var contextMenu = _v0.b;
	return {
		$7: 0,
		ds: false,
		dw: '',
		fE: contextMenu,
		d: A2($author$project$EditorMsg$Position, 0, 0),
		dE: $jinjor$elm_debounce$Debounce$init,
		ci: config.ci,
		dG: false,
		dK: $author$project$EditorModel$StandardEditor,
		bQ: config.bQ,
		cV: config.cV,
		dW: 1,
		bn: $author$project$History$empty,
		cl: $author$project$EditorMsg$NoHover,
		d_: 3,
		a6: 1.2 * config.bQ,
		d7: '',
		p: $elm$core$Array$fromList(
			$elm$core$String$lines('')),
		eA: '',
		eE: 0,
		eF: $lovasoa$elm_rolling_list$RollingList$fromList(_List_Nil),
		eG: '',
		gU: $elm$core$Maybe$Nothing,
		eL: $elm$core$Array$fromList(
			_List_fromArray(
				[''])),
		Z: $author$project$EditorMsg$NoSelection,
		eP: false,
		eX: 0,
		cz: config.cz,
		cA: config.cA,
		cB: config.cB,
		e1: $author$project$Vim$init,
		hC: config.hC,
		dj: $author$project$Window$init(600),
		hH: config.hH
	};
};
var $author$project$Editor$initWithContent = F2(
	function (content, config) {
		var _v0 = $jinjor$elm_contextmenu$ContextMenu$init;
		var contextMenu = _v0.a;
		return function (m) {
			return _Utils_update(
				m,
				{
					p: $elm$core$Array$fromList(
						$elm$core$String$lines(content))
				});
		}(
			$author$project$EditorModel$init(
				_Utils_Tuple2(config, contextMenu)));
	});
var $elm$random$Random$Seed = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$core$Bitwise$shiftRightZfBy = _Bitwise_shiftRightZfBy;
var $elm$random$Random$next = function (_v0) {
	var state0 = _v0.a;
	var incr = _v0.b;
	return A2($elm$random$Random$Seed, ((state0 * 1664525) + incr) >>> 0, incr);
};
var $elm$random$Random$initialSeed = function (x) {
	var _v0 = $elm$random$Random$next(
		A2($elm$random$Random$Seed, 0, 1013904223));
	var state1 = _v0.a;
	var incr = _v0.b;
	var state2 = (state1 + x) >>> 0;
	return $elm$random$Random$next(
		A2($elm$random$Random$Seed, state2, incr));
};
var $author$project$EditorModel$Dark = 1;
var $author$project$EditorMsg$DontWrap = 1;
var $author$project$Helper$Load$windowHeight = function (appHeight) {
	return appHeight - 70;
};
var $elm$core$Basics$min = F2(
	function (x, y) {
		return (_Utils_cmp(x, y) < 0) ? x : y;
	});
var $author$project$Helper$Load$windowWidth = function (appWidth) {
	return A2($elm$core$Basics$min, 0.5 * appWidth, 900);
};
var $author$project$Helper$Load$makeConfig = F2(
	function (appWidth, appHeight) {
		var w = $author$project$Helper$Load$windowWidth(appWidth);
		var h = $author$project$Helper$Load$windowHeight(appHeight);
		return {ci: false, bQ: 16, cV: h, cz: 3, cA: false, cB: 1, hC: w, hH: 1};
	});
var $elm$time$Time$Posix = $elm$core$Basics$identity;
var $elm$time$Time$millisToPosix = $elm$core$Basics$identity;
var $author$project$Text$start = '\n\n\\title{Towards a LaTeX IDE for the Web}\n\n\\maketitle\n\n\\tableofcontents\n\nThis app is a work-in-progress demonstration of the\npure Elm text editor that I have been working on for\na while. Although more work is needed, it can\nalready do some useful thing: documents can be\nwritten in MiniLaTeX (a subset/variant of LaTeX),\nMathMarkdown (a flavor of Markdown that can render\nLaTeX-style formulas), and plain text.\n\n$$\n\\int_{-\\infty}^\\infty e^{-x^2} dx = \\pi\n$$\n\nWhen the editor is in good shape, it will become\npart of\n\\href{https://minilatex.lamdera.app}{minilatex.lamdera.app}.\nI hope that it will find other uses as well.\n\n\\section{Command execution}\n\nOne new feature of note is \\blue{command\nexecution}.\nAs an example, try this: type ESC, then\n"th", then ESC again. You should see a dummy theorem\nenvironment in the source text. Replace the "XXX"\nthat you see with whatever you like.\n\nOther things to try with ESC are \\code{eq}, a dollar\nor double dollar sign, as well as \\code{enum} and\n\\code{item}. I\'ll be adding other environments as I\ncontinue to work on the app. Also, if you would like\nto experiment, press ctrl-option-C to clear the editor\nand rendered text. Then have at it!\n\n\n\\section{Other features}\n\n\\strong{New documents.} Use the \\blue{New document} button in the footer\nto create a new document. In the popup window,\nyou can choose the document format\n\n\n\\strong{Files.} Files on disk can be opened, edited.\n\n\n\\strong{Footer.} Note the other buttons in the footer:\nOpen, Export, Save, and PDF: \\italic{open\nfiles on disk, export\nMiniLaTeX files to standard LaTeX, save as MiniLaTeX,\nand generate PDF.} (Try the PDF button now).\n\n\n\\strong{Demo files.} Note the buttons in the footer\non the extreme right. Clicking on them will load a file\ninto the editor.  As a bonus, the app can render\nMarkdown docs (along with LaTeX-style formulas).\n\n\\strong{More info.} For more info, press the \\blue{Help} button in the\nheader.  Do note the various key commands.  They\nwork OK for Mac users, but I need to have an\nalternative keymap for Linux and Windows users.\nSuggestions are hereby solicited!\n\n\\section{Known bugs}\n\nLists in LaTeX are not always rendered properly.\nAn artefact of the way text is stored ... I\'m\nwoking on it.\n\n\\section{Feedback}\n\nWriting an editor is a complex undertaking.  I need\nfeedback on what doesn\'t work and what is missing.\nPlease see my contact info below.  Posting issues\non Github is welcome, but Slack, Email, and Twitter\nalso work.\n\n\\section{Contact}\n\nDo contact me if you have questions, bug reports, etc.\nThere is a lot to do! The idea is to end up with a real\nIDE for LaTeX on the web. When the editor project is\na little further along, I\'ll use is as the editor for\n\\href{https://minilatex.lamdera.app}{minilatex.lamdera.app}.\n\n\\begin{obeylines}\nJim Carlson\nemail: jxxcarlson@gmail.com\nElm slack: jxxcarlson\nTwitter: @epsilon2718\n\\href{https://github.com/jxxcarlson/elm-editor}{Github repo: post issues!}\n\\end{obeylines}\n\n\\par\n\n\\image{https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSKK5oCbORAuRM5xZjVTqEIsRGiFjTStX4euA&usqp=CAU}{What 4 billion years of evolution can come up with}{width: 500}\n';
var $author$project$Main$init = function (flags) {
	var config = A2($author$project$Helper$Load$makeConfig, flags.hC, flags.cV - 200);
	var newEditor = A2($author$project$Editor$initWithContent, $author$project$Text$start, config);
	var model = {
		cI: config,
		cL: 0,
		dB: $elm$time$Time$millisToPosix(0),
		dC: A4($author$project$Umuli$init, 0, 0, $author$project$Text$start, $elm$core$Maybe$Nothing),
		dE: $jinjor$elm_debounce$Debounce$init,
		dI: '',
		dJ: false,
		fL: 0,
		dL: newEditor,
		cj: 0,
		dQ: 'announcement.tex',
		bm: false,
		f1: '',
		f2: _List_Nil,
		ea: '',
		gm: 'No message yet ...',
		bv: '',
		er: 0,
		ex: $elm$random$Random$initialSeed(17319485),
		b0: flags.b0,
		gT: '',
		cy: 0,
		hz: 'axyadjfa;o2020394aklsd',
		hD: flags.cV,
		hF: flags.hC
	};
	return _Utils_Tuple2(model, $author$project$Helper$File$checkServer);
};
var $elm$json$Json$Decode$int = _Json_decodeInt;
var $author$project$Model$LogErr = function (a) {
	return {$: 33, a: a};
};
var $author$project$Model$Outside = function (a) {
	return {$: 31, a: a};
};
var $author$project$Model$Tick = function (a) {
	return {$: 27, a: a};
};
var $elm$core$Platform$Sub$batch = _Platform_batch;
var $elm$time$Time$Every = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$State = F2(
	function (taggers, processes) {
		return {eu: processes, eW: taggers};
	});
var $elm$time$Time$init = $elm$core$Task$succeed(
	A2($elm$time$Time$State, $elm$core$Dict$empty, $elm$core$Dict$empty));
var $elm$time$Time$addMySub = F2(
	function (_v0, state) {
		var interval = _v0.a;
		var tagger = _v0.b;
		var _v1 = A2($elm$core$Dict$get, interval, state);
		if (_v1.$ === 1) {
			return A3(
				$elm$core$Dict$insert,
				interval,
				_List_fromArray(
					[tagger]),
				state);
		} else {
			var taggers = _v1.a;
			return A3(
				$elm$core$Dict$insert,
				interval,
				A2($elm$core$List$cons, tagger, taggers),
				state);
		}
	});
var $elm$core$Dict$foldl = F3(
	function (func, acc, dict) {
		foldl:
		while (true) {
			if (dict.$ === -2) {
				return acc;
			} else {
				var key = dict.b;
				var value = dict.c;
				var left = dict.d;
				var right = dict.e;
				var $temp$func = func,
					$temp$acc = A3(
					func,
					key,
					value,
					A3($elm$core$Dict$foldl, func, acc, left)),
					$temp$dict = right;
				func = $temp$func;
				acc = $temp$acc;
				dict = $temp$dict;
				continue foldl;
			}
		}
	});
var $elm$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _v0) {
				stepState:
				while (true) {
					var list = _v0.a;
					var result = _v0.b;
					if (!list.b) {
						return _Utils_Tuple2(
							list,
							A3(rightStep, rKey, rValue, result));
					} else {
						var _v2 = list.a;
						var lKey = _v2.a;
						var lValue = _v2.b;
						var rest = list.b;
						if (_Utils_cmp(lKey, rKey) < 0) {
							var $temp$rKey = rKey,
								$temp$rValue = rValue,
								$temp$_v0 = _Utils_Tuple2(
								rest,
								A3(leftStep, lKey, lValue, result));
							rKey = $temp$rKey;
							rValue = $temp$rValue;
							_v0 = $temp$_v0;
							continue stepState;
						} else {
							if (_Utils_cmp(lKey, rKey) > 0) {
								return _Utils_Tuple2(
									list,
									A3(rightStep, rKey, rValue, result));
							} else {
								return _Utils_Tuple2(
									rest,
									A4(bothStep, lKey, lValue, rValue, result));
							}
						}
					}
				}
			});
		var _v3 = A3(
			$elm$core$Dict$foldl,
			stepState,
			_Utils_Tuple2(
				$elm$core$Dict$toList(leftDict),
				initialResult),
			rightDict);
		var leftovers = _v3.a;
		var intermediateResult = _v3.b;
		return A3(
			$elm$core$List$foldl,
			F2(
				function (_v4, result) {
					var k = _v4.a;
					var v = _v4.b;
					return A3(leftStep, k, v, result);
				}),
			intermediateResult,
			leftovers);
	});
var $elm$time$Time$Name = function (a) {
	return {$: 0, a: a};
};
var $elm$time$Time$Offset = function (a) {
	return {$: 1, a: a};
};
var $elm$time$Time$Zone = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$time$Time$customZone = $elm$time$Time$Zone;
var $elm$time$Time$setInterval = _Time_setInterval;
var $elm$time$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		if (!intervals.b) {
			return $elm$core$Task$succeed(processes);
		} else {
			var interval = intervals.a;
			var rest = intervals.b;
			var spawnTimer = $elm$core$Process$spawn(
				A2(
					$elm$time$Time$setInterval,
					interval,
					A2($elm$core$Platform$sendToSelf, router, interval)));
			var spawnRest = function (id) {
				return A3(
					$elm$time$Time$spawnHelp,
					router,
					rest,
					A3($elm$core$Dict$insert, interval, id, processes));
			};
			return A2($elm$core$Task$andThen, spawnRest, spawnTimer);
		}
	});
var $elm$time$Time$onEffects = F3(
	function (router, subs, _v0) {
		var processes = _v0.eu;
		var rightStep = F3(
			function (_v6, id, _v7) {
				var spawns = _v7.a;
				var existing = _v7.b;
				var kills = _v7.c;
				return _Utils_Tuple3(
					spawns,
					existing,
					A2(
						$elm$core$Task$andThen,
						function (_v5) {
							return kills;
						},
						$elm$core$Process$kill(id)));
			});
		var newTaggers = A3($elm$core$List$foldl, $elm$time$Time$addMySub, $elm$core$Dict$empty, subs);
		var leftStep = F3(
			function (interval, taggers, _v4) {
				var spawns = _v4.a;
				var existing = _v4.b;
				var kills = _v4.c;
				return _Utils_Tuple3(
					A2($elm$core$List$cons, interval, spawns),
					existing,
					kills);
			});
		var bothStep = F4(
			function (interval, taggers, id, _v3) {
				var spawns = _v3.a;
				var existing = _v3.b;
				var kills = _v3.c;
				return _Utils_Tuple3(
					spawns,
					A3($elm$core$Dict$insert, interval, id, existing),
					kills);
			});
		var _v1 = A6(
			$elm$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			processes,
			_Utils_Tuple3(
				_List_Nil,
				$elm$core$Dict$empty,
				$elm$core$Task$succeed(0)));
		var spawnList = _v1.a;
		var existingDict = _v1.b;
		var killTask = _v1.c;
		return A2(
			$elm$core$Task$andThen,
			function (newProcesses) {
				return $elm$core$Task$succeed(
					A2($elm$time$Time$State, newTaggers, newProcesses));
			},
			A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$time$Time$spawnHelp, router, spawnList, existingDict);
				},
				killTask));
	});
var $elm$time$Time$now = _Time_now($elm$time$Time$millisToPosix);
var $elm$time$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _v0 = A2($elm$core$Dict$get, interval, state.eW);
		if (_v0.$ === 1) {
			return $elm$core$Task$succeed(state);
		} else {
			var taggers = _v0.a;
			var tellTaggers = function (time) {
				return $elm$core$Task$sequence(
					A2(
						$elm$core$List$map,
						function (tagger) {
							return A2(
								$elm$core$Platform$sendToApp,
								router,
								tagger(time));
						},
						taggers));
			};
			return A2(
				$elm$core$Task$andThen,
				function (_v1) {
					return $elm$core$Task$succeed(state);
				},
				A2($elm$core$Task$andThen, tellTaggers, $elm$time$Time$now));
		}
	});
var $elm$core$Basics$composeL = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var $elm$time$Time$subMap = F2(
	function (f, _v0) {
		var interval = _v0.a;
		var tagger = _v0.b;
		return A2(
			$elm$time$Time$Every,
			interval,
			A2($elm$core$Basics$composeL, f, tagger));
	});
_Platform_effectManagers['Time'] = _Platform_createManager($elm$time$Time$init, $elm$time$Time$onEffects, $elm$time$Time$onSelfMsg, 0, $elm$time$Time$subMap);
var $elm$time$Time$subscription = _Platform_leaf('Time');
var $elm$time$Time$every = F2(
	function (interval, tagger) {
		return $elm$time$Time$subscription(
			A2($elm$time$Time$Every, interval, tagger));
	});
var $author$project$Outside$GotClipboard = $elm$core$Basics$identity;
var $elm$json$Json$Decode$string = _Json_decodeString;
var $author$project$Outside$clipboardDecoder = $elm$json$Json$Decode$string;
var $elm$json$Json$Decode$decodeValue = _Json_run;
var $elm$json$Json$Decode$value = _Json_decodeValue;
var $author$project$Outside$infoForElm = _Platform_incomingPort(
	'infoForElm',
	A2(
		$elm$json$Json$Decode$andThen,
		function (tag) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (data) {
					return $elm$json$Json$Decode$succeed(
						{dC: data, bD: tag});
				},
				A2($elm$json$Json$Decode$field, 'data', $elm$json$Json$Decode$value));
		},
		A2($elm$json$Json$Decode$field, 'tag', $elm$json$Json$Decode$string)));
var $author$project$Outside$getInfo = F2(
	function (tagger, onError) {
		return $author$project$Outside$infoForElm(
			function (outsideInfo) {
				var _v0 = outsideInfo.bD;
				if (_v0 === 'GotClipboard') {
					var _v1 = A2($elm$json$Json$Decode$decodeValue, $author$project$Outside$clipboardDecoder, outsideInfo.dC);
					if (!_v1.$) {
						var result = _v1.a;
						return tagger(result);
					} else {
						return onError('');
					}
				} else {
					return onError('Unexpected info from outside');
				}
			});
	});
var $author$project$Main$subscriptions = function (model) {
	return $elm$core$Platform$Sub$batch(
		_List_fromArray(
			[
				A2($elm$time$Time$every, 1000, $author$project$Model$Tick),
				A2($author$project$Outside$getInfo, $author$project$Model$Outside, $author$project$Model$LogErr)
			]));
};
var $author$project$Model$Disk = 1;
var $author$project$Model$FinallyDoCleanPrintArtefacts = function (a) {
	return {$: 20, a: a};
};
var $author$project$Model$NewSeed = function (a) {
	return {$: 8, a: a};
};
var $author$project$Model$DebounceMsg = function (a) {
	return {$: 6, a: a};
};
var $jinjor$elm_debounce$Debounce$Later = function (a) {
	return {$: 2, a: a};
};
var $jinjor$elm_debounce$Debounce$later = $jinjor$elm_debounce$Debounce$Later;
var $author$project$Helper$Update$debounceConfig = {
	g9: $jinjor$elm_debounce$Debounce$later(250),
	hw: $author$project$Model$DebounceMsg
};
var $author$project$Model$Render = function (a) {
	return {$: 3, a: a};
};
var $author$project$Helper$Update$render_ = function (str) {
	return A2(
		$elm$core$Task$perform,
		$author$project$Model$Render,
		$elm$core$Task$succeed(str));
};
var $jinjor$elm_debounce$Debounce$takeLast = F3(
	function (send, head, tail) {
		return _Utils_Tuple2(
			_List_Nil,
			send(head));
	});
var $jinjor$elm_debounce$Debounce$Flush = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Process$sleep = _Process_sleep;
var $jinjor$elm_debounce$Debounce$delayCmd = F2(
	function (delay, msg) {
		return A2(
			$elm$core$Task$perform,
			function (_v0) {
				return msg;
			},
			$elm$core$Process$sleep(delay));
	});
var $elm$core$Platform$Cmd$map = _Platform_map;
var $jinjor$elm_debounce$Debounce$update = F4(
	function (config, send, msg, _v0) {
		var d = _v0;
		switch (msg.$) {
			case 0:
				return _Utils_Tuple2(d, $elm$core$Platform$Cmd$none);
			case 1:
				var tryAgainAfter = msg.a;
				var _v2 = d.a4;
				if (_v2.b) {
					var head = _v2.a;
					var tail = _v2.b;
					var selfCmd = function () {
						if (!tryAgainAfter.$) {
							var delay = tryAgainAfter.a;
							return A2(
								$jinjor$elm_debounce$Debounce$delayCmd,
								delay,
								$jinjor$elm_debounce$Debounce$Flush(
									$elm$core$Maybe$Just(delay)));
						} else {
							return $elm$core$Platform$Cmd$none;
						}
					}();
					var _v3 = A2(send, head, tail);
					var input = _v3.a;
					var sendCmd = _v3.b;
					return _Utils_Tuple2(
						_Utils_update(
							d,
							{a4: input, ax: true}),
						$elm$core$Platform$Cmd$batch(
							_List_fromArray(
								[
									sendCmd,
									A2($elm$core$Platform$Cmd$map, config.hw, selfCmd)
								])));
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							d,
							{ax: false}),
						$elm$core$Platform$Cmd$none);
				}
			default:
				var lastInputLength = msg.a;
				var _v5 = _Utils_Tuple2(
					_Utils_cmp(
						$elm$core$List$length(d.a4),
						lastInputLength) < 1,
					d.a4);
				if (_v5.a && _v5.b.b) {
					var _v6 = _v5.b;
					var head = _v6.a;
					var tail = _v6.b;
					var _v7 = A2(send, head, tail);
					var input = _v7.a;
					var cmd = _v7.b;
					return _Utils_Tuple2(
						_Utils_update(
							d,
							{a4: input}),
						cmd);
				} else {
					return _Utils_Tuple2(d, $elm$core$Platform$Cmd$none);
				}
		}
	});
var $author$project$Helper$Update$debounceMsg = F2(
	function (model, msg_) {
		var _v0 = A4(
			$jinjor$elm_debounce$Debounce$update,
			$author$project$Helper$Update$debounceConfig,
			$jinjor$elm_debounce$Debounce$takeLast($author$project$Helper$Update$render_),
			msg_,
			model.dE);
		var debounce = _v0.a;
		var cmd = _v0.b;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{dE: debounce}),
			cmd);
	});
var $author$project$Editor$getLines = function (_v0) {
	var model = _v0;
	return model.p;
};
var $author$project$Editor$getContent = function (editor) {
	return A2(
		$elm$core$String$join,
		'\n',
		$elm$core$Array$toList(
			$author$project$Editor$getLines(editor)));
};
var $elm$file$File$Download$string = F3(
	function (name, mime, content) {
		return A2(
			$elm$core$Task$perform,
			$elm$core$Basics$never,
			A3(_File_download, name, mime, content));
	});
var $elm$core$String$cons = _String_cons;
var $elm$core$String$fromChar = function (_char) {
	return A2($elm$core$String$cons, _char, '');
};
var $elm$core$Bitwise$and = _Bitwise_and;
var $elm$core$Bitwise$shiftRightBy = _Bitwise_shiftRightBy;
var $elm$core$String$repeatHelp = F3(
	function (n, chunk, result) {
		return (n <= 0) ? result : A3(
			$elm$core$String$repeatHelp,
			n >> 1,
			_Utils_ap(chunk, chunk),
			(!(n & 1)) ? result : _Utils_ap(result, chunk));
	});
var $elm$core$String$repeat = F2(
	function (n, chunk) {
		return A3($elm$core$String$repeatHelp, n, chunk, '');
	});
var $elm$core$String$padLeft = F3(
	function (n, _char, string) {
		return _Utils_ap(
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)),
			string);
	});
var $author$project$Internal$Utility$numberedLine = F2(
	function (k, line) {
		return A3(
			$elm$core$String$padLeft,
			2,
			' ',
			$elm$core$String$fromInt(k)) + (' ' + line);
	});
var $author$project$Internal$Utility$addNumberedLine = F2(
	function (line, data) {
		var _v0 = data;
		var k = _v0.a;
		var lines = _v0.b;
		return _Utils_Tuple2(
			k + 1,
			_Utils_ap(
				_List_fromArray(
					[
						A2($author$project$Internal$Utility$numberedLine, k + 1, line)
					]),
				lines));
	});
var $author$project$Internal$Utility$addLineNumbers = function (text) {
	return A2(
		$elm$core$String$join,
		'\n',
		$elm$core$List$reverse(
			A3(
				$elm$core$List$foldl,
				$author$project$Internal$Utility$addNumberedLine,
				_Utils_Tuple2(0, _List_Nil),
				A2(
					$elm$core$String$split,
					'\n',
					$elm$core$String$trim(text))).b));
};
var $elm$core$String$replace = F3(
	function (before, after, string) {
		return A2(
			$elm$core$String$join,
			after,
			A2($elm$core$String$split, before, string));
	});
var $author$project$MiniLatex$Export$fixBadChars = function (str) {
	return A3(
		$elm$core$String$replace,
		'#',
		'\\#',
		A3($elm$core$String$replace, '_', '\\_', str));
};
var $elm$core$String$fromFloat = _String_fromNumber;
var $author$project$MiniLatex$Export$getElement = F2(
	function (k, list) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Internal$Parser$LXString('xxx'),
			A2($author$project$Internal$Utility$getAt, k, list));
	});
var $author$project$MiniLatex$Export$getExportUrl = function (url) {
	var parts = A2($elm$core$String$split, '/', url);
	var n = $elm$core$List$length(parts);
	var lastPart = A2(
		$elm$core$Maybe$withDefault,
		'xxx',
		$elm$core$List$head(
			A2($elm$core$List$drop, n - 1, parts)));
	return 'image/' + lastPart;
};
var $author$project$MiniLatex$Export$imageAlignCenter = F3(
	function (exportUrl, label, width) {
		return '\\imagecenter{' + (exportUrl + ('}{' + (label + ('}{' + (width + '}')))));
	});
var $author$project$MiniLatex$Export$imageFloatLeft = F3(
	function (exportUrl, label, width) {
		return '\\imagefloatleft{' + (exportUrl + ('}{' + (label + ('}{' + (width + '}')))));
	});
var $author$project$MiniLatex$Export$imageFloatRight = F3(
	function (exportUrl, label, width) {
		return '\\imagefloatright{' + (exportUrl + ('}{' + (label + ('}{' + (width + '}')))));
	});
var $author$project$Internal$JoinStrings$NoSpace = 1;
var $author$project$Internal$JoinStrings$Space = 0;
var $author$project$Internal$JoinStrings$firstChar = $elm$core$String$left(1);
var $elm$core$String$right = F2(
	function (n, string) {
		return (n < 1) ? '' : A3(
			$elm$core$String$slice,
			-n,
			$elm$core$String$length(string),
			string);
	});
var $author$project$Internal$JoinStrings$lastChar = $elm$core$String$right(1);
var $author$project$Internal$JoinStrings$joinType = F2(
	function (l, r) {
		var lastCharLeft = $author$project$Internal$JoinStrings$lastChar(l);
		var firstCharRight = $author$project$Internal$JoinStrings$firstChar(r);
		return (l === '') ? 1 : (A2(
			$elm$core$List$member,
			lastCharLeft,
			_List_fromArray(
				['('])) ? 1 : (A2(
			$elm$core$List$member,
			firstCharRight,
			_List_fromArray(
				[')', '.', ',', '?', '!', ';', ':'])) ? 1 : 0));
	});
var $author$project$Internal$JoinStrings$joinDatum2String = F2(
	function (current, datum) {
		var _v0 = datum;
		var acc = _v0.a;
		var previous = _v0.b;
		var _v1 = A2($author$project$Internal$JoinStrings$joinType, previous, current);
		if (_v1 === 1) {
			return _Utils_Tuple2(
				_Utils_ap(acc, current),
				current);
		} else {
			return _Utils_Tuple2(acc + (' ' + current), current);
		}
	});
var $author$project$Internal$JoinStrings$joinList = function (stringList) {
	var start = A2(
		$elm$core$Maybe$withDefault,
		'',
		$elm$core$List$head(stringList));
	return A3(
		$elm$core$List$foldl,
		$author$project$Internal$JoinStrings$joinDatum2String,
		_Utils_Tuple2('', ''),
		stringList).a;
};
var $author$project$Internal$Image$ImageAttributes = F3(
	function (width, _float, align) {
		return {e8: align, fR: _float, hC: width};
	});
var $author$project$Internal$KeyValueUtilities$itemListHelper = F2(
	function (itemParser, revItems) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (item_) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, item_, revItems));
						}),
					itemParser),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(revItems));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $author$project$Internal$KeyValueUtilities$itemList_ = F2(
	function (initialList, itemParser) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			initialList,
			$author$project$Internal$KeyValueUtilities$itemListHelper(itemParser));
	});
var $author$project$Internal$KeyValueUtilities$itemList = function (itemParser) {
	return A2($author$project$Internal$KeyValueUtilities$itemList_, _List_Nil, itemParser);
};
var $author$project$Internal$KeyValueUtilities$ExpectingColon = 0;
var $author$project$Internal$KeyValueUtilities$ExpectingComma = 2;
var $elm$core$Tuple$pair = F2(
	function (a, b) {
		return _Utils_Tuple2(a, b);
	});
var $elm$parser$Parser$Advanced$spaces = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return (c === ' ') || ((c === '\n') || (c === '\r'));
	});
var $author$project$Internal$KeyValueUtilities$ws = $elm$parser$Parser$Advanced$chompWhile(
	function (c) {
		return (c === ' ') || (c === '\n');
	});
var $author$project$Internal$KeyValueUtilities$word = F2(
	function (problem, inWord) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed($elm$core$String$slice),
						$author$project$Internal$KeyValueUtilities$ws),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$getOffset,
								A2($elm$parser$Parser$Advanced$chompIf, inWord, problem)),
							$elm$parser$Parser$Advanced$chompWhile(inWord)),
						$author$project$Internal$KeyValueUtilities$ws)),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$Internal$KeyValueUtilities$keyValuePair = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		var a = _v0.a;
		var b = _v0.b;
		return _Utils_Tuple2(
			$elm$core$String$trim(a),
			$elm$core$String$trim(b));
	},
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Tuple$pair),
				$elm$parser$Parser$Advanced$spaces),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$author$project$Internal$KeyValueUtilities$word,
							0,
							function (c) {
								return c !== ':';
							}),
						$elm$parser$Parser$Advanced$spaces),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, ':', 0))),
				$elm$parser$Parser$Advanced$spaces)),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$author$project$Internal$KeyValueUtilities$word,
				2,
				function (c) {
					return c !== ',';
				}),
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, ',', 2)),
						$elm$parser$Parser$Advanced$spaces
					])))));
var $author$project$Internal$KeyValueUtilities$keyValuePairs = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
	$author$project$Internal$KeyValueUtilities$itemList($author$project$Internal$KeyValueUtilities$keyValuePair));
var $elm$core$Result$withDefault = F2(
	function (def, result) {
		if (!result.$) {
			var a = result.a;
			return a;
		} else {
			return def;
		}
	});
var $author$project$Internal$KeyValueUtilities$getKeyValueList = function (str) {
	return A2(
		$elm$core$Result$withDefault,
		_List_Nil,
		A2($elm$parser$Parser$Advanced$run, $author$project$Internal$KeyValueUtilities$keyValuePairs, str));
};
var $author$project$Internal$KeyValueUtilities$getValue = F2(
	function (key, kvpList) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			$elm$core$List$head(
				A2(
					$elm$core$List$map,
					function (x) {
						return x.b;
					},
					A2(
						$elm$core$List$filter,
						function (x) {
							return _Utils_eq(x.a, key);
						},
						kvpList))));
	});
var $author$project$Internal$Image$parseImageAttributes = function (attributeString) {
	var kvList = $author$project$Internal$KeyValueUtilities$getKeyValueList(attributeString);
	var widthValue = A2(
		$elm$core$Maybe$withDefault,
		200,
		$elm$core$String$toInt(
			A2($author$project$Internal$KeyValueUtilities$getValue, 'width', kvList)));
	var floatValue = A2($author$project$Internal$KeyValueUtilities$getValue, 'float', kvList);
	var alignValue = A2($author$project$Internal$KeyValueUtilities$getValue, 'align', kvList);
	return A3($author$project$Internal$Image$ImageAttributes, widthValue, floatValue, alignValue);
};
var $author$project$MiniLatex$Export$renderComment = function (str) {
	return '% ' + (str + '\n');
};
var $author$project$Internal$ErrorMessages2$renderError = function (errorDatum) {
	return 'error';
};
var $author$project$Internal$ParserTools$addToNumberAsString = F2(
	function (k, str) {
		var _v0 = $elm$core$String$toInt(str);
		if (_v0.$ === 1) {
			return str;
		} else {
			var n = _v0.a;
			return $elm$core$String$fromInt(n + k);
		}
	});
var $author$project$Internal$ParserTools$transformLXString = F2(
	function (f, latexExpr) {
		if (!latexExpr.$) {
			var str = latexExpr.a;
			return $author$project$Internal$Parser$LXString(
				f(str));
		} else {
			return latexExpr;
		}
	});
var $author$project$Internal$ParserTools$transformLXList = F2(
	function (f, latexExpr) {
		if (latexExpr.$ === 8) {
			var list = latexExpr.a;
			return $author$project$Internal$Parser$LatexList(
				A2(
					$elm$core$List$map,
					$author$project$Internal$ParserTools$transformLXString(f),
					list));
		} else {
			return latexExpr;
		}
	});
var $author$project$Internal$ParserTools$decrementSetCounterArgs = function (args) {
	return A2(
		$elm$core$List$map,
		$author$project$Internal$ParserTools$transformLXList(
			$author$project$Internal$ParserTools$addToNumberAsString(-1)),
		args);
};
var $author$project$Internal$ParserTools$getDecrementedSetCounterArg = function (args) {
	return A2(
		$elm$core$Maybe$map,
		$author$project$Internal$ParserTools$getString,
		A2(
			$elm$core$Maybe$andThen,
			$elm$core$List$head,
			A2(
				$elm$core$Maybe$map,
				$author$project$Internal$ParserTools$latexList2List,
				A2(
					$author$project$Internal$Utility$getAt,
					1,
					$author$project$Internal$ParserTools$decrementSetCounterArgs(args)))));
};
var $author$project$MiniLatex$Export$renderSetCounter = F2(
	function (optArgs, args) {
		var argValue = A2(
			$elm$core$Maybe$withDefault,
			'0',
			$author$project$Internal$ParserTools$getDecrementedSetCounterArg(args));
		return ' \\setcounter{section}' + ('{' + (argValue + '}'));
	});
var $author$project$MiniLatex$Export$renderSvg = function (body) {
	return 'Cannot yet render Svg images; convert to some other format, e.g., png';
};
var $author$project$MiniLatex$Export$renderTableOfContents = F2(
	function (optArgs, args) {
		return '\\parskip0pt\n\\tableofcontents\n\\parskip5pt';
	});
var $author$project$MiniLatex$Export$renderUseForWeb = function (body) {
	return '';
};
var $author$project$MiniLatex$Export$macroRenderer = function (name) {
	var _v6 = A2(
		$elm$core$Dict$get,
		name,
		$author$project$MiniLatex$Export$cyclic$renderMacroDict());
	if (!_v6.$) {
		var f = _v6.a;
		return f;
	} else {
		return $author$project$MiniLatex$Export$reproduceMacro(name);
	}
};
var $author$project$MiniLatex$Export$render = function (latexExpression) {
	switch (latexExpression.$) {
		case 1:
			var str = latexExpression.a;
			return $author$project$MiniLatex$Export$renderComment(str);
		case 6:
			var name = latexExpression.a;
			var optArgs = latexExpression.b;
			var args = latexExpression.c;
			return A3($author$project$MiniLatex$Export$renderMacro, name, optArgs, args);
		case 5:
			var name = latexExpression.a;
			var optArgs = latexExpression.b;
			var args = latexExpression.c;
			var le = latexExpression.d;
			return A4($author$project$MiniLatex$Export$renderSMacro, name, optArgs, args, le);
		case 2:
			var level = latexExpression.a;
			var latexExpression_ = latexExpression.b;
			return A2($author$project$MiniLatex$Export$renderItem, level, latexExpression_);
		case 3:
			var str = latexExpression.a;
			return ' $' + (str + '$ ');
		case 4:
			var str = latexExpression.a;
			return '$$' + (str + '$$\n');
		case 7:
			var name = latexExpression.a;
			var args = latexExpression.b;
			var body = latexExpression.c;
			return A3($author$project$MiniLatex$Export$renderEnvironment, name, args, body);
		case 8:
			var args = latexExpression.a;
			return $author$project$MiniLatex$Export$renderLatexList(args);
		case 0:
			var str = latexExpression.a;
			return str;
		case 9:
			return '';
		default:
			var error = latexExpression.a;
			return A2(
				$elm$core$String$join,
				'; ',
				A2($elm$core$List$map, $author$project$Internal$ErrorMessages2$renderError, error));
	}
};
var $author$project$MiniLatex$Export$renderArg = F2(
	function (k, args) {
		return $elm$core$String$trim(
			$author$project$MiniLatex$Export$render(
				A2($author$project$MiniLatex$Export$getElement, k, args)));
	});
var $author$project$MiniLatex$Export$renderArgList = function (args) {
	return A2(
		$elm$core$String$join,
		'',
		A2(
			$elm$core$List$map,
			function (x) {
				return '{' + (x + '}');
			},
			A2(
				$elm$core$List$map,
				$author$project$MiniLatex$Export$fixBadChars,
				A2($elm$core$List$map, $author$project$MiniLatex$Export$render, args))));
};
var $author$project$MiniLatex$Export$renderCleanedArgList = function (args) {
	return A2(
		$elm$core$String$join,
		'',
		A2(
			$elm$core$List$map,
			function (x) {
				return '{' + (x + '}');
			},
			A2(
				$elm$core$List$map,
				$author$project$MiniLatex$Export$fixBadChars,
				A2($elm$core$List$map, $author$project$MiniLatex$Export$render, args))));
};
var $author$project$MiniLatex$Export$renderCode = F2(
	function (optArgs, args) {
		return ' \\code' + ($author$project$MiniLatex$Export$renderOptArgList(optArgs) + $author$project$MiniLatex$Export$renderCleanedArgList(args));
	});
var $author$project$MiniLatex$Export$renderDefaultEnvironment = F3(
	function (name, args, body) {
		var slimBody = $elm$core$String$trim(
			$author$project$MiniLatex$Export$render(body));
		return '\\begin{' + (name + ('}' + ($author$project$MiniLatex$Export$renderArgList(args) + ('\n' + (slimBody + ('\n\\end{' + (name + '}\n')))))));
	});
var $author$project$MiniLatex$Export$renderEnvironment = F3(
	function (name, args, body) {
		var _v4 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$MiniLatex$Export$cyclic$renderEnvironmentDict());
		if (!_v4.$) {
			var f = _v4.a;
			return A2(f, args, body);
		} else {
			return A3($author$project$MiniLatex$Export$renderDefaultEnvironment, name, args, body);
		}
	});
var $author$project$MiniLatex$Export$renderHref = F2(
	function (optArgs, args) {
		return ' \\href' + $author$project$MiniLatex$Export$renderSpecialArgList(args);
	});
var $author$project$MiniLatex$Export$renderImage = function (args) {
	var url = A2($author$project$MiniLatex$Export$renderArg, 0, args);
	var label = A2($author$project$MiniLatex$Export$renderArg, 1, args);
	var exportUrl = $author$project$MiniLatex$Export$getExportUrl(url);
	var attributeString = A2($author$project$MiniLatex$Export$renderArg, 2, args);
	var imageAttrs = $author$project$Internal$Image$parseImageAttributes(attributeString);
	var width_ = function (x) {
		return 4.5 * x;
	}(imageAttrs.hC);
	var width = $elm$core$String$fromFloat((3.0 * width_) / 1400.0) + 'in';
	var _v3 = _Utils_Tuple2(imageAttrs.fR, imageAttrs.e8);
	switch (_v3.a) {
		case 'left':
			return A3($author$project$MiniLatex$Export$imageFloatLeft, exportUrl, label, width);
		case 'right':
			return A3($author$project$MiniLatex$Export$imageFloatRight, exportUrl, label, width);
		default:
			if (_v3.b === 'center') {
				return A3($author$project$MiniLatex$Export$imageAlignCenter, exportUrl, label, width);
			} else {
				return A3($author$project$MiniLatex$Export$imageAlignCenter, exportUrl, label, width);
			}
	}
};
var $author$project$MiniLatex$Export$renderItem = F2(
	function (level, latexExpression) {
		return '\\item ' + ($author$project$MiniLatex$Export$render(latexExpression) + '\n\n');
	});
var $author$project$MiniLatex$Export$renderLatexList = function (args) {
	return $author$project$Internal$JoinStrings$joinList(
		A2($elm$core$List$map, $author$project$MiniLatex$Export$render, args));
};
var $author$project$MiniLatex$Export$renderListing = function (body) {
	var text = $author$project$MiniLatex$Export$render(body);
	return '\\begin{verbatim}\n' + ($author$project$Internal$Utility$addLineNumbers(text) + '\n\\end{verbatim}');
};
var $author$project$MiniLatex$Export$renderMacro = F3(
	function (name, optArgs, args) {
		return A3($author$project$MiniLatex$Export$macroRenderer, name, optArgs, args);
	});
var $author$project$MiniLatex$Export$renderOptArgList = function (args) {
	return A2(
		$elm$core$String$join,
		'',
		A2(
			$elm$core$List$map,
			function (x) {
				return '[' + (x + ']');
			},
			A2($elm$core$List$map, $author$project$MiniLatex$Export$render, args)));
};
var $author$project$MiniLatex$Export$renderRow = function (expr) {
	if (expr.$ === 8) {
		var cells = expr.a;
		return function (x) {
			return x + ' \\\\';
		}(
			A2(
				$elm$core$String$join,
				' & ',
				A2($elm$core$List$map, $author$project$MiniLatex$Export$render, cells)));
	} else {
		return 'renderRow: error';
	}
};
var $author$project$MiniLatex$Export$renderSMacro = F4(
	function (name, optArgs, args, le) {
		return ' \\' + (name + ($author$project$MiniLatex$Export$renderOptArgList(optArgs) + ($author$project$MiniLatex$Export$renderArgList(args) + (' ' + $author$project$MiniLatex$Export$render(le)))));
	});
var $author$project$MiniLatex$Export$renderSpecialArgList = function (args) {
	var tail = $elm$core$List$tail(args);
	var renderedTail = A2($elm$core$Maybe$map, $author$project$MiniLatex$Export$renderCleanedArgList, tail);
	var head = $elm$core$List$head(args);
	var renderedHead = A2($elm$core$Maybe$map, $author$project$MiniLatex$Export$render, head);
	var _v1 = _Utils_Tuple2(renderedHead, renderedTail);
	if ((!_v1.a.$) && (!_v1.b.$)) {
		var h = _v1.a.a;
		var t = _v1.b.a;
		return '{' + (h + ('}' + t));
	} else {
		return '';
	}
};
var $author$project$MiniLatex$Export$renderTabular = F2(
	function (args, body) {
		var format = A2($author$project$MiniLatex$Export$renderArg, 0, args);
		if (body.$ === 8) {
			var rows = body.a;
			return function (x) {
				return '\\begin{tabular}{' + (format + ('}\n' + (x + '\n\\end{tabular}')));
			}(
				A2(
					$elm$core$String$join,
					'\n',
					A2($elm$core$List$map, $author$project$MiniLatex$Export$renderRow, rows)));
		} else {
			return 'renderTabular: error';
		}
	});
var $author$project$MiniLatex$Export$renderTheBibliography = function (body) {
	return '\\begin{thebibliography}{abc}\n' + ($author$project$MiniLatex$Export$render(body) + '\n\\end{thebibliography}');
};
var $author$project$MiniLatex$Export$reproduceMacro = F3(
	function (name, optArgs, args) {
		return ' \\' + (name + ($author$project$MiniLatex$Export$renderOptArgList(optArgs) + $author$project$MiniLatex$Export$renderArgList(args)));
	});
function $author$project$MiniLatex$Export$cyclic$renderEnvironmentDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'listing',
				F2(
					function (args, body) {
						return $author$project$MiniLatex$Export$renderListing(body);
					})),
				_Utils_Tuple2(
				'useforweb',
				F2(
					function (args, body) {
						return $author$project$MiniLatex$Export$renderUseForWeb(body);
					})),
				_Utils_Tuple2(
				'thebibliography',
				F2(
					function (args, body) {
						return $author$project$MiniLatex$Export$renderTheBibliography(body);
					})),
				_Utils_Tuple2(
				'tabular',
				F2(
					function (args, body) {
						return A2($author$project$MiniLatex$Export$renderTabular, args, body);
					})),
				_Utils_Tuple2(
				'mathmacro',
				F2(
					function (args, body) {
						return $author$project$MiniLatex$Export$render(body);
					})),
				_Utils_Tuple2(
				'textmacro',
				F2(
					function (args, body) {
						return $author$project$MiniLatex$Export$render(body);
					})),
				_Utils_Tuple2(
				'svg',
				F2(
					function (args, body) {
						return $author$project$MiniLatex$Export$renderSvg(body);
					}))
			]));
}
function $author$project$MiniLatex$Export$cyclic$renderMacroDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'image',
				F2(
					function (x, y) {
						return $author$project$MiniLatex$Export$renderImage(y);
					})),
				_Utils_Tuple2(
				'code',
				F2(
					function (x, y) {
						return A2($author$project$MiniLatex$Export$renderCode, x, y);
					})),
				_Utils_Tuple2(
				'href',
				F2(
					function (x, y) {
						return A2($author$project$MiniLatex$Export$renderHref, x, y);
					})),
				_Utils_Tuple2(
				'mdash',
				F2(
					function (x, y) {
						return '---';
					})),
				_Utils_Tuple2(
				'ndash',
				F2(
					function (x, y) {
						return '--';
					})),
				_Utils_Tuple2(
				'setcounter',
				F2(
					function (x, y) {
						return A2($author$project$MiniLatex$Export$renderSetCounter, x, y);
					})),
				_Utils_Tuple2(
				'tableofcontents',
				F2(
					function (x, y) {
						return A2($author$project$MiniLatex$Export$renderTableOfContents, x, y);
					}))
			]));
}
var $author$project$MiniLatex$Export$renderEnvironmentDict = $author$project$MiniLatex$Export$cyclic$renderEnvironmentDict();
$author$project$MiniLatex$Export$cyclic$renderEnvironmentDict = function () {
	return $author$project$MiniLatex$Export$renderEnvironmentDict;
};
var $author$project$MiniLatex$Export$renderMacroDict = $author$project$MiniLatex$Export$cyclic$renderMacroDict();
$author$project$MiniLatex$Export$cyclic$renderMacroDict = function () {
	return $author$project$MiniLatex$Export$renderMacroDict;
};
var $author$project$Internal$Source$texPrefix = '\n\\documentclass[11pt, oneside]{article}\n\n%% Packages\n\\usepackage{geometry}\n\\geometry{letterpaper}\n\\usepackage{changepage}   % for the adjustwidth environment\n\\usepackage{graphicx}\n\\usepackage{wrapfig}\n\\graphicspath{ {images/} }\n\\usepackage{amssymb}\n\\usepackage{amsmath}\n\\usepackage{amscd}\n\\usepackage{hyperref}\n\\hypersetup{\n    colorlinks=true,\n    linkcolor=blue,\n    filecolor=magenta,\n    urlcolor=blue,\n}\n\\usepackage{xcolor}\n\\usepackage{soul}\n\n\n%% Commands\n\\newcommand{\\code}[1]{{\\tt #1}}\n\\newcommand{\\ellie}[1]{\\href{#1}{Link to Ellie}}\n% \\newcommand{\\image}[3]{\\includegraphics[width=3cm]{#1}}\n\n\\newcommand{\\imagecenter}[3]{{\n   \\medskip\n   \\begin{figure}\n   \\centering\n    \\includegraphics[width=12cm,height=12cm,keepaspectratio]{#1}\n    \\vglue0pt \\par {#2}\n    \\end{figure}\n    \\medskip\n}}\n\n\\newcommand{\\imagefloatright}[3]{\n    \\begin{wrapfigure}{R}{0.30\\textwidth}\n    \\includegraphics[width=0.30\\textwidth]{#1}\n    \\caption{#2}\n    \\end{wrapfigure}\n}\n\n\\newcommand{\\imagefloatleft}[3]{\n    \\begin{wrapfigure}{L}{0.3-\\textwidth}\n    \\includegraphics[width=0.30\\textwidth]{#1}\n    \\caption{#2}\n    \\end{wrapfigure}\n}\n\n\\newcommand{\\italic}[1]{{\\sl #1}}\n\\newcommand{\\strong}[1]{{\\bf #1}}\n\\newcommand{\\subheading}[1]{{\\bf #1}\\par}\n\\newcommand{\\xlink}[2]{\\href{{https://minilatex.lamdera.app/g/#1}}{#2}}\n\\newcommand{\\red}[1]{\\textcolor{red}{#1}}\n\\newcommand{\\blue}[1]{\\textcolor{blue}{#1}}\n\\newcommand{\\remote}[1]{\\textcolor{red}{#1}}\n\\newcommand{\\local}[1]{\\textcolor{blue}{#1}}\n\\newcommand{\\highlight}[1]{\\hl{#1}}\n\\newcommand{\\note}[2]{\\textcolor{blue}{#1}{\\hl{#1}}}\n\\newcommand{\\strike}[1]{\\st{#1}}\n\\newcommand{\\term}[1]{{\\sl #1}}\n\\newtheorem{remark}{Remark}\n\\newcommand{\\comment}[1]{}\n\\newcommand{\\innertableofcontents}{}\n\n%% Theorems\n\\newtheorem{theorem}{Theorem}\n\\newtheorem{axiom}{Axiom}\n\\newtheorem{lemma}{Lemma}\n\\newtheorem{proposition}{Proposition}\n\\newtheorem{corollary}{Corollary}\n\\newtheorem{definition}{Definition}\n\\newtheorem{example}{Example}\n\\newtheorem{exercise}{Exercise}\n\\newtheorem{problem}{Problem}\n\\newtheorem{exercises}{Exercises}\n\\newcommand{\\bs}[1]{$\\backslash$#1}\n\\newcommand{\\texarg}[1]{\\{#1\\}}\n\n%% Environments\n\\renewenvironment{quotation}\n  {\\begin{adjustwidth}{2cm}{} \\footnotesize}\n  {\\end{adjustwidth}}\n\n% Spacing\n\\parindent0pt\n\\parskip5pt\n\n\\begin{document}\n\n\n';
var $author$project$Internal$Source$texSuffix = '\n\n\\end{document}\n';
var $author$project$MiniLatex$Export$toLaTeX = function (str) {
	var parsand = A2(
		$elm$core$List$map,
		$author$project$Internal$Parser$parse,
		$author$project$Internal$Paragraph$logicalParagraphify(str));
	var latex_ = A3(
		$elm$core$List$foldl,
		F2(
			function (renderedElement, acc) {
				return acc + ('\n' + renderedElement);
			}),
		'',
		A2($elm$core$List$map, $author$project$MiniLatex$Export$renderLatexList, parsand));
	return A2(
		$elm$core$String$join,
		'\n',
		_List_fromArray(
			[$author$project$Internal$Source$texPrefix, latex_, $author$project$Internal$Source$texSuffix]));
};
var $author$project$Helper$File$export = function (model) {
	var contentForExport = $author$project$MiniLatex$Export$toLaTeX(
		$author$project$Editor$getContent(model.dL));
	return A3($elm$file$File$Download$string, model.dQ, 'text/x-tex', contentForExport);
};
var $author$project$Model$FileSelected = function (a) {
	return {$: 15, a: a};
};
var $elm$file$File$Select$file = F2(
	function (mimes, toMsg) {
		return A2(
			$elm$core$Task$perform,
			toMsg,
			_File_uploadOne(mimes));
	});
var $author$project$Helper$Update$fileRequested = function (model) {
	return _Utils_Tuple2(
		model,
		A2(
			$elm$file$File$Select$file,
			_List_fromArray(
				['text/tex', 'text/md', 'text/md']),
			$author$project$Model$FileSelected));
};
var $author$project$Model$FileLoaded = function (a) {
	return {$: 16, a: a};
};
var $elm$file$File$toString = _File_toString;
var $author$project$Helper$Update$fileSelected = F3(
	function (model, fileName, file) {
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{dQ: fileName}),
			A2(
				$elm$core$Task$perform,
				$author$project$Model$FileLoaded,
				$elm$file$File$toString(file)));
	});
var $author$project$Model$CaYaTeX = 2;
var $author$project$Model$MathMarkdown = 1;
var $author$project$Model$PlainText = 3;
var $author$project$Model$findDocumentType = function (fileName) {
	var parts = A2($elm$core$String$split, '.', fileName);
	var mExtensionName = $elm$core$List$head(
		$elm$core$List$reverse(parts));
	_v0$4:
	while (true) {
		if (!mExtensionName.$) {
			switch (mExtensionName.a) {
				case 'tex':
					return 0;
				case 'md':
					return 1;
				case 'cyt':
					return 2;
				case 'txt':
					return 3;
				default:
					break _v0$4;
			}
		} else {
			break _v0$4;
		}
	}
	return 3;
};
var $author$project$Umuli$LCaYaTeX = 2;
var $author$project$Umuli$LMarkdown = 1;
var $author$project$Umuli$LText = 3;
var $author$project$Model$umuliLang = function (documentType) {
	switch (documentType) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 2;
		default:
			return 3;
	}
};
var $author$project$Helper$Update$fullRender = function (model) {
	var content = A2(
		$elm$core$String$join,
		'\n',
		$elm$core$Array$toList(
			$author$project$Editor$getLines(model.dL)));
	var newData = A4(
		$author$project$Umuli$init,
		$author$project$Model$umuliLang(model.fL),
		model.cL,
		content,
		$elm$core$Maybe$Nothing);
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{cL: model.cL + 1, dC: newData}),
		$elm$core$Platform$Cmd$none);
};
var $elm$random$Random$Generate = $elm$core$Basics$identity;
var $elm$time$Time$posixToMillis = function (_v0) {
	var millis = _v0;
	return millis;
};
var $elm$random$Random$init = A2(
	$elm$core$Task$andThen,
	function (time) {
		return $elm$core$Task$succeed(
			$elm$random$Random$initialSeed(
				$elm$time$Time$posixToMillis(time)));
	},
	$elm$time$Time$now);
var $elm$random$Random$step = F2(
	function (_v0, seed) {
		var generator = _v0;
		return generator(seed);
	});
var $elm$random$Random$onEffects = F3(
	function (router, commands, seed) {
		if (!commands.b) {
			return $elm$core$Task$succeed(seed);
		} else {
			var generator = commands.a;
			var rest = commands.b;
			var _v1 = A2($elm$random$Random$step, generator, seed);
			var value = _v1.a;
			var newSeed = _v1.b;
			return A2(
				$elm$core$Task$andThen,
				function (_v2) {
					return A3($elm$random$Random$onEffects, router, rest, newSeed);
				},
				A2($elm$core$Platform$sendToApp, router, value));
		}
	});
var $elm$random$Random$onSelfMsg = F3(
	function (_v0, _v1, seed) {
		return $elm$core$Task$succeed(seed);
	});
var $elm$random$Random$Generator = $elm$core$Basics$identity;
var $elm$random$Random$map = F2(
	function (func, _v0) {
		var genA = _v0;
		return function (seed0) {
			var _v1 = genA(seed0);
			var a = _v1.a;
			var seed1 = _v1.b;
			return _Utils_Tuple2(
				func(a),
				seed1);
		};
	});
var $elm$random$Random$cmdMap = F2(
	function (func, _v0) {
		var generator = _v0;
		return A2($elm$random$Random$map, func, generator);
	});
_Platform_effectManagers['Random'] = _Platform_createManager($elm$random$Random$init, $elm$random$Random$onEffects, $elm$random$Random$onSelfMsg, $elm$random$Random$cmdMap);
var $elm$random$Random$command = _Platform_leaf('Random');
var $elm$random$Random$generate = F2(
	function (tagger, generator) {
		return $elm$random$Random$command(
			A2($elm$random$Random$map, tagger, generator));
	});
var $jinjor$elm_debounce$Debounce$SendIfLengthNotChangedFrom = function (a) {
	return {$: 2, a: a};
};
var $jinjor$elm_debounce$Debounce$length = function (_v0) {
	var input = _v0.a4;
	return $elm$core$List$length(input);
};
var $jinjor$elm_debounce$Debounce$push = F3(
	function (config, a, _v0) {
		var d = _v0;
		var newDebounce = _Utils_update(
			d,
			{
				a4: A2($elm$core$List$cons, a, d.a4)
			});
		var selfCmd = function () {
			var _v1 = config.g9;
			switch (_v1.$) {
				case 0:
					var offset = _v1.a;
					return d.ax ? $elm$core$Platform$Cmd$none : A2(
						$jinjor$elm_debounce$Debounce$delayCmd,
						offset,
						$jinjor$elm_debounce$Debounce$Flush($elm$core$Maybe$Nothing));
				case 1:
					var offset = _v1.a;
					var delay = _v1.b;
					return d.ax ? $elm$core$Platform$Cmd$none : A2(
						$jinjor$elm_debounce$Debounce$delayCmd,
						offset,
						$jinjor$elm_debounce$Debounce$Flush(
							$elm$core$Maybe$Just(delay)));
				default:
					var delay = _v1.a;
					return A2(
						$jinjor$elm_debounce$Debounce$delayCmd,
						delay,
						$jinjor$elm_debounce$Debounce$SendIfLengthNotChangedFrom(
							$jinjor$elm_debounce$Debounce$length(newDebounce)));
			}
		}();
		return _Utils_Tuple2(
			newDebounce,
			A2($elm$core$Platform$Cmd$map, config.hw, selfCmd));
	});
var $author$project$Helper$Update$getContent = F2(
	function (model, str) {
		var _v0 = A3($jinjor$elm_debounce$Debounce$push, $author$project$Helper$Update$debounceConfig, str, model.dE);
		var debounce = _v0.a;
		var cmd = _v0.b;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{dE: debounce}),
			cmd);
	});
var $author$project$Model$ChangePrintingState = function (a) {
	return {$: 18, a: a};
};
var $author$project$Model$PrintReady = 2;
var $author$project$Helper$LaTeX$gotPdfLink = F2(
	function (model, result) {
		if (result.$ === 1) {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		} else {
			var docId = result.a;
			return _Utils_Tuple2(
				model,
				$elm$core$Platform$Cmd$batch(
					_List_fromArray(
						[
							A2(
							$elm$core$Task$perform,
							$elm$core$Basics$always(
								$author$project$Model$ChangePrintingState(2)),
							$elm$core$Process$sleep(5))
						])));
		}
	});
var $author$project$Outside$AskForClipBoard = function (a) {
	return {$: 0, a: a};
};
var $author$project$Model$MyEditorMsg = function (a) {
	return {$: 0, a: a};
};
var $author$project$Outside$WriteToClipBoard = function (a) {
	return {$: 1, a: a};
};
var $author$project$Model$fileExtension = function (dt) {
	switch (dt) {
		case 0:
			return '.tex';
		case 1:
			return '.md';
		case 2:
			return '.cyt';
		default:
			return '.txt';
	}
};
var $author$project$Editor$getSelectedString = function (_v0) {
	var model = _v0;
	return model.gU;
};
var $author$project$Helper$Update$load = F3(
	function (fileName, content, model) {
		var newEditor = A2($author$project$Editor$initWithContent, content, model.cI);
		var documentType = $author$project$Model$findDocumentType(fileName);
		var docType = $author$project$Model$findDocumentType(fileName);
		var data = A4(
			$author$project$Umuli$init,
			$author$project$Model$umuliLang(docType),
			model.cL,
			content,
			$elm$core$Maybe$Nothing);
		return _Utils_update(
			model,
			{cL: model.cL + 1, dC: data, fL: documentType, dL: newEditor});
	});
var $elm$json$Json$Encode$null = _Json_encodeNull;
var $elm$json$Json$Encode$object = function (pairs) {
	return _Json_wrap(
		A3(
			$elm$core$List$foldl,
			F2(
				function (_v0, obj) {
					var k = _v0.a;
					var v = _v0.b;
					return A3(_Json_addField, k, v, obj);
				}),
			_Json_emptyObject(0),
			pairs));
};
var $elm$json$Json$Encode$string = _Json_wrap;
var $author$project$Outside$infoForOutside = _Platform_outgoingPort(
	'infoForOutside',
	function ($) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'data',
					$elm$core$Basics$identity($.dC)),
					_Utils_Tuple2(
					'tag',
					$elm$json$Json$Encode$string($.bD))
				]));
	});
var $author$project$Outside$sendInfo = function (info) {
	if (!info.$) {
		return $author$project$Outside$infoForOutside(
			{dC: $elm$json$Json$Encode$null, bD: 'AskForClipBoard'});
	} else {
		var str = info.a;
		return $author$project$Outside$infoForOutside(
			{
				dC: $elm$json$Json$Encode$string(str),
				bD: 'WriteToClipboard'
			});
	}
};
var $author$project$CaYaTeX$update = F3(
	function (generation, text, _v0) {
		return A2($author$project$CaYaTeX$init, generation, text);
	});
var $author$project$Markdown$Data$update = F3(
	function (version, content, data) {
		return _Utils_update(
			data,
			{gZ: content});
	});
var $author$project$MiniLatex$EditSimple$update = F4(
	function (version, source, mpreamble, editRecord) {
		return A5($author$project$Internal$LatexDifferSimple$update, version, $author$project$Internal$Parser$parse, editRecord, source, mpreamble);
	});
var $author$project$Umuli$update = F4(
	function (version, content, mpreamble, data) {
		switch (data.$) {
			case 0:
				var data_ = data.a;
				return $author$project$Umuli$ML(
					A4($author$project$MiniLatex$EditSimple$update, version, content, mpreamble, data_));
			case 1:
				var data_ = data.a;
				return $author$project$Umuli$MD(
					A3($author$project$Markdown$Data$update, version, content, data_));
			case 2:
				var data_ = data.a;
				return $author$project$Umuli$CY(
					A3($author$project$CaYaTeX$update, version, content, data_));
			default:
				var data_ = data.a;
				return $author$project$Umuli$TT(content);
		}
	});
var $author$project$Helper$Sync$updateRenderingData = F2(
	function (lines, model) {
		var source = A2(
			$elm$core$String$join,
			'\n',
			$elm$core$Array$toList(lines));
		var newData = A4($author$project$Umuli$update, model.cL, source, $elm$core$Maybe$Nothing, model.dC);
		var counter = model.cL + 1;
		return _Utils_update(
			model,
			{cL: counter, dC: newData});
	});
var $Janiczek$cmd_extra$Cmd$Extra$withCmd = F2(
	function (cmd, model) {
		return _Utils_Tuple2(model, cmd);
	});
var $author$project$Helper$Sync$sync = F3(
	function (newEditor, cmd, model) {
		return A2(
			$Janiczek$cmd_extra$Cmd$Extra$withCmd,
			A2($elm$core$Platform$Cmd$map, $author$project$Model$MyEditorMsg, cmd),
			function (m) {
				return _Utils_update(
					m,
					{dL: newEditor});
			}(
				A2(
					$author$project$Helper$Sync$updateRenderingData,
					$author$project$Editor$getLines(newEditor),
					model)));
	});
var $author$project$EditorMsg$Copy = {$: 23};
var $author$project$EditorMsg$CopyPasteClipboard = {$: 55};
var $author$project$EditorMsg$Cut = {$: 22};
var $author$project$EditorMsg$Deindent = {$: 16};
var $author$project$EditorMsg$Indent = {$: 15};
var $author$project$EditorMsg$KillLine = {$: 19};
var $author$project$EditorMsg$NewLine = {$: 13};
var $author$project$EditorMsg$Paste = {$: 24};
var $author$project$EditorMsg$Redo = {$: 38};
var $author$project$EditorMsg$RemoveCharAfter = {$: 18};
var $author$project$EditorMsg$RemoveCharBefore = {$: 17};
var $author$project$EditorMsg$Undo = {$: 37};
var $author$project$EditorMsg$WrapAll = {$: 25};
var $author$project$EditorMsg$WrapSelection = {$: 26};
var $author$project$Editor$syncMessages = _List_fromArray(
	[$author$project$EditorMsg$RemoveCharBefore, $author$project$EditorMsg$RemoveCharAfter, $author$project$EditorMsg$KillLine, $author$project$EditorMsg$Cut, $author$project$EditorMsg$Copy, $author$project$EditorMsg$CopyPasteClipboard, $author$project$EditorMsg$NewLine, $author$project$EditorMsg$Paste, $author$project$EditorMsg$WrapAll, $author$project$EditorMsg$WrapSelection, $author$project$EditorMsg$Undo, $author$project$EditorMsg$Redo, $author$project$EditorMsg$Indent, $author$project$EditorMsg$Deindent]);
var $author$project$EditorModel$AutoLineBreakOFF = 1;
var $author$project$EditorMsg$ContextMenuMsg = function (a) {
	return {$: 44, a: a};
};
var $author$project$EditorMsg$EditorNoOp = {$: 0};
var $author$project$EditorMsg$SelectedChar = function (a) {
	return {$: 2, a: a};
};
var $author$project$EditorMsg$SelectingFrom = function (a) {
	return {$: 1, a: a};
};
var $author$project$EditorMsg$Selection = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $author$project$EditorMsg$ViewportMotion = function (a) {
	return {$: 53, a: a};
};
var $author$project$EditorModel$VimEditor = function (a) {
	return {$: 1, a: a};
};
var $author$project$EditorModel$VimNormal = 0;
var $author$project$Update$Wrap$charactersPerLine = F2(
	function (screenWidth, fontSize) {
		return (1.55 * screenWidth) / fontSize;
	});
var $elm$core$Basics$truncate = _Basics_truncate;
var $author$project$Update$Wrap$maxWrapWidth = function (model) {
	return (A2($author$project$Update$Wrap$charactersPerLine, model.hC, model.bQ) - 3) | 0;
};
var $author$project$Update$Wrap$optimumWrapWidth = function (model) {
	return (A2($author$project$Update$Wrap$charactersPerLine, model.hC, model.bQ) - 6) | 0;
};
var $author$project$Wrap$appendBlankLine = function (list) {
	return _Utils_ap(
		list,
		_List_fromArray(
			['']));
};
var $elm$core$List$append = F2(
	function (xs, ys) {
		if (!ys.b) {
			return xs;
		} else {
			return A3($elm$core$List$foldr, $elm$core$List$cons, ys, xs);
		}
	});
var $elm$core$List$concat = function (lists) {
	return A3($elm$core$List$foldr, $elm$core$List$append, _List_Nil, lists);
};
var $elm$core$Array$length = function (_v0) {
	var len = _v0.a;
	return len;
};
var $elm$core$Elm$JsArray$push = _JsArray_push;
var $elm$core$Array$bitMask = 4294967295 >>> (32 - $elm$core$Array$shiftStep);
var $elm$core$Basics$ge = _Utils_ge;
var $elm$core$Elm$JsArray$singleton = _JsArray_singleton;
var $elm$core$Elm$JsArray$unsafeGet = _JsArray_unsafeGet;
var $elm$core$Elm$JsArray$unsafeSet = _JsArray_unsafeSet;
var $elm$core$Array$insertTailInTree = F4(
	function (shift, index, tail, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		if (_Utils_cmp(
			pos,
			$elm$core$Elm$JsArray$length(tree)) > -1) {
			if (shift === 5) {
				return A2(
					$elm$core$Elm$JsArray$push,
					$elm$core$Array$Leaf(tail),
					tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, $elm$core$Elm$JsArray$empty));
				return A2($elm$core$Elm$JsArray$push, newSub, tree);
			}
		} else {
			var value = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!value.$) {
				var subTree = value.a;
				var newSub = $elm$core$Array$SubTree(
					A4($elm$core$Array$insertTailInTree, shift - $elm$core$Array$shiftStep, index, tail, subTree));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			} else {
				var newSub = $elm$core$Array$SubTree(
					A4(
						$elm$core$Array$insertTailInTree,
						shift - $elm$core$Array$shiftStep,
						index,
						tail,
						$elm$core$Elm$JsArray$singleton(value)));
				return A3($elm$core$Elm$JsArray$unsafeSet, pos, newSub, tree);
			}
		}
	});
var $elm$core$Bitwise$shiftLeftBy = _Bitwise_shiftLeftBy;
var $elm$core$Array$unsafeReplaceTail = F2(
	function (newTail, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var originalTailLen = $elm$core$Elm$JsArray$length(tail);
		var newTailLen = $elm$core$Elm$JsArray$length(newTail);
		var newArrayLen = len + (newTailLen - originalTailLen);
		if (_Utils_eq(newTailLen, $elm$core$Array$branchFactor)) {
			var overflow = _Utils_cmp(newArrayLen >>> $elm$core$Array$shiftStep, 1 << startShift) > 0;
			if (overflow) {
				var newShift = startShift + $elm$core$Array$shiftStep;
				var newTree = A4(
					$elm$core$Array$insertTailInTree,
					newShift,
					len,
					newTail,
					$elm$core$Elm$JsArray$singleton(
						$elm$core$Array$SubTree(tree)));
				return A4($elm$core$Array$Array_elm_builtin, newArrayLen, newShift, newTree, $elm$core$Elm$JsArray$empty);
			} else {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					newArrayLen,
					startShift,
					A4($elm$core$Array$insertTailInTree, startShift, len, newTail, tree),
					$elm$core$Elm$JsArray$empty);
			}
		} else {
			return A4($elm$core$Array$Array_elm_builtin, newArrayLen, startShift, tree, newTail);
		}
	});
var $elm$core$Array$push = F2(
	function (a, array) {
		var tail = array.d;
		return A2(
			$elm$core$Array$unsafeReplaceTail,
			A2($elm$core$Elm$JsArray$push, a, tail),
			array);
	});
var $author$project$Wrap$Start = 0;
var $author$project$Wrap$InBlank = 2;
var $author$project$Wrap$InBlock = 4;
var $author$project$Wrap$InCode = 3;
var $author$project$Wrap$InParagraph = 1;
var $author$project$Wrap$BeginBlock = 3;
var $author$project$Wrap$Blank = 0;
var $author$project$Wrap$CodeDelimiter = 2;
var $author$project$Wrap$EndBlock = 4;
var $author$project$Wrap$Text = 1;
var $elm$core$String$trimLeft = _String_trimLeft;
var $author$project$Wrap$classifyLine = function (str) {
	var prefix = $elm$core$String$trimLeft(str);
	return (prefix === '') ? 0 : ((A2($elm$core$String$left, 3, prefix) === '```') ? 2 : ((A2($elm$core$String$left, 2, prefix) === '$$') ? 2 : ((A2($elm$core$String$left, 6, prefix) === '\\begin') ? 3 : ((A2($elm$core$String$left, 4, prefix) === '\\end') ? 4 : 1))));
};
var $author$project$Wrap$BlockParagraph = 2;
var $author$project$Wrap$CodeParagraph = 1;
var $author$project$Wrap$TextParagraph = 0;
var $author$project$Wrap$joinLines = function (list) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filter,
			function (s) {
				return s !== '';
			},
			$elm$core$List$reverse(list)));
};
var $author$project$Wrap$joinLinesForCode = function (list) {
	return A2(
		$elm$core$String$join,
		'\n',
		$elm$core$List$reverse(list));
};
var $author$project$Wrap$opDict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2(
			'NoOp',
			F2(
				function (_v0, d) {
					return d;
				})),
			_Utils_Tuple2(
			'StartParagraph',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: _List_fromArray(
								[s]),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'AddToParagraph',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: A2($elm$core$List$cons, s, d.U),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'EndParagraph',
			F2(
				function (_v1, d) {
					return _Utils_update(
						d,
						{
							U: _List_Nil,
							b$: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									0,
									$author$project$Wrap$joinLines(d.U)),
								d.b$)
						});
				})),
			_Utils_Tuple2(
			'StartCodeFromBlank',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: _List_fromArray(
								[s]),
							b$: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									0,
									$author$project$Wrap$joinLines(d.U)),
								d.b$),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'StartCodeFromParagraph',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: _List_fromArray(
								[s]),
							b$: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									0,
									$author$project$Wrap$joinLines(d.U)),
								d.b$),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'StartCode',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: _List_fromArray(
								[s]),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'AddToCode',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: A2($elm$core$List$cons, s, d.U),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'EndCode',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: _List_Nil,
							b$: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									1,
									$author$project$Wrap$joinLinesForCode(
										A2($elm$core$List$cons, s, d.U))),
								d.b$)
						});
				})),
			_Utils_Tuple2(
			'StartBlockFromBlank',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: _List_fromArray(
								[s]),
							b$: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									0,
									$author$project$Wrap$joinLines(d.U)),
								d.b$),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'StartBlockFromParagraph',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: _List_fromArray(
								[s]),
							b$: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									0,
									$author$project$Wrap$joinLines(d.U)),
								d.b$),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'StartBlock',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: _List_fromArray(
								[s]),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'AddToBlock',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: A2($elm$core$List$cons, s, d.U),
							cy: d.cy + 1
						});
				})),
			_Utils_Tuple2(
			'EndBlock',
			F2(
				function (s, d) {
					return _Utils_update(
						d,
						{
							U: _List_Nil,
							b$: A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									2,
									$author$project$Wrap$joinLinesForCode(
										A2($elm$core$List$cons, s, d.U))),
								d.b$)
						});
				}))
		]));
var $author$project$Wrap$op = function (opName) {
	return A2(
		$elm$core$Maybe$withDefault,
		F2(
			function (_v0, d) {
				return d;
			}),
		A2($elm$core$Dict$get, opName, $author$project$Wrap$opDict));
};
var $author$project$Wrap$nextStateAndAction = F2(
	function (line, state) {
		var _v0 = _Utils_Tuple2(
			state,
			$author$project$Wrap$classifyLine(line));
		_v0$18:
		while (true) {
			switch (_v0.a) {
				case 3:
					switch (_v0.b) {
						case 2:
							var _v19 = _v0.a;
							var _v20 = _v0.b;
							return _Utils_Tuple2(
								0,
								$author$project$Wrap$op('EndCode'));
						case 0:
							var _v21 = _v0.a;
							var _v22 = _v0.b;
							return _Utils_Tuple2(
								3,
								$author$project$Wrap$op('AddToCode'));
						case 1:
							var _v23 = _v0.a;
							var _v24 = _v0.b;
							return _Utils_Tuple2(
								3,
								$author$project$Wrap$op('AddToCode'));
						default:
							break _v0$18;
					}
				case 2:
					switch (_v0.b) {
						case 0:
							var _v7 = _v0.a;
							var _v8 = _v0.b;
							return _Utils_Tuple2(
								2,
								$author$project$Wrap$op('EndParagraph'));
						case 1:
							var _v9 = _v0.a;
							var _v10 = _v0.b;
							return _Utils_Tuple2(
								1,
								$author$project$Wrap$op('StartParagraph'));
						case 2:
							var _v11 = _v0.a;
							var _v12 = _v0.b;
							return _Utils_Tuple2(
								3,
								$author$project$Wrap$op('StartCodeFromBlank'));
						case 3:
							var _v25 = _v0.a;
							var _v26 = _v0.b;
							return _Utils_Tuple2(
								4,
								$author$project$Wrap$op('StartBlockFromBlank'));
						default:
							break _v0$18;
					}
				case 1:
					switch (_v0.b) {
						case 1:
							var _v1 = _v0.a;
							var _v2 = _v0.b;
							return _Utils_Tuple2(
								1,
								$author$project$Wrap$op('AddToParagraph'));
						case 0:
							var _v3 = _v0.a;
							var _v4 = _v0.b;
							return _Utils_Tuple2(
								2,
								$author$project$Wrap$op('EndParagraph'));
						case 2:
							var _v5 = _v0.a;
							var _v6 = _v0.b;
							return _Utils_Tuple2(
								3,
								$author$project$Wrap$op('StartCodeFromParagraph'));
						case 3:
							var _v27 = _v0.a;
							var _v28 = _v0.b;
							return _Utils_Tuple2(
								4,
								$author$project$Wrap$op('StartBlockFromParagraph'));
						default:
							break _v0$18;
					}
				case 0:
					switch (_v0.b) {
						case 1:
							var _v13 = _v0.a;
							var _v14 = _v0.b;
							return _Utils_Tuple2(
								1,
								$author$project$Wrap$op('StartParagraph'));
						case 2:
							var _v15 = _v0.a;
							var _v16 = _v0.b;
							return _Utils_Tuple2(
								3,
								$author$project$Wrap$op('StartCode'));
						case 0:
							var _v17 = _v0.a;
							var _v18 = _v0.b;
							return _Utils_Tuple2(
								0,
								$author$project$Wrap$op('NoOp'));
						case 3:
							var _v29 = _v0.a;
							var _v30 = _v0.b;
							return _Utils_Tuple2(
								4,
								$author$project$Wrap$op('StartBlock'));
						default:
							break _v0$18;
					}
				default:
					switch (_v0.b) {
						case 4:
							var _v31 = _v0.a;
							var _v32 = _v0.b;
							return _Utils_Tuple2(
								0,
								$author$project$Wrap$op('EndBlock'));
						case 0:
							var _v33 = _v0.a;
							var _v34 = _v0.b;
							return _Utils_Tuple2(
								4,
								$author$project$Wrap$op('AddToBlock'));
						case 1:
							var _v35 = _v0.a;
							var _v36 = _v0.b;
							return _Utils_Tuple2(
								4,
								$author$project$Wrap$op('AddToBlock'));
						default:
							break _v0$18;
					}
			}
		}
		return _Utils_Tuple2(
			0,
			$author$project$Wrap$op('NoOp'));
	});
var $author$project$Wrap$nextState = F2(
	function (line, _v0) {
		var state = _v0.a;
		var data = _v0.b;
		var _v1 = A2($author$project$Wrap$nextStateAndAction, line, state);
		var newState = _v1.a;
		var action = _v1.b;
		return _Utils_Tuple2(
			newState,
			A2(action, line, data));
	});
var $author$project$Wrap$runFSM = function (lines) {
	var initialData = _Utils_Tuple2(
		0,
		{U: _List_Nil, b$: _List_Nil, cy: 0});
	return $elm$core$List$reverse(
		A3($elm$core$List$foldl, $author$project$Wrap$nextState, initialData, lines).b.b$);
};
var $elm$core$Elm$JsArray$appendN = _JsArray_appendN;
var $elm$core$Elm$JsArray$slice = _JsArray_slice;
var $elm$core$Array$appendHelpBuilder = F2(
	function (tail, builder) {
		var tailLen = $elm$core$Elm$JsArray$length(tail);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(builder.r)) - tailLen;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, builder.r, tail);
		return (notAppended < 0) ? {
			u: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.u),
			q: builder.q + 1,
			r: A3($elm$core$Elm$JsArray$slice, notAppended, tailLen, tail)
		} : ((!notAppended) ? {
			u: A2(
				$elm$core$List$cons,
				$elm$core$Array$Leaf(appended),
				builder.u),
			q: builder.q + 1,
			r: $elm$core$Elm$JsArray$empty
		} : {u: builder.u, q: builder.q, r: appended});
	});
var $elm$core$Array$tailIndex = function (len) {
	return (len >>> 5) << 5;
};
var $elm$core$Array$sliceLeft = F2(
	function (from, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		if (!from) {
			return array;
		} else {
			if (_Utils_cmp(
				from,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					len - from,
					$elm$core$Array$shiftStep,
					$elm$core$Elm$JsArray$empty,
					A3(
						$elm$core$Elm$JsArray$slice,
						from - $elm$core$Array$tailIndex(len),
						$elm$core$Elm$JsArray$length(tail),
						tail));
			} else {
				var skipNodes = (from / $elm$core$Array$branchFactor) | 0;
				var helper = F2(
					function (node, acc) {
						if (!node.$) {
							var subTree = node.a;
							return A3($elm$core$Elm$JsArray$foldr, helper, acc, subTree);
						} else {
							var leaf = node.a;
							return A2($elm$core$List$cons, leaf, acc);
						}
					});
				var leafNodes = A3(
					$elm$core$Elm$JsArray$foldr,
					helper,
					_List_fromArray(
						[tail]),
					tree);
				var nodesToInsert = A2($elm$core$List$drop, skipNodes, leafNodes);
				if (!nodesToInsert.b) {
					return $elm$core$Array$empty;
				} else {
					var head = nodesToInsert.a;
					var rest = nodesToInsert.b;
					var firstSlice = from - (skipNodes * $elm$core$Array$branchFactor);
					var initialBuilder = {
						u: _List_Nil,
						q: 0,
						r: A3(
							$elm$core$Elm$JsArray$slice,
							firstSlice,
							$elm$core$Elm$JsArray$length(head),
							head)
					};
					return A2(
						$elm$core$Array$builderToArray,
						true,
						A3($elm$core$List$foldl, $elm$core$Array$appendHelpBuilder, initialBuilder, rest));
				}
			}
		}
	});
var $elm$core$Array$fetchNewTail = F4(
	function (shift, end, treeEnd, tree) {
		fetchNewTail:
		while (true) {
			var pos = $elm$core$Array$bitMask & (treeEnd >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!_v0.$) {
				var sub = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$end = end,
					$temp$treeEnd = treeEnd,
					$temp$tree = sub;
				shift = $temp$shift;
				end = $temp$end;
				treeEnd = $temp$treeEnd;
				tree = $temp$tree;
				continue fetchNewTail;
			} else {
				var values = _v0.a;
				return A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, values);
			}
		}
	});
var $elm$core$Array$hoistTree = F3(
	function (oldShift, newShift, tree) {
		hoistTree:
		while (true) {
			if ((_Utils_cmp(oldShift, newShift) < 1) || (!$elm$core$Elm$JsArray$length(tree))) {
				return tree;
			} else {
				var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, 0, tree);
				if (!_v0.$) {
					var sub = _v0.a;
					var $temp$oldShift = oldShift - $elm$core$Array$shiftStep,
						$temp$newShift = newShift,
						$temp$tree = sub;
					oldShift = $temp$oldShift;
					newShift = $temp$newShift;
					tree = $temp$tree;
					continue hoistTree;
				} else {
					return tree;
				}
			}
		}
	});
var $elm$core$Array$sliceTree = F3(
	function (shift, endIdx, tree) {
		var lastPos = $elm$core$Array$bitMask & (endIdx >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, lastPos, tree);
		if (!_v0.$) {
			var sub = _v0.a;
			var newSub = A3($elm$core$Array$sliceTree, shift - $elm$core$Array$shiftStep, endIdx, sub);
			return (!$elm$core$Elm$JsArray$length(newSub)) ? A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree) : A3(
				$elm$core$Elm$JsArray$unsafeSet,
				lastPos,
				$elm$core$Array$SubTree(newSub),
				A3($elm$core$Elm$JsArray$slice, 0, lastPos + 1, tree));
		} else {
			return A3($elm$core$Elm$JsArray$slice, 0, lastPos, tree);
		}
	});
var $elm$core$Array$sliceRight = F2(
	function (end, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		if (_Utils_eq(end, len)) {
			return array;
		} else {
			if (_Utils_cmp(
				end,
				$elm$core$Array$tailIndex(len)) > -1) {
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					startShift,
					tree,
					A3($elm$core$Elm$JsArray$slice, 0, $elm$core$Array$bitMask & end, tail));
			} else {
				var endIdx = $elm$core$Array$tailIndex(end);
				var depth = $elm$core$Basics$floor(
					A2(
						$elm$core$Basics$logBase,
						$elm$core$Array$branchFactor,
						A2($elm$core$Basics$max, 1, endIdx - 1)));
				var newShift = A2($elm$core$Basics$max, 5, depth * $elm$core$Array$shiftStep);
				return A4(
					$elm$core$Array$Array_elm_builtin,
					end,
					newShift,
					A3(
						$elm$core$Array$hoistTree,
						startShift,
						newShift,
						A3($elm$core$Array$sliceTree, startShift, endIdx, tree)),
					A4($elm$core$Array$fetchNewTail, startShift, end, endIdx, tree));
			}
		}
	});
var $elm$core$Array$translateIndex = F2(
	function (index, _v0) {
		var len = _v0.a;
		var posIndex = (index < 0) ? (len + index) : index;
		return (posIndex < 0) ? 0 : ((_Utils_cmp(posIndex, len) > 0) ? len : posIndex);
	});
var $elm$core$Array$slice = F3(
	function (from, to, array) {
		var correctTo = A2($elm$core$Array$translateIndex, to, array);
		var correctFrom = A2($elm$core$Array$translateIndex, from, array);
		return (_Utils_cmp(correctFrom, correctTo) > 0) ? $elm$core$Array$empty : A2(
			$elm$core$Array$sliceLeft,
			correctFrom,
			A2($elm$core$Array$sliceRight, correctTo, array));
	});
var $elm$core$List$isEmpty = function (xs) {
	if (!xs.b) {
		return true;
	} else {
		return false;
	}
};
var $folkertdev$elm_paragraph$SymmetricList$last = function (_v0) {
	var y = _v0.a;
	var x = _v0.b;
	return (!$elm$core$List$isEmpty(x)) ? $elm$core$List$head(x) : $elm$core$List$head(y);
};
var $folkertdev$elm_paragraph$Paragraph$fold1 = F3(
	function (f, g, list) {
		if (!list.b) {
			return $elm$core$Maybe$Nothing;
		} else {
			if (!list.b.b) {
				var a = list.a;
				return $elm$core$Maybe$Just(
					g(a));
			} else {
				var a = list.a;
				var x = list.b;
				return A2(
					$elm$core$Maybe$map,
					function (xs) {
						return A2(f, a, xs);
					},
					A3($folkertdev$elm_paragraph$Paragraph$fold1, f, g, x));
			}
		}
	});
var $folkertdev$elm_paragraph$Paragraph$scan1 = F3(
	function (f, g, list) {
		var g_ = function (a) {
			return _List_fromArray(
				[
					g(a)
				]);
		};
		var f_ = F2(
			function (a, s) {
				if (!s.b) {
					return s;
				} else {
					var first = s.a;
					var rest = s.b;
					return A2(
						$elm$core$List$cons,
						A2(f, a, first),
						s);
				}
			});
		return A2(
			$elm$core$Maybe$withDefault,
			_List_Nil,
			A3($folkertdev$elm_paragraph$Paragraph$fold1, f_, g_, list));
	});
var $folkertdev$elm_paragraph$SymmetricList$SymmetricList = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $folkertdev$elm_paragraph$SymmetricList$cons = F2(
	function (a, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return (!$elm$core$List$isEmpty(y)) ? A2(
			$folkertdev$elm_paragraph$SymmetricList$SymmetricList,
			A2($elm$core$List$cons, a, x),
			y) : A2(
			$folkertdev$elm_paragraph$SymmetricList$SymmetricList,
			_List_fromArray(
				[a]),
			x);
	});
var $folkertdev$elm_paragraph$SymmetricList$empty = A2($folkertdev$elm_paragraph$SymmetricList$SymmetricList, _List_Nil, _List_Nil);
var $folkertdev$elm_paragraph$SymmetricList$singleton = function (x) {
	return A2($folkertdev$elm_paragraph$SymmetricList$cons, x, $folkertdev$elm_paragraph$SymmetricList$empty);
};
var $folkertdev$elm_paragraph$Paragraph$startr = function (width) {
	return {
		be: $folkertdev$elm_paragraph$SymmetricList$singleton(
			{gj: 0, b7: 0, hC: 0}),
		gj: 1,
		hC: width
	};
};
var $folkertdev$elm_paragraph$Paragraph$ceildiv = F2(
	function (n, m) {
		return (((n + m) - 1) / m) | 0;
	});
var $folkertdev$elm_paragraph$SymmetricList$head = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	return (!$elm$core$List$isEmpty(x)) ? $elm$core$List$head(x) : $elm$core$List$head(y);
};
var $elm$core$Basics$pow = _Basics_pow;
var $folkertdev$elm_paragraph$Paragraph$single = function (p) {
	return !p.gj;
};
var $folkertdev$elm_paragraph$SymmetricList$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $folkertdev$elm_paragraph$SymmetricList$tail = function (_v0) {
	var x = _v0.a;
	var y = _v0.b;
	var _v1 = A2(
		$folkertdev$elm_paragraph$SymmetricList$splitAt,
		($elm$core$List$length(y) / 2) | 0,
		y);
	var y0 = _v1.a;
	var y1 = _v1.b;
	if (!x.b) {
		return $folkertdev$elm_paragraph$SymmetricList$empty;
	} else {
		if (!x.b.b) {
			return A2(
				$folkertdev$elm_paragraph$SymmetricList$SymmetricList,
				$elm$core$List$reverse(y1),
				y0);
		} else {
			var rest = x.b;
			return A2($folkertdev$elm_paragraph$SymmetricList$SymmetricList, rest, y);
		}
	}
};
var $folkertdev$elm_paragraph$SymmetricList$uncons = function (symlist) {
	var _v0 = $folkertdev$elm_paragraph$SymmetricList$head(symlist);
	if (!_v0.$) {
		var v = _v0.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				v,
				$folkertdev$elm_paragraph$SymmetricList$tail(symlist)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $folkertdev$elm_paragraph$SymmetricList$init = function (_v0) {
	var y = _v0.a;
	var x = _v0.b;
	var _v1 = A2(
		$folkertdev$elm_paragraph$SymmetricList$splitAt,
		($elm$core$List$length(y) / 2) | 0,
		y);
	var y0 = _v1.a;
	var y1 = _v1.b;
	if (!x.b) {
		return $folkertdev$elm_paragraph$SymmetricList$empty;
	} else {
		if (!x.b.b) {
			return A2(
				$folkertdev$elm_paragraph$SymmetricList$SymmetricList,
				y0,
				$elm$core$List$reverse(y1));
		} else {
			var rest = x.b;
			return A2($folkertdev$elm_paragraph$SymmetricList$SymmetricList, y, rest);
		}
	}
};
var $folkertdev$elm_paragraph$SymmetricList$unsnoc = function (symlist) {
	var _v0 = $folkertdev$elm_paragraph$SymmetricList$last(symlist);
	if (!_v0.$) {
		var v = _v0.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(
				$folkertdev$elm_paragraph$SymmetricList$init(symlist),
				v));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $folkertdev$elm_paragraph$Paragraph$stepr = F3(
	function (options, w, state) {
		var tot_width = (w + 1) + state.hC;
		var width_hd = function (p) {
			return (tot_width - p.hC) - 1;
		};
		var waste = function (p) {
			return $folkertdev$elm_paragraph$Paragraph$single(p) ? 0 : (p.b7 + A2(
				$elm$core$Basics$pow,
				options.ek - width_hd(p),
				2));
		};
		var tot_len = 1 + state.gj;
		var old_width_hd = function (p) {
			return (state.hC - p.hC) - 1;
		};
		var _new = function (p) {
			return $folkertdev$elm_paragraph$Paragraph$single(p) ? {gj: state.gj, b7: 0, hC: state.hC} : {
				gj: state.gj,
				b7: p.hC + A2(
					$elm$core$Basics$pow,
					options.ek - old_width_hd(p),
					2),
				hC: state.hC
			};
		};
		var k = F2(
			function (p, q) {
				var wq0 = width_hd(q);
				var wp0 = width_hd(p);
				var rq0 = (options.ec - wq0) + 1;
				return ($folkertdev$elm_paragraph$Paragraph$single(q) && (!p.hC)) ? A2($elm$core$Basics$min, options.ek - wp0, rq0) : ($folkertdev$elm_paragraph$Paragraph$single(q) ? rq0 : A2(
					$elm$core$Basics$min,
					A2(
						$folkertdev$elm_paragraph$Paragraph$ceildiv,
						waste(p) - waste(q),
						2 * (wq0 - wp0)),
					rq0));
			});
		var discardBadCandidates = function (ps_pq) {
			discardBadCandidates:
			while (true) {
				var _v0 = $folkertdev$elm_paragraph$SymmetricList$unsnoc(ps_pq);
				if (_v0.$ === 1) {
					return ps_pq;
				} else {
					var _v1 = _v0.a;
					var ps_p = _v1.a;
					var q = _v1.b;
					var _v2 = $folkertdev$elm_paragraph$SymmetricList$last(ps_p);
					if (_v2.$ === 1) {
						return (_Utils_cmp(
							width_hd(q),
							options.ec) > 0) ? $folkertdev$elm_paragraph$SymmetricList$empty : ps_pq;
					} else {
						var p = _v2.a;
						if ((_Utils_cmp(
							waste(p),
							waste(q)) < 1) || (_Utils_cmp(
							width_hd(q),
							options.ec) > 0)) {
							var $temp$ps_pq = ps_p;
							ps_pq = $temp$ps_pq;
							continue discardBadCandidates;
						} else {
							return ps_pq;
						}
					}
				}
			}
		};
		var add = F2(
			function (p, qr_rs) {
				add:
				while (true) {
					var _default = A2($folkertdev$elm_paragraph$SymmetricList$cons, p, qr_rs);
					var _v3 = $folkertdev$elm_paragraph$SymmetricList$uncons(qr_rs);
					if (_v3.$ === 1) {
						return _default;
					} else {
						var _v4 = _v3.a;
						var q = _v4.a;
						var r_rs = _v4.b;
						var _v5 = $folkertdev$elm_paragraph$SymmetricList$head(r_rs);
						if (!_v5.$) {
							var r = _v5.a;
							if (_Utils_cmp(
								A2(k, p, q),
								A2(k, q, r)) < 1) {
								var $temp$p = p,
									$temp$qr_rs = r_rs;
								p = $temp$p;
								qr_rs = $temp$qr_rs;
								continue add;
							} else {
								return _default;
							}
						} else {
							return _default;
						}
					}
				}
			});
		var _v6 = $folkertdev$elm_paragraph$SymmetricList$last(state.be);
		if (_v6.$ === 1) {
			return state;
		} else {
			var last = _v6.a;
			var input = A2(
				add,
				_new(last),
				state.be);
			var newCandidates = discardBadCandidates(input);
			return {be: newCandidates, gj: tot_len, hC: tot_width};
		}
	});
var $folkertdev$elm_paragraph$Paragraph$splitAt = F2(
	function (n, xs) {
		return _Utils_Tuple2(
			A2($elm$core$List$take, n, xs),
			A2($elm$core$List$drop, n, xs));
	});
var $folkertdev$elm_paragraph$Paragraph$tile = F2(
	function (words, _v0) {
		var wordLengths = _v0.a;
		var targetLength = _v0.b;
		if (!wordLengths.b) {
			return _List_Nil;
		} else {
			var m = wordLengths.a;
			var ms = wordLengths.b;
			var remainingSpace = targetLength - m;
			var _v2 = A2($folkertdev$elm_paragraph$Paragraph$splitAt, remainingSpace, words);
			var usedWords = _v2.a;
			var remainingWords = _v2.b;
			return A2(
				$elm$core$List$cons,
				usedWords,
				A2(
					$folkertdev$elm_paragraph$Paragraph$tile,
					remainingWords,
					_Utils_Tuple2(
						A2(
							$elm$core$List$drop,
							remainingSpace,
							A2($elm$core$List$cons, m, ms)),
						m)));
		}
	});
var $folkertdev$elm_paragraph$Paragraph$paragraph = F2(
	function (options, words) {
		var zs = A3(
			$folkertdev$elm_paragraph$Paragraph$scan1,
			$folkertdev$elm_paragraph$Paragraph$stepr(options),
			$folkertdev$elm_paragraph$Paragraph$startr,
			A2($elm$core$List$map, options.eS, words));
		if (!zs.b) {
			return _List_Nil;
		} else {
			var first = zs.a;
			var rest = zs.b;
			var wordLengths = A2(
				$elm$core$List$filterMap,
				A2(
					$elm$core$Basics$composeL,
					A2(
						$elm$core$Basics$composeL,
						$elm$core$Maybe$map(
							function ($) {
								return $.gj;
							}),
						$folkertdev$elm_paragraph$SymmetricList$last),
					function ($) {
						return $.be;
					}),
				zs);
			var targetLength = first.gj;
			return A2(
				$folkertdev$elm_paragraph$Paragraph$tile,
				words,
				_Utils_Tuple2(wordLengths, targetLength));
		}
	});
var $folkertdev$elm_paragraph$Paragraph$do = F2(
	function (a, list) {
		if (!list.b) {
			return _List_fromArray(
				[_List_Nil]);
		} else {
			var first = list.a;
			var rest = list.b;
			var _break = F3(
				function (p, q, xs) {
					if (_Utils_eq(p, q)) {
						return A2($elm$core$List$cons, _List_Nil, xs);
					} else {
						if (!xs.b) {
							return A2(
								$elm$core$List$cons,
								A2($elm$core$List$cons, q, _List_Nil),
								_List_Nil);
						} else {
							var y = xs.a;
							var ys = xs.b;
							return A2(
								$elm$core$List$cons,
								A2($elm$core$List$cons, q, y),
								ys);
						}
					}
				});
			var start = F2(
				function (p, q) {
					return A3(
						_break,
						p,
						q,
						_List_fromArray(
							[_List_Nil]));
				});
			return A2(
				$elm$core$Maybe$withDefault,
				_List_fromArray(
					[_List_Nil]),
				A3(
					$folkertdev$elm_paragraph$Paragraph$fold1,
					_break(a),
					start(a),
					list));
		}
	});
var $folkertdev$elm_paragraph$Paragraph$paras = A2(
	$elm$core$Basics$composeL,
	$elm$core$List$filter(
		A2($elm$core$Basics$composeL, $elm$core$Basics$not, $elm$core$List$isEmpty)),
	$folkertdev$elm_paragraph$Paragraph$do(_List_Nil));
var $elm$core$String$words = _String_words;
var $folkertdev$elm_paragraph$Paragraph$parse = A2(
	$elm$core$Basics$composeL,
	A2(
		$elm$core$Basics$composeL,
		$folkertdev$elm_paragraph$Paragraph$paras,
		$elm$core$List$map($elm$core$String$words)),
	$elm$core$String$lines);
var $folkertdev$elm_paragraph$Paragraph$undo = function (a) {
	var insert = F2(
		function (xs, ys) {
			return _Utils_ap(
				xs,
				_Utils_ap(
					_List_fromArray(
						[a]),
					ys));
		});
	return A2(
		$elm$core$Basics$composeL,
		$elm$core$Maybe$withDefault(_List_Nil),
		A2($folkertdev$elm_paragraph$Paragraph$fold1, insert, $elm$core$Basics$identity));
};
var $folkertdev$elm_paragraph$Paragraph$unparas = $folkertdev$elm_paragraph$Paragraph$undo(_List_Nil);
var $folkertdev$elm_paragraph$Paragraph$lines = function (options) {
	return A2(
		$elm$core$Basics$composeL,
		A2(
			$elm$core$Basics$composeL,
			A2(
				$elm$core$Basics$composeL,
				$elm$core$List$map(
					$elm$core$String$join(' ')),
				$folkertdev$elm_paragraph$Paragraph$unparas),
			$elm$core$List$map(
				A2(
					$elm$core$Basics$composeL,
					$folkertdev$elm_paragraph$Paragraph$paragraph(options),
					$elm$core$List$concat))),
		$folkertdev$elm_paragraph$Paragraph$parse);
};
var $author$project$Wrap$wrapParagraph = F2(
	function (wrapParams, _v0) {
		var paragraphType = _v0.a;
		var str = _v0.b;
		switch (paragraphType) {
			case 0:
				return A2(
					$elm$core$String$join,
					'\n',
					A2($folkertdev$elm_paragraph$Paragraph$lines, wrapParams, str));
			case 1:
				return str;
			default:
				return str;
		}
	});
var $author$project$Wrap$stringArray = F2(
	function (wrapParams, stringArray_) {
		return function (a) {
			return A3(
				$elm$core$Array$slice,
				0,
				$elm$core$Array$length(a) - 1,
				a);
		}(
			$elm$core$Array$fromList(
				$elm$core$List$concat(
					A2(
						$elm$core$List$map,
						A2(
							$elm$core$Basics$composeR,
							$author$project$Wrap$wrapParagraph(wrapParams),
							A2($elm$core$Basics$composeR, $elm$core$String$lines, $author$project$Wrap$appendBlankLine)),
						A2(
							$elm$core$List$filter,
							function (_v0) {
								var s = _v0.b;
								return s !== '';
							},
							$author$project$Wrap$runFSM(
								$elm$core$Array$toList(
									A2($elm$core$Array$push, '\n', stringArray_))))))));
	});
var $author$project$Update$Wrap$all = function (model) {
	var params = {
		ec: $author$project$Update$Wrap$maxWrapWidth(model),
		ek: $author$project$Update$Wrap$optimumWrapWidth(model),
		eS: $elm$core$String$length
	};
	var lines = A2($author$project$Wrap$stringArray, params, model.p);
	return _Utils_update(
		model,
		{p: lines});
};
var $elm$core$Task$onError = _Scheduler_onError;
var $elm$core$Task$attempt = F2(
	function (resultToMessage, task) {
		return $elm$core$Task$command(
			A2(
				$elm$core$Task$onError,
				A2(
					$elm$core$Basics$composeL,
					A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
					$elm$core$Result$Err),
				A2(
					$elm$core$Task$andThen,
					A2(
						$elm$core$Basics$composeL,
						A2($elm$core$Basics$composeL, $elm$core$Task$succeed, resultToMessage),
						$elm$core$Result$Ok),
					task)));
	});
var $elm$core$Array$getHelp = F3(
	function (shift, index, tree) {
		getHelp:
		while (true) {
			var pos = $elm$core$Array$bitMask & (index >>> shift);
			var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
			if (!_v0.$) {
				var subTree = _v0.a;
				var $temp$shift = shift - $elm$core$Array$shiftStep,
					$temp$index = index,
					$temp$tree = subTree;
				shift = $temp$shift;
				index = $temp$index;
				tree = $temp$tree;
				continue getHelp;
			} else {
				var values = _v0.a;
				return A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, values);
			}
		}
	});
var $elm$core$Array$get = F2(
	function (index, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? $elm$core$Maybe$Nothing : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? $elm$core$Maybe$Just(
			A2($elm$core$Elm$JsArray$unsafeGet, $elm$core$Array$bitMask & index, tail)) : $elm$core$Maybe$Just(
			A3($elm$core$Array$getHelp, startShift, index, tree)));
	});
var $elm$core$Array$appendHelpTree = F2(
	function (toAppend, array) {
		var len = array.a;
		var tree = array.c;
		var tail = array.d;
		var itemsToAppend = $elm$core$Elm$JsArray$length(toAppend);
		var notAppended = ($elm$core$Array$branchFactor - $elm$core$Elm$JsArray$length(tail)) - itemsToAppend;
		var appended = A3($elm$core$Elm$JsArray$appendN, $elm$core$Array$branchFactor, tail, toAppend);
		var newArray = A2($elm$core$Array$unsafeReplaceTail, appended, array);
		if (notAppended < 0) {
			var nextTail = A3($elm$core$Elm$JsArray$slice, notAppended, itemsToAppend, toAppend);
			return A2($elm$core$Array$unsafeReplaceTail, nextTail, newArray);
		} else {
			return newArray;
		}
	});
var $elm$core$Elm$JsArray$foldl = _JsArray_foldl;
var $elm$core$Array$builderFromArray = function (_v0) {
	var len = _v0.a;
	var tree = _v0.c;
	var tail = _v0.d;
	var helper = F2(
		function (node, acc) {
			if (!node.$) {
				var subTree = node.a;
				return A3($elm$core$Elm$JsArray$foldl, helper, acc, subTree);
			} else {
				return A2($elm$core$List$cons, node, acc);
			}
		});
	return {
		u: A3($elm$core$Elm$JsArray$foldl, helper, _List_Nil, tree),
		q: (len / $elm$core$Array$branchFactor) | 0,
		r: tail
	};
};
var $elm$core$Array$append = F2(
	function (a, _v0) {
		var aTail = a.d;
		var bLen = _v0.a;
		var bTree = _v0.c;
		var bTail = _v0.d;
		if (_Utils_cmp(bLen, $elm$core$Array$branchFactor * 4) < 1) {
			var foldHelper = F2(
				function (node, array) {
					if (!node.$) {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, array, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpTree, leaf, array);
					}
				});
			return A2(
				$elm$core$Array$appendHelpTree,
				bTail,
				A3($elm$core$Elm$JsArray$foldl, foldHelper, a, bTree));
		} else {
			var foldHelper = F2(
				function (node, builder) {
					if (!node.$) {
						var tree = node.a;
						return A3($elm$core$Elm$JsArray$foldl, foldHelper, builder, tree);
					} else {
						var leaf = node.a;
						return A2($elm$core$Array$appendHelpBuilder, leaf, builder);
					}
				});
			return A2(
				$elm$core$Array$builderToArray,
				true,
				A2(
					$elm$core$Array$appendHelpBuilder,
					bTail,
					A3(
						$elm$core$Elm$JsArray$foldl,
						foldHelper,
						$elm$core$Array$builderFromArray(a),
						bTree)));
		}
	});
var $author$project$ArrayUtil$joinThree = F3(
	function (before, middle, after) {
		return A2(
			$elm$core$Array$append,
			A2($elm$core$Array$append, before, middle),
			after);
	});
var $author$project$ArrayUtil$splitStringAt = F2(
	function (k, str) {
		var n = $elm$core$String$length(str);
		return _Utils_Tuple2(
			A3($elm$core$String$slice, 0, k, str),
			A3($elm$core$String$slice, k, n, str));
	});
var $author$project$ArrayUtil$between = F3(
	function (pos1, pos2, array) {
		var _v0 = _Utils_Tuple2(
			_Utils_eq(pos1.i, pos2.i),
			_Utils_eq(pos1.ac, pos2.ac));
		if (_v0.a) {
			if (_v0.b) {
				return '';
			} else {
				var middleLine = A2(
					$elm$core$Maybe$withDefault,
					'',
					A2($elm$core$Array$get, pos1.i, array));
				var middle__ = A3($elm$core$String$slice, pos1.ac, pos2.ac + 1, middleLine);
				var _v1 = A2($author$project$ArrayUtil$splitStringAt, pos1.ac, middleLine);
				var a_ = _v1.a;
				var part = _v1.b;
				var _v2 = A2(
					$author$project$ArrayUtil$splitStringAt,
					(pos2.ac - $elm$core$String$length(a_)) + 1,
					part);
				return middle__;
			}
		} else {
			var middle__ = A3($elm$core$Array$slice, pos1.i + 1, pos2.i, array);
			var lastLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				A2($elm$core$Array$get, pos2.i, array));
			var firstLine = A2(
				$elm$core$Maybe$withDefault,
				'',
				A2($elm$core$Array$get, pos1.i, array));
			var _v3 = A2($author$project$ArrayUtil$splitStringAt, pos2.ac + 0, lastLine);
			var part_2 = _v3.a;
			var _v4 = A2($author$project$ArrayUtil$splitStringAt, pos1.ac, firstLine);
			var part_1 = _v4.b;
			var b__ = A3(
				$author$project$ArrayUtil$joinThree,
				$elm$core$Array$fromList(
					_List_fromArray(
						[part_1])),
				middle__,
				$elm$core$Array$fromList(
					_List_fromArray(
						[part_2])));
			return A2(
				$elm$core$String$join,
				'\n',
				$elm$core$Array$toList(b__));
		}
	});
var $author$project$EditorMsg$DebounceMsg = function (a) {
	return {$: 40, a: a};
};
var $author$project$EditorModel$debounceConfig = {
	g9: $jinjor$elm_debounce$Debounce$later(300),
	hw: $author$project$EditorMsg$DebounceMsg
};
var $author$project$ArrayUtil$put = F2(
	function (str, array) {
		return A2(
			$elm$core$Array$append,
			$elm$core$Array$fromList(
				_List_fromArray(
					[str])),
			array);
	});
var $author$project$ArrayUtil$cut = F3(
	function (pos1, pos2, array) {
		var n = $elm$core$Array$length(array);
		var before_ = A3($elm$core$Array$slice, 0, pos1.i, array);
		var after_ = A3($elm$core$Array$slice, pos2.i + 1, n, array);
		var _v0 = function () {
			if (_Utils_eq(pos1.i, pos2.i)) {
				var middleLine = A2(
					$elm$core$Maybe$withDefault,
					'',
					A2($elm$core$Array$get, pos1.i, array));
				var middle__ = A3($elm$core$String$slice, pos1.ac, pos2.ac + 1, middleLine);
				var _v1 = A2($author$project$ArrayUtil$splitStringAt, pos1.ac, middleLine);
				var a_ = _v1.a;
				var part = _v1.b;
				var after__ = function () {
					if (a_ === '') {
						return after_;
					} else {
						return after_;
					}
				}();
				var _v2 = A2(
					$author$project$ArrayUtil$splitStringAt,
					(pos2.ac - $elm$core$String$length(a_)) + 1,
					part);
				var c_ = _v2.b;
				var before__ = function () {
					var _v3 = _Utils_ap(a_, c_);
					if (_v3 === '') {
						return before_;
					} else {
						return A2(
							$elm$core$Array$push,
							_Utils_ap(a_, c_),
							before_);
					}
				}();
				return _Utils_Tuple3(
					before__,
					$elm$core$Array$fromList(
						_List_fromArray(
							[middle__])),
					after__);
			} else {
				var middle__ = A3($elm$core$Array$slice, pos1.i + 1, pos2.i, array);
				var lastLine = A2(
					$elm$core$Maybe$withDefault,
					'',
					A2($elm$core$Array$get, pos2.i, array));
				var firstLine = A2(
					$elm$core$Maybe$withDefault,
					'',
					A2($elm$core$Array$get, pos1.i, array));
				var _v5 = A2($author$project$ArrayUtil$splitStringAt, pos1.ac, firstLine);
				var a_ = _v5.a;
				var part_1 = _v5.b;
				var before__ = function () {
					if (a_ === '') {
						return before_;
					} else {
						return A2($elm$core$Array$push, a_, before_);
					}
				}();
				var _v6 = A2($author$project$ArrayUtil$splitStringAt, pos2.ac + 0, lastLine);
				var part_2 = _v6.a;
				var c_ = _v6.b;
				var after__ = function () {
					if (c_ === '') {
						return after_;
					} else {
						return A2($author$project$ArrayUtil$put, c_, after_);
					}
				}();
				var b__ = A3(
					$author$project$ArrayUtil$joinThree,
					$elm$core$Array$fromList(
						_List_fromArray(
							[part_1])),
					middle__,
					$elm$core$Array$fromList(
						_List_fromArray(
							[part_2])));
				return _Utils_Tuple3(before__, b__, after__);
			}
		}();
		var before = _v0.a;
		var middle = _v0.b;
		var after = _v0.c;
		return {ap: after, ar: before, ay: middle};
	});
var $author$project$ArrayUtil$joinEnds = function (z) {
	var joinedEnds = A2($elm$core$Array$append, z.ar, z.ap);
	return _Utils_Tuple2(joinedEnds, z.ay);
};
var $author$project$Action$deleteSelection = F2(
	function (selection, array) {
		if (selection.$ === 3) {
			var beginSel = selection.a;
			var endSel = selection.b;
			return $author$project$ArrayUtil$joinEnds(
				A3($author$project$ArrayUtil$cut, beginSel, endSel, array));
		} else {
			return _Utils_Tuple2(
				array,
				$elm$core$Array$fromList(
					_List_fromArray(
						[''])));
		}
	});
var $author$project$History$push = F2(
	function (entry, _v0) {
		var history = _v0;
		return {
			a2: _List_Nil,
			aV: A2($elm$core$List$cons, entry, history.aV)
		};
	});
var $author$project$Common$stateToSnapshot = function (model) {
	return {d: model.d, p: model.p, Z: model.Z};
};
var $author$project$Common$recordHistoryWithCmd = F2(
	function (oldModel, _v0) {
		var newModel = _v0.a;
		var cmd = _v0.b;
		return _Utils_Tuple2(
			_Utils_update(
				newModel,
				{
					bn: (!_Utils_eq(oldModel.p, newModel.p)) ? A2(
						$author$project$History$push,
						$author$project$Common$stateToSnapshot(oldModel),
						newModel.bn) : newModel.bn
				}),
			cmd);
	});
var $author$project$EditorMsg$HoverChar = function (a) {
	return {$: 2, a: a};
};
var $author$project$EditorMsg$HoverLine = function (a) {
	return {$: 1, a: a};
};
var $elm$core$Basics$clamp = F3(
	function (low, high, number) {
		return (_Utils_cmp(number, low) < 0) ? low : ((_Utils_cmp(number, high) > 0) ? high : number);
	});
var $author$project$Common$lineContent = F2(
	function (lines, lineNum) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Array$get, lineNum, lines));
	});
var $author$project$Common$lineLength = F2(
	function (lines, lineNum) {
		return $elm$core$String$length(
			A2($author$project$Common$lineContent, lines, lineNum));
	});
var $author$project$Common$lastColumn = F2(
	function (lines, line) {
		return A2($author$project$Common$lineLength, lines, line);
	});
var $author$project$Common$lastLine = function (lines) {
	return $elm$core$Array$length(lines) - 1;
};
var $author$project$Common$newHover = F3(
	function (hover, lines, offset) {
		switch (hover.$) {
			case 0:
				return hover;
			case 1:
				var line = hover.a;
				return $author$project$EditorMsg$HoverLine(
					A3(
						$elm$core$Basics$clamp,
						0,
						$author$project$Common$lastLine(lines),
						line));
			default:
				var line = hover.a.i;
				var column = hover.a.ac;
				var sanitizedLine = A3(
					$elm$core$Basics$clamp,
					0,
					$author$project$Common$lastLine(lines),
					line);
				var sanitizedColumn = A3(
					$elm$core$Basics$clamp,
					0,
					A2($author$project$Common$lastColumn, lines, offset + sanitizedLine),
					column);
				return $author$project$EditorMsg$HoverChar(
					{ac: sanitizedColumn, i: sanitizedLine});
		}
	});
var $author$project$Common$sanitizeHover = function (model) {
	return _Utils_update(
		model,
		{
			cl: A3($author$project$Common$newHover, model.cl, model.p, model.dj.bZ)
		});
};
var $author$project$Update$Function$copySelection = function (model) {
	var _v0 = A3($jinjor$elm_debounce$Debounce$push, $author$project$EditorModel$debounceConfig, 'RCB', model.dE);
	var debounceCmd = _v0.b;
	var _v1 = model.Z;
	if (_v1.$ === 3) {
		var sel = _v1;
		var endSel = sel.b;
		var _v2 = A2($author$project$Action$deleteSelection, sel, model.p);
		var selectedText = _v2.b;
		return A2(
			$author$project$Common$recordHistoryWithCmd,
			model,
			_Utils_Tuple2(
				$author$project$Common$sanitizeHover(
					_Utils_update(
						model,
						{
							d: _Utils_update(
								endSel,
								{ac: endSel.ac + 1}),
							eL: selectedText,
							Z: $author$project$EditorMsg$NoSelection
						})),
				debounceCmd));
	} else {
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	}
};
var $author$project$Common$clampColumn = F3(
	function (lines, line, column) {
		return A3(
			$elm$core$Basics$clamp,
			0,
			A2($author$project$Common$lineLength, lines, line),
			column);
	});
var $author$project$Common$endOfDocument = function (lines) {
	return {
		ac: A2(
			$author$project$Common$lastColumn,
			lines,
			$author$project$Common$lastLine(lines)),
		i: $author$project$Common$lastLine(lines)
	};
};
var $author$project$Common$isLastLine = F2(
	function (lines, line) {
		return _Utils_eq(
			line,
			$author$project$Common$lastLine(lines));
	});
var $author$project$Common$maxLine = function (lines) {
	return $elm$core$Array$length(lines) - 1;
};
var $author$project$Common$nextLine = F2(
	function (lines, line) {
		return A2(
			$elm$core$Basics$min,
			$author$project$Common$maxLine(lines),
			line + 1);
	});
var $author$project$Common$moveDown = F2(
	function (_v0, lines) {
		var line = _v0.i;
		var column = _v0.ac;
		if (A2($author$project$Common$isLastLine, lines, line)) {
			return $author$project$Common$endOfDocument(lines);
		} else {
			var line_ = A2($author$project$Common$nextLine, lines, line);
			return {
				ac: A3($author$project$Common$clampColumn, lines, line_, column),
				i: line_
			};
		}
	});
var $author$project$Action$cursorDown = function (model) {
	return _Utils_update(
		model,
		{
			d: A2($author$project$Common$moveDown, model.d, model.p)
		});
};
var $author$project$Common$isFirstColumn = function (column) {
	return !column;
};
var $author$project$Common$isFirstLine = function (line) {
	return !line;
};
var $author$project$Common$isStartOfDocument = function (_v0) {
	var line = _v0.i;
	var column = _v0.ac;
	return $author$project$Common$isFirstLine(line) && $author$project$Common$isFirstColumn(column);
};
var $author$project$Common$previousLine = function (line) {
	return A2($elm$core$Basics$max, 0, line - 1);
};
var $author$project$Common$moveLeft = F2(
	function (position, lines) {
		var line = position.i;
		var column = position.ac;
		if ($author$project$Common$isStartOfDocument(position)) {
			return position;
		} else {
			if ($author$project$Common$isFirstColumn(column)) {
				var line_ = $author$project$Common$previousLine(line);
				return {
					ac: A2($author$project$Common$lastColumn, lines, line_),
					i: line_
				};
			} else {
				return {ac: column - 1, i: line};
			}
		}
	});
var $author$project$Action$cursorLeft = function (model) {
	return _Utils_update(
		model,
		{
			d: A2($author$project$Common$moveLeft, model.d, model.p)
		});
};
var $author$project$Common$isLastColumn = F3(
	function (lines, line, column) {
		return _Utils_eq(
			column,
			A2($author$project$Common$lastColumn, lines, line));
	});
var $author$project$Common$isEndOfDocument = F2(
	function (lines, _v0) {
		var line = _v0.i;
		var column = _v0.ac;
		return A2($author$project$Common$isLastLine, lines, line) && A3($author$project$Common$isLastColumn, lines, line, column);
	});
var $author$project$Common$moveRight = F2(
	function (position, lines) {
		var line = position.i;
		var column = position.ac;
		return A2($author$project$Common$isEndOfDocument, lines, position) ? position : (A3($author$project$Common$isLastColumn, lines, line, column) ? {
			ac: 0,
			i: A2($author$project$Common$nextLine, lines, line)
		} : {ac: column + 1, i: line});
	});
var $author$project$Action$cursorRight = function (model) {
	return _Utils_update(
		model,
		{
			d: A2($author$project$Common$moveRight, model.d, model.p)
		});
};
var $author$project$Common$startOfDocument = {ac: 0, i: 0};
var $author$project$Common$moveUp = F2(
	function (_v0, lines) {
		var line = _v0.i;
		var column = _v0.ac;
		if ($author$project$Common$isFirstLine(line)) {
			return $author$project$Common$startOfDocument;
		} else {
			var line_ = $author$project$Common$previousLine(line);
			return {
				ac: A3($author$project$Common$clampColumn, lines, line_, column),
				i: line_
			};
		}
	});
var $author$project$Action$cursorUp = function (model) {
	return _Utils_update(
		model,
		{
			d: A2($author$project$Common$moveUp, model.d, model.p)
		});
};
var $author$project$ArrayUtil$indentLineNeg = F2(
	function (offset, line) {
		var leadingBlanks = A2($elm$core$String$repeat, offset, ' ');
		return _Utils_eq(
			A2($elm$core$String$left, offset, line),
			leadingBlanks) ? A2($elm$core$String$dropLeft, offset, line) : line;
	});
var $author$project$ArrayUtil$indentLinePos = F2(
	function (offset, line) {
		return _Utils_ap(
			A2($elm$core$String$repeat, offset, ' '),
			line);
	});
var $author$project$ArrayUtil$indentLine = F2(
	function (offset, line) {
		return (offset >= 0) ? A2($author$project$ArrayUtil$indentLinePos, offset, line) : A2($author$project$ArrayUtil$indentLineNeg, -offset, line);
	});
var $elm$core$Elm$JsArray$indexedMap = _JsArray_indexedMap;
var $elm$core$Array$indexedMap = F2(
	function (func, _v0) {
		var len = _v0.a;
		var tree = _v0.c;
		var tail = _v0.d;
		var initialBuilder = {
			u: _List_Nil,
			q: 0,
			r: A3(
				$elm$core$Elm$JsArray$indexedMap,
				func,
				$elm$core$Array$tailIndex(len),
				tail)
		};
		var helper = F2(
			function (node, builder) {
				if (!node.$) {
					var subTree = node.a;
					return A3($elm$core$Elm$JsArray$foldl, helper, builder, subTree);
				} else {
					var leaf = node.a;
					var offset = builder.q * $elm$core$Array$branchFactor;
					var mappedLeaf = $elm$core$Array$Leaf(
						A3($elm$core$Elm$JsArray$indexedMap, func, offset, leaf));
					return {
						u: A2($elm$core$List$cons, mappedLeaf, builder.u),
						q: builder.q + 1,
						r: builder.r
					};
				}
			});
		return A2(
			$elm$core$Array$builderToArray,
			true,
			A3($elm$core$Elm$JsArray$foldl, helper, initialBuilder, tree));
	});
var $author$project$ArrayUtil$indent = F4(
	function (offset, first, last, lines) {
		var f = F2(
			function (lineNumber, line) {
				return ((_Utils_cmp(lineNumber, first) > -1) && (_Utils_cmp(lineNumber, last) < 1)) ? A2($author$project$ArrayUtil$indentLine, offset, line) : line;
			});
		return A2($elm$core$Array$indexedMap, f, lines);
	});
var $author$project$Action$deIndent = function (model) {
	var newLines = function () {
		var _v0 = model.Z;
		if (_v0.$ === 3) {
			var p1 = _v0.a;
			var p2 = _v0.b;
			return A4($author$project$ArrayUtil$indent, -model.d_, p1.i, p2.i, model.p);
		} else {
			return model.p;
		}
	}();
	return _Utils_update(
		model,
		{p: newLines});
};
var $author$project$Line$lastColumn = F2(
	function (lineNumber, lines) {
		return function (x) {
			return x - 1;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$length,
					A2($elm$core$Array$get, lineNumber, lines))));
	});
var $author$project$Line$lastPosition = F2(
	function (lineNumber, lines) {
		return {
			ac: A2($author$project$Line$lastColumn, lineNumber, lines),
			i: lineNumber
		};
	});
var $author$project$Update$Function$deleteLine = function (model) {
	var newCursor = {ac: 0, i: model.d.i};
	var newSelection = A2(
		$author$project$EditorMsg$Selection,
		newCursor,
		A2($author$project$Line$lastPosition, model.d.i, model.p));
	var _v0 = A2($author$project$Action$deleteSelection, newSelection, model.p);
	var newLines = _v0.a;
	var selectedText = _v0.b;
	return _Utils_update(
		model,
		{d: newCursor, p: newLines, eL: selectedText});
};
var $elm$core$List$concatMap = F2(
	function (f, list) {
		return $elm$core$List$concat(
			A2($elm$core$List$map, f, list));
	});
var $elm$core$Array$toIndexedList = function (array) {
	var len = array.a;
	var helper = F2(
		function (entry, _v0) {
			var index = _v0.a;
			var list = _v0.b;
			return _Utils_Tuple2(
				index - 1,
				A2(
					$elm$core$List$cons,
					_Utils_Tuple2(index, entry),
					list));
		});
	return A3(
		$elm$core$Array$foldr,
		helper,
		_Utils_Tuple2(len - 1, _List_Nil),
		array).b;
};
var $author$project$Common$removeCharBefore = function (model) {
	var cursor = model.d;
	var lines = model.p;
	if ($author$project$Common$isStartOfDocument(cursor)) {
		return model;
	} else {
		var _v0 = cursor;
		var line = _v0.i;
		var column = _v0.ac;
		var removeCharFromLine = function (_v1) {
			var lineNum = _v1.a;
			var content = _v1.b;
			return _Utils_eq(lineNum, line - 1) ? ($author$project$Common$isFirstColumn(column) ? _List_fromArray(
				[
					_Utils_ap(
					content,
					A2($author$project$Common$lineContent, lines, line))
				]) : _List_fromArray(
				[content])) : (_Utils_eq(lineNum, line) ? ($author$project$Common$isFirstColumn(column) ? _List_Nil : _List_fromArray(
				[
					_Utils_ap(
					A2($elm$core$String$left, column - 1, content),
					A2($elm$core$String$dropLeft, column, content))
				])) : _List_fromArray(
				[content]));
		};
		var newLines = $elm$core$Array$fromList(
			A2(
				$elm$core$List$concatMap,
				removeCharFromLine,
				$elm$core$Array$toIndexedList(lines)));
		return _Utils_update(
			model,
			{
				d: A2($author$project$Common$moveLeft, cursor, lines),
				p: newLines
			});
	}
};
var $author$project$Update$Function$deleteSelection = function (model) {
	var _v0 = A3($jinjor$elm_debounce$Debounce$push, $author$project$EditorModel$debounceConfig, 'RCB', model.dE);
	var debounce = _v0.a;
	var debounceCmd = _v0.b;
	var _v1 = model.Z;
	switch (_v1.$) {
		case 0:
			return _Utils_Tuple2(
				$author$project$Common$sanitizeHover(
					$author$project$Common$removeCharBefore(
						_Utils_update(
							model,
							{dE: debounce}))),
				debounceCmd);
		case 3:
			var sel = _v1;
			var beginSel = sel.a;
			var _v2 = A2($author$project$Action$deleteSelection, sel, model.p);
			var newLines = _v2.a;
			var selectedText = _v2.b;
			return _Utils_Tuple2(
				$author$project$Common$sanitizeHover(
					_Utils_update(
						model,
						{d: beginSel, p: newLines, eL: selectedText, Z: $author$project$EditorMsg$NoSelection})),
				debounceCmd);
		case 2:
			return _Utils_Tuple2(
				$author$project$Common$sanitizeHover(
					$author$project$Common$removeCharBefore(
						_Utils_update(
							model,
							{dE: debounce}))),
				debounceCmd);
		default:
			return _Utils_Tuple2(
				$author$project$Common$sanitizeHover(
					$author$project$Common$removeCharBefore(
						_Utils_update(
							model,
							{dE: debounce}))),
				debounceCmd);
	}
};
var $author$project$Position$Position = F2(
	function (line, column) {
		return {ac: column, i: line};
	});
var $elm$core$Elm$JsArray$map = _JsArray_map;
var $elm$core$Array$map = F2(
	function (func, _v0) {
		var len = _v0.a;
		var startShift = _v0.b;
		var tree = _v0.c;
		var tail = _v0.d;
		var helper = function (node) {
			if (!node.$) {
				var subTree = node.a;
				return $elm$core$Array$SubTree(
					A2($elm$core$Elm$JsArray$map, helper, subTree));
			} else {
				var values = node.a;
				return $elm$core$Array$Leaf(
					A2($elm$core$Elm$JsArray$map, func, values));
			}
		};
		return A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A2($elm$core$Elm$JsArray$map, helper, tree),
			A2($elm$core$Elm$JsArray$map, func, tail));
	});
var $author$project$Search$hits = F2(
	function (key, lines) {
		var keyLen = $elm$core$String$length(key);
		var makePositions = function (_v1) {
			var line = _v1.a;
			var column = _v1.b;
			return A2(
				$author$project$EditorMsg$Selection,
				A2($author$project$Position$Position, line, column),
				A2($author$project$Position$Position, line, column + (keyLen - 1)));
		};
		var expand = function (_v0) {
			var i = _v0.a;
			var list = _v0.b;
			return A2(
				$elm$core$List$map,
				function (item) {
					return _Utils_Tuple2(i, item);
				},
				list);
		};
		return A2(
			$elm$core$List$map,
			makePositions,
			$elm$core$List$concat(
				$elm$core$Array$toList(
					A2(
						$elm$core$Array$map,
						expand,
						A2(
							$elm$core$Array$indexedMap,
							F2(
								function (i, line) {
									return _Utils_Tuple2(
										i,
										A2($elm$core$String$indexes, key, line));
								}),
							lines)))));
	});
var $author$project$Search$do = F2(
	function (str, model) {
		var searchResults = A2($author$project$Search$hits, str, model.p);
		var _v0 = $elm$core$List$head(searchResults);
		if (_v0.$ === 1) {
			return _Utils_update(
				model,
				{
					eF: $lovasoa$elm_rolling_list$RollingList$fromList(_List_Nil),
					eG: str,
					Z: $author$project$EditorMsg$NoSelection
				});
		} else {
			if (_v0.a.$ === 3) {
				var selection = _v0.a;
				var first = selection.a;
				return _Utils_update(
					model,
					{
						d: first,
						eE: 0,
						eF: $lovasoa$elm_rolling_list$RollingList$fromList(searchResults),
						eG: str,
						Z: selection
					});
			} else {
				return _Utils_update(
					model,
					{
						eF: $lovasoa$elm_rolling_list$RollingList$fromList(_List_Nil),
						eG: str,
						Z: $author$project$EditorMsg$NoSelection
					});
			}
		}
	});
var $elm$browser$Browser$Dom$setViewportOf = _Browser_setViewportOf;
var $author$project$Action$scrollToTopForElement = function (id) {
	return A2(
		$elm$core$Task$attempt,
		function (_v0) {
			return $author$project$EditorMsg$EditorNoOp;
		},
		A3($elm$browser$Browser$Dom$setViewportOf, id, 0, 0));
};
var $author$project$Action$firstLine = function (model) {
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{
				d: {ac: 0, i: 0}
			}),
		$author$project$Action$scrollToTopForElement('__editor__'));
};
var $elm$browser$Browser$Dom$focus = _Browser_call('focus');
var $elm$browser$Browser$Dom$getViewportOf = _Browser_getViewportOf;
var $author$project$Window$positive = function (x) {
	return (x < 0) ? 0 : x;
};
var $author$project$OuterConfig$topMargin = 10;
var $author$project$Window$recenter = F2(
	function (lineNumber, window) {
		return {
			dj: _Utils_update(
				window,
				{
					bZ: $author$project$Window$positive(lineNumber - $author$project$OuterConfig$topMargin)
				}),
			hE: 0
		};
	});
var $author$project$Action$scrollToLine = F2(
	function (lineHeight, n) {
		var y = n * lineHeight;
		return A2(
			$elm$core$Task$attempt,
			function (_v0) {
				return $author$project$EditorMsg$EditorNoOp;
			},
			A3($elm$browser$Browser$Dom$setViewportOf, '__editor__', 0, y));
	});
var $author$project$Action$goToLine = F2(
	function (line, model) {
		var length = $elm$core$Array$length(model.p);
		var cursor = {ac: 0, i: line - 1};
		var index = $author$project$Window$positive(
			A2($elm$core$Basics$min, length - 1, cursor.i));
		var w = A2($author$project$Window$recenter, index, model.dj);
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{d: cursor, dj: w.dj}),
			A2($author$project$Action$scrollToLine, model.a6, w.hE));
	});
var $author$project$Update$Group$stringCharAt = F2(
	function (index, string) {
		return A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$first,
			$elm$core$String$uncons(
				A3($elm$core$String$slice, index, index + 1, string)));
	});
var $author$project$Update$Group$charsAround = F2(
	function (index, string) {
		return _Utils_Tuple3(
			A2($author$project$Update$Group$stringCharAt, index - 1, string),
			A2($author$project$Update$Group$stringCharAt, index, string),
			A2($author$project$Update$Group$stringCharAt, index + 1, string));
	});
var $author$project$Update$Group$Forward = 0;
var $author$project$Update$Group$None = 0;
var $author$project$Update$Group$NonWord = 2;
var $author$project$Update$Group$Word = 1;
var $author$project$Update$Group$isNonWordChar = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$fromChar,
	function (a) {
		return A2($elm$core$String$contains, a, '/\\()\"\':,.;<>~!@#$%^&*|+=[]{}`?-…');
	});
var $author$project$Update$Group$isWhitespace = A2(
	$elm$core$Basics$composeR,
	$elm$core$String$fromChar,
	A2(
		$elm$core$Basics$composeR,
		$elm$core$String$trim,
		$elm$core$Basics$eq('')));
var $author$project$Update$Group$isWordChar = function (_char) {
	return (!$author$project$Update$Group$isNonWordChar(_char)) && (!$author$project$Update$Group$isWhitespace(_char));
};
var $elm$core$Tuple$mapSecond = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			x,
			func(y));
	});
var $elm$core$String$reverse = _String_reverse;
var $author$project$Update$Group$groupHelp = F4(
	function (direction, string, column, group) {
		var parts = function () {
			if (!direction) {
				return $elm$core$String$uncons(string);
			} else {
				return A2(
					$elm$core$Maybe$map,
					$elm$core$Tuple$mapSecond($elm$core$String$reverse),
					$elm$core$String$uncons(
						$elm$core$String$reverse(string)));
			}
		}();
		if (!parts.$) {
			var _v1 = parts.a;
			var _char = _v1.a;
			var rest = _v1.b;
			var nextColumn = function () {
				if (!direction) {
					return column + 1;
				} else {
					return A2($elm$core$Basics$max, column - 1, 0);
				}
			}();
			var next = A3($author$project$Update$Group$groupHelp, direction, rest, nextColumn);
			switch (group) {
				case 0:
					return $author$project$Update$Group$isWhitespace(_char) ? next(0) : ($author$project$Update$Group$isNonWordChar(_char) ? next(2) : next(1));
				case 1:
					return (!$author$project$Update$Group$isWordChar(_char)) ? nextColumn : next(1);
				default:
					return $author$project$Update$Group$isNonWordChar(_char) ? next(2) : nextColumn;
			}
		} else {
			return column;
		}
	});
var $author$project$Update$Group$groupEnd = F2(
	function (column, str) {
		return A4(
			$author$project$Update$Group$groupHelp,
			0,
			A2($elm$core$String$dropLeft, column, str),
			column,
			0);
	});
var $author$project$Update$Group$Backward = 1;
var $author$project$Update$Group$groupStart = F2(
	function (column, str) {
		return A4(
			$author$project$Update$Group$groupHelp,
			1,
			A3($elm$core$String$slice, 0, column, str),
			column,
			0);
	});
var $elm_community$maybe_extra$Maybe$Extra$orElseLazy = F2(
	function (fma, mb) {
		if (mb.$ === 1) {
			return fma(0);
		} else {
			return mb;
		}
	});
var $author$project$Update$Group$tuple3MapAll = F2(
	function (fn, _v0) {
		var a1 = _v0.a;
		var a2 = _v0.b;
		var a3 = _v0.c;
		return _Utils_Tuple3(
			fn(a1),
			fn(a2),
			fn(a3));
	});
var $author$project$Update$Group$tuple3CharsPred = function (pred) {
	return $author$project$Update$Group$tuple3MapAll(
		A2(
			$elm$core$Basics$composeR,
			$elm$core$Maybe$map(pred),
			$elm$core$Maybe$withDefault(false)));
};
var $author$project$Update$Group$groupRange = F2(
	function (_v0, strArray) {
		var line = _v0.i;
		var column = _v0.ac;
		return A2(
			$elm$core$Maybe$andThen,
			function (text) {
				var chars = A2($author$project$Update$Group$charsAround, column, text);
				var range = function (pred) {
					var _v2 = A2($author$project$Update$Group$tuple3CharsPred, pred, chars);
					if (_v2.a) {
						if (_v2.b) {
							if (_v2.c) {
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										A2($author$project$Update$Group$groupStart, column, text) + 1,
										A2($author$project$Update$Group$groupEnd, column, text) - 1));
							} else {
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										A2($author$project$Update$Group$groupStart, column, text) + 1,
										column + 1));
							}
						} else {
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									A2($author$project$Update$Group$groupStart, column, text) + 1,
									column));
						}
					} else {
						if (_v2.b) {
							if (_v2.c) {
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(
										column,
										A2($author$project$Update$Group$groupEnd, column, text) - 1));
							} else {
								return $elm$core$Maybe$Just(
									_Utils_Tuple2(column, column + 1));
							}
						} else {
							return $elm$core$Maybe$Nothing;
						}
					}
				};
				return A2(
					$elm_community$maybe_extra$Maybe$Extra$orElseLazy,
					function (_v1) {
						return range($author$project$Update$Group$isNonWordChar);
					},
					range($author$project$Update$Group$isWordChar));
			},
			A2($elm$core$Array$get, line, strArray));
	});
var $author$project$Common$comparePositions = F2(
	function (from, to) {
		return ((_Utils_cmp(from.i, to.i) < 0) || (_Utils_eq(from.i, to.i) && (_Utils_cmp(from.ac, to.ac) < 0))) ? 0 : (_Utils_eq(from, to) ? 1 : 2);
	});
var $author$project$Common$hoversToPositions = F3(
	function (lines, from, to) {
		var selectionLinePosition = F2(
			function (line, position) {
				return (_Utils_cmp(line, position.i) > -1) ? _Utils_Tuple2(
					position,
					{
						ac: A2($author$project$Common$lastColumn, lines, line),
						i: line
					}) : _Utils_Tuple2(
					{ac: 0, i: line + 1},
					position);
			});
		var _v0 = _Utils_Tuple2(from, to);
		_v0$1:
		while (true) {
			switch (_v0.a.$) {
				case 0:
					var _v1 = _v0.a;
					return $elm$core$Maybe$Nothing;
				case 1:
					switch (_v0.b.$) {
						case 0:
							break _v0$1;
						case 1:
							var line1 = _v0.a.a;
							var line2 = _v0.b.a;
							var smaller = A2($elm$core$Basics$min, line1, line2);
							var bigger = A2($elm$core$Basics$max, line1, line2);
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									{ac: 0, i: smaller + 1},
									{
										ac: A2($author$project$Common$lastColumn, lines, bigger),
										i: bigger
									}));
						default:
							var line = _v0.a.a;
							var position = _v0.b.a;
							return $elm$core$Maybe$Just(
								A2(selectionLinePosition, line, position));
					}
				default:
					switch (_v0.b.$) {
						case 0:
							break _v0$1;
						case 1:
							var position = _v0.a.a;
							var line = _v0.b.a;
							return $elm$core$Maybe$Just(
								A2(selectionLinePosition, line, position));
						default:
							var position1 = _v0.a.a;
							var position2 = _v0.b.a;
							var _v3 = (!A2($author$project$Common$comparePositions, position1, position2)) ? _Utils_Tuple2(position1, position2) : _Utils_Tuple2(position2, position1);
							var smaller = _v3.a;
							var bigger = _v3.b;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(smaller, bigger));
					}
			}
		}
		var _v2 = _v0.b;
		return $elm$core$Maybe$Nothing;
	});
var $author$project$Action$indent = function (model) {
	var newLines = function () {
		var _v0 = model.Z;
		if (_v0.$ === 3) {
			var p1 = _v0.a;
			var p2 = _v0.b;
			return A4($author$project$ArrayUtil$indent, model.d_, p1.i, p2.i, model.p);
		} else {
			return model.p;
		}
	}();
	return _Utils_update(
		model,
		{p: newLines});
};
var $author$project$Update$Line$splitStringAt = F2(
	function (k, str) {
		var n = $elm$core$String$length(str);
		return _Utils_Tuple2(
			A3($elm$core$String$slice, 0, k, str),
			A3($elm$core$String$slice, k, n, str));
	});
var $author$project$Update$Line$breakLineAfter = F2(
	function (k, str) {
		if (_Utils_cmp(
			$elm$core$String$length(str),
			k) > 0) {
			var indexOfSucceedingBlank = A2(
				$elm$core$Maybe$withDefault,
				k,
				$elm$core$List$head(
					A2(
						$elm$core$List$filter,
						function (i) {
							return _Utils_cmp(i, k) > 0;
						},
						A2($elm$core$String$indexes, ' ', str))));
			return function (_v0) {
				var a = _v0.a;
				var b = _v0.b;
				return _Utils_Tuple2(
					a,
					$elm$core$Maybe$Just(b));
			}(
				A2($author$project$Update$Line$splitStringAt, indexOfSucceedingBlank + 1, str));
		} else {
			return _Utils_Tuple2(str, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$Update$Line$breakLineBefore = F2(
	function (k, str) {
		if (_Utils_cmp(
			$elm$core$String$length(str),
			k) > 0) {
			var indexOfPrecedingBlank = A2(
				$elm$core$Maybe$withDefault,
				k,
				$elm$core$List$head(
					$elm$core$List$reverse(
						A2(
							$elm$core$List$filter,
							function (i) {
								return _Utils_cmp(i, k) < 0;
							},
							A2($elm$core$String$indexes, ' ', str)))));
			return (_Utils_cmp(indexOfPrecedingBlank, k) < 1) ? function (_v0) {
				var a = _v0.a;
				var b = _v0.b;
				return _Utils_Tuple2(
					a,
					$elm$core$Maybe$Just(b));
			}(
				A2($author$project$Update$Line$splitStringAt, indexOfPrecedingBlank + 1, str)) : _Utils_Tuple2(str, $elm$core$Maybe$Nothing);
		} else {
			return _Utils_Tuple2(str, $elm$core$Maybe$Nothing);
		}
	});
var $author$project$ArrayUtil$split = F2(
	function (position, array) {
		var _v0 = A2($elm$core$Array$get, position.i, array);
		if (_v0.$ === 1) {
			return _Utils_Tuple2(
				array,
				$elm$core$Array$fromList(
					_List_fromArray(
						[''])));
		} else {
			var focus = _v0.a;
			var n = $elm$core$Array$length(array);
			var focusLength = $elm$core$String$length(focus);
			var beforeSuffix = A3($elm$core$String$slice, 0, position.ac, focus);
			var before = A3($elm$core$Array$slice, 0, position.i, array);
			var firstPart = (beforeSuffix === '') ? before : A2($elm$core$Array$push, beforeSuffix, before);
			var afterPrefix = A3($elm$core$String$slice, position.ac, focusLength, focus);
			var after = A3($elm$core$Array$slice, position.i + 1, n, array);
			var secondPart = A2($author$project$ArrayUtil$put, afterPrefix, after);
			return _Utils_Tuple2(firstPart, secondPart);
		}
	});
var $author$project$ArrayUtil$insertLineAfter = F3(
	function (line, str, lines) {
		var _v0 = A2(
			$author$project$ArrayUtil$split,
			{ac: 0, i: line + 1},
			lines);
		var before = _v0.a;
		var after = _v0.b;
		return A3(
			$author$project$ArrayUtil$joinThree,
			before,
			$elm$core$Array$fromList(
				_List_fromArray(
					[str])),
			after);
	});
var $author$project$Update$Line$insertLineAfter = F3(
	function (k, str, model) {
		return _Utils_update(
			model,
			{
				p: A3($author$project$ArrayUtil$insertLineAfter, k, str, model.p)
			});
	});
var $author$project$Update$Line$charactersPerLine = F2(
	function (screenWidth, fontSize) {
		return (1.55 * screenWidth) / fontSize;
	});
var $author$project$Update$Line$optimumWrapWidth = function (model) {
	return (A2($author$project$Update$Line$charactersPerLine, model.hC, model.bQ) - 6) | 0;
};
var $author$project$Update$Line$putCursorAt = F2(
	function (position, model) {
		return _Utils_update(
			model,
			{d: position});
	});
var $elm$core$Array$setHelp = F4(
	function (shift, index, value, tree) {
		var pos = $elm$core$Array$bitMask & (index >>> shift);
		var _v0 = A2($elm$core$Elm$JsArray$unsafeGet, pos, tree);
		if (!_v0.$) {
			var subTree = _v0.a;
			var newSub = A4($elm$core$Array$setHelp, shift - $elm$core$Array$shiftStep, index, value, subTree);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$SubTree(newSub),
				tree);
		} else {
			var values = _v0.a;
			var newLeaf = A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, values);
			return A3(
				$elm$core$Elm$JsArray$unsafeSet,
				pos,
				$elm$core$Array$Leaf(newLeaf),
				tree);
		}
	});
var $elm$core$Array$set = F3(
	function (index, value, array) {
		var len = array.a;
		var startShift = array.b;
		var tree = array.c;
		var tail = array.d;
		return ((index < 0) || (_Utils_cmp(index, len) > -1)) ? array : ((_Utils_cmp(
			index,
			$elm$core$Array$tailIndex(len)) > -1) ? A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			tree,
			A3($elm$core$Elm$JsArray$unsafeSet, $elm$core$Array$bitMask & index, value, tail)) : A4(
			$elm$core$Array$Array_elm_builtin,
			len,
			startShift,
			A4($elm$core$Array$setHelp, startShift, index, value, tree),
			tail));
	});
var $author$project$Update$Line$replaceLineAt = F3(
	function (k, str, model) {
		return _Utils_update(
			model,
			{
				p: A3($elm$core$Array$set, k, str, model.p)
			});
	});
var $author$project$Update$Line$break = function (model) {
	var _v0 = model.$7;
	if (_v0 === 1) {
		return model;
	} else {
		var line = model.d.i;
		var k = $author$project$Update$Line$optimumWrapWidth(model);
		var _v1 = A2($elm$core$Array$get, line, model.p);
		if (_v1.$ === 1) {
			return model;
		} else {
			var currentLine = _v1.a;
			var currentLineLength = $elm$core$String$length(currentLine);
			if (_Utils_cmp(currentLineLength, k) < 1) {
				return model;
			} else {
				if (_Utils_eq(currentLineLength, model.d.ac)) {
					var _v2 = A2($author$project$Update$Line$breakLineBefore, k, currentLine);
					if (_v2.b.$ === 1) {
						var _v3 = _v2.b;
						return model;
					} else {
						var adjustedLine = _v2.a;
						var extraLine = _v2.b.a;
						var newCursor = {
							ac: $elm$core$String$length(extraLine),
							i: line + 1
						};
						return A2(
							$author$project$Update$Line$putCursorAt,
							newCursor,
							A3(
								$author$project$Update$Line$insertLineAfter,
								line,
								extraLine,
								A3($author$project$Update$Line$replaceLineAt, line, adjustedLine, model)));
					}
				} else {
					var _v4 = A2($author$project$Update$Line$breakLineAfter, model.d.ac, currentLine);
					if (_v4.b.$ === 1) {
						var _v5 = _v4.b;
						return model;
					} else {
						var adjustedLine = _v4.a;
						var extraLine = _v4.b.a;
						var newCursor = model.d;
						return A2(
							$author$project$Update$Line$putCursorAt,
							newCursor,
							A3(
								$author$project$Update$Line$insertLineAfter,
								line,
								extraLine,
								A3($author$project$Update$Line$replaceLineAt, line, adjustedLine, model)));
					}
				}
			}
		}
	}
};
var $author$project$Update$Function$autoclose = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('[', ']'),
			_Utils_Tuple2('{', '}'),
			_Utils_Tuple2('(', ')'),
			_Utils_Tuple2('\"', '\"'),
			_Utils_Tuple2('`', '`')
		]));
var $author$project$Update$Function$insertSimple = F2(
	function (_char, model) {
		var cursor = model.d;
		var lines = model.p;
		var _v0 = cursor;
		var line = _v0.i;
		var column = _v0.ac;
		var lineWithCharAdded = function (content) {
			return _Utils_ap(
				A2($elm$core$String$left, column, content),
				_Utils_ap(
					_char,
					A2($elm$core$String$dropLeft, column, content)));
		};
		var newCursor = {ac: column + 1, i: line};
		var newLines = A2(
			$elm$core$Array$indexedMap,
			F2(
				function (i, content) {
					return _Utils_eq(i, line) ? lineWithCharAdded(content) : content;
				}),
			lines);
		return _Utils_update(
			model,
			{d: newCursor, p: newLines});
	});
var $elm_community$string_extra$String$Extra$replaceSlice = F4(
	function (substitution, start, end, string) {
		return _Utils_ap(
			A3($elm$core$String$slice, 0, start, string),
			_Utils_ap(
				substitution,
				A3(
					$elm$core$String$slice,
					end,
					$elm$core$String$length(string),
					string)));
	});
var $author$project$ArrayUtil$replace = F4(
	function (pos1, pos2, str, array) {
		if (_Utils_eq(pos1.i, pos2.i)) {
			var _v0 = A2($elm$core$Array$get, pos1.i, array);
			if (_v0.$ === 1) {
				return array;
			} else {
				var line = _v0.a;
				var newLine = A4($elm_community$string_extra$String$Extra$replaceSlice, str, pos1.ac, pos2.ac, line);
				return A3($elm$core$Array$set, pos1.i, newLine, array);
			}
		} else {
			var sz = A3($author$project$ArrayUtil$cut, pos1, pos2, array);
			return A2(
				$elm$core$Array$append,
				A2($elm$core$Array$push, str, sz.ar),
				sz.ap);
		}
	});
var $author$project$Update$Function$insertWithMatching = F4(
	function (selection, closing, str, model) {
		var _v0 = function () {
			if (selection.$ === 3) {
				var a = selection.a;
				var b = selection.b;
				return _Utils_Tuple2(a, b);
			} else {
				return _Utils_Tuple2(model.d, model.d);
			}
		}();
		var start = _v0.a;
		var end = _v0.b;
		var insertion = _Utils_ap(
			str,
			_Utils_ap(
				A3($author$project$ArrayUtil$between, start, end, model.p),
				closing));
		var newCursor = {
			ac: (model.d.ac + $elm$core$String$length(insertion)) - 1,
			i: model.d.i
		};
		var newLines = A4($author$project$ArrayUtil$replace, start, end, insertion, model.p);
		return _Utils_update(
			model,
			{d: newCursor, p: newLines});
	});
var $author$project$Update$Function$insertDispatch = F2(
	function (str, model) {
		var _v0 = _Utils_Tuple2(
			model.Z,
			A2($elm$core$Dict$get, str, $author$project$Update$Function$autoclose));
		if (!_v0.b.$) {
			var selection = _v0.a;
			var closing = _v0.b.a;
			return A4($author$project$Update$Function$insertWithMatching, selection, closing, str, model);
		} else {
			return A2($author$project$Update$Function$insertSimple, str, model);
		}
	});
var $author$project$Vim$VAccumulate = 0;
var $author$project$Vim$Update$appendBuffer = F2(
	function (str, model) {
		return _Utils_update(
			model,
			{
				dr: _Utils_ap(model.dr, str)
			});
	});
var $author$project$Common$recordHistory_ = F2(
	function (oldModel, newModel) {
		return _Utils_update(
			newModel,
			{
				bn: (!_Utils_eq(oldModel.p, newModel.p)) ? A2(
					$author$project$History$push,
					$author$project$Common$stateToSnapshot(oldModel),
					newModel.bn) : newModel.bn
			});
	});
var $author$project$ArrayUtil$firstLine_ = function (newLines) {
	return A2(
		$elm$core$Maybe$withDefault,
		'',
		A2($elm$core$Array$get, 0, newLines));
};
var $elm_community$string_extra$String$Extra$insertAt = F3(
	function (insert, pos, string) {
		return A4($elm_community$string_extra$String$Extra$replaceSlice, insert, pos, pos, string);
	});
var $author$project$ArrayUtil$insert = F3(
	function (position, str, array) {
		var _v0 = A2($elm$core$Array$get, position.i, array);
		if (_v0.$ === 1) {
			return array;
		} else {
			var line = _v0.a;
			var newLine = A3($elm_community$string_extra$String$Extra$insertAt, str, position.ac, line);
			return A3($elm$core$Array$set, position.i, newLine, array);
		}
	});
var $author$project$ArrayUtil$join = function (z) {
	return A3($author$project$ArrayUtil$joinThree, z.ar, z.ay, z.ap);
};
var $author$project$ArrayUtil$lengthOfLine = F2(
	function (line, targetLines) {
		return A2(
			$elm$core$Maybe$map,
			$elm$core$String$length,
			A2($elm$core$Array$get, line, targetLines));
	});
var $author$project$ArrayUtil$replaceLines = F4(
	function (pos1, pos2, newLines, targetLines) {
		if (_Utils_eq(pos1.i, pos2.i)) {
			var _v0 = _Utils_Tuple2(
				$elm$core$Array$length(newLines) === 1,
				!_Utils_eq(
					A2($author$project$ArrayUtil$lengthOfLine, 0, newLines),
					A2($author$project$ArrayUtil$lengthOfLine, pos1.i, targetLines)));
			if (_v0.a) {
				if (_v0.b) {
					return A3(
						$author$project$ArrayUtil$insert,
						pos1,
						$author$project$ArrayUtil$firstLine_(newLines),
						targetLines);
				} else {
					return A3(
						$author$project$ArrayUtil$insertLineAfter,
						pos1.i - 1,
						$author$project$ArrayUtil$firstLine_(newLines),
						targetLines);
				}
			} else {
				var _v1 = A3($author$project$ArrayUtil$cut, pos1, pos2, targetLines);
				var before = _v1.ar;
				var middle = _v1.ay;
				var after = _v1.ap;
				return A3($author$project$ArrayUtil$joinThree, before, newLines, after);
			}
		} else {
			var sz = A3($author$project$ArrayUtil$cut, pos1, pos2, targetLines);
			return $author$project$ArrayUtil$join(
				_Utils_update(
					sz,
					{ay: newLines}));
		}
	});
var $author$project$Vim$Execute$setBuffer = F2(
	function (str, model) {
		return _Utils_update(
			model,
			{dr: str});
	});
var $author$project$Vim$Execute$setState = F2(
	function (state, model) {
		return _Utils_update(
			model,
			{bC: state});
	});
var $author$project$Vim$Execute$doReplacement = F2(
	function (replacementData, model) {
		var vimModel = A2(
			$author$project$Vim$Execute$setBuffer,
			'',
			A2($author$project$Vim$Execute$setState, 1, model.e1));
		var linesToInsert = $elm$core$Array$fromList(
			$elm$core$String$lines(replacementData.al));
		var newLines = A4($author$project$ArrayUtil$replaceLines, model.d, model.d, linesToInsert, model.p);
		var line = model.d.i;
		var newCursor = {ac: model.d.ac + replacementData.af, i: line + replacementData.L};
		var newSelection = A2(
			$author$project$EditorMsg$Selection,
			{ac: replacementData.am, i: line + replacementData.L},
			{ac: replacementData.an, i: line + replacementData.L});
		return A2(
			$author$project$Common$recordHistory_,
			model,
			_Utils_update(
				model,
				{d: newCursor, p: newLines, Z: newSelection, e1: vimModel}));
	});
var $emilianobovetti$edit_distance$EditDistance$last = function (list) {
	last:
	while (true) {
		if (list.b) {
			if (!list.b.b) {
				var value = list.a;
				return $elm$core$Maybe$Just(value);
			} else {
				var tail = list.b;
				var $temp$list = tail;
				list = $temp$list;
				continue last;
			}
		} else {
			return $elm$core$Maybe$Nothing;
		}
	}
};
var $emilianobovetti$edit_distance$EditDistance$min3 = F3(
	function (a, b, c) {
		var diff1 = a - b;
		var minAB = b + (diff1 & (diff1 >> 31));
		var diff2 = minAB - c;
		return c + (diff2 & (diff2 >> 31));
	});
var $emilianobovetti$edit_distance$EditDistance$patternLoop = F6(
	function (textHead, pattern, b0, b1, b2, prev) {
		if (pattern.b) {
			var patternHead = pattern.a;
			var patternTail = pattern.b;
			if (prev.b) {
				var prevHead = prev.a;
				var prevTail = prev.b;
				var b2_ = _Utils_eq(textHead, patternHead) ? b0 : (1 + A3($emilianobovetti$edit_distance$EditDistance$min3, b0, b1, b2));
				var b1_ = prevHead;
				var b0_ = b1;
				return A2(
					$elm$core$List$cons,
					b2_,
					A6($emilianobovetti$edit_distance$EditDistance$patternLoop, textHead, patternTail, b0_, b1_, b2_, prevTail));
			} else {
				return _Utils_eq(textHead, patternHead) ? _List_fromArray(
					[b0]) : _List_fromArray(
					[
						1 + A3($emilianobovetti$edit_distance$EditDistance$min3, b0, b1, b2)
					]);
			}
		} else {
			return _List_Nil;
		}
	});
var $emilianobovetti$edit_distance$EditDistance$initPatternLoop = F4(
	function (textHead, pattern, b0, prevCol) {
		if (prevCol.b) {
			var prevHead = prevCol.a;
			var prevTail = prevCol.b;
			return A6($emilianobovetti$edit_distance$EditDistance$patternLoop, textHead, pattern, b0, prevHead, b0 + 1, prevTail);
		} else {
			return _List_Nil;
		}
	});
var $emilianobovetti$edit_distance$EditDistance$textLoop = F4(
	function (text, pattern, idx, col) {
		textLoop:
		while (true) {
			if (!text.b) {
				return col;
			} else {
				var textHead = text.a;
				var textTail = text.b;
				var nextCol = A4($emilianobovetti$edit_distance$EditDistance$initPatternLoop, textHead, pattern, idx - 1, col);
				var $temp$text = textTail,
					$temp$pattern = pattern,
					$temp$idx = idx + 1,
					$temp$col = nextCol;
				text = $temp$text;
				pattern = $temp$pattern;
				idx = $temp$idx;
				col = $temp$col;
				continue textLoop;
			}
		}
	});
var $emilianobovetti$edit_distance$EditDistance$levenshtein = F2(
	function (text, pattern) {
		levenshtein:
		while (true) {
			var _v0 = _Utils_Tuple2(text, pattern);
			if (!_v0.a.b) {
				return $elm$core$List$length(pattern);
			} else {
				if (!_v0.b.b) {
					return $elm$core$List$length(text);
				} else {
					if (!_v0.a.b.b) {
						var _v1 = _v0.a;
						var textHead = _v1.a;
						return A2(
							$elm$core$List$any,
							$elm$core$Basics$eq(textHead),
							pattern) ? ($elm$core$List$length(pattern) - 1) : $elm$core$List$length(pattern);
					} else {
						if (!_v0.b.b.b) {
							var _v2 = _v0.b;
							var patternHead = _v2.a;
							return A2(
								$elm$core$List$any,
								$elm$core$Basics$eq(patternHead),
								text) ? ($elm$core$List$length(text) - 1) : $elm$core$List$length(text);
						} else {
							var _v3 = _v0.a;
							var textHead = _v3.a;
							var textTail = _v3.b;
							var _v4 = _v0.b;
							var patternHead = _v4.a;
							var patternTail = _v4.b;
							if (_Utils_eq(textHead, patternHead)) {
								var $temp$text = textTail,
									$temp$pattern = patternTail;
								text = $temp$text;
								pattern = $temp$pattern;
								continue levenshtein;
							} else {
								return A2(
									$elm$core$Maybe$withDefault,
									-1,
									$emilianobovetti$edit_distance$EditDistance$last(
										A4(
											$emilianobovetti$edit_distance$EditDistance$textLoop,
											text,
											pattern,
											1,
											A2(
												$elm$core$List$range,
												1,
												$elm$core$List$length(pattern)))));
							}
						}
					}
				}
			}
		}
	});
var $elm$core$String$foldr = _String_foldr;
var $elm$core$String$toList = function (string) {
	return A3($elm$core$String$foldr, $elm$core$List$cons, _List_Nil, string);
};
var $emilianobovetti$edit_distance$EditDistance$levenshteinOfStrings = F2(
	function (text, pattern) {
		return _Utils_eq(text, pattern) ? 0 : ((_Utils_cmp(
			$elm$core$String$length(pattern),
			$elm$core$String$length(text)) > 0) ? A2(
			$emilianobovetti$edit_distance$EditDistance$levenshtein,
			$elm$core$String$toList(pattern),
			$elm$core$String$toList(text)) : A2(
			$emilianobovetti$edit_distance$EditDistance$levenshtein,
			$elm$core$String$toList(text),
			$elm$core$String$toList(pattern)));
	});
var $author$project$Vim$Execute$distance = F2(
	function (word, datum) {
		var n2 = $elm$core$String$length(datum.X);
		var n1 = $elm$core$String$length(word);
		var n = A2($elm$core$Basics$min, n1, n2);
		return A2(
			$emilianobovetti$edit_distance$EditDistance$levenshteinOfStrings,
			A2($elm$core$String$left, n, datum.X),
			word);
	});
var $author$project$Vim$Execute$bestMatch = F2(
	function (str, data) {
		return A2(
			$elm$core$Maybe$map,
			$elm$core$Tuple$second,
			$elm$core$List$head(
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var ds = _v0.a;
						var s = _v0.b;
						return !ds;
					},
					A2(
						$elm$core$List$map,
						function (datum) {
							return _Utils_Tuple2(
								A2($author$project$Vim$Execute$distance, str, datum),
								datum);
						},
						data))));
	});
var $author$project$Vim$Execute$replacements = _List_fromArray(
	[
		{af: 0, L: 1, X: 'theorem', al: '\\begin{theorem}\nXXX\n\\end{theorem}\n', am: 0, an: 3},
		{af: 0, L: 1, X: 'equation', al: '\\begin{equation}\nXXX\n\\end{equation}\n\n', am: 0, an: 3},
		{af: 0, L: 1, X: 'colored', al: '\\begin{colored}[elm]\nXXX\n\\end{colored}\n\n', am: 0, an: 3},
		{af: 0, L: 1, X: 'env', al: '\\begin{env}\nXXX\n\\end{env}\n\n', am: 0, an: 3},
		{af: 6, L: 2, X: 'enumerate', al: '\\begin{enumerate}\n\n\\item X\n\n\\item Y\n\n\\end{enumerate}\n\n', am: 5, an: 6},
		{af: 6, L: 2, X: 'itemize', al: '\\begin{itemize}\n\n\\item X\n\n\\item Y\n\n\\end{itemize}\n\n', am: 5, an: 6},
		{af: 1, L: 0, X: '$', al: '$\\pi$', am: 1, an: 3},
		{af: 0, L: 1, X: '$$', al: '$$\n\\pi\n$$\n', am: 0, an: 3}
	]);
var $author$project$Vim$Execute$executeBuffer = function (buffer_) {
	return A2($author$project$Vim$Execute$bestMatch, buffer_, $author$project$Vim$Execute$replacements);
};
var $author$project$Vim$Execute$innerProcessCommand = function (model) {
	var _v0 = $author$project$Vim$Execute$executeBuffer(model.e1.dr);
	if (_v0.$ === 1) {
		return _Utils_update(
			model,
			{e1: $author$project$Vim$init});
	} else {
		var replacementData = _v0.a;
		return (model.e1.dr === '') ? _Utils_update(
			model,
			{e1: $author$project$Vim$init}) : A2($author$project$Vim$Execute$doReplacement, replacementData, model);
	}
};
var $author$project$Vim$Update$setState = F2(
	function (state, model) {
		return _Utils_update(
			model,
			{bC: state});
	});
var $author$project$EditorModel$VimInsert = 1;
var $author$project$Vim$Update$processCommand = function (model) {
	return model;
};
var $author$project$Vim$Update$vimModeProcess = F2(
	function (_char, model) {
		switch (_char) {
			case 'i':
				return _Utils_update(
					model,
					{
						dK: $author$project$EditorModel$VimEditor(1)
					});
			case 'h':
				return $author$project$Action$cursorLeft(model);
			case 'j':
				return $author$project$Action$cursorDown(model);
			case 'k':
				return $author$project$Action$cursorUp(model);
			case 'l':
				return $author$project$Action$cursorRight(model);
			case '/':
				return $author$project$Vim$Update$processCommand(model);
			default:
				return model;
		}
	});
var $author$project$Vim$Update$process = F2(
	function (_char, model) {
		var _v0 = _Utils_Tuple2(model.e1.bC, _char);
		if (_v0.a === 1) {
			if (_v0.b === '=') {
				var _v1 = _v0.a;
				return _Utils_update(
					model,
					{
						e1: A2($author$project$Vim$Update$setState, 0, model.e1)
					});
			} else {
				var _v2 = _v0.a;
				return A2($author$project$Vim$Update$vimModeProcess, _char, model);
			}
		} else {
			if (_v0.b === '=') {
				var _v3 = _v0.a;
				return $author$project$Vim$Execute$innerProcessCommand(model);
			} else {
				var _v4 = _v0.a;
				return _Utils_update(
					model,
					{
						e1: A2($author$project$Vim$Update$appendBuffer, _char, model.e1)
					});
			}
		}
	});
var $author$project$Update$Function$insertChar = F3(
	function (editMode, _char, model) {
		if (!editMode.$) {
			return $author$project$Update$Line$break(
				A2($author$project$Update$Function$insertDispatch, _char, model));
		} else {
			if (editMode.a === 1) {
				var _v1 = editMode.a;
				return $author$project$Update$Line$break(
					A2($author$project$Update$Function$insertDispatch, _char, model));
			} else {
				var _v2 = editMode.a;
				return A2($author$project$Vim$Update$process, _char, model);
			}
		}
	});
var $author$project$Update$Scroll$jumpToBottom = function (model) {
	return _Utils_eq(
		model.d.i,
		$elm$core$Array$length(model.p) - 1) ? A2(
		$elm$core$Task$attempt,
		function (_v0) {
			return $author$project$EditorMsg$EditorNoOp;
		},
		A2(
			$elm$core$Task$andThen,
			function (info) {
				return A3($elm$browser$Browser$Dom$setViewportOf, '__editor__', 0, info.gO.cV);
			},
			$elm$browser$Browser$Dom$getViewportOf('__editor__'))) : $elm$core$Platform$Cmd$none;
};
var $author$project$Update$Function$killLine = function (model) {
	var newSelection = A2(
		$author$project$EditorMsg$Selection,
		model.d,
		A2($author$project$Line$lastPosition, model.d.i, model.p));
	var _v0 = A2($author$project$Action$deleteSelection, newSelection, model.p);
	var newLines = _v0.a;
	var selectedText = _v0.b;
	return _Utils_update(
		model,
		{p: newLines, eL: selectedText});
};
var $author$project$Action$lastLine = function (model) {
	var lastLineIndex = $elm$core$Array$length(model.p) - 1;
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{
				d: {ac: 0, i: lastLineIndex}
			}),
		A2($author$project$Action$scrollToLine, model.a6, lastLineIndex));
};
var $author$project$Action$lineEnd = F2(
	function (line, model) {
		return function (x) {
			return x - 1;
		}(
			A2(
				$elm$core$Maybe$withDefault,
				0,
				A2(
					$elm$core$Maybe$map,
					$elm$core$String$length,
					A2($elm$core$Array$get, line, model.p))));
	});
var $author$project$Action$moveToLineEnd = function (model) {
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{
				d: {
					ac: A2($author$project$Action$lineEnd, model.d.i, model) + 1,
					i: model.d.i
				}
			}),
		$elm$core$Platform$Cmd$none);
};
var $author$project$Action$moveToLineStart = function (model) {
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{
				d: {ac: 0, i: model.d.i}
			}),
		$elm$core$Platform$Cmd$none);
};
var $author$project$Update$Function$newLine = function (model) {
	var cursor = model.d;
	var lines = model.p;
	var linesList = $elm$core$Array$toList(lines);
	var _v0 = cursor;
	var line = _v0.i;
	var column = _v0.ac;
	var line_ = line + 1;
	var contentUntilCursor = A2(
		$elm$core$List$indexedMap,
		F2(
			function (i, content) {
				return _Utils_eq(i, line) ? A2($elm$core$String$left, column, content) : content;
			}),
		A2($elm$core$List$take, line_, linesList));
	var newCursor = {ac: 0, i: line_};
	var restOfLines = A2($elm$core$List$drop, line_, linesList);
	var restOfLineAfterCursor = A2(
		$elm$core$String$dropLeft,
		column,
		A2($author$project$Common$lineContent, lines, line));
	var newLines = $elm$core$Array$fromList(
		_Utils_ap(
			contentUntilCursor,
			A2($elm$core$List$cons, restOfLineAfterCursor, restOfLines)));
	return _Utils_update(
		model,
		{d: newCursor, p: newLines});
};
var $author$project$Action$linesPerPage = function (model) {
	return $elm$core$Basics$floor(model.cV / model.a6);
};
var $author$project$Action$scrollToYCoordinate = function (y) {
	return A2(
		$elm$core$Task$attempt,
		function (_v0) {
			return $author$project$EditorMsg$EditorNoOp;
		},
		A3($elm$browser$Browser$Dom$setViewportOf, '__editor__', 0, y));
};
var $author$project$Action$yValueOfLine = F2(
	function (lineHeight, n) {
		return n * lineHeight;
	});
var $author$project$Action$pageDown = function (model) {
	var newY = (A2($author$project$Action$yValueOfLine, model.a6, model.d.i) + model.cV) - (3 * model.a6);
	var lpp = $author$project$Action$linesPerPage(model);
	var lastIndex = $elm$core$Array$length(model.p) - 1;
	var newLine = A2($elm$core$Basics$min, lastIndex, model.d.i + lpp);
	var newCursor = {ac: 0, i: newLine};
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{d: newCursor}),
		$author$project$Action$scrollToYCoordinate(newY));
};
var $author$project$Action$pageUp = function (model) {
	var newY = (A2($author$project$Action$yValueOfLine, model.a6, model.d.i) - model.cV) - (1 * model.a6);
	var lpp = 20;
	var newLine = A2($elm$core$Basics$max, 0, model.d.i - lpp);
	var newCursor = {ac: 0, i: newLine};
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{d: newCursor}),
		$author$project$Action$scrollToYCoordinate(newY));
};
var $author$project$Position$deltaColumn = F2(
	function (delta, pos) {
		return _Utils_update(
			pos,
			{ac: pos.ac + delta});
	});
var $author$project$Update$Function$lengthOfLine = F2(
	function (line, targetLines) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				$elm$core$String$length,
				A2($elm$core$Array$get, line, targetLines)));
	});
var $author$project$Update$Function$pasteSelection = function (model) {
	var newCursor = ($elm$core$Array$length(model.eL) === 1) ? A2(
		$author$project$Position$deltaColumn,
		A2($author$project$Update$Function$lengthOfLine, 0, model.eL),
		model.d) : {
		ac: model.d.ac,
		i: model.d.i + $elm$core$Array$length(model.eL)
	};
	var _v0 = model.Z;
	switch (_v0.$) {
		case 0:
			return model;
		case 1:
			return model;
		case 2:
			var pos = _v0.a;
			return _Utils_update(
				model,
				{
					d: newCursor,
					p: A4($author$project$ArrayUtil$replaceLines, pos, pos, model.eL, model.p)
				});
		default:
			var sel1 = _v0.a;
			var sel2 = _v0.b;
			return _Utils_update(
				model,
				{
					d: newCursor,
					p: A4($author$project$ArrayUtil$replaceLines, sel1, sel2, model.eL, model.p)
				});
	}
};
var $author$project$EditorMsg$MarkdownLoaded = function (a) {
	return {$: 49, a: a};
};
var $author$project$Update$File$read = function (file) {
	return A2(
		$elm$core$Task$perform,
		$author$project$EditorMsg$MarkdownLoaded,
		$elm$file$File$toString(file));
};
var $Janiczek$cmd_extra$Cmd$Extra$withNoCmd = function (model) {
	return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
};
var $author$project$Common$recordHistory = function (model) {
	return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
		A2($author$project$Common$recordHistory_, model, model));
};
var $author$project$History$redo = F2(
	function (current, _v0) {
		var history = _v0;
		var _v1 = history.a2;
		if (_v1.b) {
			var next = _v1.a;
			var future = _v1.b;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					{
						a2: future,
						aV: A2($elm$core$List$cons, current, history.aV)
					},
					next));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Common$removeCharAfter = function (model) {
	var cursor = model.d;
	var lines = model.p;
	if (A2($author$project$Common$isEndOfDocument, lines, cursor)) {
		return model;
	} else {
		var _v0 = cursor;
		var line = _v0.i;
		var column = _v0.ac;
		var isOnLastColumn = A3($author$project$Common$isLastColumn, lines, line, column);
		var removeCharFromLine = function (_v1) {
			var lineNum = _v1.a;
			var content = _v1.b;
			return _Utils_eq(lineNum, line) ? (isOnLastColumn ? _List_fromArray(
				[
					_Utils_ap(
					content,
					A2($author$project$Common$lineContent, lines, line + 1))
				]) : _List_fromArray(
				[
					_Utils_ap(
					A2($elm$core$String$left, column, content),
					A2($elm$core$String$dropLeft, column + 1, content))
				])) : (_Utils_eq(lineNum, line + 1) ? (isOnLastColumn ? _List_Nil : _List_fromArray(
				[content])) : _List_fromArray(
				[content]));
		};
		var newLines = $elm$core$Array$fromList(
			A2(
				$elm$core$List$concatMap,
				removeCharFromLine,
				$elm$core$Array$toIndexedList(lines)));
		return _Utils_update(
			model,
			{d: cursor, p: newLines});
	}
};
var $author$project$EditorMsg$EditorRequestedFile = function (a) {
	return {$: 48, a: a};
};
var $author$project$Update$File$requestMarkdownFile = A2(
	$elm$file$File$Select$file,
	_List_fromArray(
		['text/markdown']),
	$author$project$EditorMsg$EditorRequestedFile);
var $lovasoa$elm_rolling_list$RollingList$current = A2(
	$elm$core$Basics$composeL,
	$elm$core$List$head,
	function ($) {
		return $.H;
	});
var $lovasoa$elm_rolling_list$RollingList$rollBack = function (rollingList) {
	var _v0 = rollingList.I;
	if (!_v0.b) {
		var _v1 = $elm$core$List$reverse(rollingList.H);
		if (_v1.b) {
			var elem = _v1.a;
			var list = _v1.b;
			return {
				H: _List_fromArray(
					[elem]),
				I: list
			};
		} else {
			return {H: _List_Nil, I: _List_Nil};
		}
	} else {
		var element = _v0.a;
		var tail = _v0.b;
		return {
			H: A2($elm$core$List$cons, element, rollingList.H),
			I: tail
		};
	}
};
var $author$project$EditorMsg$GotViewport = function (a) {
	return {$: 67, a: a};
};
var $author$project$Update$Scroll$setEditorViewportForLine = F2(
	function (lineHeight, lineNumber) {
		var y = lineNumber * lineHeight;
		return (y >= 0) ? A2(
			$elm$core$Task$attempt,
			function (info) {
				return $author$project$EditorMsg$GotViewport(info);
			},
			A2(
				$elm$core$Task$andThen,
				function (_v0) {
					return $elm$browser$Browser$Dom$getViewportOf('__editor__');
				},
				A3($elm$browser$Browser$Dom$setViewportOf, '__editor__', 0, y))) : $elm$core$Platform$Cmd$none;
	});
var $lovasoa$elm_rolling_list$RollingList$toList = function (_v0) {
	var previous = _v0.I;
	var next = _v0.H;
	return _Utils_ap(
		next,
		$elm$core$List$reverse(previous));
};
var $author$project$Update$Scroll$rollSearchSelectionBackward = function (model) {
	var searchResults_ = $lovasoa$elm_rolling_list$RollingList$rollBack(model.eF);
	var searchResultList = $lovasoa$elm_rolling_list$RollingList$toList(searchResults_);
	var maxSearchResultIndex = function (x) {
		return x - 1;
	}(
		$elm$core$List$length(searchResultList));
	var newSearchResultIndex = (!model.eE) ? maxSearchResultIndex : (model.eE - 1);
	var _v0 = $lovasoa$elm_rolling_list$RollingList$current(searchResults_);
	if ((!_v0.$) && (_v0.a.$ === 3)) {
		var _v1 = _v0.a;
		var cursor = _v1.a;
		var end = _v1.b;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					d: cursor,
					eE: newSearchResultIndex,
					eF: searchResults_,
					Z: A2($author$project$EditorMsg$Selection, cursor, end)
				}),
			A2(
				$author$project$Update$Scroll$setEditorViewportForLine,
				model.a6,
				A2($elm$core$Basics$max, 0, cursor.i - 5)));
	} else {
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	}
};
var $lovasoa$elm_rolling_list$RollingList$roll = function (rollingList) {
	var _v0 = rollingList.H;
	if (!_v0.b) {
		return {
			H: $elm$core$List$reverse(rollingList.I),
			I: _List_Nil
		};
	} else {
		if (!_v0.b.b) {
			var element = _v0.a;
			return {
				H: $elm$core$List$reverse(
					A2($elm$core$List$cons, element, rollingList.I)),
				I: _List_Nil
			};
		} else {
			var element = _v0.a;
			var tail = _v0.b;
			return {
				H: tail,
				I: A2($elm$core$List$cons, element, rollingList.I)
			};
		}
	}
};
var $author$project$Update$Scroll$rollSearchSelectionForward = function (model) {
	var searchResults_ = $lovasoa$elm_rolling_list$RollingList$roll(model.eF);
	var searchResultList = $lovasoa$elm_rolling_list$RollingList$toList(searchResults_);
	var maxSearchHitIndex = function (x) {
		return x - 1;
	}(
		$elm$core$List$length(searchResultList));
	var newSearchResultIndex = (_Utils_cmp(model.eE, maxSearchHitIndex) > -1) ? 0 : (model.eE + 1);
	var _v0 = $lovasoa$elm_rolling_list$RollingList$current(searchResults_);
	if ((!_v0.$) && (_v0.a.$ === 3)) {
		var _v1 = _v0.a;
		var cursor = _v1.a;
		var end = _v1.b;
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					d: cursor,
					eE: newSearchResultIndex,
					eF: searchResults_,
					Z: A2($author$project$EditorMsg$Selection, cursor, end)
				}),
			A2(
				$author$project$Update$Scroll$setEditorViewportForLine,
				model.a6,
				A2($elm$core$Basics$max, 0, cursor.i - 5)));
	} else {
		return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
	}
};
var $elm$core$Basics$round = _Basics_round;
var $author$project$Common$scrollCmd = F3(
	function (newWindow, oldWindow, lineHeight) {
		var deltaOffset = newWindow.bZ - oldWindow.bZ;
		var newViewportY = function (yvp) {
			return (yvp + 100) - (deltaOffset * lineHeight);
		};
		var updateScrollPosition = A2(
			$elm$core$Task$andThen,
			function (vp) {
				return A3(
					$elm$browser$Browser$Dom$setViewportOf,
					'__editor__',
					0,
					newViewportY(vp.hB.hI));
			},
			$elm$browser$Browser$Dom$getViewportOf('__editor__'));
		return (!deltaOffset) ? $elm$core$Platform$Cmd$none : A2($elm$core$Task$attempt, $author$project$EditorMsg$ViewportMotion, updateScrollPosition);
	});
var $author$project$Window$shift = F2(
	function (line, window) {
		return (_Utils_cmp(line, window.bZ + ((window.cV / 3) | 0)) < 0) ? _Utils_update(
			window,
			{
				bZ: $author$project$Window$positive(line - ((window.cV / 2) | 0))
			}) : ((_Utils_cmp(line, window.bZ + (((2 * window.cV) / 3) | 0)) > 0) ? _Utils_update(
			window,
			{
				bZ: $author$project$Window$positive(line - ((window.cV / 2) | 0))
			}) : window);
	});
var $author$project$Common$sanitizeHover_ = F2(
	function (hover, model) {
		var offset = model.dj.bZ;
		var window = function () {
			switch (hover.$) {
				case 0:
					return model.dj;
				case 1:
					var line = hover.a;
					return A2($author$project$Window$shift, offset + line, model.dj);
				default:
					var line = hover.a.i;
					var column = hover.a.ac;
					return A2($author$project$Window$shift, offset + line, model.dj);
			}
		}();
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{
					cl: A3($author$project$Common$newHover, model.cl, model.p, model.dj.bZ),
					dj: window
				}),
			A3($author$project$Common$scrollCmd, window, model.dj, model.a6));
	});
var $author$project$Update$File$save = function (markdown) {
	return A3($elm$file$File$Download$string, 'foo.md', 'text/markdown', markdown);
};
var $author$project$Action$selectDown = function (model) {
	var extendSelection = F2(
		function (a, b_) {
			return A2(
				$author$project$EditorMsg$Selection,
				a,
				A2($author$project$Common$moveDown, b_, model.p));
		});
	var newSelection = function () {
		var _v0 = model.Z;
		if (_v0.$ === 3) {
			var a = _v0.a;
			var b = _v0.b;
			return A2(extendSelection, a, b);
		} else {
			return A2(extendSelection, model.d, model.d);
		}
	}();
	return _Utils_update(
		model,
		{Z: newSelection});
};
var $author$project$Action$selectLeft = function (model) {
	var extendSelection = F2(
		function (a_, b) {
			return A2(
				$author$project$EditorMsg$Selection,
				A2($author$project$Common$moveLeft, a_, model.p),
				b);
		});
	var newSelection = function () {
		var _v0 = model.Z;
		if (_v0.$ === 3) {
			var a = _v0.a;
			var b = _v0.b;
			return A2(extendSelection, a, b);
		} else {
			return A2(extendSelection, model.d, model.d);
		}
	}();
	return _Utils_update(
		model,
		{Z: newSelection});
};
var $author$project$Action$selectLine = function (model) {
	var line = model.d.i;
	var lineEnd_ = function (x) {
		return x - 1;
	}(
		A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				$elm$core$String$length,
				A2($elm$core$Array$get, line, model.p))));
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{
				d: {ac: lineEnd_ + 1, i: line},
				Z: A2(
					$author$project$EditorMsg$Selection,
					{ac: 0, i: line},
					{ac: lineEnd_, i: line})
			}),
		$elm$core$Platform$Cmd$none);
};
var $author$project$Action$selectRight = function (model) {
	var extendSelection = F2(
		function (a, b_) {
			return A2(
				$author$project$EditorMsg$Selection,
				a,
				A2($author$project$Common$moveRight, b_, model.p));
		});
	var newSelection = function () {
		var _v0 = model.Z;
		if (_v0.$ === 3) {
			var a = _v0.a;
			var b = _v0.b;
			return A2(extendSelection, a, b);
		} else {
			return A2(extendSelection, model.d, model.d);
		}
	}();
	return _Utils_update(
		model,
		{Z: newSelection});
};
var $author$project$Action$selectUp = function (model) {
	var extendSelection = F2(
		function (a_, b) {
			return A2(
				$author$project$EditorMsg$Selection,
				A2($author$project$Common$moveUp, a_, model.p),
				b);
		});
	var newSelection = function () {
		var _v0 = model.Z;
		if (_v0.$ === 3) {
			var a = _v0.a;
			var b = _v0.b;
			return A2(extendSelection, a, b);
		} else {
			return A2(extendSelection, model.d, model.d);
		}
	}();
	return _Utils_update(
		model,
		{Z: newSelection});
};
var $author$project$Update$Function$replaceLines = F2(
	function (model, strings) {
		var _v0 = model.Z;
		if (_v0.$ === 3) {
			var p1 = _v0.a;
			var p2 = _v0.b;
			return _Utils_update(
				model,
				{
					p: A4($author$project$ArrayUtil$replaceLines, p1, p2, strings, model.p)
				});
		} else {
			return model;
		}
	});
var $author$project$Update$Wrap$selection = function (model) {
	var _v0 = model.Z;
	if (_v0.$ === 3) {
		var p1 = _v0.a;
		var params = {
			ec: $author$project$Update$Wrap$maxWrapWidth(model),
			ek: $author$project$Update$Wrap$optimumWrapWidth(model),
			eS: $elm$core$String$length
		};
		var _v1 = A2($author$project$Action$deleteSelection, model.Z, model.p);
		var selectedText = _v1.b;
		var newLines = A2($author$project$Wrap$stringArray, params, selectedText);
		var n = $elm$core$Array$length(newLines);
		var c = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				$elm$core$String$length,
				A2($elm$core$Array$get, n - 1, newLines)));
		var newCursor = {ac: c, i: (p1.i + n) - 1};
		return A2(
			$author$project$Update$Function$replaceLines,
			_Utils_update(
				model,
				{d: newCursor}),
			newLines);
	} else {
		return model;
	}
};
var $author$project$EditorMsg$GotViewportForSync = F3(
	function (a, b, c) {
		return {$: 52, a: a, b: b, c: c};
	});
var $author$project$Update$Scroll$jumpToHeightForSync = F3(
	function (currentLine, selection, y) {
		return A2(
			$elm$core$Task$attempt,
			function (info) {
				return A3($author$project$EditorMsg$GotViewportForSync, currentLine, selection, info);
			},
			A2(
				$elm$core$Task$andThen,
				function (_v0) {
					return $elm$browser$Browser$Dom$getViewportOf('__editor__');
				},
				A3($elm$browser$Browser$Dom$setViewportOf, '__editor__', 0, y - 80)));
	});
var $author$project$ArrayUtil$EndParagraph = 1;
var $author$project$ArrayUtil$Backward = 1;
var $author$project$ArrayUtil$Forward = 0;
var $author$project$ArrayUtil$loop = F2(
	function (s, nextState) {
		loop:
		while (true) {
			var _v0 = nextState(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$nextState = nextState;
				s = $temp$s;
				nextState = $temp$nextState;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$ArrayUtil$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$ArrayUtil$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$ArrayUtil$next = F2(
	function (direction, st) {
		if (_Utils_eq(
			A2($elm$core$Array$get, st.ad, st.p),
			$elm$core$Maybe$Just(''))) {
			return $author$project$ArrayUtil$Done(st.ad);
		} else {
			if (!direction) {
				return (_Utils_cmp(st.ad, st.co) < 0) ? $author$project$ArrayUtil$Loop(
					_Utils_update(
						st,
						{ad: st.ad + 1})) : $author$project$ArrayUtil$Done(st.co);
			} else {
				return (!st.ad) ? $author$project$ArrayUtil$Done(0) : $author$project$ArrayUtil$Loop(
					_Utils_update(
						st,
						{ad: st.ad - 1}));
			}
		}
	});
var $author$project$ArrayUtil$paragraphBoundary = F3(
	function (boundary, position, lines) {
		var initialState = {
			ad: position.i,
			co: $elm$core$Array$length(lines) - 1,
			p: lines
		};
		if (!boundary) {
			return A2(
				$author$project$ArrayUtil$loop,
				initialState,
				$author$project$ArrayUtil$next(1));
		} else {
			return A2(
				$author$project$ArrayUtil$loop,
				initialState,
				$author$project$ArrayUtil$next(0));
		}
	});
var $author$project$ArrayUtil$paragraphEnd = F2(
	function (position, lines) {
		var start = A3($author$project$ArrayUtil$paragraphBoundary, 1, position, lines);
		return _Utils_eq(start, position.i) ? start : (start - 1);
	});
var $author$project$ArrayUtil$BeginParagraph = 0;
var $author$project$ArrayUtil$paragraphStart = F2(
	function (position, lines) {
		var start = A3($author$project$ArrayUtil$paragraphBoundary, 0, position, lines);
		return _Utils_eq(start, position.i) ? start : (start + 1);
	});
var $author$project$Update$Scroll$verticalOffsetInSourceText = 4;
var $author$project$Update$Scroll$sendLine = function (model) {
	var y = A2($elm$core$Basics$max, 0, (model.a6 * model.d.i) - $author$project$Update$Scroll$verticalOffsetInSourceText);
	var newCursor = {ac: 0, i: model.d.i};
	var paragraphEnd = A2($author$project$ArrayUtil$paragraphEnd, newCursor, model.p);
	var paragraphStart = A2($author$project$ArrayUtil$paragraphStart, newCursor, model.p);
	var lastLine = A2($elm$core$Array$get, paragraphEnd, model.p);
	var endColumn = A2($elm$core$Maybe$map, $elm$core$String$length, lastLine);
	var selection = function () {
		if (!endColumn.$) {
			var column = endColumn.a;
			return A2(
				$author$project$EditorMsg$Selection,
				A2($author$project$EditorMsg$Position, paragraphStart, 0),
				A2($author$project$EditorMsg$Position, paragraphEnd, column));
		} else {
			return $author$project$EditorMsg$NoSelection;
		}
	}();
	var currentLine = A2($elm$core$Array$get, newCursor.i, model.p);
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{d: newCursor, Z: selection}),
		A3($author$project$Update$Scroll$jumpToHeightForSync, currentLine, selection, y));
};
var $author$project$Window$shiftPosition = F2(
	function (k, pos) {
		return _Utils_update(
			pos,
			{i: pos.i + k});
	});
var $author$project$Update$Scroll$toString = F2(
	function (str, model) {
		var searchResults = A2($author$project$Search$hits, str, model.p);
		var _v0 = $elm$core$List$head(searchResults);
		if (_v0.$ === 1) {
			return _Utils_Tuple2(
				_Utils_update(
					model,
					{
						eF: $lovasoa$elm_rolling_list$RollingList$fromList(_List_Nil),
						eG: str,
						Z: $author$project$EditorMsg$NoSelection
					}),
				$elm$core$Platform$Cmd$none);
		} else {
			if (_v0.a.$ === 3) {
				var _v1 = _v0.a;
				var cursor = _v1.a;
				var end = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							d: cursor,
							eE: 0,
							eF: $lovasoa$elm_rolling_list$RollingList$fromList(searchResults),
							eG: str,
							Z: A2($author$project$EditorMsg$Selection, cursor, end)
						}),
					A2(
						$author$project$Update$Scroll$setEditorViewportForLine,
						model.a6,
						A2($elm$core$Basics$max, 0, cursor.i - 5)));
			} else {
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							eF: $lovasoa$elm_rolling_list$RollingList$fromList(_List_Nil),
							eG: str,
							Z: $author$project$EditorMsg$NoSelection
						}),
					$elm$core$Platform$Cmd$none);
			}
		}
	});
var $author$project$Update$Function$toggleEditMode = function (model) {
	var _v0 = model.dK;
	if (!_v0.$) {
		return _Utils_update(
			model,
			{
				dK: $author$project$EditorModel$VimEditor(0)
			});
	} else {
		return _Utils_update(
			model,
			{dK: $author$project$EditorModel$StandardEditor});
	}
};
var $author$project$EditorModel$HelpOn = 0;
var $author$project$Update$Function$toggleHelpState = function (model) {
	var _v0 = model.dW;
	if (_v0 === 1) {
		return _Utils_update(
			model,
			{dW: 0});
	} else {
		return _Utils_update(
			model,
			{dW: 1});
	}
};
var $author$project$Vim$Update$toggleShortCutExecution = function (model) {
	var _v0 = _Utils_Tuple2(model.dK, model.e1.bC);
	_v0$4:
	while (true) {
		if (!_v0.a.$) {
			if (_v0.b === 1) {
				var _v1 = _v0.a;
				var _v2 = _v0.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							dK: $author$project$EditorModel$VimEditor(0),
							e1: A2($author$project$Vim$Update$setState, 0, model.e1)
						}),
					$elm$core$Platform$Cmd$none);
			} else {
				break _v0$4;
			}
		} else {
			if (!_v0.a.a) {
				if (!_v0.b) {
					var _v3 = _v0.a.a;
					var _v4 = _v0.b;
					var newModel = $author$project$Vim$Execute$innerProcessCommand(model);
					return _Utils_Tuple2(
						_Utils_update(
							newModel,
							{dK: $author$project$EditorModel$StandardEditor}),
						$elm$core$Platform$Cmd$none);
				} else {
					break _v0$4;
				}
			} else {
				if (!_v0.b) {
					var _v5 = _v0.a.a;
					var _v6 = _v0.b;
					var newModel = $author$project$Vim$Execute$innerProcessCommand(model);
					return _Utils_Tuple2(
						_Utils_update(
							newModel,
							{
								dK: $author$project$EditorModel$VimEditor(0)
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					var _v7 = _v0.a.a;
					var _v8 = _v0.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								dK: $author$project$EditorModel$VimEditor(0)
							}),
						$elm$core$Platform$Cmd$none);
				}
			}
		}
	}
	return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
};
var $author$project$EditorModel$Light = 0;
var $author$project$Update$Function$toggleViewMode = function (model) {
	var _v0 = model.cB;
	if (!_v0) {
		return _Utils_update(
			model,
			{cB: 1});
	} else {
		return _Utils_update(
			model,
			{cB: 0});
	}
};
var $author$project$History$undo = F2(
	function (current, _v0) {
		var history = _v0;
		var _v1 = history.aV;
		if (_v1.b) {
			var previous = _v1.a;
			var past = _v1.b;
			return $elm$core$Maybe$Just(
				_Utils_Tuple2(
					{
						a2: A2($elm$core$List$cons, current, history.a2),
						aV: past
					},
					previous));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$EditorMsg$Unload = function (a) {
	return {$: 41, a: a};
};
var $author$project$Update$Function$unload = function (s) {
	return A2(
		$elm$core$Task$perform,
		$author$project$EditorMsg$Unload,
		$elm$core$Task$succeed(s));
};
var $jinjor$elm_contextmenu$ContextMenu$Close = {$: 3};
var $jinjor$elm_contextmenu$ContextMenu$None = {$: 2};
var $jinjor$elm_contextmenu$ContextMenu$Open = F3(
	function (a, b, c) {
		return {$: 2, a: a, b: b, c: c};
	});
var $jinjor$elm_contextmenu$ContextMenu$Container = {$: 0};
var $jinjor$elm_contextmenu$ContextMenu$setHoverState = F2(
	function (hover, openState) {
		return A2(
			$elm$core$Maybe$map,
			function (_v0) {
				var mouse = _v0.cp;
				var window = _v0.dj;
				var context = _v0.e;
				return {e: context, cl: hover, cp: mouse, dj: window};
			},
			openState);
	});
var $jinjor$elm_contextmenu$ContextMenu$enterContainer = function (openState) {
	return A2($jinjor$elm_contextmenu$ContextMenu$setHoverState, $jinjor$elm_contextmenu$ContextMenu$Container, openState);
};
var $jinjor$elm_contextmenu$ContextMenu$ItemIndex = function (a) {
	return {$: 1, a: a};
};
var $jinjor$elm_contextmenu$ContextMenu$enterItem = F2(
	function (index, openState) {
		return A2(
			$jinjor$elm_contextmenu$ContextMenu$setHoverState,
			$jinjor$elm_contextmenu$ContextMenu$ItemIndex(index),
			openState);
	});
var $jinjor$elm_contextmenu$ContextMenu$leaveContainer = function (openState) {
	return A2($jinjor$elm_contextmenu$ContextMenu$setHoverState, $jinjor$elm_contextmenu$ContextMenu$None, openState);
};
var $jinjor$elm_contextmenu$ContextMenu$leaveItem = function (openState) {
	return A2($jinjor$elm_contextmenu$ContextMenu$setHoverState, $jinjor$elm_contextmenu$ContextMenu$Container, openState);
};
var $jinjor$elm_contextmenu$ContextMenu$Size = F2(
	function (width, height) {
		return {cV: height, hC: width};
	});
var $elm$browser$Browser$Dom$getViewport = _Browser_withWindow(_Browser_getViewport);
var $jinjor$elm_contextmenu$ContextMenu$windowSize = A2(
	$elm$core$Task$map,
	function (v) {
		return A2($jinjor$elm_contextmenu$ContextMenu$Size, v.hB.hC, v.hB.cV);
	},
	$elm$browser$Browser$Dom$getViewport);
var $jinjor$elm_contextmenu$ContextMenu$update = F2(
	function (msg, _v0) {
		update:
		while (true) {
			var model = _v0;
			switch (msg.$) {
				case 0:
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				case 1:
					var context = msg.a;
					var mouse = msg.b;
					return _Utils_Tuple2(
						model,
						A2(
							$elm$core$Task$perform,
							A2($jinjor$elm_contextmenu$ContextMenu$Open, context, mouse),
							$jinjor$elm_contextmenu$ContextMenu$windowSize));
				case 2:
					var context = msg.a;
					var mouse = msg.b;
					var window = msg.c;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								x: $elm$core$Maybe$Just(
									{e: context, cl: $jinjor$elm_contextmenu$ContextMenu$None, cp: mouse, dj: window})
							}),
						$elm$core$Platform$Cmd$none);
				case 3:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{x: $elm$core$Maybe$Nothing}),
						$elm$core$Platform$Cmd$none);
				case 4:
					var index = msg.a;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								x: A2($jinjor$elm_contextmenu$ContextMenu$enterItem, index, model.x)
							}),
						$elm$core$Platform$Cmd$none);
				case 5:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								x: $jinjor$elm_contextmenu$ContextMenu$leaveItem(model.x)
							}),
						$elm$core$Platform$Cmd$none);
				case 6:
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								x: $jinjor$elm_contextmenu$ContextMenu$enterContainer(model.x)
							}),
						$elm$core$Platform$Cmd$none);
				default:
					if (model.cb) {
						var $temp$msg = $jinjor$elm_contextmenu$ContextMenu$Close,
							$temp$_v0 = _Utils_update(
							model,
							{
								x: $jinjor$elm_contextmenu$ContextMenu$leaveContainer(model.x)
							});
						msg = $temp$msg;
						_v0 = $temp$_v0;
						continue update;
					} else {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{
									x: $jinjor$elm_contextmenu$ContextMenu$leaveContainer(model.x)
								}),
							$elm$core$Platform$Cmd$none);
					}
			}
		}
	});
var $author$project$Vim$Update$update = F2(
	function (msg, model) {
		return model;
	});
var $author$project$Update$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 0:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 1:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					_Utils_update(
						model,
						{
							dK: $author$project$EditorModel$VimEditor(0)
						}));
			case 43:
				return A2($author$project$Action$goToLine, 30, model);
			case 40:
				var msg_ = msg.a;
				var _v1 = A4(
					$jinjor$elm_debounce$Debounce$update,
					$author$project$EditorModel$debounceConfig,
					$jinjor$elm_debounce$Debounce$takeLast($author$project$Update$Function$unload),
					msg_,
					model.dE);
				var debounce = _v1.a;
				var cmd = _v1.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{dE: debounce}),
					cmd);
			case 41:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{dE: model.dE}),
					$elm$core$Platform$Cmd$none);
			case 2:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					A2(
						$author$project$Common$recordHistory_,
						model,
						$author$project$Action$cursorUp(model)));
			case 3:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					A2(
						$author$project$Common$recordHistory_,
						model,
						$author$project$Action$cursorDown(model)));
			case 4:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					A2(
						$author$project$Common$recordHistory_,
						model,
						$author$project$Action$cursorLeft(model)));
			case 5:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					A2(
						$author$project$Common$recordHistory_,
						model,
						$author$project$Action$cursorRight(model)));
			case 13:
				return function (m) {
					return _Utils_Tuple2(
						m,
						$author$project$Update$Scroll$jumpToBottom(m));
				}(
					$author$project$Common$sanitizeHover(
						$author$project$Update$Function$newLine(model)));
			case 14:
				var _char = msg.a;
				var _v2 = A3($jinjor$elm_debounce$Debounce$push, $author$project$EditorModel$debounceConfig, _char, model.dE);
				var debounce = _v2.a;
				var debounceCmd = _v2.b;
				return A2(
					$author$project$Common$recordHistoryWithCmd,
					model,
					A2(
						$Janiczek$cmd_extra$Cmd$Extra$withCmd,
						debounceCmd,
						A3(
							$author$project$Update$Function$insertChar,
							model.dK,
							_char,
							_Utils_update(
								model,
								{dE: debounce}))));
			case 15:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					A2(
						$author$project$Common$recordHistory_,
						model,
						$author$project$Action$indent(model)));
			case 16:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					A2(
						$author$project$Common$recordHistory_,
						model,
						$author$project$Action$deIndent(model)));
			case 19:
				return $author$project$Common$recordHistory(
					$author$project$Update$Function$killLine(model));
			case 20:
				return $author$project$Common$recordHistory(
					$author$project$Update$Function$killLine(model));
			case 21:
				return $author$project$Common$recordHistory(
					$author$project$Update$Function$deleteLine(model));
			case 22:
				return A2(
					$author$project$Common$recordHistoryWithCmd,
					model,
					$author$project$Update$Function$deleteSelection(model));
			case 23:
				return $author$project$Update$Function$copySelection(model);
			case 24:
				return $author$project$Common$recordHistory(
					$author$project$Update$Function$pasteSelection(model));
			case 17:
				return A2(
					$author$project$Common$recordHistoryWithCmd,
					model,
					$author$project$Update$Function$deleteSelection(model));
			case 10:
				return $author$project$Action$firstLine(model);
			case 27:
				var hover = msg.a;
				return A2(
					$author$project$Common$sanitizeHover_,
					hover,
					_Utils_update(
						model,
						{cl: hover}));
			case 53:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 54:
				var r = msg.a;
				if (r.$ === 1) {
					var e = r.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var vp = r.a;
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 28:
				var cursor = function () {
					var _v4 = model.cl;
					switch (_v4.$) {
						case 0:
							return model.d;
						case 1:
							var line = _v4.a;
							return {
								ac: A2($author$project$Common$lastColumn, model.p, model.dj.bZ + line),
								i: line + model.dj.bZ
							};
						default:
							var localPosition = _v4.a;
							return A2($author$project$Window$shiftPosition, model.dj.bZ, localPosition);
					}
				}();
				var window = A2($author$project$Window$shift, cursor.i, model.dj);
				var deltaOffset = window.bZ - model.dj.bZ;
				var newViewportY = function (yvp) {
					return yvp - (deltaOffset * model.a6);
				};
				var updateScrollPosition = A2(
					$elm$core$Task$andThen,
					function (vp) {
						return A3(
							$elm$browser$Browser$Dom$setViewportOf,
							'__editor__',
							0,
							newViewportY(vp.hB.hI));
					},
					$elm$browser$Browser$Dom$getViewportOf('__editor__'));
				var scrollEditor = A2($elm$core$Task$attempt, $author$project$EditorMsg$ViewportMotion, updateScrollPosition);
				var scrollCmd = (!deltaOffset) ? $elm$core$Platform$Cmd$none : scrollEditor;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{d: cursor, dj: window}),
					scrollCmd);
			case 11:
				return $author$project$Action$lastLine(model);
			case 39:
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{d7: str}),
					$elm$core$Platform$Cmd$none);
			case 12:
				var _v5 = $elm$core$String$toInt(model.d7);
				if (_v5.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var n = _v5.a;
					return A2($author$project$Action$goToLine, n, model);
				}
			case 18:
				return A2(
					$author$project$Common$recordHistoryWithCmd,
					model,
					_Utils_Tuple2(
						$author$project$Common$sanitizeHover(
							$author$project$Common$removeCharAfter(model)),
						$elm$core$Platform$Cmd$none));
			case 29:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							Z: $author$project$EditorMsg$SelectingFrom(model.cl)
						}),
					$elm$core$Platform$Cmd$none);
			case 30:
				var endHover = model.cl;
				var newSelection = function () {
					var _v6 = model.Z;
					switch (_v6.$) {
						case 0:
							return $author$project$EditorMsg$NoSelection;
						case 1:
							var startHover = _v6.a;
							if (_Utils_eq(startHover, endHover)) {
								switch (startHover.$) {
									case 0:
										return $author$project$EditorMsg$NoSelection;
									case 1:
										return $author$project$EditorMsg$NoSelection;
									default:
										var position = startHover.a;
										return $author$project$EditorMsg$SelectedChar(position);
								}
							} else {
								return A2(
									$elm$core$Maybe$withDefault,
									$author$project$EditorMsg$NoSelection,
									A2(
										$elm$core$Maybe$map,
										function (_v8) {
											var from = _v8.a;
											var to = _v8.b;
											return A2($author$project$EditorMsg$Selection, from, to);
										},
										A3($author$project$Common$hoversToPositions, model.p, startHover, endHover)));
							}
						case 2:
							return $author$project$EditorMsg$NoSelection;
						default:
							return $author$project$EditorMsg$NoSelection;
					}
				}();
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{Z: newSelection}),
					$elm$core$Platform$Cmd$none);
			case 31:
				return $author$project$Action$selectLine(model);
			case 32:
				return $author$project$Common$recordHistory(
					$author$project$Action$selectUp(model));
			case 33:
				return $author$project$Common$recordHistory(
					$author$project$Action$selectDown(model));
			case 34:
				return $author$project$Common$recordHistory(
					$author$project$Action$selectLeft(model));
			case 35:
				return $author$project$Common$recordHistory(
					$author$project$Action$selectRight(model));
			case 6:
				return $author$project$Action$moveToLineStart(model);
			case 7:
				return $author$project$Action$moveToLineEnd(model);
			case 9:
				return $author$project$Action$pageDown(model);
			case 8:
				return $author$project$Action$pageUp(model);
			case 42:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							p: $elm$core$Array$fromList(
								_List_fromArray(
									['']))
						}),
					$elm$core$Platform$Cmd$none);
			case 37:
				var _v9 = A2(
					$author$project$History$undo,
					$author$project$Common$stateToSnapshot(model),
					model.bn);
				if (!_v9.$) {
					var _v10 = _v9.a;
					var history = _v10.a;
					var snapshot = _v10.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{d: snapshot.d, bn: history, p: snapshot.p, Z: snapshot.Z}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 38:
				var _v11 = A2(
					$author$project$History$redo,
					$author$project$Common$stateToSnapshot(model),
					model.bn);
				if (!_v11.$) {
					var _v12 = _v11.a;
					var history = _v12.a;
					var snapshot = _v12.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{d: snapshot.d, bn: history, p: snapshot.p, Z: snapshot.Z}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 44:
				var msg_ = msg.a;
				var _v13 = A2($jinjor$elm_contextmenu$ContextMenu$update, msg_, model.fE);
				var contextMenu = _v13.a;
				var cmd = _v13.b;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{fE: contextMenu}),
					A2($elm$core$Platform$Cmd$map, $author$project$EditorMsg$ContextMenuMsg, cmd));
			case 45:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 26:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					A2(
						$author$project$Common$recordHistory_,
						model,
						$author$project$Update$Wrap$selection(model)));
			case 25:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					A2(
						$author$project$Common$recordHistory_,
						model,
						$author$project$Update$Wrap$all(model)));
			case 46:
				var _v14 = model.$7;
				if (_v14 === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{$7: 0}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{$7: 1}),
						$elm$core$Platform$Cmd$none);
				}
			case 47:
				return _Utils_Tuple2(model, $author$project$Update$File$requestMarkdownFile);
			case 48:
				var file = msg.a;
				return _Utils_Tuple2(
					model,
					$author$project$Update$File$read(file));
			case 49:
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							p: $elm$core$Array$fromList(
								$elm$core$String$lines(str))
						}),
					$elm$core$Platform$Cmd$none);
			case 50:
				var markdown = A2(
					$elm$core$String$join,
					'\n',
					$elm$core$Array$toList(model.p));
				return _Utils_Tuple2(
					model,
					$author$project$Update$File$save(markdown));
			case 51:
				return $author$project$Update$Scroll$sendLine(model);
			case 52:
				var selection = msg.b;
				var result = msg.c;
				if (!result.$) {
					var vp = result.a;
					var y = vp.hB.hI;
					var lineNumber = $elm$core$Basics$round(y / model.a6);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{Z: selection, eX: lineNumber}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 55:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 56:
				var _v16 = model.Z;
				if (_v16.$ === 3) {
					var p1 = _v16.a;
					var p2 = _v16.b;
					var selectedString = A3($author$project$ArrayUtil$between, p1, p2, model.p);
					var newModel = _Utils_update(
						model,
						{
							gU: $elm$core$Maybe$Just(selectedString)
						});
					return _Utils_Tuple2(newModel, $elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 57:
				var key = msg.a;
				return A2(
					$Janiczek$cmd_extra$Cmd$Extra$withCmd,
					$elm$core$Platform$Cmd$none,
					A2($author$project$Search$do, key, model));
			case 58:
				var focusSearchBox = A2(
					$elm$core$Task$attempt,
					function (_v17) {
						return $author$project$EditorMsg$EditorNoOp;
					},
					$elm$browser$Browser$Dom$focus('editor-search-box'));
				return A2(
					$Janiczek$cmd_extra$Cmd$Extra$withCmd,
					focusSearchBox,
					_Utils_update(
						model,
						{eP: !model.eP}));
			case 59:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					_Utils_update(
						model,
						{ds: !model.ds}));
			case 60:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					_Utils_update(
						model,
						{ds: true}));
			case 61:
				return $author$project$Update$Scroll$rollSearchSelectionForward(model);
			case 62:
				return $author$project$Update$Scroll$rollSearchSelectionBackward(model);
			case 66:
				var str = msg.a;
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					_Utils_update(
						model,
						{eA: str}));
			case 63:
				var _v18 = model.Z;
				if (_v18.$ === 3) {
					var to = _v18.b;
					var newLines = A4($author$project$ArrayUtil$replace, model.d, to, model.eA, model.p);
					return $author$project$Update$Scroll$rollSearchSelectionForward(
						_Utils_update(
							model,
							{p: newLines}));
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 64:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(model);
			case 65:
				var str = msg.a;
				return A2($author$project$Update$Scroll$toString, str, model);
			case 67:
				var result = msg.a;
				if (!result.$) {
					var vp = result.a;
					var y = vp.hB.hI;
					var lineNumber = $elm$core$Basics$round(y / model.a6);
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{eX: lineNumber}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			case 68:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					$author$project$Update$Function$toggleViewMode(model));
			case 69:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					$author$project$Update$Function$toggleHelpState(model));
			case 70:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(
					$author$project$Update$Function$toggleEditMode(model));
			case 71:
				return $author$project$Vim$Update$toggleShortCutExecution(model);
			case 72:
				return $Janiczek$cmd_extra$Cmd$Extra$withNoCmd(model);
			case 36:
				var range = A2($author$project$Update$Group$groupRange, model.d, model.p);
				var line = model.d.i;
				if (!range.$) {
					var _v21 = range.a;
					var start = _v21.a;
					var end = _v21.b;
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{
								d: {ac: end, i: line},
								Z: A2(
									$author$project$EditorMsg$Selection,
									{ac: start, i: line},
									{ac: end, i: line})
							}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				}
			default:
				var vimMsg = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							e1: A2($author$project$Vim$Update$update, vimMsg, model.e1)
						}),
					$elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Editor$update = F2(
	function (msg, _v0) {
		var model = _v0;
		var _v1 = A2($author$project$Update$update, msg, model);
		var newModel = _v1.a;
		var cmd = _v1.b;
		return _Utils_Tuple2(newModel, cmd);
	});
var $author$project$Helper$Update$handleEditorMsg = F3(
	function (model, msg, editorMsg) {
		var _v0 = A2($author$project$Editor$update, editorMsg, model.dL);
		var newEditor = _v0.a;
		var cmd = _v0.b;
		switch (editorMsg.$) {
			case 14:
				var c = editorMsg.a;
				return A3(
					$author$project$Helper$Sync$sync,
					newEditor,
					cmd,
					_Utils_update(
						model,
						{dJ: true}));
			case 55:
				var clipBoardCmd = $author$project$Outside$sendInfo(
					$author$project$Outside$AskForClipBoard($elm$json$Json$Encode$null));
				return A3(
					$author$project$Helper$Sync$sync,
					newEditor,
					$elm$core$Platform$Cmd$batch(
						_List_fromArray(
							[cmd, clipBoardCmd])),
					model);
			case 56:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{dL: newEditor}),
					$author$project$Outside$sendInfo(
						$author$project$Outside$WriteToClipBoard(
							A2(
								$elm$core$Maybe$withDefault,
								'Nothing!!',
								$author$project$Editor$getSelectedString(newEditor)))));
			case 71:
				return A3($author$project$Helper$Sync$sync, newEditor, cmd, model);
			default:
				if (A2(
					$elm$core$List$member,
					msg,
					A2($elm$core$List$map, $author$project$Model$MyEditorMsg, $author$project$Editor$syncMessages))) {
					return A3($author$project$Helper$Sync$sync, newEditor, cmd, model);
				} else {
					if (editorMsg.$ === 42) {
						return _Utils_Tuple2(
							A3(
								$author$project$Helper$Update$load,
								$author$project$Model$fileExtension(model.fL),
								A2($elm$core$String$repeat, 40, '\n'),
								model),
							A2($elm$core$Platform$Cmd$map, $author$project$Model$MyEditorMsg, cmd));
					} else {
						return _Utils_Tuple2(
							_Utils_update(
								model,
								{dL: newEditor}),
							A2($elm$core$Platform$Cmd$map, $author$project$Model$MyEditorMsg, cmd));
					}
				}
		}
	});
var $elm$core$Bitwise$xor = _Bitwise_xor;
var $elm$random$Random$peel = function (_v0) {
	var state = _v0.a;
	var word = (state ^ (state >>> ((state >>> 28) + 4))) * 277803737;
	return ((word >>> 22) ^ word) >>> 0;
};
var $elm$random$Random$int = F2(
	function (a, b) {
		return function (seed0) {
			var _v0 = (_Utils_cmp(a, b) < 0) ? _Utils_Tuple2(a, b) : _Utils_Tuple2(b, a);
			var lo = _v0.a;
			var hi = _v0.b;
			var range = (hi - lo) + 1;
			if (!((range - 1) & range)) {
				return _Utils_Tuple2(
					(((range - 1) & $elm$random$Random$peel(seed0)) >>> 0) + lo,
					$elm$random$Random$next(seed0));
			} else {
				var threshhold = (((-range) >>> 0) % range) >>> 0;
				var accountForBias = function (seed) {
					accountForBias:
					while (true) {
						var x = $elm$random$Random$peel(seed);
						var seedN = $elm$random$Random$next(seed);
						if (_Utils_cmp(x, threshhold) < 0) {
							var $temp$seed = seedN;
							seed = $temp$seed;
							continue accountForBias;
						} else {
							return _Utils_Tuple2((x % range) + lo, seedN);
						}
					}
				};
				return accountForBias(seed0);
			}
		};
	});
var $author$project$Helper$Update$loadDocument = F3(
	function (fileName, content, model) {
		var newEditor = A2($author$project$Editor$initWithContent, content, model.cI);
		var documentType = $author$project$Model$findDocumentType(fileName);
		var data = A4(
			$author$project$Umuli$init,
			$author$project$Model$umuliLang(documentType),
			model.cL,
			content,
			$elm$core$Maybe$Nothing);
		return _Utils_update(
			model,
			{cL: model.cL + 1, dC: data, fL: documentType, dL: newEditor, dQ: fileName});
	});
var $author$project$Helper$Update$load_ = F3(
	function (fileName, content, model) {
		return _Utils_Tuple2(
			A3($author$project$Helper$Update$load, fileName, content, model),
			$elm$core$Platform$Cmd$none);
	});
var $elm$core$Basics$modBy = _Basics_modBy;
var $elm$file$File$name = _File_name;
var $author$project$Editor$placeInClipboard = F2(
	function (str, _v0) {
		var model = _v0;
		return _Utils_update(
			model,
			{dw: str});
	});
var $author$project$Editor$arrayFromString = function (str) {
	return $elm$core$Array$fromList(
		$elm$core$String$lines(str));
};
var $author$project$Editor$replaceSelection2 = F2(
	function (str, _v0) {
		var data = _v0;
		var _v1 = data.Z;
		switch (_v1.$) {
			case 0:
				return data;
			case 1:
				return data;
			case 2:
				var pos = _v1.a;
				return _Utils_update(
					data,
					{
						p: A4(
							$author$project$ArrayUtil$replaceLines,
							pos,
							pos,
							$author$project$Editor$arrayFromString(str),
							data.p)
					});
			default:
				var sel1 = _v1.a;
				var sel2 = _v1.b;
				return _Utils_update(
					data,
					{
						p: A4(
							$author$project$ArrayUtil$replaceLines,
							sel1,
							sel2,
							$author$project$Editor$arrayFromString(str),
							data.p)
					});
		}
	});
var $author$project$Main$pasteToEditorAndClipboard = F2(
	function (model, str) {
		var editor2 = function (editor) {
			return A2($author$project$Editor$placeInClipboard, str, editor);
		}(
			A2($author$project$Editor$replaceSelection2, str, model.dL));
		var newData = A4(
			$author$project$Umuli$init,
			$author$project$Model$umuliLang(model.fL),
			0,
			$author$project$Editor$getContent(editor2),
			$elm$core$Maybe$Nothing);
		var counter = model.cL + 1;
		return A2(
			$Janiczek$cmd_extra$Cmd$Extra$withCmd,
			$elm$core$Platform$Cmd$none,
			_Utils_update(
				model,
				{cL: counter + 1, dC: newData, dJ: true, dL: editor2}));
	});
var $author$project$Model$SavedToServer = function (a) {
	return {$: 25, a: a};
};
var $author$project$Helper$File$encodeDocument = F2(
	function (fileName, content) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'fileName',
					$elm$json$Json$Encode$string(fileName)),
					_Utils_Tuple2(
					'content',
					$elm$json$Json$Encode$string(content))
				]));
	});
var $elm$http$Http$expectBytesResponse = F2(
	function (toMsg, toResult) {
		return A3(
			_Http_expect,
			'arraybuffer',
			_Http_toDataView,
			A2($elm$core$Basics$composeR, toResult, toMsg));
	});
var $elm$http$Http$expectWhatever = function (toMsg) {
	return A2(
		$elm$http$Http$expectBytesResponse,
		toMsg,
		$elm$http$Http$resolve(
			function (_v0) {
				return $elm$core$Result$Ok(0);
			}));
};
var $elm$http$Http$jsonBody = function (value) {
	return A2(
		_Http_pair,
		'application/json',
		A2($elm$json$Json$Encode$encode, 0, value));
};
var $elm$http$Http$post = function (r) {
	return $elm$http$Http$request(
		{fq: r.fq, dP: r.dP, fY: _List_Nil, gn: 'POST', hs: $elm$core$Maybe$Nothing, hv: $elm$core$Maybe$Nothing, e_: r.e_});
};
var $author$project$Helper$File$postToServer = F2(
	function (fileName, content) {
		return $elm$http$Http$post(
			{
				fq: $elm$http$Http$jsonBody(
					A2($author$project$Helper$File$encodeDocument, fileName, content)),
				dP: $elm$http$Http$expectWhatever($author$project$Model$SavedToServer),
				e_: $author$project$Config$fileServer + '/save'
			});
	});
var $author$project$Model$PrintProcessing = 1;
var $author$project$Model$GotPdfLink = function (a) {
	return {$: 19, a: a};
};
var $elm$json$Json$Encode$list = F2(
	function (func, entries) {
		return _Json_wrap(
			A3(
				$elm$core$List$foldl,
				_Json_addEntry(func),
				_Json_emptyArray(0),
				entries));
	});
var $author$project$Codec$encodeForPDF = F3(
	function (id, content, urlList) {
		return $elm$json$Json$Encode$object(
			_List_fromArray(
				[
					_Utils_Tuple2(
					'id',
					$elm$json$Json$Encode$string(id)),
					_Utils_Tuple2(
					'content',
					$elm$json$Json$Encode$string(content)),
					_Utils_Tuple2(
					'urlList',
					A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, urlList))
				]));
	});
var $author$project$Markdown$Option$ExtendedMath = 2;
var $zwilias$elm_rosetree$Tree$children = function (_v0) {
	var c = _v0.b;
	return c;
};
var $author$project$Markdown$Paragraphs$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (v) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					p),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $author$project$Markdown$Paragraphs$many = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$author$project$Markdown$Paragraphs$manyHelp(p));
};
var $author$project$Markdown$Paragraphs$ChompUntilTwoNewLines = 0;
var $elm$parser$Parser$Advanced$findSubString = _Parser_findSubString;
var $elm$parser$Parser$Advanced$chompUntil = function (_v0) {
	var str = _v0.a;
	var expecting = _v0.b;
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$findSubString, str, s.bZ, s.gM, s.fC, s.g2);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return _Utils_eq(newOffset, -1) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A4($elm$parser$Parser$Advanced$fromInfo, newRow, newCol, expecting, s.e)) : A3(
			$elm$parser$Parser$Advanced$Good,
			_Utils_cmp(s.bZ, newOffset) < 0,
			0,
			{fC: newCol, e: s.e, g: s.g, bZ: newOffset, gM: newRow, g2: s.g2});
	};
};
var $author$project$Markdown$Paragraphs$paragraph = A2(
	$elm$parser$Parser$Advanced$keeper,
	$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$getChompedString(
			$elm$parser$Parser$Advanced$chompUntil(
				A2($elm$parser$Parser$Advanced$Token, '\n\n', 0))),
		$elm$parser$Parser$Advanced$spaces));
var $author$project$Markdown$Paragraphs$get = function (str) {
	var _v0 = A2(
		$elm$parser$Parser$Advanced$run,
		$author$project$Markdown$Paragraphs$many($author$project$Markdown$Paragraphs$paragraph),
		str);
	if (!_v0.$) {
		var list = _v0.a;
		return list;
	} else {
		return _List_Nil;
	}
};
var $author$project$Markdown$LaTeXPostProcess$InRunningText = 1;
var $author$project$Markdown$LaTeXPostProcess$loop = F2(
	function (s, nextState) {
		loop:
		while (true) {
			var _v0 = nextState(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$nextState = nextState;
				s = $temp$s;
				nextState = $temp$nextState;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Markdown$LaTeXPostProcess$BeginItemList = {$: 1};
var $author$project$Markdown$LaTeXPostProcess$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Markdown$LaTeXPostProcess$EndItemList = {$: 2};
var $author$project$Markdown$LaTeXPostProcess$InItemList = 0;
var $author$project$Markdown$LaTeXPostProcess$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$LaTeXPostProcess$S = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$LaTeXPostProcess$ItemParagraph = 1;
var $author$project$Markdown$LaTeXPostProcess$NormalParagraph = 0;
var $elm$parser$Parser$ignorer = $elm$parser$Parser$Advanced$ignorer;
var $elm$parser$Parser$spaces = $elm$parser$Parser$Advanced$spaces;
var $elm$parser$Parser$succeed = $elm$parser$Parser$Advanced$succeed;
var $elm$parser$Parser$ExpectingSymbol = function (a) {
	return {$: 8, a: a};
};
var $elm$parser$Parser$symbol = function (str) {
	return $elm$parser$Parser$Advanced$symbol(
		A2(
			$elm$parser$Parser$Advanced$Token,
			str,
			$elm$parser$Parser$ExpectingSymbol(str)));
};
var $author$project$Markdown$LaTeXPostProcess$getItem = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$spaces),
	$elm$parser$Parser$symbol('\\item '));
var $elm$parser$Parser$DeadEnd = F3(
	function (row, col, problem) {
		return {fC: col, es: problem, gM: row};
	});
var $elm$parser$Parser$problemToDeadEnd = function (p) {
	return A3($elm$parser$Parser$DeadEnd, p.gM, p.fC, p.es);
};
var $elm$parser$Parser$run = F2(
	function (parser, source) {
		var _v0 = A2($elm$parser$Parser$Advanced$run, parser, source);
		if (!_v0.$) {
			var a = _v0.a;
			return $elm$core$Result$Ok(a);
		} else {
			var problems = _v0.a;
			return $elm$core$Result$Err(
				A2($elm$core$List$map, $elm$parser$Parser$problemToDeadEnd, problems));
		}
	});
var $author$project$Markdown$LaTeXPostProcess$paragraphType = function (str) {
	var _v0 = A2($elm$parser$Parser$run, $author$project$Markdown$LaTeXPostProcess$getItem, str);
	if (!_v0.$) {
		return 1;
	} else {
		return 0;
	}
};
var $author$project$Markdown$LaTeXPostProcess$nextMachineState = function (ms) {
	var _v0 = $elm$core$List$head(ms.cq);
	if (_v0.$ === 1) {
		var _v1 = ms.bb;
		if (_v1 === 1) {
			return $author$project$Markdown$LaTeXPostProcess$Done(ms.P);
		} else {
			return $author$project$Markdown$LaTeXPostProcess$Done(
				A2($elm$core$List$cons, $author$project$Markdown$LaTeXPostProcess$EndItemList, ms.P));
		}
	} else {
		var str = _v0.a;
		var _v2 = _Utils_Tuple2(
			$author$project$Markdown$LaTeXPostProcess$paragraphType(str),
			ms.bb);
		if (!_v2.a) {
			if (_v2.b === 1) {
				var _v3 = _v2.a;
				var _v4 = _v2.b;
				return $author$project$Markdown$LaTeXPostProcess$Loop(
					_Utils_update(
						ms,
						{
							P: A2(
								$elm$core$List$cons,
								$author$project$Markdown$LaTeXPostProcess$S(str),
								ms.P),
							cq: A2($elm$core$List$drop, 1, ms.cq)
						}));
			} else {
				var _v7 = _v2.a;
				var _v8 = _v2.b;
				return $author$project$Markdown$LaTeXPostProcess$Loop(
					_Utils_update(
						ms,
						{
							P: A2(
								$elm$core$List$cons,
								$author$project$Markdown$LaTeXPostProcess$S(str),
								A2($elm$core$List$cons, $author$project$Markdown$LaTeXPostProcess$EndItemList, ms.P)),
							cq: A2($elm$core$List$drop, 1, ms.cq),
							bb: 1
						}));
			}
		} else {
			if (_v2.b === 1) {
				var _v5 = _v2.a;
				var _v6 = _v2.b;
				return $author$project$Markdown$LaTeXPostProcess$Loop(
					_Utils_update(
						ms,
						{
							P: A2(
								$elm$core$List$cons,
								$author$project$Markdown$LaTeXPostProcess$S(str),
								A2($elm$core$List$cons, $author$project$Markdown$LaTeXPostProcess$BeginItemList, ms.P)),
							cq: A2($elm$core$List$drop, 1, ms.cq),
							bb: 0
						}));
			} else {
				var _v9 = _v2.a;
				var _v10 = _v2.b;
				return $author$project$Markdown$LaTeXPostProcess$Loop(
					_Utils_update(
						ms,
						{
							P: A2(
								$elm$core$List$cons,
								$author$project$Markdown$LaTeXPostProcess$S(str),
								ms.P),
							cq: A2($elm$core$List$drop, 1, ms.cq),
							bb: 0
						}));
			}
		}
	}
};
var $author$project$Markdown$LaTeXPostProcess$machine = function (stringList) {
	var initialState = {P: _List_Nil, cq: stringList, bb: 1};
	return $elm$core$List$reverse(
		A2($author$project$Markdown$LaTeXPostProcess$loop, initialState, $author$project$Markdown$LaTeXPostProcess$nextMachineState));
};
var $author$project$Markdown$LaTeXPostProcess$render = function (item) {
	switch (item.$) {
		case 0:
			var str = item.a;
			return str;
		case 1:
			return '\\begin{itemize}';
		default:
			return '\\end{itemize}';
	}
};
var $author$project$Markdown$LaTeXPostProcess$fixItemLists = function (str) {
	return A2(
		$elm$core$String$join,
		'\n\n',
		A2(
			$elm$core$List$map,
			$author$project$Markdown$LaTeXPostProcess$render,
			$author$project$Markdown$LaTeXPostProcess$machine(
				$author$project$Markdown$Paragraphs$get(str + '\n\n'))));
};
var $author$project$Markdown$Parse$MDBlock = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$Markdown$LaTeX$displayMathText = function (str) {
	var str2 = $elm$core$String$trim(str);
	return '$$\n' + (str2 + '\n$$');
};
var $author$project$Markdown$LaTeX$env = F2(
	function (name, body) {
		return '\\begin{' + (name + ('}\n' + (body + ('\n\\end{' + (name + '}')))));
	});
var $zwilias$elm_rosetree$Tree$label = function (_v0) {
	var v = _v0.a;
	return v;
};
var $author$project$Markdown$Parse$projectedStringOfBlockContent = function (blockContent) {
	if (!blockContent.$) {
		return '';
	} else {
		var str = blockContent.a;
		return str;
	}
};
var $author$project$Markdown$LaTeX$renderAsVerbatim = F5(
	function (info, selectedId, id, level, blockContent) {
		if ((!blockContent.$) && (!blockContent.a.$)) {
			var str = blockContent.a.a;
			return A2($author$project$Markdown$LaTeX$env, 'verbatim', str);
		} else {
			return '';
		}
	});
var $author$project$Markdown$LaTeX$inlineMathText = F2(
	function (id, str) {
		return '$ ' + ($elm$core$String$trim(str) + ' $ ');
	});
var $author$project$Markdown$LaTeX$isPunctuation = function (str) {
	return A2(
		$elm$core$List$member,
		str,
		_List_fromArray(
			['.', ',', ';', ':', '?', '!']));
};
var $author$project$Markdown$LaTeX$macro = F2(
	function (name, arg) {
		return '\\' + (name + ('{' + (arg + '}')));
	});
var $author$project$Markdown$LaTeX$macro2 = F3(
	function (name, arg1, arg2) {
		return '\\' + (name + ('{' + (arg1 + ('}' + ('{' + (arg2 + '}'))))));
	});
var $author$project$Markdown$LaTeX$macro3 = F4(
	function (name, arg1, arg2, arg3) {
		return '\\' + (name + ('{' + (arg1 + ('}' + ('{' + (arg2 + ('}' + ('{' + (arg3 + '}')))))))));
	});
var $author$project$Markdown$LaTeX$renderStanza = F2(
	function (id, arg) {
		return A2($author$project$Markdown$LaTeX$env, 'poetry', arg);
	});
var $author$project$Markdown$LaTeX$joinLine = F4(
	function (selectedId, id, level, items) {
		var folder = F2(
			function (item, _v4) {
				var accString = _v4.a;
				var accElement = _v4.b;
				if (!item.$) {
					var str = item.a;
					var _v3 = $author$project$Markdown$LaTeX$isPunctuation(
						A2($elm$core$String$left, 1, str));
					if (_v3) {
						return _Utils_Tuple2(
							A2($elm$core$List$cons, str, accString),
							accElement);
					} else {
						return _Utils_Tuple2(
							A2($elm$core$List$cons, ' ' + str, accString),
							accElement);
					}
				} else {
					if (!_Utils_eq(accString, _List_Nil)) {
						var content = A2($elm$core$String$join, '', accString);
						var span = content;
						return _Utils_Tuple2(
							_List_Nil,
							A2(
								$elm$core$List$cons,
								A4($author$project$Markdown$LaTeX$renderToLaTeX, selectedId, id, level, item),
								A2($elm$core$List$cons, span, accElement)));
					} else {
						return _Utils_Tuple2(
							_List_Nil,
							A2(
								$elm$core$List$cons,
								A4($author$project$Markdown$LaTeX$renderToLaTeX, selectedId, id, level, item),
								accElement));
					}
				}
			});
		var flush = function (_v1) {
			var accString = _v1.a;
			var accElement = _v1.b;
			if (!_Utils_eq(accString, _List_Nil)) {
				var content = A2($elm$core$String$join, '', accString);
				var span = content;
				return A2($elm$core$List$cons, span, accElement);
			} else {
				return accElement;
			}
		};
		return $elm$core$List$reverse(
			flush(
				A3(
					$elm$core$List$foldl,
					folder,
					_Utils_Tuple2(_List_Nil, _List_Nil),
					items)));
	});
var $author$project$Markdown$LaTeX$renderToLaTeX = F4(
	function (selectedId, id, level, mmInline) {
		switch (mmInline.$) {
			case 0:
				var str = mmInline.a;
				return str;
			case 1:
				var str = mmInline.a;
				return A2($author$project$Markdown$LaTeX$macro, 'italic', str);
			case 2:
				var str = mmInline.a;
				return A2($author$project$Markdown$LaTeX$macro, 'strong', str);
			case 3:
				var str = mmInline.a;
				return A2($author$project$Markdown$LaTeX$macro, 'code', str);
			case 4:
				var str = mmInline.a;
				return A2($author$project$Markdown$LaTeX$inlineMathText, id, str);
			case 5:
				var str = mmInline.a;
				return A2($author$project$Markdown$LaTeX$macro, 'strike', str);
			case 7:
				var str = mmInline.a;
				return 'htmlEntity:' + str;
			case 8:
				var list = mmInline.a;
				return 'htmlEntity: not implemented';
			case 6:
				var str = mmInline.a;
				return '[' + (str + ']');
			case 10:
				var url = mmInline.a;
				var label = mmInline.b;
				return A3($author$project$Markdown$LaTeX$macro2, 'href', url, label);
			case 9:
				var op = mmInline.a;
				var arg = mmInline.b;
				return A2($author$project$Markdown$LaTeX$macro, op, arg);
			case 11:
				var label_ = mmInline.a;
				var url = mmInline.b;
				return A4($author$project$Markdown$LaTeX$macro3, 'image', url, label_, '');
			case 12:
				var arg = mmInline.a;
				var joined = A2(
					$elm$core$String$join,
					'\n',
					A4($author$project$Markdown$LaTeX$joinLine, selectedId, id, level, arg));
				return joined;
			case 13:
				var arg = mmInline.a;
				var mapper = function (m) {
					return A4($author$project$Markdown$LaTeX$renderToLaTeX, selectedId, id, level, m);
				};
				return A2(
					$elm$core$String$join,
					'\n',
					A2($elm$core$List$map, mapper, arg));
			case 14:
				var arg = mmInline.a;
				return A2($author$project$Markdown$LaTeX$renderStanza, id, arg);
			default:
				var arg = mmInline.a;
				return 'Error';
		}
	});
var $author$project$Markdown$LaTeX$renderBlockContent = F4(
	function (selectedId, id, level, blockContent) {
		if (!blockContent.$) {
			var mmInline = blockContent.a;
			return A4($author$project$Markdown$LaTeX$renderToLaTeX, selectedId, id, level, mmInline);
		} else {
			var str = blockContent.a;
			return str;
		}
	});
var $author$project$Markdown$LaTeX$nameFromBlockContent = function (blockContent) {
	if ((((((((!blockContent.$) && (blockContent.a.$ === 13)) && blockContent.a.a.b) && (blockContent.a.a.a.$ === 12)) && blockContent.a.a.a.a.b) && (!blockContent.a.a.a.a.a.$)) && (!blockContent.a.a.a.a.b.b)) && (!blockContent.a.a.b.b)) {
		var _v1 = blockContent.a.a;
		var _v2 = _v1.a.a;
		var str = _v2.a.a;
		return $elm$core$String$trim(str);
	} else {
		return '';
	}
};
var $author$project$Markdown$LaTeX$renderHeading = F5(
	function (selectedId, id, k, level, blockContent) {
		var name = $author$project$Markdown$LaTeX$nameFromBlockContent(blockContent);
		switch (k) {
			case 1:
				return A2(
					$author$project$Markdown$LaTeX$macro,
					'section',
					A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent));
			case 2:
				return A2(
					$author$project$Markdown$LaTeX$macro,
					'subsection',
					A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent));
			case 3:
				return A2(
					$author$project$Markdown$LaTeX$macro,
					'subsubsection',
					A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent));
			case 4:
				return A2(
					$author$project$Markdown$LaTeX$macro,
					'subsubsubsection',
					A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent));
			default:
				return A2(
					$author$project$Markdown$LaTeX$macro,
					'subheading',
					A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent));
		}
	});
var $author$project$Markdown$LaTeX$renderOListItem = F5(
	function (selectedId, id, index, level, blockContent) {
		return '\\item ' + A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent);
	});
var $author$project$Markdown$LaTeX$renderPoetry = F4(
	function (selectedId, id, level, blockContent) {
		return A2(
			$author$project$Markdown$LaTeX$env,
			'poetry',
			A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent));
	});
var $author$project$Markdown$LaTeX$renderQuotation = F4(
	function (selectedId, id, level, blockContent) {
		return A2(
			$author$project$Markdown$LaTeX$env,
			'quotation',
			A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent));
	});
var $author$project$Markdown$LaTeX$renderUListItem = F4(
	function (selectedId, id, level, blockContent) {
		return '\\item ' + A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent);
	});
var $author$project$BlockType$stringOfLanguage = function (lang_) {
	switch (lang_) {
		case 0:
			return 'elm';
		case 1:
			return 'css';
		case 2:
			return 'javascript';
		case 3:
			return 'json';
		case 4:
			return 'python';
		case 5:
			return 'sql';
		case 6:
			return 'xml';
		case 7:
			return 'nolang';
		default:
			return 'verse';
	}
};
var $author$project$Markdown$LaTeX$renderBlock = F3(
	function (selectedId, id, block) {
		if (!block.a.$) {
			switch (block.a.a.$) {
				case 2:
					var _v9 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					if (blockContent.$ === 1) {
						var str = blockContent.a;
						return $author$project$Markdown$LaTeX$displayMathText(str);
					} else {
						return $author$project$Markdown$LaTeX$displayMathText('');
					}
				case 1:
					var _v11 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					if (blockContent.$ === 1) {
						var str = blockContent.a;
						return A2($author$project$Markdown$LaTeX$env, 'verbatim', str);
					} else {
						return $author$project$Markdown$LaTeX$displayMathText('');
					}
				default:
					var lang = block.a.a.a;
					var level = block.b;
					var blockContent = block.c;
					if (blockContent.$ === 1) {
						var str = blockContent.a;
						var langStr = $author$project$BlockType$stringOfLanguage(lang) + '\n';
						var str_ = A3($elm$core$String$replace, langStr, '', str);
						return A2($author$project$Markdown$LaTeX$env, 'verbatim', str_);
					} else {
						return $author$project$Markdown$LaTeX$displayMathText('');
					}
			}
		} else {
			switch (block.a.a.$) {
				case 0:
					var _v1 = block.a.a;
					return 'ROOT';
				case 8:
					var _v2 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent);
				case 10:
					var _v3 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent);
				case 3:
					var k = block.a.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A5($author$project$Markdown$LaTeX$renderHeading, selectedId, id, k, level, blockContent);
				case 5:
					var _v4 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$LaTeX$renderQuotation, selectedId, id, level, blockContent);
				case 7:
					var _v5 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$LaTeX$renderPoetry, selectedId, id, level, blockContent);
				case 1:
					var _v6 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$LaTeX$renderUListItem, selectedId, id, level, blockContent);
				case 2:
					var index = block.a.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A5($author$project$Markdown$LaTeX$renderOListItem, selectedId, id, index, level, blockContent);
				case 4:
					var _v7 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return '\\hrule';
				case 9:
					var _v8 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent);
				case 11:
					var _v14 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return ' ' + A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent);
				case 12:
					var _v15 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent);
				case 13:
					var _v16 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$LaTeX$renderBlockContent, selectedId, id, level, blockContent);
				default:
					var info = block.a.a.a;
					var level = block.b;
					var blockContent = block.c;
					var _v17 = $elm$core$String$trim(info);
					switch (_v17) {
						case 'svg':
							return 'SVG: not implemented';
						case 'invisible':
							return '';
						default:
							return A5($author$project$Markdown$LaTeX$renderAsVerbatim, info, selectedId, id, level, blockContent);
					}
			}
		}
	});
var $author$project$Markdown$LaTeX$mmBlockTreeToLaTeX = F2(
	function (selectedId, tree) {
		if (_Utils_eq(
			$zwilias$elm_rosetree$Tree$children(tree),
			_List_Nil)) {
			var _v0 = $zwilias$elm_rosetree$Tree$label(tree);
			var id = _v0.a;
			var bt = _v0.b;
			var lev = _v0.c;
			var content = _v0.d;
			if ((!bt.$) && (bt.a.$ === 2)) {
				var _v2 = bt.a;
				return A3(
					$author$project$Markdown$LaTeX$renderBlock,
					selectedId,
					id,
					A3($author$project$Markdown$Parse$MDBlock, bt, lev, content));
			} else {
				return A3(
					$author$project$Markdown$LaTeX$renderBlock,
					selectedId,
					id,
					A3($author$project$Markdown$Parse$MDBlock, bt, lev, content));
			}
		} else {
			var _v3 = $zwilias$elm_rosetree$Tree$label(tree);
			if (_v3.b.$ === 1) {
				switch (_v3.b.a.$) {
					case 12:
						var id = _v3.a;
						var _v4 = _v3.b.a;
						return A2(
							$elm$core$String$join,
							' & ',
							A2(
								$elm$core$List$map,
								$author$project$Markdown$LaTeX$mmBlockTreeToLaTeX(selectedId),
								$zwilias$elm_rosetree$Tree$children(tree)));
					case 13:
						var id = _v3.a;
						var _v5 = _v3.b.a;
						return A2(
							$author$project$Markdown$LaTeX$env,
							'tabular',
							$elm$core$String$trim(
								A2(
									$elm$core$String$join,
									' \\\\\n',
									A2(
										$elm$core$List$map,
										$author$project$Markdown$LaTeX$mmBlockTreeToLaTeX(selectedId),
										$zwilias$elm_rosetree$Tree$children(tree)))));
					case 8:
						var id = _v3.a;
						var _v6 = _v3.b.a;
						return A2(
							$elm$core$String$join,
							'\n',
							A2(
								$elm$core$List$map,
								$author$project$Markdown$LaTeX$mmBlockTreeToLaTeX(selectedId),
								$zwilias$elm_rosetree$Tree$children(tree)));
					default:
						var id = _v3.a;
						return A2(
							$elm$core$String$join,
							'\n',
							A2(
								$elm$core$List$map,
								$author$project$Markdown$LaTeX$mmBlockTreeToLaTeX(selectedId),
								$zwilias$elm_rosetree$Tree$children(tree)));
				}
			} else {
				switch (_v3.b.a.$) {
					case 2:
						var id = _v3.a;
						var _v7 = _v3.b.a;
						var level = _v3.c;
						var content = _v3.d;
						return $author$project$Markdown$LaTeX$displayMathText(
							$author$project$Markdown$Parse$projectedStringOfBlockContent(content));
					case 1:
						var id = _v3.a;
						var _v8 = _v3.b.a;
						return 'OUF: Verbatim!';
					default:
						var id = _v3.a;
						var lang = _v3.b.a.a;
						return 'OUF: Code!';
				}
			}
		}
	});
var $author$project$Markdown$LaTeX$fromAST = F2(
	function (selectedId, blockTreeWithId) {
		return $author$project$Markdown$LaTeXPostProcess$fixItemLists(
			A2(
				$elm$core$String$join,
				'\n\n',
				A2(
					$elm$core$List$map,
					$author$project$Markdown$LaTeX$mmBlockTreeToLaTeX(selectedId),
					$zwilias$elm_rosetree$Tree$children(blockTreeWithId))));
	});
var $zwilias$elm_rosetree$Tree$Tree = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $zwilias$elm_rosetree$Tree$mapAccumulateHelp = F4(
	function (f, state, acc, stack) {
		mapAccumulateHelp:
		while (true) {
			var _v0 = acc.f;
			if (!_v0.b) {
				var node = A2(
					$zwilias$elm_rosetree$Tree$Tree,
					acc.gi,
					$elm$core$List$reverse(acc.a));
				if (!stack.b) {
					return _Utils_Tuple2(state, node);
				} else {
					var top = stack.a;
					var rest = stack.b;
					var $temp$f = f,
						$temp$state = state,
						$temp$acc = _Utils_update(
						top,
						{
							a: A2($elm$core$List$cons, node, top.a)
						}),
						$temp$stack = rest;
					f = $temp$f;
					state = $temp$state;
					acc = $temp$acc;
					stack = $temp$stack;
					continue mapAccumulateHelp;
				}
			} else {
				if (!_v0.a.b.b) {
					var _v2 = _v0.a;
					var d = _v2.a;
					var rest = _v0.b;
					var _v3 = A2(f, state, d);
					var state_ = _v3.a;
					var label_ = _v3.b;
					var $temp$f = f,
						$temp$state = state_,
						$temp$acc = _Utils_update(
						acc,
						{
							a: A2(
								$elm$core$List$cons,
								A2($zwilias$elm_rosetree$Tree$Tree, label_, _List_Nil),
								acc.a),
							f: rest
						}),
						$temp$stack = stack;
					f = $temp$f;
					state = $temp$state;
					acc = $temp$acc;
					stack = $temp$stack;
					continue mapAccumulateHelp;
				} else {
					var _v4 = _v0.a;
					var d = _v4.a;
					var cs = _v4.b;
					var rest = _v0.b;
					var _v5 = A2(f, state, d);
					var state_ = _v5.a;
					var label_ = _v5.b;
					var $temp$f = f,
						$temp$state = state_,
						$temp$acc = {a: _List_Nil, gi: label_, f: cs},
						$temp$stack = A2(
						$elm$core$List$cons,
						_Utils_update(
							acc,
							{f: rest}),
						stack);
					f = $temp$f;
					state = $temp$state;
					acc = $temp$acc;
					stack = $temp$stack;
					continue mapAccumulateHelp;
				}
			}
		}
	});
var $zwilias$elm_rosetree$Tree$mapAccumulate = F3(
	function (f, s, _v0) {
		var d = _v0.a;
		var cs = _v0.b;
		var _v1 = A2(f, s, d);
		var s_ = _v1.a;
		var d_ = _v1.b;
		return A4(
			$zwilias$elm_rosetree$Tree$mapAccumulateHelp,
			f,
			s_,
			{a: _List_Nil, gi: d_, f: cs},
			_List_Nil);
	});
var $zwilias$elm_rosetree$Tree$indexedMap = F2(
	function (f, t) {
		return A3(
			$zwilias$elm_rosetree$Tree$mapAccumulate,
			F2(
				function (idx, elem) {
					return _Utils_Tuple2(
						idx + 1,
						A2(f, idx, elem));
				}),
			0,
			t).b;
	});
var $zwilias$elm_rosetree$Tree$map = F2(
	function (f, t) {
		return A3(
			$zwilias$elm_rosetree$Tree$mapAccumulate,
			F2(
				function (_v0, e) {
					return _Utils_Tuple2(
						0,
						f(e));
				}),
			0,
			t).b;
	});
var $author$project$BlockType$BalancedBlock = function (a) {
	return {$: 0, a: a};
};
var $author$project$BlockType$DisplayCode = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$Parse$M = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$Parse$MDBlockWithId = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $author$project$BlockType$MarkdownBlock = function (a) {
	return {$: 1, a: a};
};
var $author$project$MDInline$OrdinaryText = function (a) {
	return {$: 0, a: a};
};
var $author$project$MDInline$Paragraph = function (a) {
	return {$: 13, a: a};
};
var $author$project$BlockType$Plain = {$: 8};
var $author$project$Markdown$Parse$T = function (a) {
	return {$: 1, a: a};
};
var $author$project$BlockType$Verbatim = {$: 1};
var $author$project$MDInline$BoldText = function (a) {
	return {$: 2, a: a};
};
var $author$project$MDInline$Expecting = $elm$core$Basics$identity;
var $author$project$MDInline$boldText = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$MDInline$BoldText,
	A2(
		$elm$parser$Parser$Advanced$map,
		A2($elm$core$String$replace, '**', ''),
		A2(
			$elm$parser$Parser$Advanced$map,
			$elm$core$String$dropLeft(2),
			$elm$parser$Parser$Advanced$getChompedString(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed(0),
								$elm$parser$Parser$Advanced$symbol(
									A2($elm$parser$Parser$Advanced$Token, '**', 'expecting \'**\' to begin bold text'))),
							$elm$parser$Parser$Advanced$chompWhile(
								function (c) {
									return c !== '*';
								})),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, '**', 'expecting \'**\' to end bold text'))),
					$elm$parser$Parser$Advanced$spaces)))));
var $author$project$MDInline$Code = function (a) {
	return {$: 3, a: a};
};
var $author$project$MDInline$code = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$MDInline$Code,
	A2(
		$elm$parser$Parser$Advanced$map,
		A2($elm$core$String$replace, '`', ''),
		A2(
			$elm$parser$Parser$Advanced$map,
			$elm$core$String$trim,
			$elm$parser$Parser$Advanced$getChompedString(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed(0),
							$elm$parser$Parser$Advanced$symbol(
								A2($elm$parser$Parser$Advanced$Token, '`', 'Expecting \'`\' to begin inline code'))),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return c !== '`';
							})),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '`', 'Expecting \'`\' to end inline code')))))));
var $author$project$MDInline$ExtensionInline = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $author$project$MDInline$parseWhile = function (accepting) {
	return $elm$parser$Parser$Advanced$getChompedString(
		$elm$parser$Parser$Advanced$chompWhile(accepting));
};
var $author$project$MDInline$emailTail = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed(
			function (s) {
				return A2($author$project$MDInline$ExtensionInline, 'noOp', '@' + s);
			}),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '@', 'Expecting \'@\' to begin tail of email address'))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$author$project$MDInline$parseWhile(
			function (c) {
				return c !== ' ';
			}),
		$elm$parser$Parser$Advanced$spaces));
var $author$project$MDInline$parseUntil = function (end) {
	return $elm$parser$Parser$Advanced$getChompedString(
		$elm$parser$Parser$Advanced$chompUntil(
			A2($elm$parser$Parser$Advanced$Token, end, 'Expecting \'' + (end + '\' in parseUntil'))));
};
var $author$project$MDInline$extension_ = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(
				F2(
					function (cmd, args) {
						return A2($author$project$MDInline$ExtensionInline, cmd, args);
					})),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '@', 'Expecting \'@\' to begin extension element'))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$MDInline$parseUntil('['),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '[', 'Expecting \'[\' to continue extension element')))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$MDInline$parseWhile(
				function (c) {
					return c !== ']';
				}),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, ']', 'Expecting \']\' to end extension element'))),
		$elm$parser$Parser$Advanced$spaces));
var $author$project$MDInline$extension = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$elm$parser$Parser$Advanced$backtrackable($author$project$MDInline$extension_),
			$author$project$MDInline$emailTail
		]));
var $author$project$MDInline$HtmlEntity = function (a) {
	return {$: 7, a: a};
};
var $author$project$MDInline$htmlEntityText = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$MDInline$HtmlEntity,
	A2(
		$elm$parser$Parser$Advanced$map,
		A2(
			$elm$core$Basics$composeR,
			A2($elm$core$String$replace, '&', ''),
			A2(
				$elm$core$Basics$composeR,
				A2($elm$core$String$replace, ';', ''),
				A2($elm$core$String$replace, ' ', ''))),
		$elm$parser$Parser$Advanced$getChompedString(
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						$elm$parser$Parser$Advanced$succeed(0),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, '&', 'Expecting \'&\' to begin Html entity'))),
					$elm$parser$Parser$Advanced$chompWhile(
						function (c) {
							return c !== ';';
						})),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, ';', 'Expecting \';\' to end  Html entity'))))));
var $author$project$MDInline$Image = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $author$project$MDInline$PrefixedString = F2(
	function (prefix, text) {
		return {cs: prefix, cw: text};
	});
var $author$project$MDInline$image = A2(
	$elm$parser$Parser$Advanced$map,
	function (ps) {
		return A2($author$project$MDInline$Image, ps.cs, ps.cw);
	},
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($author$project$MDInline$PrefixedString),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '![', 'Expecting \'![\' to begin image block'))),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$MDInline$parseWhile(
					function (c) {
						return c !== ']';
					}),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '](', 'Expecting \'](\' in image block')))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$MDInline$parseWhile(
					function (c) {
						return c !== ')';
					}),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, ')', 'Expecting \')\' to end image block'))),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return c === '\n';
				}))));
var $author$project$MDInline$ItalicText = function (a) {
	return {$: 1, a: a};
};
var $author$project$MDInline$italicText = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$MDInline$ItalicText,
	A2(
		$elm$parser$Parser$Advanced$map,
		A2($elm$core$String$replace, '*', ''),
		$elm$parser$Parser$Advanced$getChompedString(
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$succeed(0),
							$elm$parser$Parser$Advanced$symbol(
								A2($elm$parser$Parser$Advanced$Token, '*', 'Expecting \'*\' to begin italic text'))),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return c !== '*';
							})),
					$elm$parser$Parser$Advanced$symbol(
						A2($elm$parser$Parser$Advanced$Token, '*', 'Expecting \'*\' to end italic text'))),
				$elm$parser$Parser$Advanced$spaces))));
var $author$project$MDInline$BracketedText = function (a) {
	return {$: 6, a: a};
};
var $author$project$MDInline$Link = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $author$project$MDInline$linkOrBracket = function (ps) {
	var _v0 = ps.cw;
	if (_v0 === ' ') {
		return $author$project$MDInline$BracketedText(ps.cs);
	} else {
		return A2($author$project$MDInline$Link, ps.cw, ps.cs);
	}
};
var $author$project$MDInline$linkUrl = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '(', 'expecting \'(\' to begin link url'))),
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$author$project$MDInline$parseWhile(
				function (c) {
					return c !== ')';
				}),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, ')', 'expecting \')\' to end link url'))),
		$elm$parser$Parser$Advanced$spaces));
var $author$project$MDInline$terminateBracket = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return ' ';
	},
	$elm$parser$Parser$Advanced$succeed(0));
var $author$project$MDInline$link = A2(
	$elm$parser$Parser$Advanced$map,
	function (ps) {
		return $author$project$MDInline$linkOrBracket(ps);
	},
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($author$project$MDInline$PrefixedString),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, '[', 'expecting \'[\' to begin label'))),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$author$project$MDInline$parseWhile(
					function (c) {
						return c !== ']';
					}),
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, ']', 'expecting \']\' to end first part of label')))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[$author$project$MDInline$linkUrl, $author$project$MDInline$terminateBracket])),
			$elm$parser$Parser$Advanced$spaces)));
var $author$project$MDInline$isSpecialCharacter = function (c) {
	switch (c) {
		case '`':
			return true;
		case '[':
			return true;
		case '*':
			return true;
		case '&':
			return true;
		case '@':
			return true;
		case '\n':
			return true;
		default:
			return false;
	}
};
var $author$project$MDInline$ordinaryTextParser = function (validStart) {
	var isRegular = function (c) {
		return (!(c === ']')) && validStart(c);
	};
	return A2(
		$elm$parser$Parser$Advanced$mapChompedString,
		F2(
			function (s, _v0) {
				return $author$project$MDInline$OrdinaryText(s);
			}),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2($elm$parser$Parser$Advanced$chompIf, validStart, 'expecting regular character to begin ordinary text line'),
			$elm$parser$Parser$Advanced$chompWhile(isRegular)));
};
var $author$project$MDInline$ordinaryTextExtended = function () {
	var validStart = function (c) {
		return !((c === '~') || $author$project$MDInline$isSpecialCharacter(c));
	};
	return $author$project$MDInline$ordinaryTextParser(validStart);
}();
var $author$project$MDInline$StrikeThroughText = function (a) {
	return {$: 5, a: a};
};
var $author$project$MDInline$strikeThroughText = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$MDInline$StrikeThroughText,
	A2(
		$elm$parser$Parser$Advanced$map,
		A2($elm$core$String$replace, '~~', ''),
		A2(
			$elm$parser$Parser$Advanced$map,
			$elm$core$String$dropLeft(2),
			$elm$parser$Parser$Advanced$getChompedString(
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed(0),
								$elm$parser$Parser$Advanced$symbol(
									A2($elm$parser$Parser$Advanced$Token, '~~', 'expecting \'~~\' to begin strikethrough'))),
							$elm$parser$Parser$Advanced$chompWhile(
								function (c) {
									return c !== '~';
								})),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, '~~', 'expecting \'~~\' to end strikethrough'))),
					$elm$parser$Parser$Advanced$spaces)))));
var $author$project$MDInline$inlineExtended = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$author$project$MDInline$extension, $author$project$MDInline$code, $author$project$MDInline$image, $author$project$MDInline$link, $author$project$MDInline$boldText, $author$project$MDInline$italicText, $author$project$MDInline$strikeThroughText, $author$project$MDInline$htmlEntityText, $author$project$MDInline$ordinaryTextExtended]));
var $author$project$MDInline$InlineMath = function (a) {
	return {$: 4, a: a};
};
var $author$project$MDInline$inlineMath = A2(
	$elm$parser$Parser$Advanced$map,
	$author$project$MDInline$InlineMath,
	A2(
		$elm$parser$Parser$Advanced$map,
		$elm$core$String$dropRight(1),
		A2(
			$elm$parser$Parser$Advanced$map,
			$elm$core$String$dropLeft(1),
			A2(
				$elm$parser$Parser$Advanced$map,
				$elm$core$String$trim,
				$elm$parser$Parser$Advanced$getChompedString(
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								$elm$parser$Parser$Advanced$succeed(0),
								$elm$parser$Parser$Advanced$symbol(
									A2($elm$parser$Parser$Advanced$Token, '$', 'Expecting \'$\' to begin inline math'))),
							$elm$parser$Parser$Advanced$chompWhile(
								function (c) {
									return c !== '$';
								})),
						$elm$parser$Parser$Advanced$symbol(
							A2($elm$parser$Parser$Advanced$Token, '$', 'Expecting \'$\' to end inline math'))))))));
var $author$project$MDInline$ordinaryTextExtendedMath = function () {
	var validStart = function (c) {
		return !((c === '~') || ((c === '$') || $author$project$MDInline$isSpecialCharacter(c)));
	};
	return $author$project$MDInline$ordinaryTextParser(validStart);
}();
var $author$project$MDInline$inlineExtendedMath = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$author$project$MDInline$extension, $author$project$MDInline$code, $author$project$MDInline$image, $author$project$MDInline$link, $author$project$MDInline$boldText, $author$project$MDInline$italicText, $author$project$MDInline$strikeThroughText, $author$project$MDInline$htmlEntityText, $author$project$MDInline$inlineMath, $author$project$MDInline$ordinaryTextExtendedMath]));
var $author$project$MDInline$ordinaryTextStandard = function () {
	var validStart = A2($elm$core$Basics$composeL, $elm$core$Basics$not, $author$project$MDInline$isSpecialCharacter);
	return $author$project$MDInline$ordinaryTextParser(validStart);
}();
var $author$project$MDInline$inlineStandard = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$author$project$MDInline$code, $author$project$MDInline$image, $author$project$MDInline$link, $author$project$MDInline$boldText, $author$project$MDInline$italicText, $author$project$MDInline$ordinaryTextStandard]));
var $author$project$MDInline$inline = function (option) {
	switch (option) {
		case 0:
			return $author$project$MDInline$inlineStandard;
		case 1:
			return $author$project$MDInline$inlineExtended;
		default:
			return $author$project$MDInline$inlineExtendedMath;
	}
};
var $author$project$MDInline$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (v) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					p),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $author$project$MDInline$many = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$author$project$MDInline$manyHelp(p));
};
var $author$project$MDInline$inlineList = function (option) {
	return $author$project$MDInline$many(
		$author$project$MDInline$inline(option));
};
var $author$project$MDInline$Line = function (a) {
	return {$: 12, a: a};
};
var $author$project$MDInline$displayDeadEnd = function (deadend) {
	var _v0 = deadend.es;
	var error = _v0;
	return error;
};
var $author$project$MDInline$decodeInlineError = function (errorList) {
	var errorMessage = A2(
		$elm$core$String$join,
		';;\n\n',
		A2($elm$core$List$map, $author$project$MDInline$displayDeadEnd, errorList));
	return $author$project$MDInline$OrdinaryText(errorMessage);
};
var $author$project$MDInline$resolveInlineResult = function (result) {
	if (!result.$) {
		var res_ = result.a;
		return $author$project$MDInline$Line(res_);
	} else {
		var list = result.a;
		return $author$project$MDInline$decodeInlineError(list);
	}
};
var $author$project$MDInline$parseLine = F2(
	function (option, str) {
		return $author$project$MDInline$resolveInlineResult(
			A2(
				$elm$parser$Parser$Advanced$run,
				$author$project$MDInline$inlineList(option),
				str));
	});
var $author$project$MDInline$endsWithPunctuation = function (str) {
	return A2($elm$core$String$right, 1, str) === '.';
};
var $author$project$MDInline$wrapper = F2(
	function (str, acc) {
		return (acc.ae === '') ? {ae: str, bs: _List_Nil} : ($author$project$MDInline$endsWithPunctuation(acc.ae) ? {
			ae: str,
			bs: A2($elm$core$List$cons, acc.ae, acc.bs)
		} : _Utils_update(
			acc,
			{ae: acc.ae + (' ' + str)}));
	});
var $author$project$MDInline$wrap = function (strList) {
	return $elm$core$List$reverse(
		function (acc) {
			return A2($elm$core$List$cons, acc.ae, acc.bs);
		}(
			A3(
				$elm$core$List$foldl,
				$author$project$MDInline$wrapper,
				{ae: '', bs: _List_Nil},
				strList)));
};
var $author$project$MDInline$parse = F2(
	function (option, str) {
		return $author$project$MDInline$Paragraph(
			A2(
				$elm$core$List$map,
				$author$project$MDInline$parseLine(option),
				$author$project$MDInline$wrap(
					A2(
						$elm$core$List$filter,
						function (strElt) {
							return !$elm$core$String$isEmpty(strElt);
						},
						A2($elm$core$String$split, '\n', str)))));
	});
var $author$project$Markdown$Parse$extendedMDParser = F2(
	function (option_, _v0) {
		var id = _v0.a;
		var bt = _v0.b;
		var level_ = _v0.c;
		var content_ = _v0.d;
		if (bt.$ === 1) {
			var mt = bt.a;
			switch (mt.$) {
				case 7:
					var lines = $elm$core$String$lines(content_);
					var parsedLines = $author$project$MDInline$Paragraph(
						A2(
							$elm$core$List$map,
							$author$project$MDInline$parse(option_),
							lines));
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$MarkdownBlock(mt),
						level_,
						$author$project$Markdown$Parse$M(parsedLines));
				case 6:
					var args = mt.a;
					var content__ = A3($elm$core$String$replace, '@@' + args, '', content_);
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$MarkdownBlock(mt),
						level_,
						$author$project$Markdown$Parse$M(
							$author$project$MDInline$OrdinaryText(content__)));
				default:
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$MarkdownBlock(mt),
						level_,
						$author$project$Markdown$Parse$M(
							A2($author$project$MDInline$parse, option_, content_)));
			}
		} else {
			switch (bt.a.$) {
				case 0:
					var lang = bt.a.a;
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$BalancedBlock(
							$author$project$BlockType$DisplayCode(lang)),
						level_,
						$author$project$Markdown$Parse$T(content_));
				case 1:
					var _v3 = bt.a;
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$BalancedBlock($author$project$BlockType$Verbatim),
						level_,
						$author$project$Markdown$Parse$T(content_));
				default:
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$MarkdownBlock($author$project$BlockType$Plain),
						level_,
						$author$project$Markdown$Parse$M(
							A2($author$project$MDInline$parse, option_, content_)));
			}
		}
	});
var $author$project$BlockType$DisplayMath = {$: 2};
var $author$project$Markdown$Parse$extendedMathMDParser = F2(
	function (option_, _v0) {
		var id = _v0.a;
		var bt = _v0.b;
		var level_ = _v0.c;
		var content_ = _v0.d;
		if (bt.$ === 1) {
			var mt = bt.a;
			switch (mt.$) {
				case 7:
					var lines = $elm$core$String$lines(content_);
					var parsedLines = $author$project$MDInline$Paragraph(
						A2(
							$elm$core$List$map,
							$author$project$MDInline$parse(option_),
							lines));
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$MarkdownBlock(mt),
						level_,
						$author$project$Markdown$Parse$M(parsedLines));
				case 6:
					var args = mt.a;
					var content__ = A3($elm$core$String$replace, '@@' + args, '', content_);
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$MarkdownBlock(mt),
						level_,
						$author$project$Markdown$Parse$M(
							$author$project$MDInline$OrdinaryText(content__)));
				default:
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$MarkdownBlock(mt),
						level_,
						$author$project$Markdown$Parse$M(
							A2($author$project$MDInline$parse, option_, content_)));
			}
		} else {
			switch (bt.a.$) {
				case 0:
					var lang = bt.a.a;
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$BalancedBlock(
							$author$project$BlockType$DisplayCode(lang)),
						level_,
						$author$project$Markdown$Parse$T(content_));
				case 1:
					var _v3 = bt.a;
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$BalancedBlock($author$project$BlockType$Verbatim),
						level_,
						$author$project$Markdown$Parse$T(content_));
				default:
					var _v4 = bt.a;
					return A4(
						$author$project$Markdown$Parse$MDBlockWithId,
						id,
						$author$project$BlockType$BalancedBlock($author$project$BlockType$DisplayMath),
						level_,
						$author$project$Markdown$Parse$T(content_));
			}
		}
	});
var $author$project$Markdown$Parse$standardMDParser = F2(
	function (option_, _v0) {
		var id = _v0.a;
		var bt = _v0.b;
		var level_ = _v0.c;
		var content_ = _v0.d;
		if (bt.$ === 1) {
			var mt = bt.a;
			return A4(
				$author$project$Markdown$Parse$MDBlockWithId,
				id,
				$author$project$BlockType$MarkdownBlock(mt),
				level_,
				$author$project$Markdown$Parse$M(
					A2($author$project$MDInline$parse, option_, content_)));
		} else {
			if (!bt.a.$) {
				var lang = bt.a.a;
				return A4(
					$author$project$Markdown$Parse$MDBlockWithId,
					id,
					$author$project$BlockType$BalancedBlock(
						$author$project$BlockType$DisplayCode(lang)),
					level_,
					$author$project$Markdown$Parse$T(content_));
			} else {
				return A4(
					$author$project$Markdown$Parse$MDBlockWithId,
					id,
					$author$project$BlockType$MarkdownBlock($author$project$BlockType$Plain),
					level_,
					$author$project$Markdown$Parse$M(
						A2($author$project$MDInline$parse, option_, content_)));
			}
		}
	});
var $author$project$Markdown$Parse$selectParser = F2(
	function (option, block) {
		switch (option) {
			case 0:
				return A2($author$project$Markdown$Parse$standardMDParser, option, block);
			case 1:
				return A2($author$project$Markdown$Parse$extendedMDParser, option, block);
			default:
				return A2($author$project$Markdown$Parse$extendedMathMDParser, option, block);
		}
	});
var $author$project$Markdown$Parse$setBlockIndex = F3(
	function (version, idx, _v0) {
		var bt = _v0.b;
		var lev = _v0.c;
		var blockContent = _v0.d;
		return A4(
			$author$project$Markdown$Parse$MDBlockWithId,
			_Utils_Tuple2(idx, version),
			bt,
			lev,
			blockContent);
	});
var $author$project$Markdown$Parse$blockLevel = function (_v0) {
	var k = _v0.c;
	return k;
};
var $author$project$Markdown$Parse$Block = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $author$project$Markdown$Parse$changeLevel = F2(
	function (k, _v0) {
		var id_ = _v0.a;
		var bt_ = _v0.b;
		var level_ = _v0.c;
		var content_ = _v0.d;
		return A4($author$project$Markdown$Parse$Block, id_, bt_, level_ + k, content_);
	});
var $author$project$Markdown$Parse$blockListOfFSM = function (_v0) {
	var blockList_ = _v0.b;
	return blockList_;
};
var $author$project$Markdown$Parse$stateOfFSM = function (_v0) {
	var state_ = _v0.a;
	return state_;
};
var $author$project$Markdown$Parse$flush = function (fsm) {
	var _v0 = $author$project$Markdown$Parse$stateOfFSM(fsm);
	switch (_v0.$) {
		case 0:
			return $elm$core$List$reverse(
				$author$project$Markdown$Parse$blockListOfFSM(fsm));
		case 2:
			return $elm$core$List$reverse(
				$author$project$Markdown$Parse$blockListOfFSM(fsm));
		default:
			var b = _v0.a;
			return $elm$core$List$reverse(
				A2(
					$elm$core$List$cons,
					b,
					$author$project$Markdown$Parse$blockListOfFSM(fsm)));
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$Zipper = $elm$core$Basics$identity;
var $zwilias$elm_rosetree$Tree$Zipper$fromTree = function (t) {
	return {ap: _List_Nil, ar: _List_Nil, m: _List_Nil, fS: t};
};
var $zwilias$elm_rosetree$Tree$singleton = function (v) {
	return A2($zwilias$elm_rosetree$Tree$Tree, v, _List_Nil);
};
var $zwilias$elm_rosetree$Tree$appendChild = F2(
	function (c, _v0) {
		var v = _v0.a;
		var cs = _v0.b;
		return A2(
			$zwilias$elm_rosetree$Tree$Tree,
			v,
			_Utils_ap(
				cs,
				_List_fromArray(
					[c])));
	});
var $zwilias$elm_rosetree$Tree$Zipper$replaceTree = F2(
	function (t, _v0) {
		var zipper = _v0;
		return _Utils_update(
			zipper,
			{fS: t});
	});
var $zwilias$elm_rosetree$Tree$Zipper$tree = function (_v0) {
	var focus = _v0.fS;
	return focus;
};
var $jxxcarlson$htree$HTree$appendAtFocus = F2(
	function (s, z) {
		var t = $zwilias$elm_rosetree$Tree$Zipper$tree(z);
		var newTree = A2(
			$zwilias$elm_rosetree$Tree$appendChild,
			$zwilias$elm_rosetree$Tree$singleton(s),
			t);
		return A2($zwilias$elm_rosetree$Tree$Zipper$replaceTree, newTree, z);
	});
var $jxxcarlson$htree$HTree$iterate = F3(
	function (remaining, f, accumulator) {
		iterate:
		while (true) {
			if (remaining > 0) {
				var $temp$remaining = remaining - 1,
					$temp$f = f,
					$temp$accumulator = f(accumulator);
				remaining = $temp$remaining;
				f = $temp$f;
				accumulator = $temp$accumulator;
				continue iterate;
			} else {
				return accumulator;
			}
		}
	});
var $zwilias$elm_rosetree$Tree$tree = $zwilias$elm_rosetree$Tree$Tree;
var $zwilias$elm_rosetree$Tree$Zipper$reconstruct = F4(
	function (focus, before, after, l) {
		return A2(
			$zwilias$elm_rosetree$Tree$tree,
			l,
			_Utils_ap(
				$elm$core$List$reverse(before),
				_Utils_ap(
					_List_fromArray(
						[focus]),
					after)));
	});
var $zwilias$elm_rosetree$Tree$Zipper$parent = function (_v0) {
	var zipper = _v0;
	var _v1 = zipper.m;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var crumb = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			{
				ap: crumb.ap,
				ar: crumb.ar,
				m: rest,
				fS: A4($zwilias$elm_rosetree$Tree$Zipper$reconstruct, zipper.fS, zipper.ar, zipper.ap, crumb.gi)
			});
	}
};
var $jxxcarlson$htree$HTree$manyParent = F2(
	function (k, z) {
		var zz = $zwilias$elm_rosetree$Tree$Zipper$parent(z);
		return A3(
			$jxxcarlson$htree$HTree$iterate,
			k - 1,
			function (zi) {
				return A2($elm$core$Maybe$andThen, $zwilias$elm_rosetree$Tree$Zipper$parent, zi);
			},
			zz);
	});
var $jxxcarlson$htree$HTree$addAtNthParent = F3(
	function (k, s, z) {
		return A2(
			$elm$core$Maybe$withDefault,
			z,
			A2(
				$elm$core$Maybe$map,
				$jxxcarlson$htree$HTree$appendAtFocus(s),
				A2($jxxcarlson$htree$HTree$manyParent, k, z)));
	});
var $zwilias$elm_rosetree$Tree$Zipper$lastChild = function (_v0) {
	var zipper = _v0;
	var _v1 = $elm$core$List$reverse(
		$zwilias$elm_rosetree$Tree$children(zipper.fS));
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var c = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			{
				ap: _List_Nil,
				ar: rest,
				m: A2(
					$elm$core$List$cons,
					{
						ap: zipper.ap,
						ar: zipper.ar,
						gi: $zwilias$elm_rosetree$Tree$label(zipper.fS)
					},
					zipper.m),
				fS: c
			});
	}
};
var $jxxcarlson$htree$HTree$addChildAtFocus = F2(
	function (s, z) {
		return A2(
			$elm$core$Maybe$withDefault,
			z,
			A2(
				$elm$core$Maybe$map,
				$jxxcarlson$htree$HTree$appendAtFocus(s),
				$zwilias$elm_rosetree$Tree$Zipper$lastChild(z)));
	});
var $jxxcarlson$htree$HTree$levelOfLastChild = F2(
	function (level, z) {
		return A2(
			$elm$core$Maybe$map,
			level,
			A2(
				$elm$core$Maybe$map,
				$zwilias$elm_rosetree$Tree$label,
				A2(
					$elm$core$Maybe$map,
					$zwilias$elm_rosetree$Tree$Zipper$tree,
					$zwilias$elm_rosetree$Tree$Zipper$lastChild(z))));
	});
var $elm$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		if (ma.$ === 1) {
			return $elm$core$Maybe$Nothing;
		} else {
			var a = ma.a;
			if (mb.$ === 1) {
				return $elm$core$Maybe$Nothing;
			} else {
				var b = mb.a;
				return $elm$core$Maybe$Just(
					A2(func, a, b));
			}
		}
	});
var $jxxcarlson$htree$HTree$levelDifference = F3(
	function (level, s, z) {
		return A3(
			$elm$core$Maybe$map2,
			$elm$core$Basics$sub,
			$elm$core$Maybe$Just(
				level(s)),
			A2($jxxcarlson$htree$HTree$levelOfLastChild, level, z));
	});
var $jxxcarlson$htree$HTree$step = F3(
	function (level, s, z) {
		var ld = A3($jxxcarlson$htree$HTree$levelDifference, level, s, z);
		if (ld.$ === 1) {
			return A2($jxxcarlson$htree$HTree$appendAtFocus, s, z);
		} else {
			switch (ld.a) {
				case 0:
					return A2($jxxcarlson$htree$HTree$appendAtFocus, s, z);
				case 1:
					return A2($jxxcarlson$htree$HTree$addChildAtFocus, s, z);
				default:
					var levelsBack = -A2($elm$core$Maybe$withDefault, 0, ld);
					return A3($jxxcarlson$htree$HTree$addAtNthParent, levelsBack, s, z);
			}
		}
	});
var $zwilias$elm_rosetree$Tree$Zipper$previousSibling = function (_v0) {
	var zipper = _v0;
	var _v1 = zipper.ar;
	if (!_v1.b) {
		return $elm$core$Maybe$Nothing;
	} else {
		var previous = _v1.a;
		var rest = _v1.b;
		return $elm$core$Maybe$Just(
			{
				ap: A2($elm$core$List$cons, zipper.fS, zipper.ap),
				ar: rest,
				m: zipper.m,
				fS: previous
			});
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$firstSibling = function (zipper) {
	firstSibling:
	while (true) {
		var _v0 = $zwilias$elm_rosetree$Tree$Zipper$previousSibling(zipper);
		if (_v0.$ === 1) {
			return zipper;
		} else {
			var z = _v0.a;
			var $temp$zipper = z;
			zipper = $temp$zipper;
			continue firstSibling;
		}
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$root = function (zipper) {
	root:
	while (true) {
		var _v0 = $zwilias$elm_rosetree$Tree$Zipper$parent(zipper);
		if (_v0.$ === 1) {
			return $zwilias$elm_rosetree$Tree$Zipper$firstSibling(zipper);
		} else {
			var z = _v0.a;
			var $temp$zipper = z;
			zipper = $temp$zipper;
			continue root;
		}
	}
};
var $zwilias$elm_rosetree$Tree$Zipper$toTree = A2($elm$core$Basics$composeL, $zwilias$elm_rosetree$Tree$Zipper$tree, $zwilias$elm_rosetree$Tree$Zipper$root);
var $jxxcarlson$htree$HTree$fromList = F3(
	function (rootLabel, level, lst) {
		return $zwilias$elm_rosetree$Tree$Zipper$toTree(
			A3(
				$elm$core$List$foldl,
				F2(
					function (s, z) {
						return A3($jxxcarlson$htree$HTree$step, level, s, z);
					}),
				$zwilias$elm_rosetree$Tree$Zipper$fromTree(
					$zwilias$elm_rosetree$Tree$singleton(rootLabel)),
				lst));
	});
var $author$project$BlockType$Root = {$: 0};
var $author$project$Markdown$Parse$rootBlock = A4(
	$author$project$Markdown$Parse$Block,
	_Utils_Tuple2(0, 0),
	$author$project$BlockType$MarkdownBlock($author$project$BlockType$Root),
	0,
	'DOCUMENT');
var $author$project$Markdown$Parse$FSM = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $author$project$Markdown$Parse$Start = {$: 0};
var $author$project$Markdown$Parse$emptyRegister = {
	T: _List_Nil,
	a_: _List_Nil,
	bS: _Utils_Tuple2(0, 0),
	bU: 0,
	bo: 0,
	a5: 0,
	aU: 0,
	gk: 0
};
var $author$project$Markdown$Parse$initialFSM = A3($author$project$Markdown$Parse$FSM, $author$project$Markdown$Parse$Start, _List_Nil, $author$project$Markdown$Parse$emptyRegister);
var $author$project$BlockType$Table = {$: 13};
var $author$project$BlockType$TableRow = {$: 12};
var $author$project$Markdown$Parse$clearBlockStack = function (register) {
	return _Utils_update(
		register,
		{T: _List_Nil});
};
var $author$project$Markdown$Parse$editBlock = function (block) {
	var id = block.a;
	var bt = block.b;
	var lev = block.c;
	var content = block.d;
	return (_Utils_eq(
		bt,
		$author$project$BlockType$MarkdownBlock($author$project$BlockType$TableRow)) && (content === 'row')) ? A4($author$project$Markdown$Parse$Block, id, bt, lev, '') : block;
};
var $author$project$Markdown$Parse$topOfBlockStack = function (register) {
	return $elm$core$List$head(register.T);
};
var $author$project$Markdown$Parse$typeOfBlock = function (_v0) {
	var bt = _v0.b;
	return bt;
};
var $author$project$Markdown$Parse$typeOfState = function (s) {
	switch (s.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var b = s.a;
			return $elm$core$Maybe$Just(
				$author$project$Markdown$Parse$typeOfBlock(b));
		default:
			return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Markdown$Parse$handleRegister = function (fsm) {
	var state = fsm.a;
	var blocks = fsm.b;
	var register = fsm.c;
	var _v0 = $author$project$Markdown$Parse$topOfBlockStack(register);
	if (_v0.$ === 1) {
		return fsm;
	} else {
		var _v1 = $author$project$Markdown$Parse$typeOfState(state);
		if (((!_v1.$) && (_v1.a.$ === 1)) && (_v1.a.a.$ === 12)) {
			var _v2 = _v1.a.a;
			return fsm;
		} else {
			var tableBlock = A4(
				$author$project$Markdown$Parse$Block,
				_Utils_Tuple2(-1, -1),
				$author$project$BlockType$MarkdownBlock($author$project$BlockType$Table),
				0,
				'tableRoot');
			var rowBlock = A4(
				$author$project$Markdown$Parse$Block,
				_Utils_Tuple2(-1, -1),
				$author$project$BlockType$MarkdownBlock($author$project$BlockType$TableRow),
				1,
				'row');
			var tableData = A2(
				$elm$core$List$map,
				$author$project$Markdown$Parse$editBlock,
				function (x) {
					return _Utils_ap(
						x,
						_List_fromArray(
							[rowBlock, tableBlock]));
				}(
					$elm$core$List$reverse(register.T)));
			var newBlocks = A2(
				$elm$core$List$filter,
				function (_v3) {
					var content = _v3.d;
					return content !== 'deleteMe';
				},
				blocks);
			return A3(
				$author$project$Markdown$Parse$FSM,
				$author$project$Markdown$Parse$Start,
				_Utils_ap(tableData, newBlocks),
				$author$project$Markdown$Parse$clearBlockStack(register));
		}
	}
};
var $author$project$Markdown$Parse$Error = {$: 2};
var $author$project$Markdown$Parse$InBlock = function (a) {
	return {$: 1, a: a};
};
var $author$project$BlockType$Blank = {$: 10};
var $author$project$BlockType$numberOfLeadingBlanks = A2(
	$elm$parser$Parser$Advanced$map,
	$elm$core$String$length,
	$elm$parser$Parser$Advanced$getChompedString(
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(0),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return c === ' ';
				}))));
var $elm$core$Result$toMaybe = function (result) {
	if (!result.$) {
		var v = result.a;
		return $elm$core$Maybe$Just(v);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$BlockType$getNumberOfLeadingBlanks = function (str) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$Result$toMaybe(
			A2($elm$parser$Parser$Advanced$run, $author$project$BlockType$numberOfLeadingBlanks, str)));
};
var $author$project$BlockType$dropLeadingBlanks = function (str) {
	return A2(
		$elm$core$String$dropLeft,
		$author$project$BlockType$getNumberOfLeadingBlanks(str),
		str);
};
var $author$project$BlockType$levelIndentation = 4;
var $author$project$BlockType$level = function (ln) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		A2(
			$elm$core$Maybe$map,
			function (l) {
				return (l / $author$project$BlockType$levelIndentation) | 0;
			},
			$elm$core$Result$toMaybe(
				A2($elm$parser$Parser$Advanced$run, $author$project$BlockType$numberOfLeadingBlanks, ln))));
};
var $author$project$BlockType$Expecting = $elm$core$Basics$identity;
var $author$project$BlockType$CssLang = 1;
var $author$project$BlockType$cssLang = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(1),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, 'css', 'Expecting string for language, use ```nolang if language is unknown or unsupported')));
var $author$project$BlockType$ElmLang = 0;
var $author$project$BlockType$elmLang = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(0),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, 'elm', 'Expecting string for language, use ```nolang if language is unknown or unsupported')));
var $author$project$BlockType$JavascriptLang = 2;
var $author$project$BlockType$javascriptLang = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(2),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, 'javascript', 'Expecting string for language, use ```nolang if language is unknown or unsupported')));
var $author$project$BlockType$JsonLang = 3;
var $author$project$BlockType$jsonLang = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(3),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, 'json', 'Expecting string for language, use ```nolang if language is unknown or unsupported')));
var $author$project$BlockType$NoLang = 7;
var $author$project$BlockType$noLang = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(7),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, 'nolang', 'Expecting string for language, use ```nolang if language is unknown or unsupported')));
var $author$project$BlockType$PythonLang = 4;
var $author$project$BlockType$pythonLang = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(4),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, 'python', 'Expecting string for language, use ```nolang if language is unknown or unsupported')));
var $author$project$BlockType$SqlLang = 5;
var $author$project$BlockType$sqlLang = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(5),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, 'sql', 'Expecting string for language, use ```nolang if language is unknown or unsupported')));
var $author$project$BlockType$Verse = 8;
var $author$project$BlockType$verse = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(8),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, 'verse', 'Expecting string for verse, use ```verse if language is unknown or unsupported')));
var $author$project$BlockType$XmlLang = 6;
var $author$project$BlockType$xmlLang = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(6),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, 'xml', 'Expecting string for language, use ```nolang if language is unknown or unsupported')));
var $author$project$BlockType$codeBlock = A2(
	$elm$parser$Parser$Advanced$map,
	function (lang) {
		return $author$project$BlockType$BalancedBlock(
			$author$project$BlockType$DisplayCode(lang));
	},
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '```', 'Expecting three ticks to begin code block'))),
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[$author$project$BlockType$verse, $author$project$BlockType$cssLang, $author$project$BlockType$elmLang, $author$project$BlockType$javascriptLang, $author$project$BlockType$jsonLang, $author$project$BlockType$pythonLang, $author$project$BlockType$sqlLang, $author$project$BlockType$xmlLang, $author$project$BlockType$noLang]))));
var $author$project$BlockType$ExtensionBlock = function (a) {
	return {$: 6, a: a};
};
var $author$project$BlockType$restOfLine = $elm$parser$Parser$Advanced$getChompedString(
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(0),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return c !== '\n';
				})),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '\n', 'expecting newline'))));
var $author$project$BlockType$extensionBlock = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed(
			function (s) {
				return $author$project$BlockType$MarkdownBlock(
					$author$project$BlockType$ExtensionBlock(s));
			}),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '@@', 'expecting \'@@\' to begin extended block'))),
	$author$project$BlockType$restOfLine);
var $author$project$BlockType$Heading = function (a) {
	return {$: 3, a: a};
};
var $author$project$BlockType$parseWhile = function (accepting) {
	return $elm$parser$Parser$Advanced$getChompedString(
		$elm$parser$Parser$Advanced$chompWhile(accepting));
};
var $author$project$BlockType$headingBlock = A2(
	$elm$parser$Parser$Advanced$map,
	function (s) {
		return $author$project$BlockType$MarkdownBlock(
			$author$project$BlockType$Heading(
				$elm$core$String$length(s) + 1));
	},
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
				$elm$parser$Parser$Advanced$spaces),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '#', 'Expecting \'#\' to begin heading block'))),
		$author$project$BlockType$parseWhile(
			function (c) {
				return c === '#';
			})));
var $author$project$BlockType$HorizontalRule = {$: 4};
var $author$project$BlockType$horizontalRuleBlock = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$BlockType$MarkdownBlock($author$project$BlockType$HorizontalRule);
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed(0),
			$elm$parser$Parser$Advanced$spaces),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '___', 'Expecting at least three underscores to begin thematic break'))));
var $author$project$BlockType$Image = {$: 9};
var $author$project$BlockType$imageBlock = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(
		$author$project$BlockType$MarkdownBlock($author$project$BlockType$Image)),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '![', 'Expecting \'![\' to begin image block')));
var $author$project$BlockType$mathBlock = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(
		$author$project$BlockType$BalancedBlock($author$project$BlockType$DisplayMath)),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '$$', 'Expecting four ticks to begin verbatim block')));
var $author$project$BlockType$OListItem = function (a) {
	return {$: 2, a: a};
};
var $author$project$BlockType$orderedListItemBlock = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$BlockType$MarkdownBlock(
			$author$project$BlockType$OListItem(0));
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$succeed(0),
					$author$project$BlockType$parseWhile(
						function (c) {
							return c === ' ';
						})),
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					function (c) {
						return $elm$core$Char$isDigit(c);
					},
					'Expecting digit to begin ordered list item')),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return $elm$core$Char$isDigit(c);
				})),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '. ', 'expecting period'))));
var $author$project$BlockType$Poetry = {$: 7};
var $author$project$BlockType$poetryBlock = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$BlockType$MarkdownBlock($author$project$BlockType$Poetry);
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed(0),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '>> ', 'expecting \'>> \' to begin poetry block'))));
var $author$project$BlockType$Quotation = {$: 5};
var $author$project$BlockType$quotationBlock = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$BlockType$MarkdownBlock($author$project$BlockType$Quotation);
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed(0),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '> ', 'expecting \'> \' to begin quotation'))));
var $author$project$BlockType$tableBlock = A2(
	$elm$parser$Parser$Advanced$map,
	function (_v0) {
		return $author$project$BlockType$MarkdownBlock($author$project$BlockType$TableRow);
	},
	A2(
		$elm$parser$Parser$Advanced$ignorer,
		$elm$parser$Parser$Advanced$succeed(0),
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '| ', 'expecting \'| \' to begin poetry block'))));
var $author$project$BlockType$UListItem = {$: 1};
var $author$project$BlockType$unorderedListItemBlock = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(
		$author$project$BlockType$MarkdownBlock($author$project$BlockType$UListItem)),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '- ', 'Expecting \'-\' to begin list item')));
var $author$project$BlockType$verbatimBlock = A2(
	$elm$parser$Parser$Advanced$ignorer,
	$elm$parser$Parser$Advanced$succeed(
		$author$project$BlockType$BalancedBlock($author$project$BlockType$Verbatim)),
	$elm$parser$Parser$Advanced$symbol(
		A2($elm$parser$Parser$Advanced$Token, '````', 'Expecting four ticks to begin verbatim block')));
var $author$project$BlockType$parseExtended = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[
			$author$project$BlockType$imageBlock,
			$author$project$BlockType$mathBlock,
			$author$project$BlockType$unorderedListItemBlock,
			$author$project$BlockType$orderedListItemBlock,
			$author$project$BlockType$extensionBlock,
			$author$project$BlockType$quotationBlock,
			$author$project$BlockType$poetryBlock,
			$elm$parser$Parser$Advanced$backtrackable($author$project$BlockType$verbatimBlock),
			$author$project$BlockType$codeBlock,
			$author$project$BlockType$tableBlock,
			$author$project$BlockType$headingBlock,
			$author$project$BlockType$horizontalRuleBlock
		]));
var $author$project$BlockType$parseStandard = $elm$parser$Parser$Advanced$oneOf(
	_List_fromArray(
		[$author$project$BlockType$tableBlock, $author$project$BlockType$imageBlock, $author$project$BlockType$unorderedListItemBlock, $author$project$BlockType$orderedListItemBlock, $author$project$BlockType$quotationBlock, $author$project$BlockType$codeBlock, $author$project$BlockType$headingBlock, $author$project$BlockType$horizontalRuleBlock]));
var $author$project$BlockType$parse = function (option) {
	if (!option) {
		return $author$project$BlockType$parseStandard;
	} else {
		return $author$project$BlockType$parseExtended;
	}
};
var $author$project$BlockType$get = F2(
	function (option, str) {
		if (str === '\n') {
			return _Utils_Tuple2(
				0,
				$elm$core$Maybe$Just(
					$author$project$BlockType$MarkdownBlock($author$project$BlockType$Blank)));
		} else {
			var _v0 = A2(
				$elm$parser$Parser$Advanced$run,
				$author$project$BlockType$parse(option),
				$author$project$BlockType$dropLeadingBlanks(str));
			if (!_v0.$) {
				var result = _v0.a;
				return _Utils_Tuple2(
					$author$project$BlockType$level(str),
					$elm$core$Maybe$Just(result));
			} else {
				return _Utils_Tuple2(
					$author$project$BlockType$level(str),
					$elm$core$Maybe$Just(
						$author$project$BlockType$MarkdownBlock($author$project$BlockType$Plain)));
			}
		}
	});
var $author$project$BlockType$TableCell = {$: 11};
var $author$project$Markdown$Parse$parseTableRow = F2(
	function (level, line) {
		return A2(
			$elm$core$List$map,
			function (s) {
				return A4(
					$author$project$Markdown$Parse$Block,
					_Utils_Tuple2(-1, -1),
					$author$project$BlockType$MarkdownBlock($author$project$BlockType$TableCell),
					level,
					s);
			},
			A2(
				$elm$core$List$filter,
				function (s) {
					return s !== '';
				},
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					A2($elm$core$String$split, '|', line))));
	});
var $author$project$Markdown$Parse$handleTableStart = F6(
	function (blockTypeOfLine, level, line, state, blocks, register) {
		switch (state.$) {
			case 0:
				return A3($author$project$Markdown$Parse$FSM, state, blocks, register);
			case 2:
				return A3($author$project$Markdown$Parse$FSM, state, blocks, register);
			default:
				var rowBlock = A4(
					$author$project$Markdown$Parse$Block,
					_Utils_Tuple2(-1, -1),
					blockTypeOfLine,
					level + 1,
					'row');
				var childrenOfNewBlock = A2($author$project$Markdown$Parse$parseTableRow, level + 2, line);
				var newRow = _Utils_ap(
					childrenOfNewBlock,
					_List_fromArray(
						[rowBlock]));
				return A3(
					$author$project$Markdown$Parse$FSM,
					$author$project$Markdown$Parse$InBlock(rowBlock),
					blocks,
					_Utils_update(
						register,
						{T: newRow, gk: register.gk + 0}));
		}
	});
var $author$project$Markdown$Parse$lineIsNotBlank = function (line) {
	return $elm$core$String$trim(line) !== '';
};
var $author$project$Markdown$Parse$newBlockTypeIsDifferent = F2(
	function (blockType, state) {
		if (state.$ === 1) {
			var currentBlock = state.a;
			return !_Utils_eq(
				$author$project$Markdown$Parse$typeOfBlock(currentBlock),
				blockType);
		} else {
			return false;
		}
	});
var $author$project$BlockType$prefixOfBalancedType = function (bt) {
	switch (bt.$) {
		case 0:
			return '```';
		case 1:
			return '````';
		default:
			return '$$';
	}
};
var $author$project$BlockType$oListPrefix = A2(
	$elm$parser$Parser$Advanced$map,
	function (x) {
		return x + '. ';
	},
	$elm$parser$Parser$Advanced$getChompedString(
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$chompUntil(
				A2($elm$parser$Parser$Advanced$Token, '.', 'expecting \'.\' to begin OListItem block')))));
var $author$project$BlockType$uListPrefix = A2(
	$elm$parser$Parser$Advanced$map,
	function (s) {
		return s + '- ';
	},
	$elm$parser$Parser$Advanced$getChompedString(
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$chompUntil(
				A2($elm$parser$Parser$Advanced$Token, '-', 'expecting \'-\' to begin UListItem block')))));
var $author$project$BlockType$prefixOfMarkdownType = F2(
	function (mdt, line) {
		var runPrefix = F2(
			function (prefixParser, str) {
				var _v1 = A2($elm$parser$Parser$Advanced$run, prefixParser, str);
				if (!_v1.$) {
					var prefix = _v1.a;
					return prefix;
				} else {
					return '';
				}
			});
		switch (mdt.$) {
			case 0:
				return '';
			case 1:
				return A2(runPrefix, $author$project$BlockType$uListPrefix, line);
			case 2:
				return A2(runPrefix, $author$project$BlockType$oListPrefix, line);
			case 3:
				var k = mdt.a;
				return A2($elm$core$String$repeat, k, '#') + ' ';
			case 6:
				return '|';
			case 4:
				return '___';
			case 5:
				return '> ';
			case 7:
				return '>> ';
			case 8:
				return '';
			case 9:
				return '';
			case 11:
				return '';
			case 12:
				return '';
			case 13:
				return '';
			default:
				return '';
		}
	});
var $author$project$BlockType$prefixOfBlockType = F2(
	function (bt, line) {
		if (!bt.$) {
			var bb = bt.a;
			return $author$project$BlockType$prefixOfBalancedType(bb);
		} else {
			var mdb = bt.a;
			return A2($author$project$BlockType$prefixOfMarkdownType, mdb, line);
		}
	});
var $author$project$Markdown$Parse$removePrefix = F2(
	function (blockType, line_) {
		var p = A2($author$project$BlockType$prefixOfBlockType, blockType, line_);
		return A3($elm$core$String$replace, p, '', line_);
	});
var $author$project$Markdown$Parse$incrementRegisterLevel = F2(
	function (level, register) {
		var _v0 = level + 1;
		switch (_v0) {
			case 1:
				return _Utils_Tuple2(
					register.bU + 1,
					_Utils_update(
						register,
						{bU: register.bU + 1, bo: 0, a5: 0, aU: 0}));
			case 2:
				return _Utils_Tuple2(
					register.bo + 1,
					_Utils_update(
						register,
						{bo: register.bo + 1, a5: 0, aU: 0}));
			case 3:
				return _Utils_Tuple2(
					register.a5 + 1,
					_Utils_update(
						register,
						{a5: register.a5 + 1, aU: 0}));
			case 4:
				return _Utils_Tuple2(
					register.aU + 1,
					_Utils_update(
						register,
						{aU: register.aU + 1}));
			default:
				return _Utils_Tuple2(0, register);
		}
	});
var $author$project$BlockType$isCode = function (bt) {
	if ((!bt.$) && (!bt.a.$)) {
		return true;
	} else {
		return false;
	}
};
var $author$project$BlockType$isOListItem = function (blockType) {
	if ((blockType.$ === 1) && (blockType.a.$ === 2)) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Markdown$Parse$updateRegisterAndBlockType = F3(
	function (blockType, level_, register) {
		if ($author$project$BlockType$isOListItem(blockType)) {
			var _v0 = A2($author$project$Markdown$Parse$incrementRegisterLevel, level_, register);
			var index = _v0.a;
			var newRegister = _v0.b;
			var newBlockType = $author$project$BlockType$MarkdownBlock(
				$author$project$BlockType$OListItem(index));
			return _Utils_Tuple2(newBlockType, newRegister);
		} else {
			if ($author$project$BlockType$isCode(blockType)) {
				return _Utils_Tuple2(
					blockType,
					_Utils_update(
						register,
						{
							a_: A2($elm$core$List$cons, blockType, register.a_)
						}));
			} else {
				return _Utils_Tuple2(blockType, $author$project$Markdown$Parse$emptyRegister);
			}
		}
	});
var $author$project$Markdown$Parse$nextStateAtStart = F3(
	function (option, line, fsm) {
		var state = fsm.a;
		var blocks = fsm.b;
		var register = fsm.c;
		var _v0 = A2($author$project$BlockType$get, option, line);
		if (_v0.b.$ === 1) {
			var _v1 = _v0.b;
			return A3($author$project$Markdown$Parse$FSM, $author$project$Markdown$Parse$Error, blocks, register);
		} else {
			var level = _v0.a;
			var blockType = _v0.b.a;
			var newLine = A2($author$project$Markdown$Parse$removePrefix, blockType, line);
			var _v2 = A3($author$project$Markdown$Parse$updateRegisterAndBlockType, blockType, level, register);
			var newBlockType = _v2.a;
			var newRegister = _v2.b;
			return (_Utils_eq(
				newBlockType,
				$author$project$BlockType$MarkdownBlock($author$project$BlockType$TableRow)) && A2($author$project$Markdown$Parse$newBlockTypeIsDifferent, newBlockType, state)) ? A6($author$project$Markdown$Parse$handleTableStart, blockType, level, line, state, blocks, register) : ($author$project$Markdown$Parse$lineIsNotBlank(line) ? A3(
				$author$project$Markdown$Parse$FSM,
				$author$project$Markdown$Parse$InBlock(
					A4(
						$author$project$Markdown$Parse$Block,
						_Utils_Tuple2(-1, -1),
						newBlockType,
						level,
						newLine)),
				blocks,
				newRegister) : fsm);
		}
	});
var $author$project$Markdown$Parse$getTopOfBlockTypeStack = function (_v0) {
	var register = _v0.c;
	return $elm$core$List$head(register.a_);
};
var $author$project$Markdown$Parse$isBalanced = F3(
	function (str, mbt, bt2) {
		if (mbt.$ === 1) {
			if (!bt2.$) {
				return true;
			} else {
				return false;
			}
		} else {
			var bt1 = mbt.a;
			var _v2 = _Utils_Tuple3(
				bt1,
				bt2,
				$elm$core$String$trimLeft(str) === '```\n');
			if (!_v2.b.$) {
				if ((!_v2.a.$) && (!_v2.a.a.$)) {
					return false;
				} else {
					return true;
				}
			} else {
				if ((!_v2.a.$) && (!_v2.a.a.$)) {
					if (!_v2.c) {
						return false;
					} else {
						return true;
					}
				} else {
					return false;
				}
			}
		}
	});
var $author$project$BlockType$isMarkDown = function (bt) {
	if (!bt.$) {
		return false;
	} else {
		return true;
	}
};
var $author$project$Markdown$Parse$addLineToBlock = F2(
	function (line, _v0) {
		var id = _v0.a;
		var blockType_ = _v0.b;
		var level_ = _v0.c;
		var content_ = _v0.d;
		return A4(
			$author$project$Markdown$Parse$Block,
			id,
			blockType_,
			level_,
			_Utils_ap(content_, line));
	});
var $author$project$Markdown$Parse$trimBalancedBlock = function (_v0) {
	var id = _v0.a;
	var bt = _v0.b;
	var lev = _v0.c;
	var content = _v0.d;
	return A4(
		$author$project$Markdown$Parse$Block,
		id,
		bt,
		lev,
		$elm$core$String$trim(content));
};
var $author$project$Markdown$Parse$processBalancedBlock = F3(
	function (blockType, line, fsm) {
		var blocks_ = fsm.b;
		var register = fsm.c;
		if (_Utils_eq(
			$elm$core$Maybe$Just(blockType),
			$author$project$Markdown$Parse$typeOfState(
				$author$project$Markdown$Parse$stateOfFSM(fsm)))) {
			var _v0 = $author$project$Markdown$Parse$stateOfFSM(fsm);
			if (_v0.$ === 1) {
				var block_ = _v0.a;
				var line_ = A2($author$project$Markdown$Parse$removePrefix, blockType, line);
				var block__ = function () {
					if ((!blockType.$) && (blockType.a.$ === 1)) {
						var _v2 = blockType.a;
						return block_;
					} else {
						return $author$project$Markdown$Parse$trimBalancedBlock(block_);
					}
				}();
				return A3(
					$author$project$Markdown$Parse$FSM,
					$author$project$Markdown$Parse$Start,
					A2(
						$elm$core$List$cons,
						A2($author$project$Markdown$Parse$addLineToBlock, line_, block__),
						blocks_),
					register);
			} else {
				return fsm;
			}
		} else {
			var _v3 = $author$project$Markdown$Parse$stateOfFSM(fsm);
			if (_v3.$ === 1) {
				var block_ = _v3.a;
				var line_ = ($elm$core$String$trimLeft(line) === '```\n') ? '\n' : line;
				var block__ = $author$project$Markdown$Parse$trimBalancedBlock(block_);
				return A3(
					$author$project$Markdown$Parse$FSM,
					$author$project$Markdown$Parse$InBlock(
						A4(
							$author$project$Markdown$Parse$Block,
							register.bS,
							blockType,
							$author$project$BlockType$level(line_),
							line_)),
					A2($elm$core$List$cons, block__, blocks_),
					_Utils_update(
						register,
						{
							a_: A2($elm$core$List$drop, 1, register.a_)
						}));
			} else {
				return fsm;
			}
		}
	});
var $author$project$Markdown$Parse$addLineToState = F2(
	function (line, state_) {
		switch (state_.$) {
			case 0:
				return $author$project$Markdown$Parse$Start;
			case 2:
				return $author$project$Markdown$Parse$Error;
			default:
				var block_ = state_.a;
				return $author$project$Markdown$Parse$InBlock(
					A2($author$project$Markdown$Parse$addLineToBlock, line, block_));
		}
	});
var $author$project$Markdown$Parse$addLineToFSM = F2(
	function (line, _v0) {
		var state_ = _v0.a;
		var blocks_ = _v0.b;
		var register = _v0.c;
		switch (state_.$) {
			case 0:
				return A3($author$project$Markdown$Parse$FSM, state_, blocks_, register);
			case 2:
				return A3($author$project$Markdown$Parse$FSM, state_, blocks_, register);
			default:
				var _v2 = $elm$core$List$head(register.T);
				if (_v2.$ === 1) {
					return A3(
						$author$project$Markdown$Parse$FSM,
						A2($author$project$Markdown$Parse$addLineToState, line, state_),
						blocks_,
						register);
				} else {
					var block = _v2.a;
					return A3(
						$author$project$Markdown$Parse$FSM,
						A2($author$project$Markdown$Parse$addLineToState, line, state_),
						A2($elm$core$List$cons, block, blocks_),
						_Utils_update(
							register,
							{
								T: A2($elm$core$List$drop, 1, register.T)
							}));
				}
		}
	});
var $author$project$Markdown$Parse$adjustLevel = function (block) {
	var id = block.a;
	var blockType = block.b;
	var level = block.c;
	var content = block.d;
	if (_Utils_eq(
		blockType,
		$author$project$BlockType$MarkdownBlock($author$project$BlockType$Plain))) {
		var newLevel = $author$project$BlockType$level(content);
		return A4($author$project$Markdown$Parse$Block, id, blockType, newLevel, content);
	} else {
		return block;
	}
};
var $author$project$Markdown$Parse$addNewMarkdownBlock = F4(
	function (option, currentBlock, line, fsm) {
		var id = currentBlock.a;
		var typeOfCurrentBlock = currentBlock.b;
		var blocks = fsm.b;
		var register = fsm.c;
		var _v0 = A2($author$project$BlockType$get, option, line);
		if (_v0.b.$ === 1) {
			var _v1 = _v0.b;
			return fsm;
		} else {
			var level = _v0.a;
			var newBlockType_ = _v0.b.a;
			var newLine = A2($author$project$Markdown$Parse$removePrefix, typeOfCurrentBlock, line);
			var _v2 = A3($author$project$Markdown$Parse$updateRegisterAndBlockType, newBlockType_, level, register);
			var newBlockType = _v2.a;
			var newRegister = _v2.b;
			var newBlock = A4(
				$author$project$Markdown$Parse$Block,
				id,
				newBlockType,
				level,
				A2($author$project$Markdown$Parse$removePrefix, newBlockType, newLine));
			return A3(
				$author$project$Markdown$Parse$FSM,
				$author$project$Markdown$Parse$InBlock(newBlock),
				A2(
					$elm$core$List$cons,
					$author$project$Markdown$Parse$adjustLevel(currentBlock),
					blocks),
				newRegister);
		}
	});
var $author$project$Markdown$Parse$handleInnerTableRow = F6(
	function (blockTypeOfLine, level, line, state, blocks, register) {
		switch (state.$) {
			case 0:
				return A3($author$project$Markdown$Parse$FSM, state, blocks, register);
			case 2:
				return A3($author$project$Markdown$Parse$FSM, state, blocks, register);
			default:
				var tableMarker = A4(
					$author$project$Markdown$Parse$Block,
					_Utils_Tuple2(-1, -1),
					$author$project$BlockType$MarkdownBlock($author$project$BlockType$TableRow),
					level + 1,
					'deleteMe');
				var rowBlock = A4(
					$author$project$Markdown$Parse$Block,
					_Utils_Tuple2(-1, -1),
					blockTypeOfLine,
					level + 1,
					'row');
				var childrenOfNewBlock = A2($author$project$Markdown$Parse$parseTableRow, level + 2, line);
				var newRow = _Utils_ap(
					childrenOfNewBlock,
					_List_fromArray(
						[rowBlock]));
				return A3(
					$author$project$Markdown$Parse$FSM,
					$author$project$Markdown$Parse$InBlock(tableMarker),
					blocks,
					_Utils_update(
						register,
						{
							T: _Utils_ap(register.T, newRow)
						}));
		}
	});
var $author$project$Markdown$Parse$handleTableRow = F6(
	function (blockTypeOfLine, level, line, state, blocks, register) {
		return A2($author$project$Markdown$Parse$newBlockTypeIsDifferent, blockTypeOfLine, state) ? A6($author$project$Markdown$Parse$handleTableStart, blockTypeOfLine, level, line, state, blocks, register) : A6($author$project$Markdown$Parse$handleInnerTableRow, blockTypeOfLine, level, line, state, blocks, register);
	});
var $author$project$BlockType$isBalanced = function (bt) {
	if (!bt.$) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Markdown$Parse$processMarkDownBlock = F5(
	function (option, level, blockTypeOfLine, line, fsm) {
		var state = fsm.a;
		var blocks = fsm.b;
		var register = fsm.c;
		if (state.$ === 1) {
			var currentBlock = state.a;
			var typeOfCurrentBlock = currentBlock.b;
			return $author$project$BlockType$isBalanced(typeOfCurrentBlock) ? A2($author$project$Markdown$Parse$addLineToFSM, line, fsm) : (_Utils_eq(
				blockTypeOfLine,
				$author$project$BlockType$MarkdownBlock($author$project$BlockType$Blank)) ? A3(
				$author$project$Markdown$Parse$FSM,
				$author$project$Markdown$Parse$Start,
				A2(
					$elm$core$List$cons,
					$author$project$Markdown$Parse$adjustLevel(currentBlock),
					blocks),
				register) : ((_Utils_eq(
				blockTypeOfLine,
				$author$project$BlockType$MarkdownBlock($author$project$BlockType$Plain)) && ((!_Utils_eq(
				typeOfCurrentBlock,
				$author$project$BlockType$MarkdownBlock($author$project$BlockType$TableRow))) && $author$project$Markdown$Parse$lineIsNotBlank(line))) ? A2($author$project$Markdown$Parse$addLineToFSM, line, fsm) : (_Utils_eq(
				blockTypeOfLine,
				$author$project$BlockType$MarkdownBlock($author$project$BlockType$TableRow)) ? A6($author$project$Markdown$Parse$handleTableRow, blockTypeOfLine, level, line, state, blocks, register) : A4($author$project$Markdown$Parse$addNewMarkdownBlock, option, currentBlock, line, fsm))));
		} else {
			return fsm;
		}
	});
var $author$project$Markdown$Parse$nextStateInBlock = F3(
	function (option, line, fsm) {
		var register = fsm.c;
		var _v0 = A2($author$project$BlockType$get, option, line);
		if (_v0.b.$ === 1) {
			var _v1 = _v0.b;
			return A3(
				$author$project$Markdown$Parse$FSM,
				$author$project$Markdown$Parse$Error,
				$author$project$Markdown$Parse$blockListOfFSM(fsm),
				register);
		} else {
			var level = _v0.a;
			var blockType = _v0.b.a;
			return A3(
				$author$project$Markdown$Parse$isBalanced,
				line,
				$author$project$Markdown$Parse$getTopOfBlockTypeStack(fsm),
				blockType) ? A3($author$project$Markdown$Parse$processBalancedBlock, blockType, line, fsm) : ($author$project$BlockType$isMarkDown(blockType) ? A5($author$project$Markdown$Parse$processMarkDownBlock, option, level, blockType, line, fsm) : fsm);
		}
	});
var $author$project$Markdown$Parse$nextState = F3(
	function (option, line, fsm_) {
		var fsm = $author$project$Markdown$Parse$handleRegister(fsm_);
		var _v0 = $author$project$Markdown$Parse$stateOfFSM(fsm);
		switch (_v0.$) {
			case 0:
				return A3($author$project$Markdown$Parse$nextStateAtStart, option, line, fsm);
			case 1:
				return A3($author$project$Markdown$Parse$nextStateInBlock, option, line, fsm);
			default:
				return fsm;
		}
	});
var $author$project$Markdown$Parse$runFSM = F2(
	function (option, lines) {
		var folder = F2(
			function (line, fsm) {
				return A3($author$project$Markdown$Parse$nextState, option, line, fsm);
			});
		return A3($elm$core$List$foldl, folder, $author$project$Markdown$Parse$initialFSM, lines);
	});
var $author$project$Markdown$Parse$addToAllButLast = F2(
	function (lines, str) {
		if (!lines.b) {
			return _List_Nil;
		} else {
			if (!lines.b.b) {
				var line = lines.a;
				return _List_fromArray(
					[line]);
			} else {
				var line = lines.a;
				var tailLines = lines.b;
				return A2(
					$elm$core$List$cons,
					_Utils_ap(line, str),
					A2($author$project$Markdown$Parse$addToAllButLast, tailLines, str));
			}
		}
	});
var $author$project$Markdown$Parse$splitIntoLines = function (str) {
	var lines = $elm$core$String$lines(str);
	return A2($author$project$Markdown$Parse$addToAllButLast, lines, '\n');
};
var $author$project$Markdown$Parse$toBlockTree = F2(
	function (option, document) {
		return A3(
			$jxxcarlson$htree$HTree$fromList,
			$author$project$Markdown$Parse$rootBlock,
			$author$project$Markdown$Parse$blockLevel,
			A2(
				$elm$core$List$map,
				$author$project$Markdown$Parse$changeLevel(1),
				$author$project$Markdown$Parse$flush(
					A2(
						$author$project$Markdown$Parse$runFSM,
						option,
						$author$project$Markdown$Parse$splitIntoLines(document)))));
	});
var $author$project$Markdown$Parse$toMDBlockTree = F3(
	function (version, option, document) {
		return A2(
			$zwilias$elm_rosetree$Tree$indexedMap,
			F2(
				function (idx, block) {
					return A3($author$project$Markdown$Parse$setBlockIndex, version, idx, block);
				}),
			A2(
				$zwilias$elm_rosetree$Tree$map,
				$author$project$Markdown$Parse$selectParser(option),
				A2($author$project$Markdown$Parse$toBlockTree, option, document)));
	});
var $author$project$Markdown$LaTeX$export = function (str) {
	return A2(
		$author$project$Markdown$LaTeX$fromAST,
		_Utils_Tuple2(0, 0),
		A3($author$project$Markdown$Parse$toMDBlockTree, 0, 2, str));
};
var $elm$http$Http$Header = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $elm$http$Http$header = $elm$http$Http$Header;
var $author$project$Config$pdfServer = 'https://shoobox.io';
var $elm_community$maybe_extra$Maybe$Extra$cons = F2(
	function (item, list) {
		if (!item.$) {
			var v = item.a;
			return A2($elm$core$List$cons, v, list);
		} else {
			return list;
		}
	});
var $elm_community$maybe_extra$Maybe$Extra$values = A2($elm$core$List$foldr, $elm_community$maybe_extra$Maybe$Extra$cons, _List_Nil);
var $author$project$MiniLatex$Export$toLaTeXWithImages = function (str) {
	var parsand = A2(
		$elm$core$List$map,
		$author$project$Internal$Parser$parse,
		$author$project$Internal$Paragraph$logicalParagraphify(str));
	var latex_ = A3(
		$elm$core$List$foldl,
		F2(
			function (renderedElement, acc) {
				return acc + ('\n' + renderedElement);
			}),
		'',
		A2($elm$core$List$map, $author$project$MiniLatex$Export$renderLatexList, parsand));
	var imageUrlList = $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			$author$project$Internal$ParserTools$macroValue_('image'),
			parsand));
	return _Utils_Tuple2(
		A2(
			$elm$core$String$join,
			'\n',
			_List_fromArray(
				[$author$project$Internal$Source$texPrefix, latex_, $author$project$Internal$Source$texSuffix])),
		imageUrlList);
};
var $author$project$Helper$LaTeX$generatePdf = F3(
	function (docType, uuid, editor) {
		var _v0 = function () {
			switch (docType) {
				case 0:
					return $author$project$MiniLatex$Export$toLaTeXWithImages(
						$author$project$Editor$getContent(editor));
				case 2:
					return $author$project$MiniLatex$Export$toLaTeXWithImages('Not yet implemented');
				case 1:
					return $author$project$MiniLatex$Export$toLaTeXWithImages(
						$author$project$Markdown$LaTeX$export(
							$author$project$Editor$getContent(editor)));
				default:
					return $author$project$MiniLatex$Export$toLaTeXWithImages(
						$author$project$Editor$getContent(editor));
			}
		}();
		var contentForExport = _v0.a;
		var imageUrlList = _v0.b;
		return $elm$http$Http$request(
			{
				fq: $elm$http$Http$jsonBody(
					A3($author$project$Codec$encodeForPDF, uuid, contentForExport, imageUrlList)),
				dP: $elm$http$Http$expectString($author$project$Model$GotPdfLink),
				fY: _List_fromArray(
					[
						A2($elm$http$Http$header, 'Content-Type', 'application/json')
					]),
				gn: 'POST',
				hs: $elm$core$Maybe$Nothing,
				hv: $elm$core$Maybe$Nothing,
				e_: $author$project$Config$pdfServer + '/pdf'
			});
	});
var $TSFoster$elm_uuid$UUID$UUID = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $elm$random$Random$map4 = F5(
	function (func, _v0, _v1, _v2, _v3) {
		var genA = _v0;
		var genB = _v1;
		var genC = _v2;
		var genD = _v3;
		return function (seed0) {
			var _v4 = genA(seed0);
			var a = _v4.a;
			var seed1 = _v4.b;
			var _v5 = genB(seed1);
			var b = _v5.a;
			var seed2 = _v5.b;
			var _v6 = genC(seed2);
			var c = _v6.a;
			var seed3 = _v6.b;
			var _v7 = genD(seed3);
			var d = _v7.a;
			var seed4 = _v7.b;
			return _Utils_Tuple2(
				A4(func, a, b, c, d),
				seed4);
		};
	});
var $TSFoster$elm_uuid$UUID$forceUnsigned = $elm$core$Bitwise$shiftRightZfBy(0);
var $elm$random$Random$maxInt = 2147483647;
var $elm$random$Random$minInt = -2147483648;
var $TSFoster$elm_uuid$UUID$randomU32 = A2(
	$elm$random$Random$map,
	$TSFoster$elm_uuid$UUID$forceUnsigned,
	A2($elm$random$Random$int, $elm$random$Random$minInt, $elm$random$Random$maxInt));
var $elm$core$Bitwise$or = _Bitwise_or;
var $TSFoster$elm_uuid$UUID$toVariant1 = function (_v0) {
	var a = _v0.a;
	var b = _v0.b;
	var c = _v0.c;
	var d = _v0.d;
	return A4(
		$TSFoster$elm_uuid$UUID$UUID,
		a,
		b,
		$TSFoster$elm_uuid$UUID$forceUnsigned(2147483648 | (1073741823 & c)),
		d);
};
var $TSFoster$elm_uuid$UUID$toVersion = F2(
	function (v, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		var c = _v0.c;
		var d = _v0.d;
		return A4(
			$TSFoster$elm_uuid$UUID$UUID,
			a,
			$TSFoster$elm_uuid$UUID$forceUnsigned((v << 12) | (4294905855 & b)),
			c,
			d);
	});
var $TSFoster$elm_uuid$UUID$generator = A2(
	$elm$random$Random$map,
	A2(
		$elm$core$Basics$composeR,
		$TSFoster$elm_uuid$UUID$toVersion(4),
		$TSFoster$elm_uuid$UUID$toVariant1),
	A5($elm$random$Random$map4, $TSFoster$elm_uuid$UUID$UUID, $TSFoster$elm_uuid$UUID$randomU32, $TSFoster$elm_uuid$UUID$randomU32, $TSFoster$elm_uuid$UUID$randomU32, $TSFoster$elm_uuid$UUID$randomU32));
var $elm$core$String$fromList = _String_fromList;
var $TSFoster$elm_uuid$UUID$toHex = F2(
	function (acc, _int) {
		toHex:
		while (true) {
			if (!_int) {
				return $elm$core$String$fromList(acc);
			} else {
				var _char = function () {
					var _v0 = 15 & _int;
					switch (_v0) {
						case 0:
							return '0';
						case 1:
							return '1';
						case 2:
							return '2';
						case 3:
							return '3';
						case 4:
							return '4';
						case 5:
							return '5';
						case 6:
							return '6';
						case 7:
							return '7';
						case 8:
							return '8';
						case 9:
							return '9';
						case 10:
							return 'a';
						case 11:
							return 'b';
						case 12:
							return 'c';
						case 13:
							return 'd';
						case 14:
							return 'e';
						default:
							return 'f';
					}
				}();
				var $temp$acc = A2($elm$core$List$cons, _char, acc),
					$temp$int = _int >>> 4;
				acc = $temp$acc;
				_int = $temp$int;
				continue toHex;
			}
		}
	});
var $TSFoster$elm_uuid$UUID$toStringWith = F2(
	function (sep, _v0) {
		var a = _v0.a;
		var b = _v0.b;
		var c = _v0.c;
		var d = _v0.d;
		return _Utils_ap(
			A3(
				$elm$core$String$padLeft,
				8,
				'0',
				A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, a)),
			_Utils_ap(
				sep,
				_Utils_ap(
					A3(
						$elm$core$String$padLeft,
						4,
						'0',
						A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, b >>> 16)),
					_Utils_ap(
						sep,
						_Utils_ap(
							A3(
								$elm$core$String$padLeft,
								4,
								'0',
								A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, 65535 & b)),
							_Utils_ap(
								sep,
								_Utils_ap(
									A3(
										$elm$core$String$padLeft,
										4,
										'0',
										A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, c >>> 16)),
									_Utils_ap(
										sep,
										_Utils_ap(
											A3(
												$elm$core$String$padLeft,
												4,
												'0',
												A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, 65535 & c)),
											A3(
												$elm$core$String$padLeft,
												8,
												'0',
												A2($TSFoster$elm_uuid$UUID$toHex, _List_Nil, d)))))))))));
	});
var $TSFoster$elm_uuid$UUID$toString = $TSFoster$elm_uuid$UUID$toStringWith('-');
var $author$project$Helper$LaTeX$printToPDF = function (model) {
	var _v0 = A2($elm$random$Random$step, $TSFoster$elm_uuid$UUID$generator, model.ex);
	var newUUID_ = _v0.a;
	var newSeed = _v0.b;
	var uuid = $TSFoster$elm_uuid$UUID$toString(newUUID_);
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{ex: newSeed, hz: uuid}),
		$elm$core$Platform$Cmd$batch(
			_List_fromArray(
				[
					A3($author$project$Helper$LaTeX$generatePdf, model.fL, uuid, model.dL),
					A2(
					$elm$core$Task$perform,
					$elm$core$Basics$always(
						$author$project$Model$ChangePrintingState(1)),
					$elm$core$Process$sleep(1))
				])));
};
var $author$project$Umuli$CYMsg = function (a) {
	return {$: 2, a: a};
};
var $author$project$Markdown$Option$InternalTOC = function (a) {
	return {$: 1, a: a};
};
var $author$project$Umuli$MDMsg = function (a) {
	return {$: 1, a: a};
};
var $author$project$Umuli$MLMsg = function (a) {
	return {$: 0, a: a};
};
var $elm$html$Html$div = _VirtualDom_node('div');
var $author$project$MiniLatex$EditSimple$IDClicked = $elm$core$Basics$identity;
var $elm$html$Html$Attributes$stringProperty = F2(
	function (key, string) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$string(string));
	});
var $elm$html$Html$Attributes$id = $elm$html$Html$Attributes$stringProperty('id');
var $elm$virtual_dom$VirtualDom$keyedNode = function (tag) {
	return _VirtualDom_keyedNode(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$Keyed$node = $elm$virtual_dom$VirtualDom$keyedNode;
var $elm$virtual_dom$VirtualDom$Normal = function (a) {
	return {$: 0, a: a};
};
var $elm$virtual_dom$VirtualDom$on = _VirtualDom_on;
var $elm$html$Html$Events$on = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Normal(decoder));
	});
var $elm$html$Html$Events$onClick = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'click',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$core$String$toUpper = _String_toUpper;
var $author$project$Internal$Utility$capitalize = function (str) {
	return _Utils_ap(
		$elm$core$String$toUpper(
			A2($elm$core$String$left, 1, str)),
		A2($elm$core$String$dropLeft, 1, str));
};
var $elm$html$Html$Attributes$class = $elm$html$Html$Attributes$stringProperty('className');
var $elm$html$Html$code = _VirtualDom_node('code');
var $author$project$Internal$Render$DisplayMathMode = 1;
var $author$project$Internal$MathMacro$enclose = function (arg_) {
	return '{' + (arg_ + '}');
};
var $author$project$Internal$MathMacro$evalNewCommand = F3(
	function (name, nargs, args) {
		return '\\newcommand{\\' + (name + ('}[' + (nargs + (']' + A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				A2($elm$core$Basics$composeR, $author$project$Internal$MathMacro$toText_, $author$project$Internal$MathMacro$enclose),
				args))))));
	});
var $author$project$Internal$MathMacro$toText_ = function (expr) {
	switch (expr.$) {
		case 0:
			var str = expr.a;
			return str;
		case 1:
			var name = expr.a;
			var args = expr.b;
			return '\\' + (name + A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($elm$core$Basics$composeR, $author$project$Internal$MathMacro$toText_, $author$project$Internal$MathMacro$enclose),
					args)));
		case 3:
			var list = expr.a;
			return A2(
				$elm$core$String$join,
				' ',
				A2($elm$core$List$map, $author$project$Internal$MathMacro$toText_, list));
		default:
			var name = expr.a;
			var nargs = expr.b;
			var args = expr.c;
			return A3($author$project$Internal$MathMacro$evalNewCommand, name, nargs, args);
	}
};
var $elm_community$list_extra$List$Extra$getAt = F2(
	function (idx, xs) {
		return (idx < 0) ? $elm$core$Maybe$Nothing : $elm$core$List$head(
			A2($elm$core$List$drop, idx, xs));
	});
var $author$project$Internal$MathMacro$getArg = F2(
	function (k, list) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm_community$list_extra$List$Extra$getAt, k, list));
	});
var $author$project$Internal$MathMacro$replaceArg = F2(
	function (k, f) {
		return function (list) {
			return A3(
				$elm$core$String$replace,
				'#' + $elm$core$String$fromInt(k + 1),
				A2($author$project$Internal$MathMacro$getArg, k, list),
				f(list));
		};
	});
var $author$project$Internal$MathMacro$replaceArgs = F2(
	function (n, f) {
		return A3(
			$elm$core$List$foldl,
			$author$project$Internal$MathMacro$replaceArg,
			f,
			A2($elm$core$List$range, 0, n - 1));
	});
var $author$project$Internal$MathMacro$transform = F2(
	function (n, args) {
		return A2(
			$author$project$Internal$MathMacro$replaceArgs,
			n,
			function (str) {
				return function (list) {
					return str;
				};
			}(
				A2(
					$elm$core$Maybe$withDefault,
					'XXX',
					$elm$core$List$head(
						A2($elm$core$List$map, $author$project$Internal$MathMacro$toText_, args)))));
	});
var $author$project$Internal$MathMacro$evalList = F2(
	function (macroDict_, list) {
		return A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$author$project$Internal$MathMacro$evalMathExpr(macroDict_),
				list));
	});
var $author$project$Internal$MathMacro$evalMacro = F3(
	function (macroDict_, name, args) {
		var _v1 = A2($elm$core$Dict$get, name, macroDict_);
		if (_v1.$ === 1) {
			return '\\' + (name + A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2(
						$elm$core$Basics$composeR,
						$author$project$Internal$MathMacro$evalMathExpr(macroDict_),
						$author$project$Internal$MathMacro$enclose),
					args)));
		} else {
			var _v2 = _v1.a;
			var n = _v2.a;
			var body = _v2.b;
			return A3(
				$author$project$Internal$MathMacro$transform,
				n,
				body,
				A2(
					$elm$core$List$map,
					$author$project$Internal$MathMacro$evalMathExpr(macroDict_),
					args));
		}
	});
var $author$project$Internal$MathMacro$evalMathExpr = F2(
	function (macroDict_, expr) {
		switch (expr.$) {
			case 0:
				var str = expr.a;
				return str;
			case 1:
				var name = expr.a;
				var args = expr.b;
				return A3($author$project$Internal$MathMacro$evalMacro, macroDict_, name, args);
			case 2:
				var name = expr.a;
				var nargs = expr.b;
				var args = expr.c;
				return A3($author$project$Internal$MathMacro$evalNewCommand, name, nargs, args);
			default:
				var list = expr.a;
				return A2($author$project$Internal$MathMacro$evalList, macroDict_, list);
		}
	});
var $elm$core$Result$map2 = F3(
	function (func, ra, rb) {
		if (ra.$ === 1) {
			var x = ra.a;
			return $elm$core$Result$Err(x);
		} else {
			var a = ra.a;
			if (rb.$ === 1) {
				var x = rb.a;
				return $elm$core$Result$Err(x);
			} else {
				var b = rb.a;
				return $elm$core$Result$Ok(
					A2(func, a, b));
			}
		}
	});
var $elm_community$result_extra$Result$Extra$combine = A2(
	$elm$core$List$foldr,
	$elm$core$Result$map2($elm$core$List$cons),
	$elm$core$Result$Ok(_List_Nil));
var $elm$core$Result$map = F2(
	function (func, ra) {
		if (!ra.$) {
			var a = ra.a;
			return $elm$core$Result$Ok(
				func(a));
		} else {
			var e = ra.a;
			return $elm$core$Result$Err(e);
		}
	});
var $author$project$Internal$MathMacro$parseMany = function (str) {
	return A2(
		$elm$core$Result$map,
		$elm$core$List$concat,
		$elm_community$result_extra$Result$Extra$combine(
			A2(
				$elm$core$List$map,
				$author$project$Internal$MathMacro$parse,
				A2(
					$elm$core$List$map,
					$elm$core$String$trim,
					$elm$core$String$lines(
						$elm$core$String$trim(str))))));
};
var $author$project$Internal$MathMacro$evalStr = F2(
	function (macroDict_, str) {
		var _v0 = $author$project$Internal$MathMacro$parseMany(
			$elm$core$String$trim(str));
		if (!_v0.$) {
			var result = _v0.a;
			return A2($author$project$Internal$MathMacro$evalList, macroDict_, result);
		} else {
			return str;
		}
	});
var $elm$json$Json$Encode$bool = _Json_wrap;
var $author$project$Internal$Render$isDisplayMathMode = function (displayMode) {
	if (!displayMode) {
		return false;
	} else {
		return true;
	}
};
var $elm$virtual_dom$VirtualDom$node = function (tag) {
	return _VirtualDom_node(
		_VirtualDom_noScript(tag));
};
var $elm$html$Html$node = $elm$virtual_dom$VirtualDom$node;
var $elm$virtual_dom$VirtualDom$property = F2(
	function (key, value) {
		return A2(
			_VirtualDom_property,
			_VirtualDom_noInnerHtmlOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$html$Html$Attributes$property = $elm$virtual_dom$VirtualDom$property;
var $author$project$Internal$Render$mathText = F2(
	function (displayMode, content) {
		return A3(
			$elm$html$Html$node,
			'math-text',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Attributes$property,
					'delay',
					$elm$json$Json$Encode$bool(false)),
					A2(
					$elm$html$Html$Attributes$property,
					'display',
					$elm$json$Json$Encode$bool(
						$author$project$Internal$Render$isDisplayMathMode(displayMode))),
					A2(
					$elm$html$Html$Attributes$property,
					'content',
					$elm$json$Json$Encode$string(
						A3($elm$core$String$replace, '\\ \\', '\\\\', content)))
				]),
			_List_Nil);
	});
var $author$project$Internal$Render$displayMathText = F2(
	function (latexState, str_) {
		var str = A2($author$project$Internal$MathMacro$evalStr, latexState.gl, str_);
		return A2(
			$author$project$Internal$Render$mathText,
			1,
			$elm$core$String$trim(str));
	});
var $elm$html$Html$span = _VirtualDom_node('span');
var $elm$virtual_dom$VirtualDom$text = _VirtualDom_text;
var $elm$html$Html$text = $elm$virtual_dom$VirtualDom$text;
var $author$project$Internal$Render$enclose = function (msg) {
	return A2(
		$elm$html$Html$span,
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text('{'),
				msg,
				$elm$html$Html$text('}')
			]));
};
var $author$project$Internal$Macro$nArgs = function (latexExpression) {
	if (latexExpression.$ === 6) {
		var name = latexExpression.a;
		var optArgs = latexExpression.b;
		var args = latexExpression.c;
		return $elm$core$List$length(args);
	} else {
		return 0;
	}
};
var $author$project$Internal$Html$div = F2(
	function (attributes, children) {
		var childrenString = A2($elm$core$String$join, '\n', children);
		var attributeString = A2($elm$core$String$join, ' ', attributes);
		return '<div ' + (attributeString + (' >\n' + (childrenString + '\n</div>')));
	});
var $author$project$Internal$RenderToString$getElement = F2(
	function (k, list) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Internal$Parser$LXString('xxx'),
			A2($author$project$Internal$Utility$getAt, k, list));
	});
var $author$project$Internal$RenderToString$itemClass = function (level) {
	return 'item' + $elm$core$String$fromInt(level);
};
var $author$project$Internal$RenderToString$postProcess = function (str) {
	return A3(
		$elm$core$String$replace,
		'\\&',
		'&#38',
		A3(
			$elm$core$String$replace,
			'--',
			'&ndash;',
			A3($elm$core$String$replace, '---', '&mdash;', str)));
};
var $author$project$Internal$RenderToString$renderComment = function (str) {
	return '';
};
var $author$project$Internal$RenderToString$renderCommentEnvironment = F2(
	function (latexState, body) {
		return '';
	});
var $author$project$Internal$RenderToString$renderCell = function (cell) {
	switch (cell.$) {
		case 0:
			var s = cell.a;
			return '<td>' + (s + '</td>');
		case 3:
			var s = cell.a;
			return '<td>$' + (s + '$</td>');
		default:
			return '<td>-</td>';
	}
};
var $author$project$Internal$RenderToString$renderRow = function (row) {
	if (row.$ === 8) {
		var row_ = row.a;
		return function (row__) {
			return '<tr> ' + (row__ + ' </tr>\n');
		}(
			A3(
				$elm$core$List$foldl,
				F2(
					function (cell, acc) {
						return acc + (' ' + $author$project$Internal$RenderToString$renderCell(cell));
					}),
				'',
				row_));
	} else {
		return '<tr>-</tr>';
	}
};
var $author$project$Internal$RenderToString$renderTableBody = function (body) {
	if (body.$ === 8) {
		var body_ = body.a;
		return function (bod) {
			return '<table>\n' + (bod + '</table>\n');
		}(
			A3(
				$elm$core$List$foldl,
				F2(
					function (row, acc) {
						return acc + (' ' + $author$project$Internal$RenderToString$renderRow(row));
					}),
				'',
				body_));
	} else {
		return '<table>-</table>';
	}
};
var $author$project$Internal$RenderToString$renderTabular = F2(
	function (latexState, body) {
		return $author$project$Internal$RenderToString$renderTableBody(body);
	});
var $author$project$Internal$RenderToString$environmentRenderer = function (name) {
	var _v3 = A2(
		$elm$core$Dict$get,
		name,
		$author$project$Internal$RenderToString$cyclic$renderEnvironmentDict());
	if (!_v3.$) {
		var f = _v3.a;
		return f;
	} else {
		return $author$project$Internal$RenderToString$renderDefaultEnvironment(name);
	}
};
var $author$project$Internal$RenderToString$macroRenderer = F4(
	function (name, latexState, optArgs, args) {
		var _v2 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$Internal$RenderToString$cyclic$renderMacroDict());
		if (!_v2.$) {
			var f = _v2.a;
			return A3(f, latexState, optArgs, args);
		} else {
			return A4($author$project$Internal$RenderToString$reproduceMacro, name, latexState, optArgs, args);
		}
	});
var $author$project$Internal$RenderToString$render = F2(
	function (latexState, latexExpression) {
		switch (latexExpression.$) {
			case 1:
				var str = latexExpression.a;
				return $author$project$Internal$RenderToString$renderComment(str);
			case 6:
				var name = latexExpression.a;
				var optArgs = latexExpression.b;
				var args = latexExpression.c;
				return A4($author$project$Internal$RenderToString$renderMacro, latexState, name, optArgs, args);
			case 5:
				var name = latexExpression.a;
				var optArgs = latexExpression.b;
				var args = latexExpression.c;
				var le = latexExpression.d;
				return A5($author$project$Internal$RenderToString$renderSMacro, latexState, name, optArgs, args, le);
			case 2:
				var level = latexExpression.a;
				var latexExpr = latexExpression.b;
				return A3($author$project$Internal$RenderToString$renderItem, latexState, level, latexExpr);
			case 3:
				var str = latexExpression.a;
				return '$' + (str + '$');
			case 4:
				var str = latexExpression.a;
				return '$$' + (str + '$$');
			case 7:
				var name = latexExpression.a;
				var args = latexExpression.b;
				var body = latexExpression.c;
				return A4($author$project$Internal$RenderToString$renderEnvironment, latexState, name, args, body);
			case 8:
				var args = latexExpression.a;
				return A2($author$project$Internal$RenderToString$renderLatexList, latexState, args);
			case 0:
				var str = latexExpression.a;
				return str;
			case 9:
				var commandName = latexExpression.a;
				var numberOfArgs = latexExpression.b;
				var commandBody = latexExpression.c;
				return 'newCommand: ' + commandName;
			default:
				var error = latexExpression.a;
				return A2(
					$elm$core$String$join,
					'; ',
					A2($elm$core$List$map, $author$project$Internal$ErrorMessages2$renderError, error));
		}
	});
var $author$project$Internal$RenderToString$renderAlignEnvironment = F2(
	function (latexState, body) {
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var r = A3(
			$elm$core$String$replace,
			'\\ \\',
			'\\\\',
			A2($author$project$Internal$RenderToString$render, latexState, body));
		var eqno = A2($author$project$Internal$LatexState$getCounter, 'eqno', latexState);
		var addendum = (eqno > 0) ? ((s1 > 0) ? ('\\tag{' + ($elm$core$String$fromInt(s1) + ('.' + ($elm$core$String$fromInt(eqno) + '}')))) : ('\\tag{' + ($elm$core$String$fromInt(eqno) + '}'))) : '';
		return '\n$$\n\\begin{align}\n' + (addendum + (r + '\n\\end{align}\n$$\n'));
	});
var $author$project$Internal$RenderToString$renderArg = F3(
	function (k, latexState, args) {
		return $elm$core$String$trim(
			A2(
				$author$project$Internal$RenderToString$render,
				latexState,
				A2($author$project$Internal$RenderToString$getElement, k, args)));
	});
var $author$project$Internal$RenderToString$renderArgList = F2(
	function (latexState, args) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (x) {
					return '{' + (x + '}');
				},
				A2(
					$elm$core$List$map,
					$author$project$Internal$RenderToString$render(latexState),
					args)));
	});
var $author$project$Internal$RenderToString$renderBibItem = F4(
	function (latexState, optArgs, args, body) {
		var label = ($elm$core$List$length(optArgs) === 1) ? A3($author$project$Internal$RenderToString$renderArg, 0, latexState, optArgs) : A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return ' <p id=bibitem:' + (label + ('>[' + (label + ('] ' + (A2($author$project$Internal$RenderToString$render, latexState, body) + '</p>\n')))));
	});
var $author$project$Internal$RenderToString$renderBozo = F2(
	function (latexState, args) {
		return 'bozo{' + (A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args) + ('}{' + (A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args) + '}')));
	});
var $author$project$Internal$RenderToString$renderCenterEnvironment = F2(
	function (latexState, body) {
		var r = A2($author$project$Internal$RenderToString$render, latexState, body);
		return '\n<div class=\"center\" >\n' + (r + '\n</div>\n');
	});
var $author$project$Internal$RenderToString$renderDefaultEnvironment = F4(
	function (name, latexState, args, body) {
		return A2(
			$elm$core$List$member,
			name,
			_List_fromArray(
				['theorem', 'proposition', 'corollary', 'lemma', 'definition'])) ? A4($author$project$Internal$RenderToString$renderTheoremLikeEnvironment, latexState, name, args, body) : A4($author$project$Internal$RenderToString$renderDefaultEnvironment2, latexState, name, args, body);
	});
var $author$project$Internal$RenderToString$renderDefaultEnvironment2 = F4(
	function (latexState, name, args, body) {
		var r = A2($author$project$Internal$RenderToString$render, latexState, body);
		return '\n<div class=\"environment\">\n<strong>' + (name + ('</strong>\n<div>\n' + (r + '\n</div>\n</div>\n')));
	});
var $author$project$Internal$RenderToString$renderEnumerate = F2(
	function (latexState, body) {
		return '\n<ol>\n' + (A2($author$project$Internal$RenderToString$render, latexState, body) + '\n</ol>\n');
	});
var $author$project$Internal$RenderToString$renderEnvironment = F4(
	function (latexState, name, args, body) {
		return A4($author$project$Internal$RenderToString$environmentRenderer, name, latexState, args, body);
	});
var $author$project$Internal$RenderToString$renderEqnArray = F2(
	function (latexState, body) {
		return '\n$$\n' + (A2($author$project$Internal$RenderToString$render, latexState, body) + '\n$$\n');
	});
var $author$project$Internal$RenderToString$renderEquationEnvironment = F2(
	function (latexState, body) {
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var r = A2($author$project$Internal$RenderToString$render, latexState, body);
		var eqno = A2($author$project$Internal$LatexState$getCounter, 'eqno', latexState);
		var addendum = (eqno > 0) ? ((s1 > 0) ? ('\\tag{' + ($elm$core$String$fromInt(s1) + ('.' + ($elm$core$String$fromInt(eqno) + '}')))) : ('\\tag{' + ($elm$core$String$fromInt(eqno) + '}'))) : '';
		return '\n$$\n\\begin{equation}' + (addendum + (r + '\\end{equation}\n$$\n'));
	});
var $author$project$Internal$RenderToString$renderIndentEnvironment = F2(
	function (latexState, body) {
		return A2(
			$author$project$Internal$Html$div,
			_List_fromArray(
				['style=\"margin-left:2em\"']),
			_List_fromArray(
				[
					A2($author$project$Internal$RenderToString$render, latexState, body)
				]));
	});
var $author$project$Internal$RenderToString$renderItem = F3(
	function (latexState, level, latexExpression) {
		return '<li class=\"' + ($author$project$Internal$RenderToString$itemClass(level) + ('\">' + (A2($author$project$Internal$RenderToString$render, latexState, latexExpression) + '</li>\n')));
	});
var $author$project$Internal$RenderToString$renderItemize = F2(
	function (latexState, body) {
		return '\n<ul>\n' + (A2($author$project$Internal$RenderToString$render, latexState, body) + '\n</ul>\n');
	});
var $author$project$Internal$RenderToString$renderLatexList = F2(
	function (latexState, args) {
		return $author$project$Internal$RenderToString$postProcess(
			$author$project$Internal$JoinStrings$joinList(
				A2(
					$elm$core$List$map,
					$author$project$Internal$RenderToString$render(latexState),
					args)));
	});
var $author$project$Internal$RenderToString$renderListing = F2(
	function (latexState, body) {
		var text = A2($author$project$Internal$RenderToString$render, latexState, body);
		return '\n<pre class=\"verbatim\">' + ($author$project$Internal$Utility$addLineNumbers(text) + '</pre>\n');
	});
var $author$project$Internal$RenderToString$renderMacro = F4(
	function (latexState, name, optArgs, args) {
		return A4($author$project$Internal$RenderToString$macroRenderer, name, latexState, optArgs, args);
	});
var $author$project$Internal$RenderToString$renderMacros = F2(
	function (latexState, body) {
		return '\n$$\n' + (A2($author$project$Internal$RenderToString$render, latexState, body) + '\n$$\n');
	});
var $author$project$Internal$RenderToString$renderOptArgList = F2(
	function (latexState, args) {
		return A2(
			$elm$core$String$join,
			'',
			A2(
				$elm$core$List$map,
				function (x) {
					return '[' + (x + ']');
				},
				A2(
					$elm$core$List$map,
					$author$project$Internal$RenderToString$render(latexState),
					args)));
	});
var $author$project$Internal$RenderToString$renderQuotation = F2(
	function (latexState, body) {
		return A2(
			$author$project$Internal$Html$div,
			_List_fromArray(
				['class=\"quotation\"']),
			_List_fromArray(
				[
					A2($author$project$Internal$RenderToString$render, latexState, body)
				]));
	});
var $author$project$Internal$RenderToString$renderSMacro = F5(
	function (latexState, name, optArgs, args, le) {
		var _v0 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$Internal$RenderToString$cyclic$renderSMacroDict());
		if (!_v0.$) {
			var f = _v0.a;
			return A4(f, latexState, optArgs, args, le);
		} else {
			return '<span style=\"color: red;\">\\' + (name + (A2($author$project$Internal$RenderToString$renderArgList, $author$project$Internal$LatexState$emptyLatexState, args) + (' ' + (A2($author$project$Internal$RenderToString$render, latexState, le) + '</span>'))));
		}
	});
var $author$project$Internal$RenderToString$renderTheBibliography = F2(
	function (latexState, body) {
		return A2(
			$author$project$Internal$Html$div,
			_List_fromArray(
				['style=\"\"']),
			_List_fromArray(
				[
					A2($author$project$Internal$RenderToString$render, latexState, body)
				]));
	});
var $author$project$Internal$RenderToString$renderTheoremLikeEnvironment = F4(
	function (latexState, name, args, body) {
		var tno = A2($author$project$Internal$LatexState$getCounter, 'tno', latexState);
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var tnoString = (s1 > 0) ? (' ' + ($elm$core$String$fromInt(s1) + ('.' + $elm$core$String$fromInt(tno)))) : (' ' + $elm$core$String$fromInt(tno));
		var r = A2($author$project$Internal$RenderToString$render, latexState, body);
		var eqno = A2($author$project$Internal$LatexState$getCounter, 'eqno', latexState);
		return '\n<div class=\"environment\">\n<strong>' + (name + (tnoString + ('</strong>\n<div class=\"italic\">\n' + (r + '\n</div>\n</div>\n'))));
	});
var $author$project$Internal$RenderToString$renderUseForWeb = F2(
	function (latexState, body) {
		return '\n$$\n' + (A2($author$project$Internal$RenderToString$render, latexState, body) + '\n$$\n');
	});
var $author$project$Internal$RenderToString$renderVerbatim = F2(
	function (latexState, body) {
		var body2 = A3(
			$elm$core$String$replace,
			'<',
			'&lt;',
			A3(
				$elm$core$String$replace,
				'>',
				'&gt;',
				A2($author$project$Internal$RenderToString$render, latexState, body)));
		return '\n<pre class=\"verbatim\">' + (body2 + '</pre>\n');
	});
var $author$project$Internal$RenderToString$renderVerse = F2(
	function (latexState, body) {
		return A2(
			$author$project$Internal$Html$div,
			_List_fromArray(
				['class=\"verse\"']),
			_List_fromArray(
				[
					$elm$core$String$trim(
					A2($author$project$Internal$RenderToString$render, latexState, body))
				]));
	});
var $author$project$Internal$RenderToString$reproduceMacro = F4(
	function (name, latexState, optArgs, args) {
		return '<span style=\"color: red;\">\\' + (name + (A2($author$project$Internal$RenderToString$renderOptArgList, $author$project$Internal$LatexState$emptyLatexState, optArgs) + (A2($author$project$Internal$RenderToString$renderArgList, $author$project$Internal$LatexState$emptyLatexState, args) + '</span>')));
	});
function $author$project$Internal$RenderToString$cyclic$renderEnvironmentDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'align',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderAlignEnvironment, x, y);
					})),
				_Utils_Tuple2(
				'center',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderCenterEnvironment, x, y);
					})),
				_Utils_Tuple2(
				'comment',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderCommentEnvironment, x, y);
					})),
				_Utils_Tuple2(
				'indent',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderIndentEnvironment, x, y);
					})),
				_Utils_Tuple2(
				'enumerate',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderEnumerate, x, y);
					})),
				_Utils_Tuple2(
				'eqnarray',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderEqnArray, x, y);
					})),
				_Utils_Tuple2(
				'equation',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderEquationEnvironment, x, y);
					})),
				_Utils_Tuple2(
				'itemize',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderItemize, x, y);
					})),
				_Utils_Tuple2(
				'listing',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderListing, x, y);
					})),
				_Utils_Tuple2(
				'macros',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderMacros, x, y);
					})),
				_Utils_Tuple2(
				'quotation',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderQuotation, x, y);
					})),
				_Utils_Tuple2(
				'tabular',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderTabular, x, y);
					})),
				_Utils_Tuple2(
				'thebibliography',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderTheBibliography, x, y);
					})),
				_Utils_Tuple2(
				'maskforweb',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderCommentEnvironment, x, y);
					})),
				_Utils_Tuple2(
				'useforweb',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderUseForWeb, x, y);
					})),
				_Utils_Tuple2(
				'verbatim',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderVerbatim, x, y);
					})),
				_Utils_Tuple2(
				'verse',
				F3(
					function (x, a, y) {
						return A2($author$project$Internal$RenderToString$renderVerse, x, y);
					}))
			]));
}
function $author$project$Internal$RenderToString$cyclic$renderMacroDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'italic',
				F3(
					function (x, y, z) {
						return A2($author$project$Internal$RenderToString$renderBozo, x, z);
					}))
			]));
}
function $author$project$Internal$RenderToString$cyclic$renderSMacroDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'bibitem',
				F4(
					function (latexState, optArgs, args, body) {
						return A4($author$project$Internal$RenderToString$renderBibItem, latexState, optArgs, args, body);
					}))
			]));
}
var $author$project$Internal$RenderToString$renderEnvironmentDict = $author$project$Internal$RenderToString$cyclic$renderEnvironmentDict();
$author$project$Internal$RenderToString$cyclic$renderEnvironmentDict = function () {
	return $author$project$Internal$RenderToString$renderEnvironmentDict;
};
var $author$project$Internal$RenderToString$renderMacroDict = $author$project$Internal$RenderToString$cyclic$renderMacroDict();
$author$project$Internal$RenderToString$cyclic$renderMacroDict = function () {
	return $author$project$Internal$RenderToString$renderMacroDict;
};
var $author$project$Internal$RenderToString$renderSMacroDict = $author$project$Internal$RenderToString$cyclic$renderSMacroDict();
$author$project$Internal$RenderToString$cyclic$renderSMacroDict = function () {
	return $author$project$Internal$RenderToString$renderSMacroDict;
};
var $author$project$Internal$Macro$renderArg = F2(
	function (k, macro) {
		if (macro.$ === 6) {
			var name = macro.a;
			var optArgs = macro.b;
			var args = macro.c;
			return A3($author$project$Internal$RenderToString$renderArg, k - 1, $author$project$Internal$LatexState$emptyLatexState, args);
		} else {
			return '';
		}
	});
var $author$project$Internal$Macro$substituteOne = F3(
	function (k, macro, str) {
		var hashK = '#' + $elm$core$String$fromInt(k);
		var arg = A2($author$project$Internal$Macro$renderArg, k, macro);
		return A3($elm$core$String$replace, hashK, arg, str);
	});
var $author$project$Internal$Macro$substituteMany = F3(
	function (k, macro, str) {
		substituteMany:
		while (true) {
			if (!k) {
				return str;
			} else {
				var $temp$k = k - 1,
					$temp$macro = macro,
					$temp$str = A3($author$project$Internal$Macro$substituteOne, k, macro, str);
				k = $temp$k;
				macro = $temp$macro;
				str = $temp$str;
				continue substituteMany;
			}
		}
	});
var $author$project$Internal$Macro$substitute = F2(
	function (macro, str) {
		return A3(
			$author$project$Internal$Macro$substituteMany,
			$author$project$Internal$Macro$nArgs(macro),
			macro,
			str);
	});
var $author$project$Internal$Macro$expandMacro_ = F2(
	function (macro, macroDef) {
		switch (macroDef.$) {
			case 1:
				var str = macroDef.a;
				return $author$project$Internal$Parser$Comment(str);
			case 6:
				var name = macroDef.a;
				var optArgs = macroDef.b;
				var args = macroDef.c;
				return A3(
					$author$project$Internal$Parser$Macro,
					name,
					optArgs,
					A2(
						$elm$core$List$map,
						$author$project$Internal$Macro$expandMacro_(macro),
						args));
			case 5:
				var name = macroDef.a;
				var optArgs = macroDef.b;
				var args = macroDef.c;
				var le = macroDef.d;
				return A4(
					$author$project$Internal$Parser$SMacro,
					name,
					optArgs,
					A2(
						$elm$core$List$map,
						$author$project$Internal$Macro$expandMacro_(macro),
						args),
					A2($author$project$Internal$Macro$expandMacro_, macro, le));
			case 2:
				var level = macroDef.a;
				var latexExpr = macroDef.b;
				return A2(
					$author$project$Internal$Parser$Item,
					level,
					A2($author$project$Internal$Macro$expandMacro_, macro, latexExpr));
			case 3:
				var str = macroDef.a;
				return $author$project$Internal$Parser$InlineMath(str);
			case 4:
				var str = macroDef.a;
				return $author$project$Internal$Parser$DisplayMath(str);
			case 7:
				var name = macroDef.a;
				var args = macroDef.b;
				var body = macroDef.c;
				return A3(
					$author$project$Internal$Parser$Environment,
					name,
					args,
					A2($author$project$Internal$Macro$expandMacro_, macro, body));
			case 8:
				var latexList = macroDef.a;
				return $author$project$Internal$Parser$LatexList(
					A2(
						$elm$core$List$map,
						$author$project$Internal$Macro$expandMacro_(macro),
						latexList));
			case 0:
				var str = macroDef.a;
				return $author$project$Internal$Parser$LXString(
					A2($author$project$Internal$Macro$substitute, macro, str));
			case 9:
				var commandName = macroDef.a;
				var numberOfArgs = macroDef.b;
				var commandBody = macroDef.c;
				return A3(
					$author$project$Internal$Parser$NewCommand,
					commandName,
					numberOfArgs,
					A2($author$project$Internal$Macro$expandMacro_, macro, commandBody));
			default:
				var error = macroDef.a;
				return $author$project$Internal$Parser$LXError(error);
		}
	});
var $author$project$Internal$Macro$expandMacro = F2(
	function (macro, macroDef) {
		var _v0 = A2($author$project$Internal$Macro$expandMacro_, macro, macroDef);
		if (_v0.$ === 9) {
			var latexList = _v0.c;
			return latexList;
		} else {
			return $author$project$Internal$Parser$LXString('error');
		}
	});
var $author$project$Internal$Render$getElement = F2(
	function (k, list) {
		return A2(
			$elm$core$Maybe$withDefault,
			$author$project$Internal$Parser$LXString('xxx'),
			A2($author$project$Internal$Utility$getAt, k, list));
	});
var $elm$html$Html$h2 = _VirtualDom_node('h2');
var $elm$html$Html$h3 = _VirtualDom_node('h3');
var $elm$html$Html$h4 = _VirtualDom_node('h4');
var $elm$virtual_dom$VirtualDom$style = _VirtualDom_style;
var $elm$html$Html$Attributes$style = $elm$virtual_dom$VirtualDom$style;
var $author$project$Internal$Render$headingStyle = F2(
	function (ref, h) {
		return _List_fromArray(
			[
				$elm$html$Html$Attributes$id(ref),
				A2(
				$elm$html$Html$Attributes$style,
				'margin-top',
				$elm$core$String$fromFloat(h) + 'px'),
				A2(
				$elm$html$Html$Attributes$style,
				'margin-bottom',
				$elm$core$String$fromFloat(0.0 * h) + 'px')
			]);
	});
var $elm$html$Html$i = _VirtualDom_node('i');
var $elm$core$String$toLower = _String_toLower;
var $elm$regex$Regex$Match = F4(
	function (match, index, number, submatches) {
		return {f6: index, bW: match, gq: number, eT: submatches};
	});
var $elm$regex$Regex$fromStringWith = _Regex_fromStringWith;
var $elm$regex$Regex$fromString = function (string) {
	return A2(
		$elm$regex$Regex$fromStringWith,
		{dt: false, eg: false},
		string);
};
var $elm$regex$Regex$replace = _Regex_replaceAtMost(_Regex_infinity);
var $author$project$Internal$Render$userReplace = F3(
	function (userRegex, replacer, string) {
		var _v0 = $elm$regex$Regex$fromString(userRegex);
		if (_v0.$ === 1) {
			return string;
		} else {
			var regex = _v0.a;
			return A3($elm$regex$Regex$replace, regex, replacer, string);
		}
	});
var $author$project$Internal$Render$compress = F2(
	function (replaceBlank, str) {
		return A3(
			$author$project$Internal$Render$userReplace,
			'[,;.!?&_]',
			function (_v0) {
				return '';
			},
			A3(
				$elm$core$String$replace,
				' ',
				replaceBlank,
				$elm$core$String$toLower(str)));
	});
var $author$project$Internal$Render$makeId = F2(
	function (prefix, name) {
		return A2(
			$elm$core$String$join,
			'_',
			_List_fromArray(
				[
					'',
					prefix,
					A2($author$project$Internal$Render$compress, '_', name)
				]));
	});
var $author$project$Internal$Render$idPhrase = F2(
	function (prefix, name) {
		var compressedName = A3(
			$elm$core$String$replace,
			' ',
			'_',
			$elm$core$String$toLower(name));
		return A2($author$project$Internal$Render$makeId, prefix, name);
	});
var $author$project$Internal$Render$InlineMathMode = 0;
var $author$project$Internal$Render$inlineMathText = F2(
	function (latexState, str_) {
		var str = A2($author$project$Internal$MathMacro$evalStr, latexState.gl, str_);
		return A2(
			$author$project$Internal$Render$mathText,
			0,
			$elm$core$String$trim(str));
	});
var $elm$html$Html$li = _VirtualDom_node('li');
var $elm$html$Html$ol = _VirtualDom_node('ol');
var $author$project$Internal$Render$oneSpace = $elm$html$Html$text(' ');
var $elm$html$Html$p = _VirtualDom_node('p');
var $author$project$Internal$Render$renderAttachNote = F3(
	function (_v0, latexState, args) {
		var content = A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args);
		var author = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'column')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'color', 'blue')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(author)
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'background-color', 'yellow')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(content)
						]))
				]));
	});
var $author$project$Internal$Render$renderAuthor = F3(
	function (_v0, latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderBegin = F3(
	function (_v0, latexState, args) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('\\begin')
				]));
	});
var $author$project$Internal$Render$renderBigSkip = F3(
	function (_v0, latexState, args) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'height', '40px')
				]),
			_List_Nil);
	});
var $author$project$Internal$Render$renderBlue = F3(
	function (_v0, latexState, args) {
		var arg = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'color', 'blue')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(arg)
				]));
	});
var $elm$html$Html$a = _VirtualDom_node('a');
var $author$project$Internal$LatexState$getDictionaryItem = F2(
	function (key, latexState) {
		var _v0 = A2($elm$core$Dict$get, key, latexState.dH);
		if (!_v0.$) {
			var value = _v0.a;
			return value;
		} else {
			return '';
		}
	});
var $elm$html$Html$Attributes$href = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'href',
		_VirtualDom_noJavaScriptUri(url));
};
var $elm$html$Html$strong = _VirtualDom_node('strong');
var $author$project$Internal$Render$renderCite = F3(
	function (_v0, latexState, args) {
		var label_ = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		var ref = A2($author$project$Internal$LatexState$getDictionaryItem, 'bibitem:' + label_, latexState);
		var label = (ref !== '') ? ref : label_;
		return A2(
			$elm$html$Html$strong,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$span,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('[')
						])),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href('#bibitem:' + label)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						])),
					A2(
					$elm$html$Html$span,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('] ')
						]))
				]));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$HCode = $elm$core$Basics$identity;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style1 = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style2 = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style3 = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style4 = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style5 = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleToFragment = function (a) {
	switch (a) {
		case 0:
			return _Utils_Tuple2(4, 'css-ar-i');
		case 1:
			return _Utils_Tuple2(6, 'css-ar-p');
		case 2:
			return _Utils_Tuple2(4, 'css-ar-k');
		default:
			return _Utils_Tuple2(5, 'css-ar-v');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Default = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style7 = 8;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeSelectorToFragment = function (att) {
	switch (att) {
		case 0:
			return _Utils_Tuple2(6, 'css-s-a-an');
		case 1:
			return _Utils_Tuple2(3, 'css-s-a-av');
		default:
			return _Utils_Tuple2(4, 'css-s-a-o');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$selectorToFragment = function (s) {
	switch (s.$) {
		case 0:
			return _Utils_Tuple2(4, 'css-s-e');
		case 1:
			return _Utils_Tuple2(6, 'css-s-i');
		case 2:
			return _Utils_Tuple2(6, 'css-s-cl');
		case 3:
			return _Utils_Tuple2(8, 'css-s-c');
		case 4:
			return _Utils_Tuple2(4, 'css-s-u');
		case 5:
			var att = s.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeSelectorToFragment(att);
		case 6:
			return _Utils_Tuple2(0, 'css-s-pe');
		default:
			return _Utils_Tuple2(0, 'css-s-pc');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$syntaxToStyle = function (syntax) {
	switch (syntax.$) {
		case 0:
			return _Utils_Tuple2(3, 'css-s');
		case 1:
			var a = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleToFragment(a);
		case 2:
			var s = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$selectorToFragment(s);
		case 3:
			return _Utils_Tuple2(5, 'css-p');
		case 4:
			return _Utils_Tuple2(5, 'css-pv');
		case 5:
			return _Utils_Tuple2(2, 'css-n');
		default:
			return _Utils_Tuple2(4, 'css-u');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine = function (fragments) {
	return {fT: fragments, ag: $elm$core$Maybe$Nothing};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak = {$: 2};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Comment = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment = F2(
	function (toStyle, _v0) {
		var syntax = _v0.a;
		var text = _v0.b;
		switch (syntax.$) {
			case 0:
				return {e7: '', gH: 0, cw: text};
			case 1:
				return {e7: '', gH: 1, cw: text};
			case 2:
				return {e7: '', gH: 0, cw: text};
			default:
				var c = syntax.a;
				var _v2 = toStyle(c);
				var requiredStyle = _v2.a;
				var additionalClass = _v2.b;
				return {e7: additionalClass, gH: requiredStyle, cw: text};
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp = F3(
	function (toStyle, _v0, _v1) {
		var syntax = _v0.a;
		var text = _v0.b;
		var lines = _v1.a;
		var fragments = _v1.b;
		var maybeLastSyntax = _v1.c;
		if (_Utils_eq(syntax, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak)) {
			return _Utils_Tuple3(
				A2(
					$elm$core$List$cons,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(fragments),
					lines),
				_List_fromArray(
					[
						A2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
						toStyle,
						_Utils_Tuple2(syntax, text))
					]),
				$elm$core$Maybe$Nothing);
		} else {
			if (_Utils_eq(
				$elm$core$Maybe$Just(syntax),
				maybeLastSyntax)) {
				if (fragments.b) {
					var headFrag = fragments.a;
					var tailFrags = fragments.b;
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							_Utils_update(
								headFrag,
								{
									cw: _Utils_ap(text, headFrag.cw)
								}),
							tailFrags),
						maybeLastSyntax);
				} else {
					return _Utils_Tuple3(
						lines,
						A2(
							$elm$core$List$cons,
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
								toStyle,
								_Utils_Tuple2(syntax, text)),
							fragments),
						maybeLastSyntax);
				}
			} else {
				return _Utils_Tuple3(
					lines,
					A2(
						$elm$core$List$cons,
						A2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toFragment,
							toStyle,
							_Utils_Tuple2(syntax, text)),
						fragments),
					$elm$core$Maybe$Just(syntax));
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines = F2(
	function (toStyle, revTokens) {
		return function (_v0) {
			var lines = _v0.a;
			var frags = _v0.b;
			return A2(
				$elm$core$List$cons,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$newLine(frags),
				lines);
		}(
			A3(
				$elm$core$List$foldl,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLinesHelp(toStyle),
				_Utils_Tuple3(_List_Nil, _List_Nil, $elm$core$Maybe$Nothing),
				revTokens));
	});
var $elm$parser$Parser$map = $elm$parser$Parser$Advanced$map;
var $elm$parser$Parser$toAdvancedStep = function (step) {
	if (!step.$) {
		var s = step.a;
		return $elm$parser$Parser$Advanced$Loop(s);
	} else {
		var a = step.a;
		return $elm$parser$Parser$Advanced$Done(a);
	}
};
var $elm$parser$Parser$loop = F2(
	function (state, callback) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			state,
			function (s) {
				return A2(
					$elm$parser$Parser$map,
					$elm$parser$Parser$toAdvancedStep,
					callback(s));
			});
	});
var $elm$parser$Parser$Done = function (a) {
	return {$: 1, a: a};
};
var $elm$parser$Parser$Loop = function (a) {
	return {$: 0, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal = {$: 0};
var $elm$parser$Parser$andThen = $elm$parser$Parser$Advanced$andThen;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule = function (a) {
	return {$: 1, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C = function (a) {
	return {$: 3, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Identifier = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Prefix = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$String = {$: 0};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRuleValue = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Keyword = 2;
var $elm$parser$Parser$UnexpectedChar = {$: 11};
var $elm$parser$Parser$chompIf = function (isGood) {
	return A2($elm$parser$Parser$Advanced$chompIf, isGood, $elm$parser$Parser$UnexpectedChar);
};
var $elm$parser$Parser$chompWhile = $elm$parser$Parser$Advanced$chompWhile;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile = function (isNotRelevant) {
	return A2(
		$elm$parser$Parser$ignorer,
		A2(
			$elm$parser$Parser$ignorer,
			$elm$parser$Parser$succeed(0),
			$elm$parser$Parser$chompIf(isNotRelevant)),
		$elm$parser$Parser$chompWhile(isNotRelevant));
};
var $elm$parser$Parser$getChompedString = $elm$parser$Parser$Advanced$getChompedString;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['and', 'or', 'not', 'only']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isAtRuleKeyword = function (n) {
	return A2($elm$core$Set$member, n, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isCommentChar = function (c) {
	return c === '/';
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak = function (c) {
	return c === '\n';
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace = function (c) {
	return (c === ' ') || (c === '\t');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$selectorNameInvalidCharSet = $elm$core$Set$fromList(
	_List_fromArray(
		[':', '{', '}', ',', '.', '#', '>', '+', '~', '*', '[', ']', '|', ';', '(', ')']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isCommentChar(c) || A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$selectorNameInvalidCharSet)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleKeywordOrValue = function (revTokens) {
	return A2(
		$elm$parser$Parser$map,
		function (n) {
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isAtRuleKeyword(n) ? A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(2)),
					n),
				revTokens) : A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(3)),
					n),
				revTokens);
		},
		$elm$parser$Parser$getChompedString(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleSet = $elm$core$Set$fromList(
	_List_fromArray(
		['@page', '@font-face', '@swash', '@annotation', '@ornaments', '@stylistic', '@styleset', '@character-variant']));
var $elm$parser$Parser$oneOf = $elm$parser$Parser$Advanced$oneOf;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment = {$: 1};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen = F3(
	function (f, list, plist) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					_Utils_ap(n, list));
			},
			plist);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen = F3(
	function (f, list, pn) {
		return A2(
			$elm$parser$Parser$andThen,
			function (n) {
				return f(
					A2($elm$core$List$cons, n, list));
			},
			pn);
	});
var $elm$parser$Parser$ExpectingEnd = {$: 10};
var $elm$parser$Parser$Advanced$end = function (x) {
	return function (s) {
		return _Utils_eq(
			$elm$core$String$length(s.g2),
			s.bZ) ? A3($elm$parser$Parser$Advanced$Good, false, 0, s) : A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $elm$parser$Parser$end = $elm$parser$Parser$Advanced$end($elm$parser$Parser$ExpectingEnd);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile = F2(
	function (isNotRelevant, previousParser) {
		return A2(
			$elm$parser$Parser$ignorer,
			previousParser,
			$elm$parser$Parser$chompWhile(isNotRelevant));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable = F2(
	function (options, revAList) {
		var innerParsers = options.d$;
		var end = options.dN;
		var isNotRelevant = options.d3;
		var defaultMap = options.dF;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							defaultMap(end),
							revAList)),
					$elm$parser$Parser$symbol(end)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable = F3(
	function (nestLevel, options, revAList) {
		var innerParsers = options.d$;
		var end = options.dN;
		var start = options.g3;
		var isNotRelevant = options.d3;
		var defaultMap = options.dF;
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return (nestLevel === 1) ? $elm$parser$Parser$succeed(n) : A3($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel - 1, options, n);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								defaultMap(end),
								revAList)),
						$elm$parser$Parser$symbol(end))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel + 1, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$symbol(start))))),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable(options),
					revAList,
					$elm$parser$Parser$oneOf(innerParsers)),
					A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(revAList),
					$elm$parser$Parser$end),
					A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable, nestLevel, options),
					revAList,
					A2(
						$elm$parser$Parser$map,
						defaultMap,
						$elm$parser$Parser$getChompedString(
							A2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
								isNotRelevant,
								$elm$parser$Parser$chompIf(
									$elm$core$Basics$always(true))))))
				]));
	});
var $elm$parser$Parser$Problem = function (a) {
	return {$: 12, a: a};
};
var $elm$parser$Parser$Advanced$problem = function (x) {
	return function (s) {
		return A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, x));
	};
};
var $elm$parser$Parser$problem = function (msg) {
	return $elm$parser$Parser$Advanced$problem(
		$elm$parser$Parser$Problem(msg));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp = F2(
	function (options, revAList) {
		var isNotRelevant = options.d3;
		var end = options.dN;
		var start = options.g3;
		var _v0 = _Utils_Tuple2(
			$elm$core$String$uncons(options.g3),
			$elm$core$String$uncons(options.dN));
		if (_v0.a.$ === 1) {
			var _v1 = _v0.a;
			return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the start token cannot be an empty string!');
		} else {
			if (_v0.b.$ === 1) {
				var _v2 = _v0.b;
				return $elm$parser$Parser$problem('Trying to parse a delimited helper, but the end token cannot be an empty string!');
			} else {
				var _v3 = _v0.a.a;
				var startChar = _v3.a;
				var _v4 = _v0.b.a;
				var endChar = _v4.a;
				return options.d2 ? A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedNestable,
					1,
					_Utils_update(
						options,
						{
							d3: function (c) {
								return isNotRelevant(c) && ((!_Utils_eq(c, startChar)) && (!_Utils_eq(c, endChar)));
							}
						}),
					revAList) : A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedUnnestable,
					_Utils_update(
						options,
						{
							d3: function (c) {
								return isNotRelevant(c) && (!_Utils_eq(c, endChar));
							}
						}),
					revAList);
			}
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited = function (options) {
	var defaultMap = options.dF;
	var isNotRelevant = options.d3;
	var start = options.g3;
	return A2(
		$elm$parser$Parser$andThen,
		function (n) {
			return A2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimitedHelp,
				options,
				_List_fromArray(
					[n]));
		},
		A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				defaultMap(start)),
			$elm$parser$Parser$symbol(start)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$comment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		dF: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		dN: '*/',
		d$: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$lineBreak]),
		d2: false,
		d3: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		g3: '/*'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$keyframesOrCounterStyle = function (a) {
	return A2(
		$elm$parser$Parser$loop,
		_List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(0)),
				a)
			]),
		function (ns) {
			return $elm$parser$Parser$oneOf(
				_List_fromArray(
					[
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(ns),
						A2(
						$elm$parser$Parser$map,
						function (b) {
							return $elm$parser$Parser$Loop(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
											$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(1)),
										b),
									ns));
						},
						$elm$parser$Parser$getChompedString(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar))),
						A2(
						$elm$parser$Parser$map,
						function (b) {
							return $elm$parser$Parser$Loop(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
									ns));
						},
						$elm$parser$Parser$getChompedString(
							$elm$parser$Parser$chompIf(
								function (c) {
									return c !== '{';
								}))),
						$elm$parser$Parser$succeed(
						$elm$parser$Parser$Done(ns))
					]));
		});
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$nestableAtRuleOpener = function (ns) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				$elm$core$Basics$always(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '{'),
						ns)),
				$elm$parser$Parser$symbol('{')),
				$elm$parser$Parser$succeed(ns)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Number = {$: 5};
var $elm$parser$Parser$backtrackable = $elm$parser$Parser$Advanced$backtrackable;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet = $elm$core$Set$fromList(
	_List_fromArray(
		['\'', '\"', '\\', 'n', 'r', 't', 'b', 'f', 'v']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapableSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('\\'))),
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$cssEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Number),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable = function (c) {
	return c === '\\';
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$quoteDelimiter = {
	dF: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$String),
			b);
	},
	dN: '\'',
	d$: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$lineBreak, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$cssEscapable]),
	d2: false,
	d3: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	g3: '\''
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$quoteDelimiter,
		{dN: '\"', g3: '\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$quoteDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringLiteral = function (revTokens) {
	return A2(
		$elm$parser$Parser$map,
		function (n) {
			return _Utils_ap(n, revTokens);
		},
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$quote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$doubleQuote])));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$mediaOrSupports = function (a) {
	return A2(
		$elm$parser$Parser$andThen,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$nestableAtRuleOpener,
		A2(
			$elm$parser$Parser$loop,
			_List_fromArray(
				[
					_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(0)),
					a)
				]),
			function (ns) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(ns),
							A2(
							$elm$parser$Parser$map,
							$elm$parser$Parser$Loop,
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringLiteral(ns)),
							A2(
							$elm$parser$Parser$map,
							$elm$parser$Parser$Loop,
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleKeywordOrValue(ns)),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return $elm$parser$Parser$Loop(
									A2(
										$elm$core$List$cons,
										_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
										ns));
							},
							$elm$parser$Parser$getChompedString(
								$elm$parser$Parser$chompIf(
									function (c) {
										return c !== '{';
									}))),
							$elm$parser$Parser$succeed(
							$elm$parser$Parser$Done(ns))
						]));
			}));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$PropertyValue = {$: 4};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringArg = F2(
	function (fnStr, revTokens) {
		return A2(
			$elm$parser$Parser$andThen,
			function (revT_) {
				return $elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringLiteral(revT_),
							A2(
							$elm$parser$Parser$map,
							function (n) {
								return A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$String),
										n),
									revT_);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									function (c) {
										return c !== ')';
									}))),
							$elm$parser$Parser$succeed(revT_)
						]));
			},
			A2(
				$elm$parser$Parser$map,
				$elm$core$Basics$always(
					A2(
						$elm$core$List$cons,
						_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$PropertyValue),
								fnStr),
							revTokens))),
				$elm$parser$Parser$symbol(fnStr + '(')));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleHelper = function (a) {
	switch (a) {
		case '@import':
			return A2(
				$elm$parser$Parser$loop,
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(0)),
						a)
					]),
				function (ns) {
					return $elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(ns),
								A2(
								$elm$parser$Parser$map,
								$elm$parser$Parser$Loop,
								A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringArg, 'url', ns)),
								A2(
								$elm$parser$Parser$map,
								$elm$parser$Parser$Loop,
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringLiteral(ns)),
								A2(
								$elm$parser$Parser$map,
								$elm$parser$Parser$Loop,
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleKeywordOrValue(ns)),
								A2(
								$elm$parser$Parser$map,
								function (b) {
									return $elm$parser$Parser$Loop(
										A2(
											$elm$core$List$cons,
											_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
											ns));
								},
								$elm$parser$Parser$getChompedString(
									$elm$parser$Parser$chompIf(
										function (c) {
											return c !== ';';
										}))),
								$elm$parser$Parser$succeed(
								$elm$parser$Parser$Done(ns))
							]));
				});
		case '@namespace':
			return A2(
				$elm$parser$Parser$loop,
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(0)),
						a)
					]),
				function (ns) {
					return $elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(ns),
								A2(
								$elm$parser$Parser$map,
								$elm$parser$Parser$Loop,
								A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringArg, 'url', ns)),
								A2(
								$elm$parser$Parser$map,
								$elm$parser$Parser$Loop,
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringLiteral(ns)),
								A2(
								$elm$parser$Parser$map,
								function (b) {
									return $elm$parser$Parser$Loop(
										A2(
											$elm$core$List$cons,
											_Utils_Tuple2(
												$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
													$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(1)),
												b),
											ns));
								},
								$elm$parser$Parser$getChompedString(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar))),
								A2(
								$elm$parser$Parser$map,
								function (b) {
									return $elm$parser$Parser$Loop(
										A2(
											$elm$core$List$cons,
											_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
											ns));
								},
								$elm$parser$Parser$getChompedString(
									$elm$parser$Parser$chompIf(
										function (c) {
											return c !== ';';
										}))),
								$elm$parser$Parser$succeed(
								$elm$parser$Parser$Done(ns))
							]));
				});
		case '@charset':
			return A2(
				$elm$parser$Parser$loop,
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(0)),
						a)
					]),
				function (ns) {
					return $elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(ns),
								A2(
								$elm$parser$Parser$map,
								$elm$parser$Parser$Loop,
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringLiteral(ns)),
								A2(
								$elm$parser$Parser$map,
								function (b) {
									return $elm$parser$Parser$Loop(
										A2(
											$elm$core$List$cons,
											_Utils_Tuple2(
												$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$String),
												b),
											ns));
								},
								$elm$parser$Parser$getChompedString(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar))),
								A2(
								$elm$parser$Parser$map,
								function (b) {
									return $elm$parser$Parser$Loop(
										A2(
											$elm$core$List$cons,
											_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
											ns));
								},
								$elm$parser$Parser$getChompedString(
									$elm$parser$Parser$chompIf(
										function (c) {
											return c !== ';';
										}))),
								$elm$parser$Parser$succeed(
								$elm$parser$Parser$Done(ns))
							]));
				});
		case '@media':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$mediaOrSupports(a);
		case '@supports':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$mediaOrSupports(a);
		case '@keyframes':
			return A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$nestableAtRuleOpener,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$keyframesOrCounterStyle(a));
		case '@counter-style':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$keyframesOrCounterStyle(a);
		case '@font-feature-values':
			return A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$nestableAtRuleOpener,
				A2(
					$elm$parser$Parser$loop,
					_List_fromArray(
						[
							_Utils_Tuple2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(0)),
							a)
						]),
					function (ns) {
						return $elm$parser$Parser$oneOf(
							_List_fromArray(
								[
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(ns),
									A2(
									$elm$parser$Parser$map,
									function (b) {
										return $elm$parser$Parser$Loop(
											A2(
												$elm$core$List$cons,
												_Utils_Tuple2(
													$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
														$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(1)),
													b),
												ns));
									},
									$elm$parser$Parser$getChompedString(
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar))),
									A2(
									$elm$parser$Parser$map,
									function (b) {
										return $elm$parser$Parser$Loop(
											A2(
												$elm$core$List$cons,
												_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
												ns));
									},
									$elm$parser$Parser$getChompedString(
										$elm$parser$Parser$chompIf(
											function (c) {
												return c !== '{';
											}))),
									$elm$parser$Parser$succeed(
									$elm$parser$Parser$Done(ns))
								]));
					}));
		default:
			return A2($elm$core$Set$member, a, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleSet) ? $elm$parser$Parser$succeed(
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(0)),
						a)
					])) : $elm$parser$Parser$succeed(
				_List_fromArray(
					[
						_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, a)
					]));
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRule = A2(
	$elm$parser$Parser$andThen,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRuleHelper,
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar,
			$elm$parser$Parser$symbol('@'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Property = {$: 3};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isPropertyChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isCommentChar(c) || ((c === ':') || ((c === ';') || (c === '}')))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Unit = {$: 6};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$operatorCharSet = $elm$core$Set$fromList(
	_List_fromArray(
		['+', '-', '%', '*', '/']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isOperatorChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$operatorCharSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isPropertyValueChar = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isPropertyChar(c) && (!((c === '(') || ((c === ')') || ((c === ',') || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isOperatorChar(c)))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$hexColor = function (revTokens) {
	return A2(
		$elm$parser$Parser$map,
		function (n) {
			return A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Number),
					n),
				revTokens);
		},
		$elm$parser$Parser$getChompedString(
			A2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isPropertyValueChar,
				$elm$parser$Parser$symbol('#'))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isNotPropertyValueChar = function (c) {
	return (c === '(') || ((c === ')') || ((c === ':') || ((c === ',') || (c === '/'))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$unitSet = $elm$core$Set$fromList(
	_List_fromArray(
		['em', 'ex', 'ch', 'rem', 'vw', 'vh', 'vmin', 'vmax', 'cm', 'mm', 'q', 'in', 'pt', 'pc', 'px', 'deg', 'grad', 'rad', 'turn', 's', 'ms', 'Hz', 'kHz', 'dpi', 'dpcm', 'dppx']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isUnit = function (n) {
	return A2($elm$core$Set$member, n, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$unitSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber = function (c) {
	return $elm$core$Char$isDigit(c) || (c === '.');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber)),
	$elm$parser$Parser$chompWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isNumber));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('-'))),
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$positiveNumber, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$negativeNumber]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$number = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Number),
			b);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$valueLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringLiteral(revTokens)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$number),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$hexColor(revTokens)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringArg, 'url', revTokens)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringArg, 'format', revTokens)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringArg, 'local', revTokens)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isUnit(n) ? $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Unit),
								n),
							revTokens)) : $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$PropertyValue),
								n),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isPropertyValueChar))),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isNotPropertyValueChar))),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Unit),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isOperatorChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$valueHelper = function (opener) {
	return A2(
		$elm$parser$Parser$loop,
		_List_fromArray(
			[opener]),
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$valueLoop);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$value = A2(
	$elm$parser$Parser$andThen,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$valueHelper,
	A2(
		$elm$parser$Parser$map,
		function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
		},
		$elm$parser$Parser$getChompedString(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
				$elm$core$Basics$eq(':')))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$declarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Property),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isPropertyChar))),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return (c === ';') || (c === '/');
						}))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$value),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$declarationBlockHelper = function (opener) {
	return A2(
		$elm$parser$Parser$loop,
		_List_fromArray(
			[opener]),
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$declarationLoop);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$declarationBlock = A2(
	$elm$parser$Parser$andThen,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$declarationBlockHelper,
	A2(
		$elm$parser$Parser$map,
		function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
		},
		$elm$parser$Parser$getChompedString(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
				function (c) {
					return c === '{';
				}))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Selector = function (a) {
	return {$: 2, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AttributeName = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AttributeSelector = function (a) {
	return {$: 5, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attSelOperatorCharSet = $elm$core$Set$fromList(
	_List_fromArray(
		['=', '~', '|', '^', '$', '*']));
var $elm$core$Dict$union = F2(
	function (t1, t2) {
		return A3($elm$core$Dict$foldl, $elm$core$Dict$insert, t2, t1);
	});
var $elm$core$Set$union = F2(
	function (_v0, _v1) {
		var dict1 = _v0;
		var dict2 = _v1;
		return A2($elm$core$Dict$union, dict1, dict2);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$whitespaceCharSet = $elm$core$Set$fromList(
	_List_fromArray(
		[' ', '\t', '\n']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attSelNameInvalidCharSet = A2(
	$elm$core$Set$insert,
	']',
	A2($elm$core$Set$union, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attSelOperatorCharSet, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$whitespaceCharSet));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeName = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Selector(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AttributeSelector(0))),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
			function (c) {
				return !A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attSelNameInvalidCharSet);
			})));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AttributeOperator = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeOperator = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Selector(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AttributeSelector(2))),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$symbol('~='),
					$elm$parser$Parser$symbol('|='),
					$elm$parser$Parser$symbol('^='),
					$elm$parser$Parser$symbol('$='),
					$elm$parser$Parser$symbol('*='),
					$elm$parser$Parser$symbol('=')
				]))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AttributeValue = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeValue = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$stringLiteral(revTokens)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$map,
					function (b) {
						return A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Selector(
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AttributeSelector(1))),
								b),
							revTokens);
					},
					$elm$parser$Parser$getChompedString(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
							function (c) {
								return (c !== ']') && (!$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c));
							})))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeSelectorLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeName),
				A2(
				$elm$parser$Parser$andThen,
				function (operator) {
					return A2(
						$elm$parser$Parser$map,
						function (n) {
							return $elm$parser$Parser$Loop(
								_Utils_ap(n, revTokens));
						},
						A2(
							$elm$parser$Parser$loop,
							_List_fromArray(
								[operator]),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeValue));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeOperator),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeSelector = A2(
	$elm$parser$Parser$andThen,
	function (opener) {
		return A2(
			$elm$parser$Parser$loop,
			_List_fromArray(
				[opener]),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeSelectorLoop);
	},
	A2(
		$elm$parser$Parser$map,
		$elm$core$Basics$always(
			_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '[')),
		$elm$parser$Parser$symbol('[')));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Class = {$: 2};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$class = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Class, b);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar,
			$elm$parser$Parser$symbol('.'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Combinator = {$: 3};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$combinator = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Combinator, b);
	},
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$elm$parser$Parser$symbol('+'),
					$elm$parser$Parser$symbol('~'),
					$elm$parser$Parser$symbol('>')
				]))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Element = {$: 0};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$element = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Element, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Id = {$: 1};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$id = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Id, b);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar,
			$elm$parser$Parser$symbol('#'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$PseudoClass = {$: 7};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$pseudoClass = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$PseudoClass, b);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar,
			$elm$parser$Parser$symbol(':'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$PseudoElement = {$: 6};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$pseudoElement = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$PseudoElement, b);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$isSelectorNameChar,
			$elm$parser$Parser$symbol('::'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Universal = {$: 4};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$universal = A2(
	$elm$parser$Parser$map,
	$elm$core$Basics$always(
		_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Universal, '*')),
	$elm$parser$Parser$symbol('*'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$selector = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			function (_v0) {
				var n = _v0.a;
				var s = _v0.b;
				return _List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Selector(n)),
						s)
					]);
			},
			$elm$parser$Parser$oneOf(
				_List_fromArray(
					[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$id, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$class, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$element, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$universal, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$combinator, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$pseudoElement, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$pseudoClass]))),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$attributeSelector
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$atRule),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$selector),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$declarationBlock),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$always(true)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$css = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Style6 = 7;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle = function (syntax) {
	switch (syntax) {
		case 0:
			return _Utils_Tuple2(3, 'elm-s');
		case 1:
			return _Utils_Tuple2(4, 'elm-bs');
		case 2:
			return _Utils_Tuple2(5, 'elm-gs');
		case 3:
			return _Utils_Tuple2(7, 'elm-c');
		case 4:
			return _Utils_Tuple2(4, 'elm-k');
		case 5:
			return _Utils_Tuple2(6, 'elm-f');
		case 6:
			return _Utils_Tuple2(5, 'elm-ts');
		default:
			return _Utils_Tuple2(2, 'elm-n');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('--'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		dF: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		dN: '-}',
		d$: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList]),
		d2: true,
		d3: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		g3: '{-'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$BasicSymbol = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Capitalized = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$GroupSymbol = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Keyword = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Number = 7;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		['|', '.', '=', '\\', '/', '(', ')', '-', '>', '<', ':', '+', '!', '$', '%', '&', '*']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols = $elm$core$Set$fromList(
	_List_fromArray(
		[',', '[', ']', '{', '}']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbols);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar = function (c) {
	return (c === '\"') || (c === '\'');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isBasicSymbol(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isStringLiteralChar(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isUpper)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isGroupSymbol));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$Function = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet = $elm$core$Set$fromList(
	_List_fromArray(
		['+', '-', '/', '*', '=', '.', '$', '<', '>', ':', '&', '|', '^', '?', '%', '#', '@', '~', '!', ',']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
			b);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$elm$parser$Parser$ignorer,
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					$elm$parser$Parser$succeed(0),
					$elm$parser$Parser$backtrackable(
						$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$backtrackable(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isInfixChar))),
			$elm$parser$Parser$backtrackable(
				$elm$parser$Parser$symbol(')')))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['as', 'where', 'let', 'in', 'if', 'else', 'then', 'case', 'of', 'type', 'alias']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable = $elm$parser$Parser$getChompedString(
	A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar,
		$elm$parser$Parser$chompIf($elm$core$Char$isLower)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText = $elm$parser$Parser$getChompedString(
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isVariableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
					b);
			},
			$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number)),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					'()')),
			$elm$parser$Parser$symbol('()')),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$basicSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$groupSymbol),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$capitalized),
			A2(
			$elm$parser$Parser$map,
			function (n) {
				return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n) : _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, n);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$weirdText)
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$String = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter = {
	dF: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(0),
			b);
	},
	dN: '\"',
	d$: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$elmEscapable]),
	d2: false,
	d3: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	g3: '\"'
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{dN: '\'', g3: '\''}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringDelimiter,
		{dN: '\"\"\"', g3: '\"\"\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$tripleDoubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$doubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$quote]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContext,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return A2($elm$core$List$cons, n, revTokens);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$TypeSignature = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ((c === '(') || ((c === ')') || ((c === '-') || (c === ',')))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
					'()')),
			$elm$parser$Parser$symbol('()')),
			A2(
			$elm$parser$Parser$map,
			$elm$core$Basics$always(
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
					'->')),
			$elm$parser$Parser$symbol('->')),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
					function (c) {
						return (c === '(') || ((c === ')') || ((c === '-') || (c === ',')));
					}))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
					b);
			},
			$elm$parser$Parser$getChompedString(
				A2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant,
					$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigIsNotRelevant)))
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContentHelp),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					function (ns) {
						return A2($elm$parser$Parser$loop, ns, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$fnSigContent);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
									':'),
								revTokens)),
						$elm$parser$Parser$symbol(':')))),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar = function (c) {
	return (c === '-') || (c === '{');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar = $elm$parser$Parser$getChompedString(
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar));
var $elm$parser$Parser$ExpectingKeyword = function (a) {
	return {$: 9, a: a};
};
var $elm$parser$Parser$Advanced$keyword = function (_v0) {
	var kwd = _v0.a;
	var expecting = _v0.b;
	var progress = !$elm$core$String$isEmpty(kwd);
	return function (s) {
		var _v1 = A5($elm$parser$Parser$Advanced$isSubString, kwd, s.bZ, s.gM, s.fC, s.g2);
		var newOffset = _v1.a;
		var newRow = _v1.b;
		var newCol = _v1.c;
		return (_Utils_eq(newOffset, -1) || (0 <= A3(
			$elm$parser$Parser$Advanced$isSubChar,
			function (c) {
				return $elm$core$Char$isAlphaNum(c) || (c === '_');
			},
			newOffset,
			s.g2))) ? A2(
			$elm$parser$Parser$Advanced$Bad,
			false,
			A2($elm$parser$Parser$Advanced$fromState, s, expecting)) : A3(
			$elm$parser$Parser$Advanced$Good,
			progress,
			0,
			{fC: newCol, e: s.e, g: s.g, bZ: newOffset, gM: newRow, g2: s.g2});
	};
};
var $elm$parser$Parser$keyword = function (kwd) {
	return $elm$parser$Parser$Advanced$keyword(
		A2(
			$elm$parser$Parser$Advanced$Token,
			kwd,
			$elm$parser$Parser$ExpectingKeyword(kwd)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || (c === '(')));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || ((c === '(') || ((c === ')') || ((c === ',') || (c === '.'))))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isCommentChar(c) || ((c === '(') || (c === ')')));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested = function (_v1) {
	var nestLevel = _v1.a;
	var revTokens = _v1.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$checkContextNested,
				A2(
					$elm$parser$Parser$map,
					function (n) {
						return _Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens));
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							_Utils_ap(n, revTokens)));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest = function (_v0) {
	var nestLevel = _v0.a;
	var revTokens = _v0.b;
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStepNested(
				_Utils_Tuple2(nestLevel, revTokens)),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel + 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
							revTokens)),
					$elm$parser$Parser$symbol('('))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return (!nestLevel) ? $elm$parser$Parser$Done(ns) : $elm$parser$Parser$Loop(
						_Utils_Tuple2(nestLevel - 1, ns));
				},
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_Tuple2(
							nestLevel,
							A2($elm$core$List$cons, n, revTokens)));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (s) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpnIsSpecialChar))))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$map,
					$elm$core$Basics$always(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, ')'),
							revTokens)),
					$elm$parser$Parser$symbol(')'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$infixParser,
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
									function (c) {
										return (c === ',') || (c === '.');
									}))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
									b);
							},
							$elm$parser$Parser$getChompedString(
								A2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant,
									$elm$parser$Parser$chompIf($elm$core$Char$isUpper)))),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
									b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mdpIsNotRelevant)))
						]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_Tuple2(0, n),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParNest);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2($elm$parser$Parser$loop, n, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecParentheses);
					},
					A2(
						$elm$parser$Parser$map,
						$elm$core$Basics$always(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens)),
						$elm$parser$Parser$symbol('(')))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$commentChar),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
									'exposing')),
							$elm$parser$Parser$keyword('exposing')),
							A2(
							$elm$parser$Parser$map,
							$elm$core$Basics$always(
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
									'as')),
							$elm$parser$Parser$keyword('as')),
							A2(
							$elm$parser$Parser$map,
							function (b) {
								return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
							},
							$elm$parser$Parser$getChompedString(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$modDecIsNotRelevant)))
						]))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp = F2(
	function (revTokens, str) {
		return (str === 'module') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
					str),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclarationHelp(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Done,
				A2($elm$parser$Parser$loop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable = F2(
	function (revTokens, n) {
		return ((n === 'module') || (n === 'import')) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$moduleDeclaration) : ((n === 'port') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$portDeclaration) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$isKeyword(n) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionSignature)));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$space),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$comment),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$lineStartVariable(revTokens),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$variable)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_ap(s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$stringLiteral)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (s) {
						return A2(
							$elm$parser$Parser$loop,
							A2($elm$core$List$cons, s, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$functionBodyContent)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$syntaxToStyle = function (syntax) {
	switch (syntax) {
		case 0:
			return _Utils_Tuple2(2, 'js-n');
		case 1:
			return _Utils_Tuple2(3, 'js-s');
		case 2:
			return _Utils_Tuple2(4, 'js-k');
		case 3:
			return _Utils_Tuple2(5, 'js-dk');
		case 4:
			return _Utils_Tuple2(5, 'js-fe');
		case 5:
			return _Utils_Tuple2(6, 'js-f');
		case 6:
			return _Utils_Tuple2(7, 'js-lk');
		case 7:
			return _Utils_Tuple2(8, 'js-p');
		default:
			return _Utils_Tuple2(6, 'js-ce');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupSet = $elm$core$Set$fromList(
	_List_fromArray(
		['{', '}', '(', ')', '[', ']', ',', ';']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isGroupChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isGroupChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isCommentChar = function (c) {
	return c === '/';
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorSet = $elm$core$Set$fromList(
	_List_fromArray(
		['+', '-', '*', '/', '=', '!', '<', '>', '&', '|', '?', '^', ':', '~', '%', '.']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$punctuactorSet = A2($elm$core$Set$union, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorSet, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupSet);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isPunctuaction = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$punctuactorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isStringLiteralChar = function (c) {
	return (c === '\"') || ((c === '\'') || (c === '`'));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isPunctuaction(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isStringLiteralChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isCommentChar(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$DeclarationKeyword = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Function = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Keyword = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$LiteralKeyword = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Param = 7;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$ClassExtends = 8;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('//'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		dF: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		dN: '*/',
		d$: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList]),
		d2: false,
		d3: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		g3: '/*'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classExtendsLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(8),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$andThen,
				function (n) {
					return (n === 'extends') ? A2(
						$elm$parser$Parser$map,
						$elm$parser$Parser$Loop,
						A2(
							$elm$parser$Parser$loop,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
									n),
								revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classExtendsLoop)) : $elm$parser$Parser$succeed(
						$elm$parser$Parser$Loop(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
									n),
								revTokens)));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$argLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isCommentChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ((c === ',') || (c === ')'))));
						}))),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return (c === '/') || (c === ',');
						}))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar))),
				A2(
				$elm$parser$Parser$map,
				function (_v0) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
								'*'),
							revTokens));
				},
				$elm$parser$Parser$symbol('*')),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (_v1) {
						return A2(
							$elm$parser$Parser$loop,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$argLoop);
					},
					$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$FunctionEval = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionEvalLoop = F3(
	function (identifier, revTokens, thisRevToken) {
		return $elm$parser$Parser$oneOf(
			_List_fromArray(
				[
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(thisRevToken),
					A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return $elm$parser$Parser$Done(
							_Utils_ap(
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
									thisRevToken),
								A2(
									$elm$core$List$cons,
									_Utils_Tuple2(
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
										identifier),
									revTokens)));
					},
					$elm$parser$Parser$symbol('(')),
					$elm$parser$Parser$succeed(
					$elm$parser$Parser$Done(
						_Utils_ap(
							thisRevToken,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, identifier),
								revTokens))))
				]));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$declarationKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['var', 'const', 'let']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isDeclarationKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$declarationKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['break', 'do', 'instanceof', 'typeof', 'case', 'else', 'new', 'catch', 'finally', 'return', 'void', 'continue', 'for', 'switch', 'while', 'debugger', 'this', 'with', 'default', 'if', 'throw', 'delete', 'in', 'try', 'enum', 'extends', 'export', 'import', 'implements', 'private', 'public', 'yield', 'interface', 'package', 'protected']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$literalKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['true', 'false', 'null', 'undefined', 'NaN', 'Infinity']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isLiteralKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$literalKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordParser = F2(
	function (revTokens, n) {
		return ((n === 'function') || (n === 'static')) ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionDeclarationLoop) : ((n === 'class') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$classDeclarationLoop) : (((n === 'this') || (n === 'super')) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
					n),
				revTokens)) : ((n === 'constructor') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionDeclarationLoop) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
					n),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isDeclarationKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isLiteralKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
					n),
				revTokens)) : A2(
			$elm$parser$Parser$loop,
			_List_Nil,
			A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$functionEvalLoop, n, revTokens))))))));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$Number = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$number = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(0),
			b);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isOperatorChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isOperatorChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$String = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$jsEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter = {
	dF: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
			b);
	},
	dN: '\'',
	d$: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$jsEscapable]),
	d2: false,
	d3: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	g3: '\''
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter,
		{dN: '\"', g3: '\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$templateString = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quoteDelimiter,
		{
			dN: '`',
			d$: _List_fromArray(
				[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$jsEscapable]),
			d3: function (c) {
				return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
			},
			g3: '`'
		}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$quote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$doubleQuote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$templateString]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(s, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, s, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$operatorChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$groupChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$number]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$keywordParser(revTokens),
					$elm$parser$Parser$getChompedString(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$isIdentifierNameChar)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$javascript = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$syntaxToStyle = function (syntax) {
	switch (syntax) {
		case 0:
			return _Utils_Tuple2(3, 'json-s');
		case 1:
			return _Utils_Tuple2(2, 'json-e');
		case 2:
			return _Utils_Tuple2(2, 'json-n');
		case 3:
			return _Utils_Tuple2(4, 'json-b');
		case 4:
			return _Utils_Tuple2(4, 'json-null');
		case 5:
			return _Utils_Tuple2(5, 'json-k');
		case 6:
			return _Utils_Tuple2(0, 'json-o');
		default:
			return _Utils_Tuple2(0, 'json-a');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$Array = 7;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$Boolean = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$Null = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$Object = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$ObjectKey = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$String = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$Number = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$number = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
			b);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $elm$core$List$singleton = function (value) {
	return _List_fromArray(
		[value]);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$Escapable = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$escapableSet = $elm$core$Set$fromList(
	_List_fromArray(
		['\"', '\\', '/', 'b', 'f', 'n', 'r', 't', 'u']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$isEscapableChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$escapableSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$escapable = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('\\'))),
	$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$isEscapableChar));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$stringEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$doubleQuoteDelimiter = function (syntax_) {
	return {
		dF: function (b) {
			return _Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(syntax_),
				b);
		},
		dN: '\"',
		d$: _List_fromArray(
			[
				A2($elm$parser$Parser$map, $elm$core$List$singleton, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$lineBreak),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$stringEscapable
			]),
		d2: false,
		d3: function (c) {
			return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
		},
		g3: '\"'
	};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$stringLiteral = F2(
	function (syntax_, revTokens) {
		return A2(
			$elm$parser$Parser$map,
			function (n) {
				return _Utils_ap(n, revTokens);
			},
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$doubleQuoteDelimiter(syntax_)));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$whitespace = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$space, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$lineBreak]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$arrayLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$whitespace),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				A2(
					$elm$parser$Parser$map,
					function (_v4) {
						return _Utils_Tuple2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
							',');
					},
					$elm$parser$Parser$symbol(','))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Done(
						A2($elm$core$List$cons, n, revTokens));
				},
				A2(
					$elm$parser$Parser$map,
					function (_v5) {
						return _Utils_Tuple2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
							']');
					},
					$elm$parser$Parser$symbol(']'))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$value()),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$objectLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$whitespace),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$stringLiteral, 5, revTokens)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (_v0) {
						var revTokens_ = A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
								':'),
							revTokens);
						return A2(
							$elm$parser$Parser$map,
							function (ns) {
								return _Utils_ap(ns, revTokens_);
							},
							$elm$parser$Parser$oneOf(
								_List_fromArray(
									[
										A2(
										$elm$parser$Parser$andThen,
										function (ws) {
											return $elm$parser$Parser$oneOf(
												_List_fromArray(
													[
														A2(
														$elm$parser$Parser$map,
														function (v) {
															return _Utils_ap(
																v,
																_List_fromArray(
																	[ws]));
														},
														$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$value()),
														$elm$parser$Parser$succeed(
														_List_fromArray(
															[ws]))
													]));
										},
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$whitespace),
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$value(),
										$elm$parser$Parser$succeed(_List_Nil)
									])));
					},
					$elm$parser$Parser$symbol(':'))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				A2(
					$elm$parser$Parser$map,
					function (_v1) {
						return _Utils_Tuple2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
							',');
					},
					$elm$parser$Parser$symbol(','))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Done(
						A2($elm$core$List$cons, n, revTokens));
				},
				A2(
					$elm$parser$Parser$map,
					function (_v2) {
						return _Utils_Tuple2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
							'}');
					},
					$elm$parser$Parser$symbol('}'))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
function $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$value() {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$stringLiteral, 0, _List_Nil),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return _List_fromArray(
						[n]);
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$number),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$object(),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$array(),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return _List_fromArray(
						[
							_Utils_Tuple2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
							s)
						]);
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$keyword('null'))),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return _List_fromArray(
						[
							_Utils_Tuple2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
							s)
						]);
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$oneOf(
						_List_fromArray(
							[
								$elm$parser$Parser$keyword('true'),
								$elm$parser$Parser$keyword('false')
							]))))
			]));
}
function $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$array() {
	return A2(
		$elm$parser$Parser$andThen,
		function (_v6) {
			return A2(
				$elm$parser$Parser$loop,
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
						'[')
					]),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$arrayLoop);
		},
		$elm$parser$Parser$symbol('['));
}
function $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$object() {
	return A2(
		$elm$parser$Parser$andThen,
		function (_v3) {
			return A2(
				$elm$parser$Parser$loop,
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
						'{')
					]),
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$objectLoop);
		},
		$elm$parser$Parser$symbol('{'));
}
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$value = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$value();
$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$value = function () {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$value;
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$array = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$array();
$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$array = function () {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$array;
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$object = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$object();
$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$cyclic$object = function () {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$object;
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$whitespace),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$object),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$always(true)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$json = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Json$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$syntaxToStyle = function (syntax) {
	return _Utils_Tuple2(0, 'nolang');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$whitespace = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$space, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$lineBreak]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$whitespace),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$elm$parser$Parser$chompIf(
						$elm$core$Basics$always(true)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$noLang = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$syntaxToStyle = function (syntax) {
	switch (syntax) {
		case 0:
			return _Utils_Tuple2(2, 'py-n');
		case 1:
			return _Utils_Tuple2(3, 'py-s');
		case 2:
			return _Utils_Tuple2(4, 'py-k');
		case 3:
			return _Utils_Tuple2(5, 'py-dk');
		case 5:
			return _Utils_Tuple2(6, 'py-f');
		case 6:
			return _Utils_Tuple2(7, 'py-lk');
		case 7:
			return _Utils_Tuple2(8, 'py-p');
		default:
			return _Utils_Tuple2(0, 'py-fe');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupSet = $elm$core$Set$fromList(
	_List_fromArray(
		['{', '}', '(', ')', '[', ']', ',', ';']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isGroupChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isGroupChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isCommentChar = function (c) {
	return c === '#';
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorSet = $elm$core$Set$fromList(
	_List_fromArray(
		['+', '-', '*', '/', '=', '!', '<', '>', '&', '|', '?', '^', ':', '~', '%', '.']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$punctuationSet = A2($elm$core$Set$union, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorSet, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupSet);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isPunctuation = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$punctuationSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isStringLiteralChar = function (c) {
	return (c === '\"') || (c === '\'');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isPunctuation(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isStringLiteralChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isCommentChar(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$DeclarationKeyword = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$FunctionEval = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Keyword = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$LiteralKeyword = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Function = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$inlineComment = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
			]);
	},
	$elm$parser$Parser$getChompedString(
		A2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
			A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
			$elm$parser$Parser$symbol('#'))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		dF: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		dN: '\'\'\'',
		d$: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak]),
		d2: false,
		d3: function (c) {
			return !$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c);
		},
		g3: '\'\'\''
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace))),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (ns) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(ns, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$classDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Param = 7;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$argLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(7),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isCommentChar(c) || ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || ((c === ',') || (c === ')'))));
						}))),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return (c === '/') || (c === ',');
						}))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionDeclarationLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
								b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (_v0) {
						return A2(
							$elm$parser$Parser$loop,
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
								revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$argLoop);
					},
					$elm$parser$Parser$symbol('('))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionEvalLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (_v0) {
					return $elm$parser$Parser$Done(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '('),
							revTokens));
				},
				$elm$parser$Parser$symbol('(')),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['finally', 'is', 'return', 'continue', 'for', 'lambda', 'try', 'from', 'nonlocal', 'while', 'and', 'del', 'global', 'not', 'with', 'as', 'elif', 'if', 'or', 'yield', 'assert', 'else', 'import', 'pass', 'break', 'except', 'in', 'raise']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$literalKeywordSet = $elm$core$Set$fromList(
	_List_fromArray(
		['True', 'False', 'None']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isLiteralKeyword = function (str) {
	return A2($elm$core$Set$member, str, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$literalKeywordSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordParser = F2(
	function (revTokens, n) {
		return (n === 'def') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionDeclarationLoop) : ((n === 'class') ? A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$classDeclarationLoop) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
					n),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isLiteralKeyword(n) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
					n),
				revTokens)) : A2(
			$elm$parser$Parser$loop,
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					n),
				revTokens),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$functionEvalLoop))));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$Number = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$number = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(0),
			b);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isOperatorChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isOperatorChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$String = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quoteDelimiter = {
	dF: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
			b);
	},
	dN: '\'',
	d$: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$lineBreak]),
	d2: false,
	d3: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	g3: '\''
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quoteDelimiter,
		{dN: '\"', g3: '\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quoteDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$quote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$doubleQuote]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(s, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$stringLiteral),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, s, revTokens));
				},
				$elm$parser$Parser$oneOf(
					_List_fromArray(
						[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$operatorChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$groupChar, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$number]))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$keywordParser(revTokens),
					$elm$parser$Parser$getChompedString(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$isIdentifierNameChar)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$python = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$syntaxToStyle = function (syntax) {
	switch (syntax) {
		case 0:
			return _Utils_Tuple2(2, 'sql-n');
		case 1:
			return _Utils_Tuple2(3, 'sql-s');
		case 2:
			return _Utils_Tuple2(4, 'sql-k');
		case 3:
			return _Utils_Tuple2(5, 'sql-o');
		case 4:
			return _Utils_Tuple2(6, 'sql-f');
		case 5:
			return _Utils_Tuple2(7, 'sql-p');
		default:
			return _Utils_Tuple2(8, 'sql-l');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$inlineComment = $elm$parser$Parser$oneOf(
	A2(
		$elm$core$List$map,
		A2(
			$elm$core$Basics$composeR,
			$elm$parser$Parser$symbol,
			A2(
				$elm$core$Basics$composeR,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile(
					A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak)),
				A2(
					$elm$core$Basics$composeR,
					$elm$parser$Parser$getChompedString,
					$elm$parser$Parser$map(
						function (b) {
							return _List_fromArray(
								[
									_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b)
								]);
						})))),
		_List_fromArray(
			['--', '$', '#'])));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$lineBreakList = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _List_fromArray(
			[
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n')
			]);
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$multilineComment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	{
		dF: function (b) {
			return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
		},
		dN: '*/',
		d$: _List_fromArray(
			[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$lineBreakList]),
		d2: false,
		d3: A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
		g3: '/*'
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$comment = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$inlineComment, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$multilineComment]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$punctuatorSet = $elm$core$Set$fromList(
	_List_fromArray(
		[';', '[', ']', '(', ')', '`', ',', '.']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isPunctuationChar = function (c) {
	return A2($elm$core$Set$member, c, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$punctuatorSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isIdentifierChar = function (c) {
	return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isPunctuationChar(c));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$Function = 4;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$Keyword = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$Literal = 6;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$Operator = 3;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$functionSet = $elm$core$Set$fromList(
	_List_fromArray(
		['AVG', 'COUNT', 'FIRST', 'FORMAT', 'LAST', 'LCASE', 'LEN', 'MAX', 'MID', 'MIN', 'MOD', 'NOW', 'ROUND', 'SUM', 'UCASE']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isFunction = function (str) {
	return A2(
		$elm$core$Set$member,
		$elm$core$String$toUpper(str),
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$functionSet);
};
var $elm$regex$Regex$contains = _Regex_contains;
var $elm$regex$Regex$never = _Regex_never;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$keywordPattern = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	A2(
		$elm$regex$Regex$fromStringWith,
		{dt: true, eg: false},
		'^(ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:_INSERT|COL)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURNS?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)$'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isKeyword = $elm$regex$Regex$contains($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$keywordPattern);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$literalSet = $elm$core$Set$fromList(
	_List_fromArray(
		['TRUE', 'FALSE', 'NULL']));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isLiteral = function (str) {
	return A2(
		$elm$core$Set$member,
		$elm$core$String$toUpper(str),
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$literalSet);
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$operatorPattern = A2(
	$elm$core$Maybe$withDefault,
	$elm$regex$Regex$never,
	A2(
		$elm$regex$Regex$fromStringWith,
		{dt: true, eg: false},
		'^([-+*\\/=%^~]|&&?|\\|\\|?|!=?|<(?:=>?|<|>)?|>[>=]?|AND|BETWEEN|IN|LIKE|NOT|OR|IS|DIV|REGEXP|RLIKE|SOUNDS LIKE|XOR)$'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isOperator = $elm$regex$Regex$contains($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$operatorPattern);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$keywordParser = F2(
	function (revTokens, s) {
		return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isOperator(s) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(3),
					s),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isFunction(s) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
					s),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isKeyword(s) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
					s),
				revTokens)) : ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isLiteral(s) ? $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(6),
					s),
				revTokens)) : $elm$parser$Parser$succeed(
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s),
				revTokens)))));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$Number = 0;
var $elm$core$Char$isHexDigit = function (_char) {
	var code = $elm$core$Char$toCode(_char);
	return ((48 <= code) && (code <= 57)) || (((65 <= code) && (code <= 70)) || ((97 <= code) && (code <= 102)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$hexNumber = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$backtrackable(
			$elm$parser$Parser$symbol('0x'))),
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($elm$core$Char$isHexDigit));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$number = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(0),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$elm$parser$Parser$oneOf(
			_List_fromArray(
				[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$hexNumber, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$number]))));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$Punctuation = 5;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$punctuationChar = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(5),
			b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isPunctuationChar)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$space = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b);
	},
	$elm$parser$Parser$getChompedString(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$String = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$sqlEscapable = A2(
	$elm$parser$Parser$map,
	function (b) {
		return _List_fromArray(
			[
				_Utils_Tuple2(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(4),
				b)
			]);
	},
	$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$escapable));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$quoteDelimiter = {
	dF: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
			b);
	},
	dN: '\'',
	d$: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$lineBreakList, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$sqlEscapable]),
	d2: false,
	d3: function (c) {
		return !($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c) || $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isEscapable(c));
	},
	g3: '\''
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$quoteDelimiter,
		{dN: '\"', g3: '\"'}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$quoteDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$stringLiteral = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$quote, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$doubleQuote]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$checkContext = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$whitespaceOrCommentStep(revTokens),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$whitespaceOrCommentStep = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, s, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$space),
				A2(
				$elm$parser$Parser$andThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$checkContext,
				A2(
					$elm$parser$Parser$map,
					function (s) {
						return A2($elm$core$List$cons, s, revTokens);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$lineBreak)),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(s, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$comment)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$stringBody = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$whitespaceOrCommentStep(revTokens),
				A2(
				$elm$parser$Parser$map,
				function (s) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(s, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$stringLiteral),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$space),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$lineBreak),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$punctuationChar),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$number),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$comment),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					function (n) {
						return A2(
							$elm$parser$Parser$loop,
							_Utils_ap(n, revTokens),
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$stringBody);
					},
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$stringLiteral)),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A2(
					$elm$parser$Parser$andThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$keywordParser(revTokens),
					$elm$parser$Parser$getChompedString(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$isIdentifierChar)))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$sql = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$syntaxToStyle = function (syntax) {
	switch (syntax) {
		case 0:
			return _Utils_Tuple2(4, 'xml-t');
		case 1:
			return _Utils_Tuple2(6, 'xml-a');
		default:
			return _Utils_Tuple2(3, 'xlm-av');
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$AttributeValue = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$lineBreak = A2(
	$elm$parser$Parser$map,
	function (_v0) {
		return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$LineBreak, '\n');
	},
	$elm$parser$Parser$symbol('\n'));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$lineBreakList = A2($elm$parser$Parser$map, $elm$core$List$singleton, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$lineBreak);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$doubleQuoteDelimiter = {
	dF: function (b) {
		return _Utils_Tuple2(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
			b);
	},
	dN: '\"',
	d$: _List_fromArray(
		[$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$lineBreakList]),
	d2: false,
	d3: A2($elm$core$Basics$composeL, $elm$core$Basics$not, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak),
	g3: '\"'
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$comment = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$doubleQuoteDelimiter,
		{
			dF: function (b) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Comment, b);
			},
			dN: '-->',
			g3: '<!--'
		}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$openTagParser = A2(
	$elm$parser$Parser$ignorer,
	A2(
		$elm$parser$Parser$ignorer,
		$elm$parser$Parser$succeed(0),
		$elm$parser$Parser$chompIf(
			function (c) {
				return c === '<';
			})),
	$elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				$elm$parser$Parser$chompIf(
				function (c) {
					return (c === '/') || ((c === '!') || (c === '?'));
				}),
				$elm$parser$Parser$succeed(0)
			])));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$Tag = 0;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$Attribute = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$doubleQuote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$doubleQuoteDelimiter);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$quote = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$delimited(
	_Utils_update(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$doubleQuoteDelimiter,
		{dN: '\'', g3: '\''}));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeValue = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$doubleQuote,
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$quote,
			A2(
			$elm$parser$Parser$map,
			function (b) {
				return _List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(2),
						b)
					]);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
					function (c) {
						return (!$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c)) && (c !== '>');
					})))
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$whitespace = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			A2(
			$elm$parser$Parser$map,
			function (s) {
				return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, s);
			},
			$elm$parser$Parser$getChompedString(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isSpace))),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$lineBreak
		]));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeValueLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A3($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeValueLoop, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$whitespace),
				A3($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$addThen, $elm$parser$Parser$succeed, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeValue),
				$elm$parser$Parser$succeed(revTokens)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeConfirm = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A3($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeConfirm, revTokens, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$whitespace),
				A3(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeValueLoop,
				revTokens,
				A2(
					$elm$parser$Parser$map,
					function (_v0) {
						return _Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, '=');
					},
					$elm$parser$Parser$symbol('='))),
				$elm$parser$Parser$succeed(revTokens)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$isStartTagChar = function (c) {
	return $elm$core$Char$isUpper(c) || ($elm$core$Char$isLower(c) || $elm$core$Char$isDigit(c));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$isTagChar = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$isStartTagChar(c) || (c === '-');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$isAttributeChar = function (c) {
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$isTagChar(c) || (c === '_');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				A3(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$consThen,
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeConfirm,
					revTokens,
					A2(
						$elm$parser$Parser$map,
						function (b) {
							return _Utils_Tuple2(
								$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(1),
								b);
						},
						$elm$parser$Parser$getChompedString(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$isAttributeChar))))),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$whitespace),
				A2(
				$elm$parser$Parser$map,
				function (b) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return (!$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isWhitespace(c)) && (c !== '>');
						}))),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$tag = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$andThen,
				function (n) {
					return A2(
						$elm$parser$Parser$loop,
						A2($elm$core$List$cons, n, revTokens),
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$attributeLoop);
				},
				A2(
					$elm$parser$Parser$map,
					function (b) {
						return _Utils_Tuple2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$C(0),
							b);
					},
					$elm$parser$Parser$getChompedString(
						A2(
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$thenChompWhile,
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$isTagChar,
							$elm$parser$Parser$chompIf($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$isStartTagChar))))),
				$elm$parser$Parser$succeed(revTokens)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$openTag = function (revTokens) {
	return A2(
		$elm$parser$Parser$andThen,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$tag,
		A2(
			$elm$parser$Parser$map,
			function (b) {
				return A2(
					$elm$core$List$cons,
					_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, b),
					revTokens);
			},
			$elm$parser$Parser$getChompedString($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$openTagParser)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$mainLoop = function (revTokens) {
	return $elm$parser$Parser$oneOf(
		_List_fromArray(
			[
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2($elm$core$List$cons, n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$whitespace),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						_Utils_ap(n, revTokens));
				},
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$comment),
				A2(
				$elm$parser$Parser$map,
				function (n) {
					return $elm$parser$Parser$Loop(
						A2(
							$elm$core$List$cons,
							_Utils_Tuple2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Type$Normal, n),
							revTokens));
				},
				$elm$parser$Parser$getChompedString(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$chompIfThenWhile(
						function (c) {
							return (c !== '<') && (!$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Helpers$isLineBreak(c));
						}))),
				A2(
				$elm$parser$Parser$map,
				$elm$parser$Parser$Loop,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$openTag(revTokens)),
				$elm$parser$Parser$succeed(
				$elm$parser$Parser$Done(revTokens))
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$toRevTokens = A2($elm$parser$Parser$loop, _List_Nil, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$mainLoop);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$toLines = A2(
	$elm$core$Basics$composeR,
	$elm$parser$Parser$run($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$toRevTokens),
	$elm$core$Result$map(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Helpers$toLines($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$syntaxToStyle)));
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$xml = A2(
	$elm$core$Basics$composeR,
	$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$toLines,
	$elm$core$Result$map($elm$core$Basics$identity));
var $author$project$Internal$Render$getLang = function (langString) {
	switch (langString) {
		case 'elm':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm;
		case 'haskell':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm;
		case 'js':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$javascript;
		case 'xml':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$xml;
		case 'css':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$css;
		case 'python':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$python;
		case 'sql':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$sql;
		case 'json':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$json;
		case 'nolang':
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$noLang;
		default:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$noLang;
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme = $elm$core$Basics$identity;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex = function (a) {
	return {$: 1, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Rgba = F4(
	function (a, b, c, d) {
		return {$: 3, a: a, b: b, c: c, d: d};
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$DefaultColor = {$: 0};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor = function (background) {
	return {aq: background, ah: false, ai: false, aw: false, cw: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$DefaultColor};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$italic = function (style) {
	return _Utils_update(
		style,
		{ai: true});
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$noEmphasis = F2(
	function (text, background) {
		return {aq: background, ah: false, ai: false, aw: false, cw: text};
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor = function (text) {
	return {aq: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$DefaultColor, ah: false, ai: false, aw: false, cw: text};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$OneDark$requiredStyles = {
	ao: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor(
		A4($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Rgba, 40, 124, 82, 0.4)),
	as: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$italic(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#5c6370'))),
	at: A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$noEmphasis,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#abb2bf'),
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#282c34')),
	au: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor(
		A4($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Rgba, 136, 64, 67, 0.4)),
	ag: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor(
		A4($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Rgba, 229, 231, 235, 0.1)),
	aC: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#d19a66')),
	aD: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#98c379')),
	aE: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#c678dd')),
	aF: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#c678dd')),
	aG: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#61aeee')),
	aH: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#d19a66')),
	aI: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#abb2bf'))
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$OneDark$theme = {fI: _List_Nil, gI: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$OneDark$requiredStyles};
var $elm$core$Tuple$mapFirst = F2(
	function (func, _v0) {
		var x = _v0.a;
		var y = _v0.b;
		return _Utils_Tuple2(
			func(x),
			y);
	});
var $elm$core$String$concat = function (strings) {
	return A2($elm$core$String$join, '', strings);
};
var $elm$core$List$intersperse = F2(
	function (sep, xs) {
		if (!xs.b) {
			return _List_Nil;
		} else {
			var hd = xs.a;
			var tl = xs.b;
			var step = F2(
				function (x, rest) {
					return A2(
						$elm$core$List$cons,
						sep,
						A2($elm$core$List$cons, x, rest));
				});
			var spersed = A3($elm$core$List$foldr, step, _List_Nil, tl);
			return A2($elm$core$List$cons, hd, spersed);
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$syntaxToSelector = function (syntax) {
	switch (syntax.$) {
		case 0:
			var elmSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Elm$syntaxToStyle(elmSyntax).b;
		case 1:
			var xmlSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Xml$syntaxToStyle(xmlSyntax).b;
		case 2:
			var jsSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Javascript$syntaxToStyle(jsSyntax).b;
		case 3:
			var cssSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$syntaxToStyle(cssSyntax).b;
		case 4:
			var pythonSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Python$syntaxToStyle(pythonSyntax).b;
		case 5:
			var sqlSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Sql$syntaxToStyle(sqlSyntax).b;
		default:
			var noLangSyntax = syntax.a;
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$NoLang$syntaxToStyle(noLangSyntax).b;
	}
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$syntaxesToSelectors = function (syntaxes) {
	return $elm$core$String$concat(
		A2(
			$elm$core$List$intersperse,
			', ',
			A2(
				$elm$core$List$map,
				$elm$core$Basics$append('.elmsh-'),
				A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$syntaxToSelector, syntaxes))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$colorToCss = F2(
	function (property, color) {
		switch (color.$) {
			case 0:
				return '';
			case 1:
				var hex = color.a;
				return property + (hex + ';');
			case 2:
				var r = color.a;
				var g = color.b;
				var b = color.c;
				return $elm$core$String$concat(
					_List_fromArray(
						[
							property,
							'rgb(',
							$elm$core$String$fromInt(r),
							', ',
							$elm$core$String$fromInt(g),
							',',
							$elm$core$String$fromInt(b),
							');'
						]));
			default:
				var r = color.a;
				var g = color.b;
				var b = color.c;
				var a = color.d;
				return $elm$core$String$concat(
					_List_fromArray(
						[
							property,
							'rgba(',
							$elm$core$String$fromInt(r),
							', ',
							$elm$core$String$fromInt(g),
							',',
							$elm$core$String$fromInt(b),
							', ',
							$elm$core$String$fromFloat(a),
							');'
						]));
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$emptyIfFalse = F2(
	function (bool, str) {
		return bool ? str : '';
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$styleToCss = function (_v0) {
	var background = _v0.aq;
	var text = _v0.cw;
	var isUnderline = _v0.aw;
	var isItalic = _v0.ai;
	var isBold = _v0.ah;
	return $elm$core$String$concat(
		_List_fromArray(
			[
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$emptyIfFalse, isBold, 'font-weight: bold;'),
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$emptyIfFalse, isItalic, 'font-style: italic;'),
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$emptyIfFalse, isUnderline, 'text-decoration: underline;'),
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$colorToCss, 'color: ', text),
				A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$colorToCss, 'background: ', background)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$toCssClass = function (_v0) {
	var selectors = _v0.a;
	var style = _v0.b;
	return $elm$core$String$isEmpty(selectors) ? '' : (selectors + (' {' + ($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$styleToCss(style) + '}')));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$toCss = function (classes) {
	return $elm$core$String$concat(
		A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$toCssClass, classes));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$toCss = function (_v0) {
	var customStyles = _v0.fI;
	var requiredStyles = _v0.gI;
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$toCss(
		_Utils_ap(
			_List_fromArray(
				[
					_Utils_Tuple2('.elmsh', requiredStyles.at),
					_Utils_Tuple2('.elmsh-hl', requiredStyles.ag),
					_Utils_Tuple2('.elmsh-add', requiredStyles.ao),
					_Utils_Tuple2('.elmsh-del', requiredStyles.au),
					_Utils_Tuple2('.elmsh-comm', requiredStyles.as),
					_Utils_Tuple2('.elmsh1', requiredStyles.aC),
					_Utils_Tuple2('.elmsh2', requiredStyles.aD),
					_Utils_Tuple2('.elmsh3', requiredStyles.aE),
					_Utils_Tuple2('.elmsh4', requiredStyles.aF),
					_Utils_Tuple2('.elmsh5', requiredStyles.aG),
					_Utils_Tuple2('.elmsh6', requiredStyles.aH),
					_Utils_Tuple2('.elmsh7', requiredStyles.aI)
				]),
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$mapFirst($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$syntaxesToSelectors),
				customStyles)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$OneDark$css = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$toCss($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$OneDark$theme);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$oneDark = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$OneDark$css;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$oneDark = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$oneDark;
var $elm$html$Html$pre = _VirtualDom_node('pre');
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Add = 1;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Del = 2;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Line$Normal = 0;
var $elm$virtual_dom$VirtualDom$attribute = F2(
	function (key, value) {
		return A2(
			_VirtualDom_attribute,
			_VirtualDom_noOnOrFormAction(key),
			_VirtualDom_noJavaScriptOrHtmlUri(value));
	});
var $elm$html$Html$Attributes$attribute = $elm$virtual_dom$VirtualDom$attribute;
var $elm$html$Html$Attributes$classList = function (classes) {
	return $elm$html$Html$Attributes$class(
		A2(
			$elm$core$String$join,
			' ',
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$first,
				A2($elm$core$List$filter, $elm$core$Tuple$second, classes))));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString = function (required) {
	return 'elmsh' + function () {
		switch (required) {
			case 0:
				return '0';
			case 1:
				return '-comm';
			case 2:
				return '1';
			case 3:
				return '2';
			case 4:
				return '3';
			case 5:
				return '4';
			case 6:
				return '5';
			case 7:
				return '6';
			default:
				return '7';
		}
	}();
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView = function (_v0) {
	var additionalClass = _v0.e7;
	var requiredStyle = _v0.gH;
	var text = _v0.cw;
	return ((!requiredStyle) && $elm$core$String$isEmpty(additionalClass)) ? $elm$html$Html$text(text) : A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$classList(
				_List_fromArray(
					[
						_Utils_Tuple2(
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$requiredStyleToString(requiredStyle),
						!(!requiredStyle)),
						_Utils_Tuple2('elmsh-' + additionalClass, additionalClass !== '')
					]))
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(text)
			]));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView = F3(
	function (start, index, _v0) {
		var highlight = _v0.ag;
		var fragments = _v0.fT;
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$classList(
					_List_fromArray(
						[
							_Utils_Tuple2('elmsh-line', true),
							_Utils_Tuple2(
							'elmsh-hl',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just(0))),
							_Utils_Tuple2(
							'elmsh-add',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just(1))),
							_Utils_Tuple2(
							'elmsh-del',
							_Utils_eq(
								highlight,
								$elm$core$Maybe$Just(2)))
						])),
					A2(
					$elm$html$Html$Attributes$attribute,
					'data-elmsh-lc',
					$elm$core$String$fromInt(start + index))
				]),
			A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments));
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml = function (lines) {
	return A2(
		$elm$html$Html$code,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('elmsh')
			]),
		$elm$core$List$concat(
			A2(
				$elm$core$List$map,
				function (_v0) {
					var fragments = _v0.fT;
					var highlight = _v0.ag;
					return _Utils_eq(highlight, $elm$core$Maybe$Nothing) ? A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments) : _List_fromArray(
						[
							A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$classList(
									_List_fromArray(
										[
											_Utils_Tuple2(
											'elmsh-hl',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just(0))),
											_Utils_Tuple2(
											'elmsh-add',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just(1))),
											_Utils_Tuple2(
											'elmsh-del',
											_Utils_eq(
												highlight,
												$elm$core$Maybe$Just(2)))
										]))
								]),
							A2($elm$core$List$map, $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$fragmentView, fragments))
						]);
				},
				lines)));
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml = F2(
	function (maybeStart, lines) {
		if (maybeStart.$ === 1) {
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				_List_fromArray(
					[
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml(lines)
					]));
		} else {
			var start = maybeStart.a;
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('elmsh')
					]),
				$elm$core$List$singleton(
					A2(
						$elm$html$Html$code,
						_List_Nil,
						A2(
							$elm$core$List$indexedMap,
							$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$lineView(start),
							lines))));
		}
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml = F2(
	function (maybeStart, _v0) {
		var lines = _v0;
		return A2($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toBlockHtml, maybeStart, lines);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$useTheme = function (_v0) {
	var theme = _v0;
	return A3(
		$elm$html$Html$node,
		'style',
		_List_Nil,
		_List_fromArray(
			[
				$elm$html$Html$text(theme)
			]));
};
var $author$project$Internal$Render$highlightSyntax = F2(
	function (lang_, source) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'class', 'elmsh-pa')
				]),
			_List_fromArray(
				[
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$useTheme($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$oneDark),
					A2(
					$elm$core$Result$withDefault,
					A2(
						$elm$html$Html$pre,
						_List_Nil,
						_List_fromArray(
							[
								A2(
								$elm$html$Html$code,
								_List_fromArray(
									[
										A2($elm$html$Html$Attributes$style, 'padding', '8px')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(source)
									]))
							])),
					A2(
						$elm$core$Result$map,
						$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
							$elm$core$Maybe$Just(1)),
						$author$project$Internal$Render$getLang(lang_)(source)))
				]));
	});
var $author$project$Internal$Render$renderCodeEnvironment = F4(
	function (source_, latexState, optArgs, body) {
		var suffix = '\n\\end{colored}';
		var lang = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, optArgs);
		var prefix = '\\begin{colored}[' + (lang + ']\n');
		var source = $elm$core$String$trim(
			A3(
				$elm$core$String$replace,
				suffix,
				'',
				A3($elm$core$String$replace, prefix, '', source_)));
		return A2($author$project$Internal$Render$highlightSyntax, lang, source);
	});
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toInlineHtml = function (_v0) {
	var lines = _v0;
	return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$View$toInlineHtml(lines);
};
var $author$project$Internal$Render$renderColored = F3(
	function (source, latexState, args) {
		var theCode = A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args);
		var lang = $author$project$Internal$Render$getLang(
			A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args));
		return A2(
			$elm$core$Result$withDefault,
			A2(
				$elm$html$Html$code,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text('isEmpty : String -> Bool')
					])),
			A2(
				$elm$core$Result$map,
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toInlineHtml,
				lang(theCode)));
	});
var $author$project$Internal$Render$renderCommentEnvironment = F3(
	function (source, latexState, body) {
		return A2($elm$html$Html$div, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderDate = F3(
	function (_v0, latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $elm$html$Html$ul = _VirtualDom_node('ul');
var $author$project$Internal$Render$renderDocumentTitle = F3(
	function (_v0, latexState, list) {
		var title = A2($author$project$Internal$LatexState$getDictionaryItem, 'title', latexState);
		var titlePart = A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('title')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(title)
				]));
		var revision = A2($author$project$Internal$LatexState$getDictionaryItem, 'revision', latexState);
		var revisionText = (revision !== '') ? ('Last revised ' + revision) : '';
		var email = A2($author$project$Internal$LatexState$getDictionaryItem, 'email', latexState);
		var date = A2($author$project$Internal$LatexState$getDictionaryItem, 'date', latexState);
		var author = A2($author$project$Internal$LatexState$getDictionaryItem, 'author', latexState);
		var bodyParts = A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$elm$html$Html$li,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(x)
						]));
			},
			A2(
				$elm$core$List$filter,
				function (x) {
					return x !== '';
				},
				_List_fromArray(
					[author, email, date, revisionText])));
		var bodyPart = A2($elm$html$Html$ul, _List_Nil, bodyParts);
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[titlePart, bodyPart]));
	});
var $author$project$Internal$Render$renderDollar = F3(
	function (_v0, atexState, args) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('$')
				]));
	});
var $elm$html$Html$Attributes$height = function (n) {
	return A2(
		_VirtualDom_attribute,
		'height',
		$elm$core$String$fromInt(n));
};
var $elm$html$Html$iframe = _VirtualDom_node('iframe');
var $elm$html$Html$Attributes$src = function (url) {
	return A2(
		$elm$html$Html$Attributes$stringProperty,
		'src',
		_VirtualDom_noJavaScriptOrHtmlUri(url));
};
var $elm$html$Html$Attributes$width = function (n) {
	return A2(
		_VirtualDom_attribute,
		'width',
		$elm$core$String$fromInt(n));
};
var $author$project$Internal$Render$renderEllie = F3(
	function (_v0, latexState, args) {
		var title_ = A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args);
		var title = (title_ === 'xxx') ? 'Link to Ellie' : title_;
		var id = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		var url = 'https://ellie-app.com/embed/' + id;
		return A2(
			$elm$html$Html$iframe,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$src(url),
					$elm$html$Html$Attributes$width(500),
					$elm$html$Html$Attributes$height(600)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(title)
				]));
	});
var $author$project$Internal$Render$renderEmail = F3(
	function (_v0, latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderEnd = F3(
	function (_v0, atexState, args) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('\\end')
				]));
	});
var $author$project$Internal$LatexState$getCrossReference = F2(
	function (label, latexState) {
		var _v0 = A2($elm$core$Dict$get, label, latexState.dA);
		if (!_v0.$) {
			var ref = _v0.a;
			return ref;
		} else {
			return '??';
		}
	});
var $author$project$Internal$Render$renderEqRef = F3(
	function (source, latexState, args) {
		var key = A3($author$project$Internal$RenderToString$renderArg, 0, $author$project$Internal$LatexState$emptyLatexState, args);
		var ref = A2($author$project$Internal$LatexState$getCrossReference, key, latexState);
		return A2(
			$elm$html$Html$i,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('('),
					$elm$html$Html$text(ref),
					$elm$html$Html$text(')')
				]));
	});
var $author$project$Internal$Render$renderEqnArray = F3(
	function (source, latexState, body) {
		var body1 = A2($author$project$Internal$RenderToString$render, latexState, body);
		var body2 = '\\begin{aligned}' + (body1 + '\\end{aligned}');
		return A2($author$project$Internal$Render$displayMathText, latexState, body2);
	});
var $author$project$Internal$Render$displayMathTextWithLabel_ = F3(
	function (latexState, str, label) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'float', 'right'),
							A2($elm$html$Html$Attributes$style, 'margin-top', '3px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						])),
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$author$project$Internal$Render$mathText,
							1,
							$elm$core$String$trim(str))
						]))
				]));
	});
var $author$project$Internal$ParserHelpers$ExpectingLabel = 7;
var $author$project$Internal$ParserHelpers$ExpectingRightBrace = 2;
var $author$project$Internal$ParserHelpers$parseArg = function (macroName) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$succeed($elm$core$Basics$identity),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '\\' + (macroName + '{'), 7))),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			$elm$parser$Parser$Advanced$getChompedString(
				$elm$parser$Parser$Advanced$chompWhile(
					function (c) {
						return c !== '}';
					})),
			$elm$parser$Parser$Advanced$symbol(
				A2($elm$parser$Parser$Advanced$Token, '}', 2))));
};
var $author$project$Internal$ParserHelpers$getArg = F2(
	function (macroName, str) {
		var _v0 = A2(
			$elm$parser$Parser$Advanced$run,
			$author$project$Internal$ParserHelpers$parseArg(macroName),
			str);
		if (!_v0.$) {
			var str_ = _v0.a;
			return $elm$core$Maybe$Just(str_);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Internal$ParserHelpers$getTag = function (str) {
	return A2($author$project$Internal$ParserHelpers$getArg, 'tag', str);
};
var $author$project$Internal$ParserHelpers$removeLabel = function (str) {
	var _v0 = A2($author$project$Internal$ParserHelpers$getArg, 'label', str);
	if (_v0.$ === 1) {
		return str;
	} else {
		var word = _v0.a;
		return A3($elm$core$String$replace, '\\label{' + (word + '}'), '', str);
	}
};
var $author$project$Internal$Render$renderEquationEnvironment = F3(
	function (source, latexState, body) {
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var eqno = A2($author$project$Internal$LatexState$getCounter, 'eqno', latexState);
		var contents = function () {
			if (!body.$) {
				var str = body.a;
				return $author$project$Internal$ParserHelpers$removeLabel(
					A2(
						$author$project$Internal$MathMacro$evalStr,
						latexState.gl,
						$elm$core$String$trim(str)));
			} else {
				return 'Parser error in render equation environment';
			}
		}();
		var addendum = (eqno > 0) ? ((s1 > 0) ? ('\\tag{' + ($elm$core$String$fromInt(s1) + ('.' + ($elm$core$String$fromInt(eqno) + '}')))) : ('\\tag{' + ($elm$core$String$fromInt(eqno) + '}'))) : '';
		var tag = function () {
			var _v0 = $author$project$Internal$ParserHelpers$getTag(addendum);
			if (_v0.$ === 1) {
				return '';
			} else {
				var tag_ = _v0.a;
				return '(' + (tag_ + ')');
			}
		}();
		return A3($author$project$Internal$Render$displayMathTextWithLabel_, latexState, contents, tag);
	});
var $author$project$Internal$ErrorMessages2$getLine = F2(
	function (lineNumber, str) {
		getLine:
		while (true) {
			if (lineNumber <= 1) {
				return A2(
					$elm$core$Maybe$withDefault,
					str,
					$elm$core$List$head(
						A2($elm$core$String$split, '\n', str)));
			} else {
				var $temp$lineNumber = lineNumber - 1,
					$temp$str = A3(
					$elm$core$String$slice,
					A2(
						$elm$core$Maybe$withDefault,
						0,
						$elm$core$List$head(
							A2($elm$core$String$indexes, '\n', str))) + 1,
					$elm$core$String$length(str),
					str);
				lineNumber = $temp$lineNumber;
				str = $temp$str;
				continue getLine;
			}
		}
	});
var $author$project$Internal$ErrorMessages2$getRows = F2(
	function (k, source) {
		return A2(
			$elm$core$List$map,
			$elm$core$String$left(40),
			A2(
				$elm$core$List$map,
				$elm$core$Tuple$second,
				A2(
					$elm$core$List$filter,
					function (_v0) {
						var i = _v0.a;
						var line = _v0.b;
						return _Utils_cmp(i, k) < 0;
					},
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (i, line) {
								return _Utils_Tuple2(i, line);
							}),
						$elm$core$String$lines(source)))));
	});
var $author$project$Internal$ErrorMessages2$betterErrorText = F2(
	function (theError, source) {
		var firstLine = function (source_) {
			return _List_fromArray(
				[
					A2($author$project$Internal$ErrorMessages2$getLine, 1, source_)
				]);
		};
		var _v0 = theError.es;
		switch (_v0.$) {
			case 9:
				return firstLine(source);
			case 1:
				return firstLine(source);
			case 35:
				var word = _v0.a;
				return firstLine(source);
			default:
				return A2($author$project$Internal$ErrorMessages2$getRows, theError.gM, source);
		}
	});
var $author$project$Internal$ErrorMessages2$displayExpected = function (problem) {
	switch (problem.$) {
		case 0:
			return 'Expecting \'$\' to end inline math';
		case 1:
			return 'Make complete environment \\begin{..} ... \\end{..}';
		case 2:
			return 'Expecting \'$$\' to begin displayed math';
		case 3:
			return 'Expecting \'$$\' to end displayed math';
		case 4:
			return 'Expecting \'\\[\' or \'\\]\' for displayed math';
		case 5:
			return 'Expecting \'\\[\' or \'\\]\' for displayed math';
		case 6:
			return 'Missing \\end{env}';
		case 7:
			return 'Something is to complete the table cell';
		case 8:
			return 'Something is missing to complete the optional argument';
		case 9:
			return 'Fill in the macro argument: {..}';
		case 10:
			return 'Something is missing in this sequence of words';
		case 11:
			return 'Expecting left brace';
		case 12:
			return 'Complete the argument with a right brace : {..}';
		case 13:
			return 'Expecting left bracket';
		case 14:
			return 'Expecting right bracket';
		case 15:
			return 'Expecting left paren';
		case 16:
			return 'Expecting right paren';
		case 17:
			return 'Expecting new line';
		case 18:
			return 'Expecting percent';
		case 19:
			return 'Expecting macro reserved word';
		case 20:
			return 'Expecting smacro reserved word';
		case 21:
			return 'Expecting int';
		case 22:
			return 'Invalid int';
		case 23:
			return 'Expecting $';
		case 24:
			return 'Close your environment \\begin{..} ... \\end{..}';
		case 25:
			return 'Expecting \\end{envName}';
		case 26:
			return 'Expecting begin{';
		case 27:
			return 'Expecting end}';
		case 28:
			return 'Expecting \\[';
		case 29:
			return 'Expecting \n\n';
		case 30:
			return 'Expecting \\item';
		case 31:
			return 'Complete your \\item ...';
		case 32:
			return 'Expecting &';
		case 33:
			return 'Expecting \\\\\n';
		case 34:
			return 'Expecting \\newcommand{';
		case 35:
			var envName = problem.a;
			return 'Close environment with ' + envName;
		default:
			var envName = problem.a;
			return 'Do you have an incomplete \\item ... ?';
	}
};
var $author$project$Internal$ErrorMessages2$renderErrors = F2(
	function (source, errs) {
		var _v0 = $elm$core$List$head(
			$elm$core$List$reverse(errs));
		if (_v0.$ === 1) {
			return {cO: _List_Nil, cP: 'no explanation', c$: 0};
		} else {
			var theErr = _v0.a;
			var errColumn = A2(
				$elm$core$Maybe$withDefault,
				1,
				A2(
					$elm$core$Maybe$map,
					function ($) {
						return $.fC;
					},
					$elm$core$List$head(theErr.fF)));
			var markerOffset = errColumn;
			return {
				cO: A2($author$project$Internal$ErrorMessages2$betterErrorText, theErr, source),
				cP: $author$project$Internal$ErrorMessages2$displayExpected(theErr.es),
				c$: markerOffset
			};
		}
	});
var $elm$html$Html$Attributes$target = $elm$html$Html$Attributes$stringProperty('target');
var $author$project$Internal$Render$renderHRef = F3(
	function (source, latexState, args) {
		var url = A3($author$project$Internal$RenderToString$renderArg, 0, $author$project$Internal$LatexState$emptyLatexState, args);
		var label = A3($author$project$Internal$RenderToString$renderArg, 1, $author$project$Internal$LatexState$emptyLatexState, args);
		return A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(url),
					$elm$html$Html$Attributes$target('_blank')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(label)
				]));
	});
var $author$project$Internal$Render$renderHighlighted = F3(
	function (_v0, latexState, args) {
		var arg = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'background-color', 'yellow')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(arg)
				]));
	});
var $author$project$Internal$Render$renderHomePageLink = F3(
	function (_v0, latexState, args) {
		var label = A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args);
		var id = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		var ref = A2($author$project$Internal$LatexState$getDictionaryItem, 'setclient', latexState) + ('/h/' + id);
		return A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(ref)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(label)
				]));
	});
var $author$project$Internal$Render$renderIFrame = F3(
	function (_v0, latexState, args) {
		var url = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		var title = A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args);
		return A2(
			$elm$html$Html$iframe,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$src(url),
					$elm$html$Html$Attributes$width(400),
					$elm$html$Html$Attributes$height(500),
					A2($elm$html$Html$Attributes$attribute, 'Content-Type', 'application/pdf'),
					A2($elm$html$Html$Attributes$attribute, 'Content-Disposition', 'inline')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(title)
				]));
	});
var $author$project$Internal$Render$renderILink = F3(
	function (_v0, latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $elm$html$Html$Attributes$alt = $elm$html$Html$Attributes$stringProperty('alt');
var $elm$html$Html$br = _VirtualDom_node('br');
var $elm$html$Html$img = _VirtualDom_node('img');
var $author$project$Internal$Render$renderImage = F3(
	function (source, latexState, args) {
		var url = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		var label = A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args);
		var attributeString = A3($author$project$Internal$RenderToString$renderArg, 2, latexState, args);
		var imageAttrs = $author$project$Internal$Image$parseImageAttributes(attributeString);
		var width = $elm$core$String$fromInt(imageAttrs.hC) + 'px';
		return (imageAttrs.fR === 'left') ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'float', 'left')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(url),
							$elm$html$Html$Attributes$alt(label),
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'margin-right', '12px')
						]),
					_List_Nil),
					A2($elm$html$Html$br, _List_Nil, _List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				])) : ((imageAttrs.fR === 'right') ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'float', 'right')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(url),
							$elm$html$Html$Attributes$alt(label),
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'margin-left', '12px')
						]),
					_List_Nil),
					A2($elm$html$Html$br, _List_Nil, _List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				])) : ((imageAttrs.e8 === 'center') ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-left', 'auto'),
					A2($elm$html$Html$Attributes$style, 'margin-right', 'auto'),
					A2($elm$html$Html$Attributes$style, 'width', width)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(url),
							$elm$html$Html$Attributes$alt(label),
							A2($elm$html$Html$Attributes$style, 'width', width)
						]),
					_List_Nil),
					A2($elm$html$Html$br, _List_Nil, _List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				])) : A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-left', 'auto'),
					A2($elm$html$Html$Attributes$style, 'margin-right', 'auto'),
					A2($elm$html$Html$Attributes$style, 'width', width)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(url),
							$elm$html$Html$Attributes$alt(label),
							A2($elm$html$Html$Attributes$style, 'width', width)
						]),
					_List_Nil),
					A2($elm$html$Html$br, _List_Nil, _List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]))
				]))));
	});
var $author$project$Internal$Render$renderImageRef = F3(
	function (source, latexState, args) {
		var url = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		var imageUrl = A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args);
		var attributeString = A3($author$project$Internal$RenderToString$renderArg, 2, latexState, args);
		var imageAttrs = $author$project$Internal$Image$parseImageAttributes(attributeString);
		var width = $elm$core$String$fromInt(imageAttrs.hC) + 'px';
		var theImage = (imageAttrs.fR === 'left') ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'float', 'left')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(imageUrl),
							$elm$html$Html$Attributes$alt('image link'),
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'margin-right', '12px')
						]),
					_List_Nil),
					A2($elm$html$Html$br, _List_Nil, _List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_Nil)
				])) : ((imageAttrs.fR === 'right') ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'float', 'right')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(imageUrl),
							$elm$html$Html$Attributes$alt('image link'),
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'margin-left', '12px')
						]),
					_List_Nil),
					A2($elm$html$Html$br, _List_Nil, _List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_Nil)
				])) : ((imageAttrs.e8 === 'center') ? A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-left', 'auto'),
					A2($elm$html$Html$Attributes$style, 'margin-right', 'auto'),
					A2($elm$html$Html$Attributes$style, 'width', width)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(imageUrl),
							$elm$html$Html$Attributes$alt('image link'),
							A2($elm$html$Html$Attributes$style, 'width', width)
						]),
					_List_Nil),
					A2($elm$html$Html$br, _List_Nil, _List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_Nil)
				])) : A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-left', 'auto'),
					A2($elm$html$Html$Attributes$style, 'margin-right', 'auto'),
					A2($elm$html$Html$Attributes$style, 'width', width)
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$src(imageUrl),
							$elm$html$Html$Attributes$alt('image link'),
							A2($elm$html$Html$Attributes$style, 'width', width)
						]),
					_List_Nil),
					A2($elm$html$Html$br, _List_Nil, _List_Nil),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'width', width),
							A2($elm$html$Html$Attributes$style, 'text-align', 'center'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_Nil)
				]))));
		return A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(url)
				]),
			_List_fromArray(
				[theImage]));
	});
var $author$project$Internal$Render$renderInclude = F3(
	function (_v0, latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderIndex = F3(
	function (source, x, z) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$sectionPrefix = function (level) {
	switch (level) {
		case 1:
			return 'section';
		case 2:
			return 'subsection';
		case 3:
			return 'subsubsection';
		default:
			return 'asection';
	}
};
var $author$project$Internal$Render$makeTocItem = F2(
	function (prefix, tocItem) {
		var ti = tocItem.b;
		var id = A2(
			$author$project$Internal$Render$makeId,
			$author$project$Internal$Render$sectionPrefix(ti.gk),
			ti.gp);
		var i = tocItem.a;
		var number = prefix + ($elm$core$String$fromInt(i + 1) + '. ');
		var href = '#' + id;
		var classProperty = 'class=\"sectionLevel' + ($elm$core$String$fromInt(ti.gk) + '\"');
		return A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'font-size', '14px'),
					A2($elm$html$Html$Attributes$style, 'padding-bottom', '0px'),
					A2($elm$html$Html$Attributes$style, 'margin-bottom', '0px'),
					A2($elm$html$Html$Attributes$style, 'padding-top', '0px'),
					A2($elm$html$Html$Attributes$style, 'margin-top', '0px'),
					A2($elm$html$Html$Attributes$style, 'line-height', '20px')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(number),
					A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(href)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(ti.gp)
						]))
				]));
	});
var $author$project$Internal$Render$makeInnerTableOfContents = F2(
	function (prefix, latexState) {
		var toc = A2(
			$elm$core$List$filter,
			function (item) {
				return item.gk === 2;
			},
			latexState.eV);
		return A3(
			$elm$core$List$foldl,
			F2(
				function (tocItem, acc) {
					return _Utils_ap(
						acc,
						_List_fromArray(
							[
								A2($author$project$Internal$Render$makeTocItem, prefix, tocItem)
							]));
				}),
			_List_Nil,
			A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, toc));
	});
var $author$project$Internal$Render$renderInnerTableOfContents = F3(
	function (_v0, latexState, args) {
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var prefix = $elm$core$String$fromInt(s1) + '.';
		var innerPart = A2($author$project$Internal$Render$makeInnerTableOfContents, prefix, latexState);
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Table of Contents')
						])),
					A2($elm$html$Html$ul, _List_Nil, innerPart)
				]));
	});
var $author$project$Internal$Render$renderLabel = F3(
	function (source, x, z) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderListing = F3(
	function (_v0, latexState, body) {
		var text = A2($author$project$Internal$RenderToString$render, latexState, body);
		var lines = $author$project$Internal$Utility$addLineNumbers(text);
		return A2(
			$elm$html$Html$pre,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('verbatim')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(lines)
				]));
	});
var $author$project$Internal$Render$renderLocal = F3(
	function (_v0, latexState, args) {
		var arg = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'color', 'blue'),
					A2($elm$html$Html$Attributes$style, 'white-space', 'pre')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(arg)
				]));
	});
var $author$project$Internal$Render$renderMacros = F3(
	function (_v0, latexState, body) {
		return A2(
			$author$project$Internal$Render$displayMathText,
			latexState,
			A2($author$project$Internal$RenderToString$render, latexState, body));
	});
var $author$project$Internal$Render$renderMainTableOfContents = F3(
	function (source, latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderMakeTitle = F3(
	function (source, latexState, list) {
		var title = A2($author$project$Internal$LatexState$getDictionaryItem, 'title', latexState);
		var titlePart = A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'font-size', '28px'),
					A2($elm$html$Html$Attributes$style, 'padding-bottom', '12px')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(title)
				]));
		var revision = A2($author$project$Internal$LatexState$getDictionaryItem, 'revision', latexState);
		var revisionText = (revision !== '') ? ('Last revised ' + revision) : '';
		var email = A2($author$project$Internal$LatexState$getDictionaryItem, 'email', latexState);
		var date = A2($author$project$Internal$LatexState$getDictionaryItem, 'date', latexState);
		var bodyParts = A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'font-size', '14px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(x)
						]));
			},
			A2(
				$elm$core$List$filter,
				function (x) {
					return x !== '';
				},
				_List_fromArray(
					[date, revisionText, email])));
		var author = A2($author$project$Internal$LatexState$getDictionaryItem, 'author', latexState);
		var authorPart = A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'font-size', '18px'),
					A2($elm$html$Html$Attributes$style, 'padding-bottom', '4px')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(author)
				]));
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			A2(
				$elm$core$List$cons,
				titlePart,
				A2($elm$core$List$cons, authorPart, bodyParts)));
	});
var $author$project$Internal$Render$renderMathEnvironment = F4(
	function (envName, _v0, latexState, body) {
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var r = A2($author$project$Internal$RenderToString$render, latexState, body);
		var innerContents = function () {
			if (!body.$) {
				var str = body.a;
				return $author$project$Internal$ParserHelpers$removeLabel(
					A3(
						$elm$core$String$replace,
						'\\ \\',
						'\\\\',
						A2(
							$author$project$Internal$MathMacro$evalStr,
							latexState.gl,
							$elm$core$String$trim(str))));
			} else {
				return '';
			}
		}();
		var eqno = A2($author$project$Internal$LatexState$getCounter, 'eqno', latexState);
		var content = '\n\\begin{' + (envName + ('}\n' + (innerContents + ('\n\\end{' + (envName + '}\n')))));
		var addendum = (eqno > 0) ? ((s1 > 0) ? ('\\tag{' + ($elm$core$String$fromInt(s1) + ('.' + ($elm$core$String$fromInt(eqno) + '}')))) : ('\\tag{' + ($elm$core$String$fromInt(eqno) + '}'))) : '';
		var tag = function () {
			var _v1 = $author$project$Internal$ParserHelpers$getTag(addendum);
			if (_v1.$ === 1) {
				return '';
			} else {
				var tag_ = _v1.a;
				return '(' + (tag_ + ')');
			}
		}();
		return A3($author$project$Internal$Render$displayMathTextWithLabel_, latexState, content, tag);
	});
var $author$project$Internal$Render$mathJaxText = F2(
	function (displayMode, content) {
		return A3(
			$elm$html$Html$node,
			'mathjax-text',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Attributes$property,
					'display',
					$elm$json$Json$Encode$bool(true)),
					A2(
					$elm$html$Html$Attributes$property,
					'content',
					$elm$json$Json$Encode$string(
						A3($elm$core$String$replace, '\\ \\', '\\\\', content)))
				]),
			_List_Nil);
	});
var $author$project$Internal$Render$displayMathJaxTextWithLabel_ = F3(
	function (latexState, str, label) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'float', 'right'),
							A2($elm$html$Html$Attributes$style, 'margin-top', '3px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						])),
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$author$project$Internal$Render$mathJaxText,
							1,
							$elm$core$String$trim(str))
						]))
				]));
	});
var $author$project$Internal$Render$renderMathJaxEnvironment = F4(
	function (envName, source, latexState, body) {
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var r = A2($author$project$Internal$RenderToString$render, latexState, body);
		var innerContents = function () {
			if (!body.$) {
				var str = body.a;
				return function (x) {
					return '\\begin{' + (envName + ('}\n' + (x + ('\n\\end{' + (envName + '}')))));
				}(
					$author$project$Internal$ParserHelpers$removeLabel(
						A3(
							$elm$core$String$replace,
							'\\ \\',
							'\\\\',
							A2(
								$author$project$Internal$MathMacro$evalStr,
								latexState.gl,
								$elm$core$String$trim(str)))));
			} else {
				return '';
			}
		}();
		var eqno = A2($author$project$Internal$LatexState$getCounter, 'eqno', latexState);
		var content = '\n\\begin{' + (envName + ('}\n' + (innerContents + ('\n\\end{' + (envName + '}\n')))));
		var addendum = (eqno > 0) ? ((s1 > 0) ? ('\\tag{' + ($elm$core$String$fromInt(s1) + ('.' + ($elm$core$String$fromInt(eqno) + '}')))) : ('\\tag{' + ($elm$core$String$fromInt(eqno) + '}'))) : '';
		var tag = function () {
			var _v0 = $author$project$Internal$ParserHelpers$getTag(addendum);
			if (_v0.$ === 1) {
				return '';
			} else {
				var tag_ = _v0.a;
				return '(' + (tag_ + ')');
			}
		}();
		return A3($author$project$Internal$Render$displayMathJaxTextWithLabel_, latexState, innerContents, tag);
	});
var $author$project$Internal$Render$renderMathMacros = F3(
	function (_v0, _v1, _v2) {
		return A2($elm$html$Html$div, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderMdash = F3(
	function (source, latexState, args) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('— ')
				]));
	});
var $author$project$Internal$Render$renderMedSkip = F3(
	function (_v0, latexState, args) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'height', '10px')
				]),
			_List_Nil);
	});
var $author$project$Internal$Render$renderNdash = F3(
	function (source, latexState, args) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('– ')
				]));
	});
var $author$project$Internal$Render$renderPercent = F3(
	function (_v0, latexState, args) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('%')
				]));
	});
var $author$project$Internal$Render$renderPublicLink = F3(
	function (_v0, latexState, args) {
		var label = A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args);
		var id = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		var ref = A2($author$project$Internal$LatexState$getDictionaryItem, 'setclient', latexState) + ('/' + id);
		return A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(ref)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(label)
				]));
	});
var $author$project$Internal$Render$renderRed = F3(
	function (_v0, latexState, args) {
		var arg = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'color', 'red')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(arg)
				]));
	});
var $author$project$Internal$Render$renderRef = F3(
	function (source, latexState, args) {
		var key = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text(
					A2($author$project$Internal$LatexState$getCrossReference, key, latexState))
				]));
	});
var $author$project$Internal$Render$renderRemote = F3(
	function (_v0, latexState, args) {
		var arg = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'color', 'red'),
					A2($elm$html$Html$Attributes$style, 'white-space', 'pre')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(arg)
				]));
	});
var $author$project$Internal$Render$renderRevision = F3(
	function (_v0, latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderSetClient = F3(
	function (_v0, latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderSetCounter = F3(
	function (_v0, latexState, list) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderSetDocId = F3(
	function (_v0, latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderSmallSkip = F3(
	function (_v0, latexState, args) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'height', '0px')
				]),
			_List_Nil);
	});
var $author$project$Internal$Render$renderStrikeThrough = F3(
	function (_v0, latexState, args) {
		var arg = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'text-decoration', 'line-through')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(arg)
				]));
	});
var $elm$core$Result$andThen = F2(
	function (callback, result) {
		if (!result.$) {
			var value = result.a;
			return callback(value);
		} else {
			var msg = result.a;
			return $elm$core$Result$Err(msg);
		}
	});
var $elm$virtual_dom$VirtualDom$nodeNS = function (tag) {
	return _VirtualDom_nodeNS(
		_VirtualDom_noScript(tag));
};
var $elm$svg$Svg$node = $elm$virtual_dom$VirtualDom$nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$text = $elm$virtual_dom$VirtualDom$text;
var $Garados007$elm_svg_parser$SvgParser$toAttribute = function (_v0) {
	var name = _v0.a;
	var value = _v0.b;
	return A2($elm$virtual_dom$VirtualDom$attribute, name, value);
};
var $Garados007$elm_svg_parser$SvgParser$elementToSvg = function (element) {
	return A3(
		$elm$svg$Svg$node,
		element.gp,
		A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$toAttribute, element.aY),
		A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$nodeToSvg, element.aQ));
};
var $Garados007$elm_svg_parser$SvgParser$nodeToSvg = function (svgNode) {
	switch (svgNode.$) {
		case 0:
			var element = svgNode.a;
			return $Garados007$elm_svg_parser$SvgParser$elementToSvg(element);
		case 1:
			var content = svgNode.a;
			return $elm$svg$Svg$text(content);
		default:
			var content = svgNode.a;
			return $elm$svg$Svg$text('');
	}
};
var $andre_dietrich$parser_combinators$Combine$Parser = $elm$core$Basics$identity;
var $andre_dietrich$parser_combinators$Combine$app = function (_v0) {
	var inner = _v0;
	return inner;
};
var $andre_dietrich$parser_combinators$Combine$andThen = F2(
	function (f, p) {
		return F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (!_v0.c.$) {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					return A3(
						$andre_dietrich$parser_combinators$Combine$app,
						f(res),
						rstate,
						rstream);
				} else {
					var estate = _v0.a;
					var estream = _v0.b;
					var ms = _v0.c.a;
					return _Utils_Tuple3(
						estate,
						estream,
						$elm$core$Result$Err(ms));
				}
			});
	});
var $pilatch$flip$Flip$flip = F3(
	function (_function, argB, argA) {
		return A2(_function, argA, argB);
	});
var $andre_dietrich$parser_combinators$Combine$bimap = F3(
	function (fok, ferr, p) {
		return F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (!_v0.c.$) {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					return _Utils_Tuple3(
						rstate,
						rstream,
						$elm$core$Result$Ok(
							fok(res)));
				} else {
					var estate = _v0.a;
					var estream = _v0.b;
					var ms = _v0.c.a;
					return _Utils_Tuple3(
						estate,
						estream,
						$elm$core$Result$Err(
							ferr(ms)));
				}
			});
	});
var $andre_dietrich$parser_combinators$Combine$map = F2(
	function (f, p) {
		return A3($andre_dietrich$parser_combinators$Combine$bimap, f, $elm$core$Basics$identity, p);
	});
var $andre_dietrich$parser_combinators$Combine$andMap = F2(
	function (rp, lp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andThen,
			A2($pilatch$flip$Flip$flip, $andre_dietrich$parser_combinators$Combine$map, rp),
			lp);
	});
var $Garados007$elm_svg_parser$SvgParser$flip = F3(
	function (func, b, a) {
		return A2(func, a, b);
	});
var $Garados007$elm_svg_parser$SvgParser$andMapRight = F2(
	function (lp, rp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			rp,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$Garados007$elm_svg_parser$SvgParser$flip($elm$core$Basics$always),
				lp));
	});
var $Garados007$elm_svg_parser$SvgParser$SvgElement = function (a) {
	return {$: 0, a: a};
};
var $Garados007$elm_svg_parser$SvgParser$andMapLeft = F2(
	function (lp, rp) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			rp,
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$Basics$always, lp));
	});
var $andre_dietrich$parser_combinators$Combine$emptyErr = F2(
	function (state, stream) {
		return _Utils_Tuple3(
			state,
			stream,
			$elm$core$Result$Err(_List_Nil));
	});
var $andre_dietrich$parser_combinators$Combine$or = F2(
	function (lp, rp) {
		return F2(
			function (state, stream) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, lp, state, stream);
				if (!_v0.c.$) {
					var res = _v0;
					return res;
				} else {
					var lms = _v0.c.a;
					var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, rp, state, stream);
					if (!_v1.c.$) {
						var res = _v1;
						return res;
					} else {
						var rms = _v1.c.a;
						return _Utils_Tuple3(
							state,
							stream,
							$elm$core$Result$Err(
								_Utils_ap(lms, rms)));
					}
				}
			});
	});
var $andre_dietrich$parser_combinators$Combine$choice = function (xs) {
	return A3($elm$core$List$foldr, $andre_dietrich$parser_combinators$Combine$or, $andre_dietrich$parser_combinators$Combine$emptyErr, xs);
};
var $Garados007$elm_svg_parser$SvgParser$SvgComment = function (a) {
	return {$: 2, a: a};
};
var $andre_dietrich$parser_combinators$Combine$mapError = $andre_dietrich$parser_combinators$Combine$bimap($elm$core$Basics$identity);
var $andre_dietrich$parser_combinators$Combine$onerror = F2(
	function (m, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$mapError,
			$elm$core$Basics$always(
				_List_fromArray(
					[m])),
			p);
	});
var $andre_dietrich$parser_combinators$Combine$primitive = $elm$core$Basics$identity;
var $andre_dietrich$parser_combinators$Combine$Char$satisfy = function (pred) {
	return $andre_dietrich$parser_combinators$Combine$primitive(
		F2(
			function (state, stream) {
				var message = 'could not satisfy predicate';
				var _v0 = $elm$core$String$uncons(stream.a4);
				if (!_v0.$) {
					var _v1 = _v0.a;
					var h = _v1.a;
					var rest = _v1.b;
					return pred(h) ? _Utils_Tuple3(
						state,
						_Utils_update(
							stream,
							{a4: rest, R: stream.R + 1}),
						$elm$core$Result$Ok(h)) : _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$Result$Err(
							_List_fromArray(
								[message])));
				}
			}));
};
var $andre_dietrich$parser_combinators$Combine$Char$anyChar = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'expected any character',
	$andre_dietrich$parser_combinators$Combine$Char$satisfy(
		$elm$core$Basics$always(true)));
var $andre_dietrich$parser_combinators$Combine$succeed = function (res) {
	return F2(
		function (state, stream) {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Ok(res));
		});
};
var $andre_dietrich$parser_combinators$Combine$lazy = function (t) {
	return A2(
		$andre_dietrich$parser_combinators$Combine$andThen,
		t,
		$andre_dietrich$parser_combinators$Combine$succeed(0));
};
var $andre_dietrich$parser_combinators$Combine$manyTill = F2(
	function (p, end_) {
		var accumulate = F3(
			function (acc, state, stream) {
				accumulate:
				while (true) {
					var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, end_, state, stream);
					if (!_v0.c.$) {
						var rstate = _v0.a;
						var rstream = _v0.b;
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$Result$Ok(
								$elm$core$List$reverse(acc)));
					} else {
						var estate = _v0.a;
						var estream = _v0.b;
						var ms = _v0.c.a;
						var _v1 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
						if (!_v1.c.$) {
							var rstate = _v1.a;
							var rstream = _v1.b;
							var res = _v1.c.a;
							var $temp$acc = A2($elm$core$List$cons, res, acc),
								$temp$state = rstate,
								$temp$stream = rstream;
							acc = $temp$acc;
							state = $temp$state;
							stream = $temp$stream;
							continue accumulate;
						} else {
							return _Utils_Tuple3(
								estate,
								estream,
								$elm$core$Result$Err(ms));
						}
					}
				}
			});
		return accumulate(_List_Nil);
	});
var $andre_dietrich$parser_combinators$Combine$string = function (s) {
	return F2(
		function (state, stream) {
			if (A2($elm$core$String$startsWith, s, stream.a4)) {
				var len = $elm$core$String$length(s);
				var pos = stream.R + len;
				var rem = A2($elm$core$String$dropLeft, len, stream.a4);
				return _Utils_Tuple3(
					state,
					_Utils_update(
						stream,
						{a4: rem, R: pos}),
					$elm$core$Result$Ok(s));
			} else {
				return _Utils_Tuple3(
					state,
					stream,
					$elm$core$Result$Err(
						_List_fromArray(
							['expected \"' + (s + '\"')])));
			}
		});
};
var $elm$regex$Regex$findAtMost = _Regex_findAtMost;
var $andre_dietrich$parser_combinators$Combine$regexer = F5(
	function (input, output, pat, state, stream) {
		var pattern = A2($elm$core$String$startsWith, '^', pat) ? pat : ('^' + pat);
		var _v0 = A3(
			$elm$regex$Regex$findAtMost,
			1,
			A2(
				$elm$core$Maybe$withDefault,
				$elm$regex$Regex$never,
				input(pattern)),
			stream.a4);
		if (_v0.b && (!_v0.b.b)) {
			var match = _v0.a;
			var len = $elm$core$String$length(match.bW);
			var pos = stream.R + len;
			var rem = A2($elm$core$String$dropLeft, len, stream.a4);
			return _Utils_Tuple3(
				state,
				_Utils_update(
					stream,
					{a4: rem, R: pos}),
				$elm$core$Result$Ok(
					output(match)));
		} else {
			return _Utils_Tuple3(
				state,
				stream,
				$elm$core$Result$Err(
					_List_fromArray(
						['expected input matching Regexp /' + (pattern + '/')])));
		}
	});
var $andre_dietrich$parser_combinators$Combine$regex = A2(
	$elm$core$Basics$composeR,
	A2(
		$andre_dietrich$parser_combinators$Combine$regexer,
		$elm$regex$Regex$fromString,
		function ($) {
			return $.bW;
		}),
	$elm$core$Basics$identity);
var $andre_dietrich$parser_combinators$Combine$whitespace = A2(
	$andre_dietrich$parser_combinators$Combine$onerror,
	'optional whitespace',
	$andre_dietrich$parser_combinators$Combine$regex('\\s*'));
var $Garados007$elm_svg_parser$SvgParser$commentParser = $andre_dietrich$parser_combinators$Combine$lazy(
	function (_v0) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$map,
			A2($elm$core$Basics$composeL, $Garados007$elm_svg_parser$SvgParser$SvgComment, $elm$core$String$fromList),
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				A2(
					$Garados007$elm_svg_parser$SvgParser$andMapRight,
					$andre_dietrich$parser_combinators$Combine$whitespace,
					$andre_dietrich$parser_combinators$Combine$string('<!--')),
				A2(
					$andre_dietrich$parser_combinators$Combine$manyTill,
					$andre_dietrich$parser_combinators$Combine$Char$anyChar,
					$andre_dietrich$parser_combinators$Combine$string('-->'))));
	});
var $andre_dietrich$parser_combinators$Combine$many = function (p) {
	var accumulate = F3(
		function (acc, state, stream) {
			accumulate:
			while (true) {
				var _v0 = A3($andre_dietrich$parser_combinators$Combine$app, p, state, stream);
				if (!_v0.c.$) {
					var rstate = _v0.a;
					var rstream = _v0.b;
					var res = _v0.c.a;
					if (_Utils_eq(stream, rstream)) {
						return _Utils_Tuple3(
							rstate,
							rstream,
							$elm$core$List$reverse(acc));
					} else {
						var $temp$acc = A2($elm$core$List$cons, res, acc),
							$temp$state = rstate,
							$temp$stream = rstream;
						acc = $temp$acc;
						state = $temp$state;
						stream = $temp$stream;
						continue accumulate;
					}
				} else {
					return _Utils_Tuple3(
						state,
						stream,
						$elm$core$List$reverse(acc));
				}
			}
		});
	return F2(
		function (state, stream) {
			var _v1 = A3(accumulate, _List_Nil, state, stream);
			var rstate = _v1.a;
			var rstream = _v1.b;
			var res = _v1.c;
			return _Utils_Tuple3(
				rstate,
				rstream,
				$elm$core$Result$Ok(res));
		});
};
var $Garados007$elm_svg_parser$SvgParser$Element = F3(
	function (name, attributes, children) {
		return {aY: attributes, aQ: children, gp: name};
	});
var $andre_dietrich$parser_combinators$Combine$optional = F2(
	function (res, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			p,
			$andre_dietrich$parser_combinators$Combine$succeed(res));
	});
var $Garados007$elm_svg_parser$SvgParser$attributeParser = A2(
	$andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		$andre_dietrich$parser_combinators$Combine$optional,
		'',
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapLeft,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				$andre_dietrich$parser_combinators$Combine$string('=\"'),
				$andre_dietrich$parser_combinators$Combine$regex('[^\"]*')),
			$andre_dietrich$parser_combinators$Combine$string('\"'))),
	A2(
		$andre_dietrich$parser_combinators$Combine$map,
		$elm$core$Tuple$pair,
		$andre_dietrich$parser_combinators$Combine$regex('[^=>/]+')));
var $andre_dietrich$parser_combinators$Combine$keep = F2(
	function (p1, p2) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			p1,
			A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$pilatch$flip$Flip$flip($elm$core$Basics$always),
				p2));
	});
var $andre_dietrich$parser_combinators$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$andMap,
			$andre_dietrich$parser_combinators$Combine$many(
				A2($andre_dietrich$parser_combinators$Combine$keep, p, sep)),
			A2($andre_dietrich$parser_combinators$Combine$map, $elm$core$List$cons, p));
	});
var $andre_dietrich$parser_combinators$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$or,
			A2($andre_dietrich$parser_combinators$Combine$sepBy1, sep, p),
			$andre_dietrich$parser_combinators$Combine$succeed(_List_Nil));
	});
var $Garados007$elm_svg_parser$SvgParser$openingParser = A3(
	$Garados007$elm_svg_parser$SvgParser$flip,
	$andre_dietrich$parser_combinators$Combine$andMap,
	A2(
		$andre_dietrich$parser_combinators$Combine$andMap,
		$andre_dietrich$parser_combinators$Combine$regex('[^/>\\s]+'),
		A2(
			$andre_dietrich$parser_combinators$Combine$map,
			F3(
				function (_v0, tagName, attributes) {
					return A3($Garados007$elm_svg_parser$SvgParser$Element, tagName, attributes, _List_Nil);
				}),
			$andre_dietrich$parser_combinators$Combine$string('<'))),
	A2(
		$Garados007$elm_svg_parser$SvgParser$andMapLeft,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			A2($andre_dietrich$parser_combinators$Combine$sepBy, $andre_dietrich$parser_combinators$Combine$whitespace, $Garados007$elm_svg_parser$SvgParser$attributeParser)),
		$andre_dietrich$parser_combinators$Combine$whitespace));
var $Garados007$elm_svg_parser$SvgParser$SvgText = function (a) {
	return {$: 1, a: a};
};
var $Garados007$elm_svg_parser$SvgParser$textParser = $andre_dietrich$parser_combinators$Combine$lazy(
	function (_v0) {
		return A2(
			$andre_dietrich$parser_combinators$Combine$map,
			$Garados007$elm_svg_parser$SvgParser$SvgText,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapRight,
				$andre_dietrich$parser_combinators$Combine$whitespace,
				$andre_dietrich$parser_combinators$Combine$regex('[^<]+')));
	});
var $Garados007$elm_svg_parser$SvgParser$closingOrChildrenParser = function (element) {
	var childrenParser = A2(
		$andre_dietrich$parser_combinators$Combine$map,
		function (children) {
			return _Utils_update(
				element,
				{aQ: children});
		},
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapLeft,
			A2(
				$Garados007$elm_svg_parser$SvgParser$andMapLeft,
				A2(
					$Garados007$elm_svg_parser$SvgParser$andMapRight,
					A2(
						$Garados007$elm_svg_parser$SvgParser$andMapRight,
						$andre_dietrich$parser_combinators$Combine$whitespace,
						$andre_dietrich$parser_combinators$Combine$string('>')),
					$andre_dietrich$parser_combinators$Combine$many(
						$Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser())),
				$andre_dietrich$parser_combinators$Combine$whitespace),
			$andre_dietrich$parser_combinators$Combine$string('</' + (element.gp + '>'))));
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v2) {
			return $andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						A2(
						$Garados007$elm_svg_parser$SvgParser$andMapRight,
						A2(
							$Garados007$elm_svg_parser$SvgParser$andMapRight,
							$andre_dietrich$parser_combinators$Combine$whitespace,
							$andre_dietrich$parser_combinators$Combine$string('/>')),
						$andre_dietrich$parser_combinators$Combine$succeed(element)),
						childrenParser
					]));
		});
};
function $Garados007$elm_svg_parser$SvgParser$cyclic$elementParser() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v1) {
			return A2(
				$andre_dietrich$parser_combinators$Combine$map,
				$Garados007$elm_svg_parser$SvgParser$SvgElement,
				A2(
					$andre_dietrich$parser_combinators$Combine$andThen,
					$Garados007$elm_svg_parser$SvgParser$closingOrChildrenParser,
					A2(
						$andre_dietrich$parser_combinators$Combine$andMap,
						$Garados007$elm_svg_parser$SvgParser$openingParser,
						A2(
							$andre_dietrich$parser_combinators$Combine$map,
							$Garados007$elm_svg_parser$SvgParser$flip($elm$core$Basics$always),
							$andre_dietrich$parser_combinators$Combine$whitespace))));
		});
}
function $Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser() {
	return $andre_dietrich$parser_combinators$Combine$lazy(
		function (_v0) {
			return $andre_dietrich$parser_combinators$Combine$choice(
				_List_fromArray(
					[
						$Garados007$elm_svg_parser$SvgParser$textParser,
						$Garados007$elm_svg_parser$SvgParser$commentParser,
						$Garados007$elm_svg_parser$SvgParser$cyclic$elementParser()
					]));
		});
}
var $Garados007$elm_svg_parser$SvgParser$elementParser = $Garados007$elm_svg_parser$SvgParser$cyclic$elementParser();
$Garados007$elm_svg_parser$SvgParser$cyclic$elementParser = function () {
	return $Garados007$elm_svg_parser$SvgParser$elementParser;
};
var $Garados007$elm_svg_parser$SvgParser$nodeParser = $Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser();
$Garados007$elm_svg_parser$SvgParser$cyclic$nodeParser = function () {
	return $Garados007$elm_svg_parser$SvgParser$nodeParser;
};
var $andre_dietrich$parser_combinators$Combine$InputStream = F3(
	function (data, input, position) {
		return {dC: data, a4: input, R: position};
	});
var $andre_dietrich$parser_combinators$Combine$initStream = function (s) {
	return A3($andre_dietrich$parser_combinators$Combine$InputStream, s, s, 0);
};
var $andre_dietrich$parser_combinators$Combine$runParser = F3(
	function (p, st, s) {
		var _v0 = A3(
			$andre_dietrich$parser_combinators$Combine$app,
			p,
			st,
			$andre_dietrich$parser_combinators$Combine$initStream(s));
		if (!_v0.c.$) {
			var state = _v0.a;
			var stream = _v0.b;
			var res = _v0.c.a;
			return $elm$core$Result$Ok(
				_Utils_Tuple3(state, stream, res));
		} else {
			var state = _v0.a;
			var stream = _v0.b;
			var ms = _v0.c.a;
			return $elm$core$Result$Err(
				_Utils_Tuple3(state, stream, ms));
		}
	});
var $Garados007$elm_svg_parser$SvgParser$xmlDeclarationParser = A2(
	$andre_dietrich$parser_combinators$Combine$map,
	$elm$core$String$fromList,
	A2(
		$Garados007$elm_svg_parser$SvgParser$andMapRight,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			$andre_dietrich$parser_combinators$Combine$whitespace,
			$andre_dietrich$parser_combinators$Combine$string('<?xml')),
		A2(
			$andre_dietrich$parser_combinators$Combine$manyTill,
			$andre_dietrich$parser_combinators$Combine$Char$anyChar,
			$andre_dietrich$parser_combinators$Combine$string('?>'))));
var $Garados007$elm_svg_parser$SvgParser$parseToNode = function (input) {
	var _v0 = A3(
		$andre_dietrich$parser_combinators$Combine$runParser,
		A2(
			$Garados007$elm_svg_parser$SvgParser$andMapRight,
			A2($andre_dietrich$parser_combinators$Combine$optional, '', $Garados007$elm_svg_parser$SvgParser$xmlDeclarationParser),
			$Garados007$elm_svg_parser$SvgParser$nodeParser),
		_List_Nil,
		input);
	if (!_v0.$) {
		var _v1 = _v0.a;
		var svgNode = _v1.c;
		return $elm$core$Result$Ok(svgNode);
	} else {
		var _v2 = _v0.a;
		var stream = _v2.b;
		var errors = _v2.c;
		return $elm$core$Result$Err(
			A2($elm$core$String$join, ' or ', errors));
	}
};
var $elm$svg$Svg$trustedNode = _VirtualDom_nodeNS('http://www.w3.org/2000/svg');
var $elm$svg$Svg$svg = $elm$svg$Svg$trustedNode('svg');
var $Garados007$elm_svg_parser$SvgParser$parse = function (input) {
	var toHtml = function (svgNode) {
		if (!svgNode.$) {
			var element = svgNode.a;
			return (element.gp === 'svg') ? $elm$core$Result$Ok(
				A2(
					$elm$svg$Svg$svg,
					A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$toAttribute, element.aY),
					A2($elm$core$List$map, $Garados007$elm_svg_parser$SvgParser$nodeToSvg, element.aQ))) : $elm$core$Result$Err('Top element is not svg');
		} else {
			return $elm$core$Result$Err('Top element is not svg');
		}
	};
	return A2(
		$elm$core$Result$andThen,
		toHtml,
		$Garados007$elm_svg_parser$SvgParser$parseToNode(input));
};
var $author$project$Internal$Render$renderSvg = F3(
	function (source, latexState, body) {
		var _v0 = $Garados007$elm_svg_parser$SvgParser$parse(
			A2($author$project$Internal$RenderToString$render, latexState, body));
		if (!_v0.$) {
			var html_ = _v0.a;
			return html_;
		} else {
			return A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('X6')
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('SVG parse error')
					]));
		}
	});
var $author$project$Internal$Render$makeTableOfContents = function (latexState) {
	var toc = A2(
		$elm$core$List$filter,
		function (item) {
			return item.gk === 1;
		},
		latexState.eV);
	return A3(
		$elm$core$List$foldl,
		F2(
			function (tocItem, acc) {
				return _Utils_ap(
					acc,
					_List_fromArray(
						[
							A2($author$project$Internal$Render$makeTocItem, '', tocItem)
						]));
			}),
		_List_Nil,
		A2($elm$core$List$indexedMap, $elm$core$Tuple$pair, toc));
};
var $author$project$Internal$Render$renderTableOfContents = F3(
	function (_v0, latexState, list) {
		var innerPart = $author$project$Internal$Render$makeTableOfContents(latexState);
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$h3,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('Table of Contents')
						])),
					A2($elm$html$Html$ul, _List_Nil, innerPart)
				]));
	});
var $author$project$Internal$Render$renderTerm = F3(
	function (_v0, latexState, args) {
		var arg = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		return A2(
			$elm$html$Html$i,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text(arg)
				]));
	});
var $author$project$Internal$Render$renderTextMacros = F3(
	function (_v0, _v1, _v2) {
		return A2($elm$html$Html$div, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderTitle = F2(
	function (latexState, args) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderUnderscore = F3(
	function (source, latexState, args) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('_')
				]));
	});
var $author$project$Internal$Render$renderUseForWeb = F3(
	function (source, latexState, body) {
		return A2(
			$author$project$Internal$Render$displayMathText,
			latexState,
			A2($author$project$Internal$RenderToString$render, latexState, body));
	});
var $author$project$Internal$Render$renderUuid = F3(
	function (_v0, _v1, _v2) {
		return A2($elm$html$Html$span, _List_Nil, _List_Nil);
	});
var $author$project$Internal$Render$renderVerbatim = F3(
	function (source, latexState, body) {
		var body2 = A2($author$project$Internal$RenderToString$render, latexState, body);
		return A2(
			$elm$html$Html$pre,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-top', '0px'),
					A2($elm$html$Html$Attributes$style, 'margin-bottom', '0px'),
					A2($elm$html$Html$Attributes$style, 'margin-left', '25px'),
					A2($elm$html$Html$Attributes$style, 'font-size', '14px')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(body2)
				]));
	});
var $author$project$Internal$Render$renderVerse = F3(
	function (source, latexState, body) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'white-space', 'pre-line')
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(
					$elm$core$String$trim(
						A2($author$project$Internal$RenderToString$render, latexState, body)))
				]));
	});
var $author$project$Internal$Render$renderXLink = F3(
	function (_v0, latexState, args) {
		var label = A3($author$project$Internal$RenderToString$renderArg, 1, latexState, args);
		var id = A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		var ref = A2($author$project$Internal$LatexState$getDictionaryItem, 'setclient', latexState) + ('/' + id);
		return A2(
			$elm$html$Html$a,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$href(ref)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(label)
				]));
	});
var $author$project$Internal$Render$firstChar = $elm$core$String$left(1);
var $author$project$Internal$Render$lastChar = $elm$core$String$right(1);
var $author$project$Internal$Render$addSpace = function (internalState) {
	var c = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Internal$Parser$LXString(''),
		internalState.ap);
	var b = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Internal$Parser$LXString(''),
		internalState.ch);
	var a = A2(
		$elm$core$Maybe$withDefault,
		$author$project$Internal$Parser$LXString(''),
		internalState.ar);
	var _v0 = _Utils_Tuple3(a, b, c);
	if (!_v0.b.$) {
		switch (_v0.a.$) {
			case 6:
				var _v1 = _v0.a;
				var str = _v0.b.a;
				return A2(
					$elm$core$List$member,
					$author$project$Internal$Render$firstChar(str),
					_List_fromArray(
						['.', ',', '?', '!', ';', ':'])) ? $author$project$Internal$Parser$LXString(str) : $author$project$Internal$Parser$LXString(' ' + str);
			case 3:
				var str = _v0.b.a;
				return A2(
					$elm$core$List$member,
					$author$project$Internal$Render$firstChar(str),
					_List_fromArray(
						['-', '.', ',', '?', '!', ';', ':'])) ? $author$project$Internal$Parser$LXString(str) : $author$project$Internal$Parser$LXString(' ' + str);
			default:
				var str = _v0.b.a;
				return A2(
					$elm$core$List$member,
					$author$project$Internal$Render$lastChar(str),
					_List_fromArray(
						[')', '.', ',', '?', '!', ';', ':'])) ? $author$project$Internal$Parser$LXString(str + ' ') : $author$project$Internal$Parser$LXString(str);
		}
	} else {
		return b;
	}
};
var $author$project$Internal$ListMachine$nextState = function (internalState_) {
	var nextInputList_ = A2($elm$core$List$drop, 1, internalState_.bT);
	return {
		ap: $elm$core$List$head(
			A2($elm$core$List$drop, 1, nextInputList_)),
		ar: internalState_.ch,
		ch: internalState_.ap,
		bT: nextInputList_
	};
};
var $author$project$Internal$ListMachine$makeReducer = F3(
	function (computeOutput, input, machineState) {
		var nextInternalState_ = $author$project$Internal$ListMachine$nextState(machineState.bC);
		var nextInputList = A2($elm$core$List$drop, 1, machineState.bC.bT);
		var newOutput = computeOutput(machineState.bC);
		var outputList = A2($elm$core$List$cons, newOutput, machineState.b_);
		return {b_: outputList, bC: nextInternalState_};
	});
var $author$project$Internal$ListMachine$initialState = function (inputList) {
	return {
		ap: $elm$core$List$head(
			A2($elm$core$List$drop, 1, inputList)),
		ar: $elm$core$Maybe$Nothing,
		ch: $elm$core$List$head(inputList),
		bT: inputList
	};
};
var $author$project$Internal$ListMachine$initialTotalState = function (inputList) {
	return {
		b_: _List_Nil,
		bC: $author$project$Internal$ListMachine$initialState(inputList)
	};
};
var $author$project$Internal$ListMachine$makeMachine = F3(
	function (reducer, initialMachineState_, inputList) {
		return A3($elm$core$List$foldl, reducer, initialMachineState_, inputList);
	});
var $author$project$Internal$ListMachine$run_ = F2(
	function (reducer, inputList) {
		var initialTotalState_ = $author$project$Internal$ListMachine$initialTotalState(inputList);
		var finalTotalState = A3($author$project$Internal$ListMachine$makeMachine, reducer, initialTotalState_, inputList);
		return $elm$core$List$reverse(finalTotalState.b_);
	});
var $author$project$Internal$ListMachine$run = F2(
	function (outputFunction, inputList) {
		return A2(
			$author$project$Internal$ListMachine$run_,
			$author$project$Internal$ListMachine$makeReducer(outputFunction),
			inputList);
	});
var $author$project$Internal$Render$spacify = function (latexList) {
	return A2($author$project$Internal$ListMachine$run, $author$project$Internal$Render$addSpace, latexList);
};
var $elm$html$Html$table = _VirtualDom_node('table');
var $elm$html$Html$tbody = _VirtualDom_node('tbody');
var $elm$html$Html$td = _VirtualDom_node('td');
var $author$project$Internal$Render$theoremLikeEnvironments = _List_fromArray(
	['theorem', 'proposition', 'corollary', 'lemma', 'definition', 'problem']);
var $elm$html$Html$tr = _VirtualDom_node('tr');
var $author$project$Internal$Render$environmentRenderer = F2(
	function (source, name) {
		var _v8 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$Internal$Render$cyclic$renderEnvironmentDict());
		if (!_v8.$) {
			var f = _v8.a;
			return f(source);
		} else {
			return A2($author$project$Internal$Render$renderDefaultEnvironment, source, name);
		}
	});
var $author$project$Internal$Render$render = F3(
	function (source, latexState, latexExpression) {
		switch (latexExpression.$) {
			case 1:
				var str = latexExpression.a;
				return A2(
					$elm$html$Html$p,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text('')
						]));
			case 6:
				var name = latexExpression.a;
				var optArgs = latexExpression.b;
				var args = latexExpression.c;
				return A5($author$project$Internal$Render$renderMacro, source, latexState, name, optArgs, args);
			case 5:
				var name = latexExpression.a;
				var optArgs = latexExpression.b;
				var args = latexExpression.c;
				var le = latexExpression.d;
				return A6($author$project$Internal$Render$renderSMacro, source, latexState, name, optArgs, args, le);
			case 2:
				var level = latexExpression.a;
				var latexExpr = latexExpression.b;
				return A4($author$project$Internal$Render$renderItem, source, latexState, level, latexExpr);
			case 3:
				var str = latexExpression.a;
				return A2(
					$elm$html$Html$span,
					_List_Nil,
					_List_fromArray(
						[
							$author$project$Internal$Render$oneSpace,
							A2(
							$author$project$Internal$Render$inlineMathText,
							latexState,
							A2($author$project$Internal$MathMacro$evalStr, latexState.gl, str))
						]));
			case 4:
				var str = latexExpression.a;
				return A2(
					$author$project$Internal$Render$displayMathText,
					latexState,
					A2($author$project$Internal$MathMacro$evalStr, latexState.gl, str));
			case 7:
				var name = latexExpression.a;
				var args = latexExpression.b;
				var body = latexExpression.c;
				return A5($author$project$Internal$Render$renderEnvironment, source, latexState, name, args, body);
			case 8:
				var latexList = latexExpression.a;
				return A3(
					$author$project$Internal$Render$renderLatexList,
					source,
					latexState,
					$author$project$Internal$Render$spacify(latexList));
			case 0:
				var str = latexExpression.a;
				var _v7 = A2($elm$core$String$left, 1, str);
				if (_v7 === ' ') {
					return A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'margin-left', '1px')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text(str)
							]));
				} else {
					return A2(
						$elm$html$Html$span,
						_List_Nil,
						_List_fromArray(
							[
								$elm$html$Html$text(str)
							]));
				}
			case 9:
				var commandName = latexExpression.a;
				var numberOfArgs = latexExpression.b;
				var commandBody = latexExpression.c;
				return A2($elm$html$Html$span, _List_Nil, _List_Nil);
			default:
				var error = latexExpression.a;
				var err = A2($author$project$Internal$ErrorMessages2$renderErrors, source, error);
				var errorText = A2(
					$elm$html$Html$p,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'margin', '0')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(
							A2($elm$core$String$join, '\n', err.cO) + ' ...')
						]));
				var offset = $elm$core$String$fromInt(5 * err.c$) + 'px';
				return A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'font', 'Courier'),
							A2($elm$html$Html$Attributes$style, 'font-family', 'Mono'),
							A2($elm$html$Html$Attributes$style, 'font-size', '15px')
						]),
					_List_fromArray(
						[
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'color', 'blue'),
									A2($elm$html$Html$Attributes$style, 'margin', '0')
								]),
							_List_fromArray(
								[errorText])),
							A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'color', 'blue'),
									A2($elm$html$Html$Attributes$style, 'margin-left', offset)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('^')
								])),
							A2(
							$elm$html$Html$p,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'color', 'red'),
									A2($elm$html$Html$Attributes$style, 'margin', '0')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(err.cP)
								]))
						]));
		}
	});
var $author$project$Internal$Render$renderArg = F4(
	function (source, k, latexState, args) {
		return A3(
			$author$project$Internal$Render$render,
			source,
			latexState,
			A2($author$project$Internal$Render$getElement, k, args));
	});
var $author$project$Internal$Render$renderArgList = F3(
	function (source, latexState, args) {
		return A2(
			$elm$core$List$map,
			A2($author$project$Internal$Render$render, source, latexState),
			args);
	});
var $author$project$Internal$Render$renderBackslash = F3(
	function (source, latexState, args) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('\\'),
					A4($author$project$Internal$Render$renderArg, source, 0, latexState, args)
				]));
	});
var $author$project$Internal$Render$renderBibItem = F5(
	function (source, latexState, optArgs, args, body) {
		var label = ($elm$core$List$length(optArgs) === 1) ? A3($author$project$Internal$RenderToString$renderArg, 0, latexState, optArgs) : A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args);
		var id = 'bibitem:' + label;
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$strong,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id(id),
							A2($elm$html$Html$Attributes$style, 'margin-right', '10px')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('[' + (label + ']'))
						])),
					A2(
					$elm$html$Html$span,
					_List_Nil,
					_List_fromArray(
						[
							A3($author$project$Internal$Render$render, source, latexState, body)
						]))
				]));
	});
var $author$project$Internal$Render$renderCell = F3(
	function (source, latexState, cell) {
		switch (cell.$) {
			case 0:
				var s = cell.a;
				return A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(s)
						]));
			case 3:
				var s = cell.a;
				return A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							A2($author$project$Internal$Render$inlineMathText, latexState, s)
						]));
			case 6:
				var s = cell.a;
				var x = cell.b;
				var y = cell.c;
				return A2(
					$elm$html$Html$td,
					_List_Nil,
					_List_fromArray(
						[
							A5($author$project$Internal$Render$renderMacro, source, $author$project$Internal$LatexState$emptyLatexState, s, x, y)
						]));
			default:
				return A2($elm$html$Html$td, _List_Nil, _List_Nil);
		}
	});
var $author$project$Internal$Render$renderCenterEnvironment = F3(
	function (source, latexState, body) {
		var r = A3($author$project$Internal$Render$render, source, latexState, body);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'display', 'flex'),
					A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
					A2($elm$html$Html$Attributes$style, 'justify-content', 'center')
				]),
			_List_fromArray(
				[r]));
	});
var $author$project$Internal$Render$renderCode = F3(
	function (source, latexState, args) {
		var arg = A4($author$project$Internal$Render$renderArg, source, 0, latexState, args);
		return A2(
			$elm$html$Html$code,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'color', '#8a05ff'),
					A2($elm$html$Html$Attributes$style, 'font-weight', '550')
				]),
			_List_fromArray(
				[$author$project$Internal$Render$oneSpace, arg]));
	});
var $author$project$Internal$Render$renderDefItemEnvironment = F4(
	function (source, latexState, optArgs, body) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$strong,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							A3($author$project$Internal$RenderToString$renderArg, 0, latexState, optArgs))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							A2($elm$html$Html$Attributes$style, 'margin-left', '25px'),
							A2($elm$html$Html$Attributes$style, 'margin-top', '10px')
						]),
					_List_fromArray(
						[
							A3($author$project$Internal$Render$render, source, latexState, body)
						]))
				]));
	});
var $author$project$Internal$Render$renderDefaultEnvironment = F5(
	function (source, name, latexState, args, body) {
		return A2($elm$core$List$member, name, $author$project$Internal$Render$theoremLikeEnvironments) ? A5($author$project$Internal$Render$renderTheoremLikeEnvironment, source, latexState, name, args, body) : A5(
			$author$project$Internal$Render$renderDefaultEnvironment2,
			source,
			latexState,
			$author$project$Internal$Utility$capitalize(name),
			args,
			body);
	});
var $author$project$Internal$Render$renderDefaultEnvironment2 = F5(
	function (source, latexState, name, args, body) {
		var r = A3($author$project$Internal$Render$render, source, latexState, body);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('environment')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$strong,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(name)
						])),
					A2(
					$elm$html$Html$div,
					_List_Nil,
					_List_fromArray(
						[r]))
				]));
	});
var $author$project$Internal$Render$renderEnumerate = F3(
	function (source, latexState, body) {
		return A2(
			$elm$html$Html$ol,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-top', '0px')
				]),
			_List_fromArray(
				[
					A3($author$project$Internal$Render$render, source, latexState, body)
				]));
	});
var $author$project$Internal$Render$renderEnvironment = F5(
	function (source, latexState, name, args, body) {
		return A5($author$project$Internal$Render$environmentRenderer, source, name, latexState, args, body);
	});
var $author$project$Internal$Render$renderIndentEnvironment = F3(
	function (source, latexState, body) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-left', '2em')
				]),
			_List_fromArray(
				[
					A3($author$project$Internal$Render$render, source, latexState, body)
				]));
	});
var $author$project$Internal$Render$renderItalic = F3(
	function (source, latexState, args) {
		return A2(
			$elm$html$Html$i,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text(' '),
					A4($author$project$Internal$Render$renderArg, source, 0, latexState, args)
				]));
	});
var $author$project$Internal$Render$renderItem = F4(
	function (source, latexState, level, latexExpression) {
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-bottom', '8px')
				]),
			_List_fromArray(
				[
					A3($author$project$Internal$Render$render, source, latexState, latexExpression)
				]));
	});
var $author$project$Internal$Render$renderItemize = F3(
	function (source, latexState, body) {
		return A2(
			$elm$html$Html$ul,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-top', '0px')
				]),
			_List_fromArray(
				[
					A3($author$project$Internal$Render$render, source, latexState, body)
				]));
	});
var $author$project$Internal$Render$renderLatexList = F3(
	function (source, latexState, latexList) {
		return function (list) {
			return A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-bottom', '10px')
					]),
				list);
		}(
			A2(
				$elm$core$List$map,
				A2($author$project$Internal$Render$render, source, latexState),
				latexList));
	});
var $author$project$Internal$Render$renderMacro = F5(
	function (source, latexState, name, optArgs, args) {
		var _v3 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$Internal$Render$cyclic$renderMacroDict());
		if (!_v3.$) {
			var f = _v3.a;
			return A4(f, source, latexState, optArgs, args);
		} else {
			var _v4 = A2($elm$core$Dict$get, name, latexState.d9);
			if (_v4.$ === 1) {
				return A5($author$project$Internal$Render$reproduceMacro, source, name, latexState, optArgs, args);
			} else {
				var macroDefinition = _v4.a;
				var macro = A3($author$project$Internal$Parser$Macro, name, optArgs, args);
				var expr = A2($author$project$Internal$Macro$expandMacro, macro, macroDefinition);
				return A3($author$project$Internal$Render$render, source, latexState, expr);
			}
		}
	});
var $author$project$Internal$Render$renderObeyLinesEnvironment = F3(
	function (source, latexState, body) {
		var r = A3($author$project$Internal$Render$render, source, latexState, body);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'white-space', 'pre')
				]),
			_List_fromArray(
				[r]));
	});
var $author$project$Internal$Render$renderQuotation = F3(
	function (source, latexState, body) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-left', '2em'),
					A2($elm$html$Html$Attributes$style, 'font-style', 'italic')
				]),
			_List_fromArray(
				[
					A3($author$project$Internal$Render$render, source, latexState, body)
				]));
	});
var $author$project$Internal$Render$renderRow = F3(
	function (source, latexState, row) {
		if (row.$ === 8) {
			var row_ = row.a;
			return A2(
				$elm$html$Html$tr,
				_List_Nil,
				A2(
					$elm$core$List$map,
					A2($author$project$Internal$Render$renderCell, source, latexState),
					row_));
		} else {
			return A2($elm$html$Html$tr, _List_Nil, _List_Nil);
		}
	});
var $author$project$Internal$Render$renderSMacro = F6(
	function (source, latexState, name, optArgs, args, le) {
		var _v1 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$Internal$Render$cyclic$renderSMacroDict());
		if (!_v1.$) {
			var f = _v1.a;
			return A5(f, source, latexState, optArgs, args, le);
		} else {
			return A6($author$project$Internal$Render$reproduceSMacro, source, name, latexState, optArgs, args, le);
		}
	});
var $author$project$Internal$Render$renderSection = F3(
	function (source, latexState, args) {
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var renderedArgs = A3($author$project$Internal$Render$renderArgList, source, latexState, args);
		var ref = A2(
			$author$project$Internal$Render$idPhrase,
			'section',
			A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args));
		var label = (s1 > 0) ? ($elm$core$String$fromInt(s1) + ' ') : '';
		return A2(
			$elm$html$Html$h2,
			A2($author$project$Internal$Render$headingStyle, ref, 24),
			A2(
				$elm$core$List$cons,
				$elm$html$Html$text(label),
				renderedArgs));
	});
var $author$project$Internal$Render$renderSectionStar = F3(
	function (source, latexState, args) {
		var renderedArgs = A3($author$project$Internal$Render$renderArgList, source, latexState, args);
		var ref = A2(
			$author$project$Internal$Render$idPhrase,
			'section',
			A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args));
		return A2(
			$elm$html$Html$h2,
			A2($author$project$Internal$Render$headingStyle, ref, 24),
			renderedArgs);
	});
var $author$project$Internal$Render$renderStrong = F3(
	function (source, latexState, args) {
		return A2(
			$elm$html$Html$strong,
			_List_Nil,
			_List_fromArray(
				[
					$author$project$Internal$Render$oneSpace,
					A4($author$project$Internal$Render$renderArg, source, 0, latexState, args)
				]));
	});
var $author$project$Internal$Render$renderSubSubsection = F3(
	function (source, latexState, args) {
		var s3 = A2($author$project$Internal$LatexState$getCounter, 's3', latexState);
		var s2 = A2($author$project$Internal$LatexState$getCounter, 's2', latexState);
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var renderedArgs = A3($author$project$Internal$Render$renderArgList, source, latexState, args);
		var ref = A2(
			$author$project$Internal$Render$idPhrase,
			'subsubsection',
			A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args));
		var label = (s1 > 0) ? ($elm$core$String$fromInt(s1) + ('.' + ($elm$core$String$fromInt(s2) + ('.' + ($elm$core$String$fromInt(s3) + ' '))))) : '';
		return A2(
			$elm$html$Html$h4,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id(ref)
				]),
			A2(
				$elm$core$List$cons,
				$elm$html$Html$text(label),
				renderedArgs));
	});
var $author$project$Internal$Render$renderSubSubsectionStar = F3(
	function (source, latexState, args) {
		var renderedArgs = A3($author$project$Internal$Render$renderArgList, source, latexState, args);
		var ref = A2(
			$author$project$Internal$Render$idPhrase,
			'subsubsection',
			A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args));
		return A2(
			$elm$html$Html$h4,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$id(ref)
				]),
			renderedArgs);
	});
var $author$project$Internal$Render$renderSubheading = F3(
	function (source, latexState, args) {
		var renderedArgs = A3($author$project$Internal$Render$renderArgList, source, latexState, args);
		var ref = A2(
			$author$project$Internal$Render$idPhrase,
			'subsubsection',
			A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args));
		return A2(
			$elm$html$Html$p,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'font-weight', 'bold'),
					A2($elm$html$Html$Attributes$style, 'margin-bottom', '0'),
					A2($elm$html$Html$Attributes$style, 'margin-left', '-2px'),
					$elm$html$Html$Attributes$id(ref)
				]),
			renderedArgs);
	});
var $author$project$Internal$Render$renderSubsection = F3(
	function (source, latexState, args) {
		var s2 = A2($author$project$Internal$LatexState$getCounter, 's2', latexState);
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var renderedArgs = A3($author$project$Internal$Render$renderArgList, source, latexState, args);
		var ref = A2(
			$author$project$Internal$Render$idPhrase,
			'subsection',
			A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args));
		var label = (s1 > 0) ? ($elm$core$String$fromInt(s1) + ('.' + ($elm$core$String$fromInt(s2) + ' '))) : '';
		return A2(
			$elm$html$Html$h3,
			A2($author$project$Internal$Render$headingStyle, ref, 12),
			A2(
				$elm$core$List$cons,
				$elm$html$Html$text(label),
				renderedArgs));
	});
var $author$project$Internal$Render$renderSubsectionStar = F3(
	function (source, latexState, args) {
		var renderedArgs = A3($author$project$Internal$Render$renderArgList, source, latexState, args);
		var ref = A2(
			$author$project$Internal$Render$idPhrase,
			'subsection',
			A3($author$project$Internal$RenderToString$renderArg, 0, latexState, args));
		return A2(
			$elm$html$Html$h3,
			A2($author$project$Internal$Render$headingStyle, ref, 12),
			renderedArgs);
	});
var $author$project$Internal$Render$renderTableBody = F3(
	function (source, latexState, body) {
		if (body.$ === 8) {
			var body_ = body.a;
			return A2(
				$elm$html$Html$tbody,
				_List_Nil,
				A2(
					$elm$core$List$map,
					A2($author$project$Internal$Render$renderRow, source, latexState),
					body_));
		} else {
			return A2($elm$html$Html$tbody, _List_Nil, _List_Nil);
		}
	});
var $author$project$Internal$Render$renderTabular = F3(
	function (source, latexState, body) {
		return A2(
			$elm$html$Html$table,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'border-spacing', '20px 10px'),
					A2($elm$html$Html$Attributes$style, 'margin-left', '-20px')
				]),
			_List_fromArray(
				[
					A3($author$project$Internal$Render$renderTableBody, source, latexState, body)
				]));
	});
var $author$project$Internal$Render$renderTexArg = F3(
	function (source, latexState, args) {
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_List_fromArray(
				[
					$elm$html$Html$text('{'),
					A4($author$project$Internal$Render$renderArg, source, 0, latexState, args),
					$elm$html$Html$text('}')
				]));
	});
var $author$project$Internal$Render$renderTheBibliography = F3(
	function (source, latexState, body) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			_List_fromArray(
				[
					A3($author$project$Internal$Render$render, source, latexState, body)
				]));
	});
var $author$project$Internal$Render$renderTheoremLikeEnvironment = F5(
	function (source, latexState, name, args, body) {
		var tno = A2($author$project$Internal$LatexState$getCounter, 'tno', latexState);
		var s1 = A2($author$project$Internal$LatexState$getCounter, 's1', latexState);
		var tnoString = (s1 > 0) ? (' ' + ($elm$core$String$fromInt(s1) + ('.' + $elm$core$String$fromInt(tno)))) : (' ' + $elm$core$String$fromInt(tno));
		var r = A3($author$project$Internal$Render$render, source, latexState, body);
		var eqno = A2($author$project$Internal$LatexState$getCounter, 'eqno', latexState);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('environment')
				]),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$strong,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(
							_Utils_ap(
								$author$project$Internal$Utility$capitalize(name),
								tnoString))
						])),
					A2(
					$elm$html$Html$div,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('italic')
						]),
					_List_fromArray(
						[r]))
				]));
	});
var $author$project$Internal$Render$reproduceMacro = F5(
	function (source, name, latexState, optArgs, args) {
		var renderedArgs = A2(
			$elm$core$List$map,
			$author$project$Internal$Render$enclose,
			A3($author$project$Internal$Render$renderArgList, source, latexState, args));
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'color', 'red')
				]),
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$text('\\' + name)
					]),
				renderedArgs));
	});
var $author$project$Internal$Render$reproduceSMacro = F6(
	function (source, name, latexState, optArgs, args, le) {
		var renderedOptArgs = A2(
			$elm$core$List$map,
			$author$project$Internal$Render$enclose,
			A3($author$project$Internal$Render$renderArgList, source, latexState, optArgs));
		var renderedLe = $author$project$Internal$Render$enclose(
			A3($author$project$Internal$Render$render, source, latexState, le));
		var renderedArgs = A2(
			$elm$core$List$map,
			$author$project$Internal$Render$enclose,
			A3($author$project$Internal$Render$renderArgList, source, latexState, args));
		return A2(
			$elm$html$Html$span,
			_List_Nil,
			_Utils_ap(
				_List_fromArray(
					[
						$elm$html$Html$text('\\' + name)
					]),
				_Utils_ap(
					renderedOptArgs,
					_Utils_ap(
						renderedArgs,
						_List_fromArray(
							[renderedLe])))));
	});
function $author$project$Internal$Render$cyclic$renderEnvironmentDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'align',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderMathEnvironment, 'aligned', s, x, y);
					})),
				_Utils_Tuple2(
				'matrix',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderMathEnvironment, 'matrix', s, x, y);
					})),
				_Utils_Tuple2(
				'pmatrix',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderMathEnvironment, 'pmatrix', s, x, y);
					})),
				_Utils_Tuple2(
				'bmatrix',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderMathEnvironment, 'bmatrix', s, x, y);
					})),
				_Utils_Tuple2(
				'Bmatrix',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderMathEnvironment, 'Bmatrix', s, x, y);
					})),
				_Utils_Tuple2(
				'vmatrix',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderMathEnvironment, 'vmatrix', s, x, y);
					})),
				_Utils_Tuple2(
				'Vmatrix',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderMathEnvironment, 'Vmatrix', s, x, y);
					})),
				_Utils_Tuple2(
				'colored',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderCodeEnvironment, s, x, a, y);
					})),
				_Utils_Tuple2(
				'center',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderCenterEnvironment, s, x, y);
					})),
				_Utils_Tuple2(
				'obeylines',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderObeyLinesEnvironment, s, x, y);
					})),
				_Utils_Tuple2(
				'CD',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderMathJaxEnvironment, 'CD', s, x, y);
					})),
				_Utils_Tuple2(
				'comment',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderCommentEnvironment, s, x, y);
					})),
				_Utils_Tuple2(
				'defitem',
				F4(
					function (s, x, a, y) {
						return A4($author$project$Internal$Render$renderDefItemEnvironment, s, x, a, y);
					})),
				_Utils_Tuple2(
				'enumerate',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderEnumerate, s, x, y);
					})),
				_Utils_Tuple2(
				'eqnarray',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderEqnArray, s, x, y);
					})),
				_Utils_Tuple2(
				'equation',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderEquationEnvironment, s, x, y);
					})),
				_Utils_Tuple2(
				'indent',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderIndentEnvironment, s, x, y);
					})),
				_Utils_Tuple2(
				'itemize',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderItemize, s, x, y);
					})),
				_Utils_Tuple2(
				'listing',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderListing, s, x, y);
					})),
				_Utils_Tuple2(
				'macros',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderMacros, s, x, y);
					})),
				_Utils_Tuple2(
				'maskforweb',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderCommentEnvironment, s, x, y);
					})),
				_Utils_Tuple2(
				'quotation',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderQuotation, s, x, y);
					})),
				_Utils_Tuple2(
				'tabular',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderTabular, s, x, y);
					})),
				_Utils_Tuple2(
				'thebibliography',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderTheBibliography, s, x, y);
					})),
				_Utils_Tuple2(
				'useforweb',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderUseForWeb, s, x, y);
					})),
				_Utils_Tuple2(
				'verbatim',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderVerbatim, s, x, y);
					})),
				_Utils_Tuple2(
				'verse',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderVerse, s, x, y);
					})),
				_Utils_Tuple2(
				'mathmacro',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderMathMacros, s, x, y);
					})),
				_Utils_Tuple2(
				'textmacro',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderTextMacros, s, x, y);
					})),
				_Utils_Tuple2(
				'svg',
				F4(
					function (s, x, a, y) {
						return A3($author$project$Internal$Render$renderSvg, s, x, y);
					}))
			]));
}
function $author$project$Internal$Render$cyclic$renderMacroDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'bigskip',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderBigSkip, s, x, z);
					})),
				_Utils_Tuple2(
				'medskip',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderMedSkip, s, x, z);
					})),
				_Utils_Tuple2(
				'smallskip',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSmallSkip, s, x, z);
					})),
				_Utils_Tuple2(
				'cite',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderCite, s, x, z);
					})),
				_Utils_Tuple2(
				'colored',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderColored, s, x, z);
					})),
				_Utils_Tuple2(
				'dollar',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderDollar, s, x, z);
					})),
				_Utils_Tuple2(
				'texbegin',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderBegin, s, x, z);
					})),
				_Utils_Tuple2(
				'texend',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderEnd, s, x, z);
					})),
				_Utils_Tuple2(
				'percent',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderPercent, s, x, z);
					})),
				_Utils_Tuple2(
				'code',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderCode, s, x, z);
					})),
				_Utils_Tuple2(
				'ellie',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderEllie, s, x, z);
					})),
				_Utils_Tuple2(
				'emph',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderItalic, s, x, z);
					})),
				_Utils_Tuple2(
				'eqref',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderEqRef, s, x, z);
					})),
				_Utils_Tuple2(
				'href',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderHRef, s, x, z);
					})),
				_Utils_Tuple2(
				'iframe',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderIFrame, s, x, z);
					})),
				_Utils_Tuple2(
				'image',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderImage, s, x, z);
					})),
				_Utils_Tuple2(
				'imageref',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderImageRef, s, x, z);
					})),
				_Utils_Tuple2(
				'index',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderIndex, s, x, z);
					})),
				_Utils_Tuple2(
				'italic',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderItalic, s, x, z);
					})),
				_Utils_Tuple2(
				'label',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderLabel, s, x, z);
					})),
				_Utils_Tuple2(
				'maintableofcontents',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderMainTableOfContents, s, x, z);
					})),
				_Utils_Tuple2(
				'maketitle',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderMakeTitle, s, x, z);
					})),
				_Utils_Tuple2(
				'mdash',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderMdash, s, x, z);
					})),
				_Utils_Tuple2(
				'ndash',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderNdash, s, x, z);
					})),
				_Utils_Tuple2(
				'underscore',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderUnderscore, s, x, z);
					})),
				_Utils_Tuple2(
				'bs',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderBackslash, s, x, z);
					})),
				_Utils_Tuple2(
				'texarg',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderTexArg, s, x, z);
					})),
				_Utils_Tuple2(
				'ref',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderRef, s, x, z);
					})),
				_Utils_Tuple2(
				'medskip',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderMedSkip, s, x, z);
					})),
				_Utils_Tuple2(
				'par',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderMedSkip, s, x, z);
					})),
				_Utils_Tuple2(
				'smallskip',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSmallSkip, s, x, z);
					})),
				_Utils_Tuple2(
				'section',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSection, s, x, z);
					})),
				_Utils_Tuple2(
				'section*',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSectionStar, s, x, z);
					})),
				_Utils_Tuple2(
				'subsection',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSubsection, s, x, z);
					})),
				_Utils_Tuple2(
				'subsection*',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSubsectionStar, s, x, z);
					})),
				_Utils_Tuple2(
				'subsubsection',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSubSubsection, s, x, z);
					})),
				_Utils_Tuple2(
				'subsubsection*',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSubSubsectionStar, s, x, z);
					})),
				_Utils_Tuple2(
				'setcounter',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSetCounter, s, x, z);
					})),
				_Utils_Tuple2(
				'subheading',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSubheading, s, x, z);
					})),
				_Utils_Tuple2(
				'tableofcontents',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderTableOfContents, s, x, z);
					})),
				_Utils_Tuple2(
				'innertableofcontents',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderInnerTableOfContents, s, x, z);
					})),
				_Utils_Tuple2(
				'red',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderRed, s, x, z);
					})),
				_Utils_Tuple2(
				'blue',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderBlue, s, x, z);
					})),
				_Utils_Tuple2(
				'remote',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderRemote, s, x, z);
					})),
				_Utils_Tuple2(
				'local',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderLocal, s, x, z);
					})),
				_Utils_Tuple2(
				'note',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderAttachNote, s, x, z);
					})),
				_Utils_Tuple2(
				'highlight',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderHighlighted, s, x, z);
					})),
				_Utils_Tuple2(
				'strike',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderStrikeThrough, s, x, z);
					})),
				_Utils_Tuple2(
				'term',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderTerm, s, x, z);
					})),
				_Utils_Tuple2(
				'xlink',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderXLink, s, x, z);
					})),
				_Utils_Tuple2(
				'ilink1',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderILink, s, x, z);
					})),
				_Utils_Tuple2(
				'ilink2',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderILink, s, x, z);
					})),
				_Utils_Tuple2(
				'ilink3',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderILink, s, x, z);
					})),
				_Utils_Tuple2(
				'include',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderInclude, s, x, z);
					})),
				_Utils_Tuple2(
				'publiclink',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderPublicLink, s, x, z);
					})),
				_Utils_Tuple2(
				'homepagelink',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderHomePageLink, s, x, z);
					})),
				_Utils_Tuple2(
				'documentTitle',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderDocumentTitle, s, x, z);
					})),
				_Utils_Tuple2(
				'title',
				F4(
					function (s, x, y, z) {
						return A2($author$project$Internal$Render$renderTitle, x, z);
					})),
				_Utils_Tuple2(
				'author',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderAuthor, s, x, z);
					})),
				_Utils_Tuple2(
				'date',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderDate, s, x, z);
					})),
				_Utils_Tuple2(
				'revision',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderRevision, s, x, z);
					})),
				_Utils_Tuple2(
				'email',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderEmail, s, x, z);
					})),
				_Utils_Tuple2(
				'setdocid',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSetDocId, s, x, z);
					})),
				_Utils_Tuple2(
				'setclient',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderSetClient, s, x, z);
					})),
				_Utils_Tuple2(
				'strong',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderStrong, s, x, z);
					})),
				_Utils_Tuple2(
				'textbf',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderStrong, s, x, z);
					})),
				_Utils_Tuple2(
				'uuid',
				F4(
					function (s, x, y, z) {
						return A3($author$project$Internal$Render$renderUuid, s, x, z);
					}))
			]));
}
function $author$project$Internal$Render$cyclic$renderSMacroDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2(
				'bibitem',
				F5(
					function (source, latexState, optArgs, args, body) {
						return A5($author$project$Internal$Render$renderBibItem, source, latexState, optArgs, args, body);
					}))
			]));
}
var $author$project$Internal$Render$renderEnvironmentDict = $author$project$Internal$Render$cyclic$renderEnvironmentDict();
$author$project$Internal$Render$cyclic$renderEnvironmentDict = function () {
	return $author$project$Internal$Render$renderEnvironmentDict;
};
var $author$project$Internal$Render$renderMacroDict = $author$project$Internal$Render$cyclic$renderMacroDict();
$author$project$Internal$Render$cyclic$renderMacroDict = function () {
	return $author$project$Internal$Render$renderMacroDict;
};
var $author$project$Internal$Render$renderSMacroDict = $author$project$Internal$Render$cyclic$renderSMacroDict();
$author$project$Internal$Render$cyclic$renderSMacroDict = function () {
	return $author$project$Internal$Render$renderSMacroDict;
};
var $author$project$Internal$Render$renderLatexListToList = F2(
	function (latexState, list) {
		return A3(
			$elm$core$List$map2,
			F2(
				function (x, y) {
					return A3($author$project$Internal$Render$renderLatexList, x, latexState, y);
				}),
			A2($elm$core$List$map, $elm$core$Tuple$first, list),
			A2(
				$elm$core$List$map,
				$author$project$Internal$Render$spacify,
				A2($elm$core$List$map, $elm$core$Tuple$second, list)));
	});
var $author$project$Internal$Accumulator$renderReducerNew = F3(
	function (renderer, listStringAndLatexExpression, _v0) {
		var state = _v0.a;
		var inputList = _v0.b;
		var newState = A2($author$project$Internal$Accumulator$latexStateReducer, listStringAndLatexExpression.b, state);
		var renderedInput = A2(
			renderer,
			newState,
			_List_fromArray(
				[listStringAndLatexExpression]));
		return _Utils_Tuple2(
			newState,
			_Utils_ap(
				inputList,
				_List_fromArray(
					[renderedInput])));
	});
var $author$project$Internal$Accumulator$renderNew = F3(
	function (renderer, latexState, paragraphs) {
		return A3(
			$elm$core$List$foldl,
			$author$project$Internal$Accumulator$renderReducerNew(renderer),
			_Utils_Tuple2(latexState, _List_Nil),
			paragraphs);
	});
var $author$project$MiniLatex$EditSimple$highlightColor = '#d7d6ff';
var $author$project$MiniLatex$EditSimple$selectedStyle = F2(
	function (targetId, currentId) {
		var _v0 = _Utils_eq('select:' + targetId, currentId);
		if (_v0) {
			return A2($elm$html$Html$Attributes$style, 'background-color', $author$project$MiniLatex$EditSimple$highlightColor);
		} else {
			return A2($elm$html$Html$Attributes$style, 'background-color', '#fff');
		}
	});
var $author$project$MiniLatex$EditSimple$get = F2(
	function (selectedId, data) {
		var mark = function (id_) {
			return _Utils_eq(selectedId, id_) ? ('select:' + id_) : ((A2($elm$core$String$left, 7, id_) === 'selected:') ? A2($elm$core$String$dropLeft, 7, id_) : id_);
		};
		var keyedNode = F2(
			function (id, para) {
				return A3(
					$elm$html$Html$Keyed$node,
					'p',
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id(id),
							A2($author$project$MiniLatex$EditSimple$selectedStyle, selectedId, id),
							$elm$html$Html$Events$onClick(id),
							A2($elm$html$Html$Attributes$style, 'margin-bottom', '10px')
						]),
					_List_fromArray(
						[
							_Utils_Tuple2(id, para)
						]));
			});
		var ids = A2($elm$core$List$map, mark, data.a3);
		var _v0 = A3($author$project$Internal$Accumulator$renderNew, $author$project$Internal$Render$renderLatexListToList, data.d6, data.bJ);
		var paragraphs_ = _v0.b;
		var paragraphs = A2(
			$elm$core$List$map,
			$elm$html$Html$div(
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'white-space', 'normal'),
						A2($elm$html$Html$Attributes$style, 'line-height', '1.5')
					])),
			paragraphs_);
		return A3($elm$core$List$map2, keyedNode, ids, paragraphs);
	});
var $mdgriffith$elm_ui$Internal$Model$Unstyled = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$unstyled = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Unstyled, $elm$core$Basics$always);
var $mdgriffith$elm_ui$Element$html = $mdgriffith$elm_ui$Internal$Model$unstyled;
var $mdgriffith$elm_ui$Internal$Model$Empty = {$: 3};
var $mdgriffith$elm_ui$Internal$Model$Styled = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Text = function (a) {
	return {$: 2, a: a};
};
var $elm$virtual_dom$VirtualDom$map = _VirtualDom_map;
var $mdgriffith$elm_ui$Internal$Model$map = F2(
	function (fn, el) {
		switch (el.$) {
			case 1:
				var styled = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						f$: F2(
							function (add, context) {
								return A2(
									$elm$virtual_dom$VirtualDom$map,
									fn,
									A2(styled.f$, add, context));
							}),
						hb: styled.hb
					});
			case 0:
				var html = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A2(
						$elm$core$Basics$composeL,
						$elm$virtual_dom$VirtualDom$map(fn),
						html));
			case 2:
				var str = el.a;
				return $mdgriffith$elm_ui$Internal$Model$Text(str);
			default:
				return $mdgriffith$elm_ui$Internal$Model$Empty;
		}
	});
var $mdgriffith$elm_ui$Element$map = $mdgriffith$elm_ui$Internal$Model$map;
var $elm$html$Html$map = $elm$virtual_dom$VirtualDom$map;
var $author$project$Parser$Data$defaultConfig = {dq: '#00c', dY: '#fAA', ey: '#a00'};
var $author$project$Parser$Data$initialCounters = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('section1', 0),
			_Utils_Tuple2('section2', 0),
			_Utils_Tuple2('section3', 0),
			_Utils_Tuple2('theorem', 0),
			_Utils_Tuple2('eqno', 0)
		]));
var $author$project$Parser$Data$init = function (config) {
	return {cI: config, a$: $author$project$Parser$Data$initialCounters, dA: $elm$core$Dict$empty, dH: $elm$core$Dict$empty, eV: _List_Nil};
};
var $author$project$CaYaTeX$initState = function (k) {
	return {
		fp: 0,
		bR: k,
		gB: $author$project$Parser$Data$init($author$project$Parser$Data$defaultConfig),
		gT: '',
		hC: 300
	};
};
var $author$project$Render$Elm$format = _List_Nil;
var $mdgriffith$elm_ui$Internal$Model$Describe = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Paragraph = {$: 9};
var $mdgriffith$elm_ui$Internal$Model$Unkeyed = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$AsParagraph = 4;
var $mdgriffith$elm_ui$Internal$Model$asParagraph = 4;
var $mdgriffith$elm_ui$Internal$Model$Generic = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$div = $mdgriffith$elm_ui$Internal$Model$Generic;
var $mdgriffith$elm_ui$Internal$Model$NoNearbyChildren = {$: 0};
var $mdgriffith$elm_ui$Internal$Style$classes = {e6: 'a', cC: 'atv', e9: 'ab', fa: 'cx', fb: 'cy', fc: 'acb', fd: 'accx', fe: 'accy', ff: 'acr', dm: 'al', dn: 'ar', fg: 'at', cD: 'ah', cE: 'av', fj: 's', fm: 'bh', fn: 'b', fr: 'w7', ft: 'bd', fu: 'bdt', b9: 'bn', fv: 'bs', ca: 'cpe', fz: 'cp', fA: 'cpx', fB: 'cpy', ac: 'c', cd: 'ctr', ce: 'cb', cf: 'ccx', aS: 'ccy', bO: 'cl', cg: 'cr', fD: 'ct', fG: 'cptr', fH: 'ctxt', fS: 'fcs', dR: 'focus-within', fU: 'fs', fW: 'g', cU: 'hbh', cW: 'hc', dU: 'he', cX: 'hf', dV: 'hfp', cl: 'hv', f0: 'ic', f4: 'fr', cn: 'lbl', f9: 'iml', ga: 'imlf', gb: 'imlp', gc: 'implw', gd: 'it', gf: 'i', d8: 'lnk', bu: 'nb', ei: 'notxt', gs: 'ol', gt: 'or', a7: 'oq', gy: 'oh', em: 'pg', en: 'p', gC: 'ppe', gL: 'ui', gM: 'r', gP: 'sb', gQ: 'sbx', gR: 'sby', gS: 'sbt', gX: 'e', gY: 'cap', g$: 'sev', ha: 'sk', cw: 't', hd: 'tc', he: 'w8', hf: 'w2', hg: 'w9', hh: 'tj', cx: 'tja', hi: 'tl', hj: 'w3', hk: 'w5', hl: 'w4', hm: 'tr', hn: 'w6', ho: 'w1', hq: 'tun', eZ: 'ts', bc: 'clr', hx: 'u', dh: 'wc', e2: 'we', di: 'wf', e3: 'wfp', dk: 'wrp'};
var $mdgriffith$elm_ui$Internal$Model$columnClass = $mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ac);
var $mdgriffith$elm_ui$Internal$Model$gridClass = $mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fW);
var $mdgriffith$elm_ui$Internal$Model$pageClass = $mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.em);
var $mdgriffith$elm_ui$Internal$Model$paragraphClass = $mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.en);
var $mdgriffith$elm_ui$Internal$Model$rowClass = $mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.gM);
var $mdgriffith$elm_ui$Internal$Model$singleClass = $mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.gX);
var $mdgriffith$elm_ui$Internal$Model$contextClasses = function (context) {
	switch (context) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Model$rowClass;
		case 1:
			return $mdgriffith$elm_ui$Internal$Model$columnClass;
		case 2:
			return $mdgriffith$elm_ui$Internal$Model$singleClass;
		case 3:
			return $mdgriffith$elm_ui$Internal$Model$gridClass;
		case 4:
			return $mdgriffith$elm_ui$Internal$Model$paragraphClass;
		default:
			return $mdgriffith$elm_ui$Internal$Model$pageClass;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Keyed = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$NoStyleSheet = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$addChildren = F2(
	function (existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(behind, existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(existing, inFront);
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					behind,
					_Utils_ap(existing, inFront));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$addKeyedChildren = F3(
	function (key, existing, nearbyChildren) {
		switch (nearbyChildren.$) {
			case 0:
				return existing;
			case 1:
				var behind = nearbyChildren.a;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					existing);
			case 2:
				var inFront = nearbyChildren.a;
				return _Utils_ap(
					existing,
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						inFront));
			default:
				var behind = nearbyChildren.a;
				var inFront = nearbyChildren.b;
				return _Utils_ap(
					A2(
						$elm$core$List$map,
						function (x) {
							return _Utils_Tuple2(key, x);
						},
						behind),
					_Utils_ap(
						existing,
						A2(
							$elm$core$List$map,
							function (x) {
								return _Utils_Tuple2(key, x);
							},
							inFront)));
		}
	});
var $mdgriffith$elm_ui$Internal$Model$AsEl = 2;
var $mdgriffith$elm_ui$Internal$Model$asEl = 2;
var $mdgriffith$elm_ui$Internal$Flag$Flag = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Second = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$flag = function (i) {
	return (i > 31) ? $mdgriffith$elm_ui$Internal$Flag$Second(1 << (i - 32)) : $mdgriffith$elm_ui$Internal$Flag$Flag(1 << i);
};
var $mdgriffith$elm_ui$Internal$Flag$alignBottom = $mdgriffith$elm_ui$Internal$Flag$flag(41);
var $mdgriffith$elm_ui$Internal$Flag$alignRight = $mdgriffith$elm_ui$Internal$Flag$flag(40);
var $mdgriffith$elm_ui$Internal$Flag$centerX = $mdgriffith$elm_ui$Internal$Flag$flag(42);
var $mdgriffith$elm_ui$Internal$Flag$centerY = $mdgriffith$elm_ui$Internal$Flag$flag(43);
var $mdgriffith$elm_ui$Internal$Model$lengthClassName = function (x) {
	switch (x.$) {
		case 0:
			var px = x.a;
			return $elm$core$String$fromInt(px) + 'px';
		case 1:
			return 'auto';
		case 2:
			var i = x.a;
			return $elm$core$String$fromInt(i) + 'fr';
		case 3:
			var min = x.a;
			var len = x.b;
			return 'min' + ($elm$core$String$fromInt(min) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
		default:
			var max = x.a;
			var len = x.b;
			return 'max' + ($elm$core$String$fromInt(max) + $mdgriffith$elm_ui$Internal$Model$lengthClassName(len));
	}
};
var $mdgriffith$elm_ui$Internal$Model$floatClass = function (x) {
	return $elm$core$String$fromInt(
		$elm$core$Basics$round(x * 255));
};
var $mdgriffith$elm_ui$Internal$Model$transformClass = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'mv-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(x) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(y) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(z))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			return $elm$core$Maybe$Just(
				'tfrm-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ty) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(tz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sx) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(sz) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(ox) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oy) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(oz) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(angle))))))))))))))))))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$getStyleName = function (style) {
	switch (style.$) {
		case 13:
			var name = style.a;
			return name;
		case 12:
			var name = style.a;
			var o = style.b;
			return name;
		case 0:
			var _class = style.a;
			return _class;
		case 1:
			var name = style.a;
			return name;
		case 2:
			var i = style.a;
			return 'font-size-' + $elm$core$String$fromInt(i);
		case 3:
			var _class = style.a;
			return _class;
		case 4:
			var _class = style.a;
			return _class;
		case 5:
			var cls = style.a;
			var x = style.b;
			var y = style.c;
			return cls;
		case 7:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 6:
			var cls = style.a;
			var top = style.b;
			var right = style.c;
			var bottom = style.d;
			var left = style.e;
			return cls;
		case 8:
			var template = style.a;
			return 'grid-rows-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.gN)) + ('-cols-' + (A2(
				$elm$core$String$join,
				'-',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.D)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.g0.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.g0.b)))))));
		case 9:
			var pos = style.a;
			return 'gp grid-pos-' + ($elm$core$String$fromInt(pos.gM) + ('-' + ($elm$core$String$fromInt(pos.fC) + ('-' + ($elm$core$String$fromInt(pos.hC) + ('-' + $elm$core$String$fromInt(pos.cV)))))));
		case 11:
			var selector = style.a;
			var subStyle = style.b;
			var name = function () {
				switch (selector) {
					case 0:
						return 'fs';
					case 1:
						return 'hv';
					default:
						return 'act';
				}
			}();
			return A2(
				$elm$core$String$join,
				' ',
				A2(
					$elm$core$List$map,
					function (sty) {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$getStyleName(sty);
						if (_v1 === '') {
							return '';
						} else {
							var styleName = _v1;
							return styleName + ('-' + name);
						}
					},
					subStyle));
		default:
			var x = style.a;
			return A2(
				$elm$core$Maybe$withDefault,
				'',
				$mdgriffith$elm_ui$Internal$Model$transformClass(x));
	}
};
var $mdgriffith$elm_ui$Internal$Model$reduceStyles = F2(
	function (style, nevermind) {
		var cache = nevermind.a;
		var existing = nevermind.b;
		var styleName = $mdgriffith$elm_ui$Internal$Model$getStyleName(style);
		return A2($elm$core$Set$member, styleName, cache) ? nevermind : _Utils_Tuple2(
			A2($elm$core$Set$insert, styleName, cache),
			A2($elm$core$List$cons, style, existing));
	});
var $mdgriffith$elm_ui$Internal$Model$Property = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$Style = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$dot = function (c) {
	return '.' + c;
};
var $mdgriffith$elm_ui$Internal$Model$formatColor = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return 'rgba(' + ($elm$core$String$fromInt(
		$elm$core$Basics$round(red * 255)) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(green * 255))) + ((',' + $elm$core$String$fromInt(
		$elm$core$Basics$round(blue * 255))) + (',' + ($elm$core$String$fromFloat(alpha) + ')')))));
};
var $mdgriffith$elm_ui$Internal$Model$formatBoxShadow = function (shadow) {
	return A2(
		$elm$core$String$join,
		' ',
		A2(
			$elm$core$List$filterMap,
			$elm$core$Basics$identity,
			_List_fromArray(
				[
					shadow.d0 ? $elm$core$Maybe$Just('inset') : $elm$core$Maybe$Nothing,
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.bZ.a) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.bZ.b) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.b8) + 'px'),
					$elm$core$Maybe$Just(
					$elm$core$String$fromFloat(shadow.eQ) + 'px'),
					$elm$core$Maybe$Just(
					$mdgriffith$elm_ui$Internal$Model$formatColor(shadow.cc))
				])));
};
var $mdgriffith$elm_ui$Internal$Model$renderFocusStyle = function (focus) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dR) + ':focus-within',
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.fs),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.fl),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										b8: shadow.b8,
										cc: shadow.cc,
										d0: false,
										bZ: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.bZ)),
										eQ: shadow.eQ
									}));
						},
						focus.gW),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					]))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$Style,
			($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj) + ':focus .focusable, ') + (($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj) + '.focusable:focus, ') + ('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj) + ' .focusable-thumb'))),
			A2(
				$elm$core$List$filterMap,
				$elm$core$Basics$identity,
				_List_fromArray(
					[
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'border-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.fs),
						A2(
						$elm$core$Maybe$map,
						function (color) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'background-color',
								$mdgriffith$elm_ui$Internal$Model$formatColor(color));
						},
						focus.fl),
						A2(
						$elm$core$Maybe$map,
						function (shadow) {
							return A2(
								$mdgriffith$elm_ui$Internal$Model$Property,
								'box-shadow',
								$mdgriffith$elm_ui$Internal$Model$formatBoxShadow(
									{
										b8: shadow.b8,
										cc: shadow.cc,
										d0: false,
										bZ: A2(
											$elm$core$Tuple$mapSecond,
											$elm$core$Basics$toFloat,
											A2($elm$core$Tuple$mapFirst, $elm$core$Basics$toFloat, shadow.bZ)),
										eQ: shadow.eQ
									}));
						},
						focus.gW),
						$elm$core$Maybe$Just(
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'outline', 'none'))
					])))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$AllChildren = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Batch = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Style$Child = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Class = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Descriptor = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Left = 3;
var $mdgriffith$elm_ui$Internal$Style$Prop = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Right = 2;
var $mdgriffith$elm_ui$Internal$Style$Self = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Supports = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Style$Content = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$Bottom = 1;
var $mdgriffith$elm_ui$Internal$Style$CenterX = 4;
var $mdgriffith$elm_ui$Internal$Style$CenterY = 5;
var $mdgriffith$elm_ui$Internal$Style$Top = 0;
var $mdgriffith$elm_ui$Internal$Style$alignments = _List_fromArray(
	[0, 1, 2, 3, 4, 5]);
var $mdgriffith$elm_ui$Internal$Style$contentName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fD);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ce);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cg);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bO);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cf);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.aS);
	}
};
var $mdgriffith$elm_ui$Internal$Style$selfName = function (desc) {
	switch (desc) {
		case 0:
			var _v1 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fg);
		case 1:
			var _v2 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e9);
		case 2:
			var _v3 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dn);
		case 3:
			var _v4 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dm);
		case 4:
			var _v5 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fa);
		default:
			var _v6 = desc;
			return $mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fb);
	}
};
var $mdgriffith$elm_ui$Internal$Style$describeAlignment = function (values) {
	var createDescription = function (alignment) {
		var _v0 = values(alignment);
		var content = _v0.a;
		var indiv = _v0.b;
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$contentName(alignment),
				content),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						indiv)
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$elDescription = _List_fromArray(
	[
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
		A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cU),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fm),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Descriptor,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gS),
		_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cw),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.di),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'auto !important')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cW),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.di),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e3),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Child,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dh),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
			])),
		$mdgriffith$elm_ui$Internal$Style$describeAlignment(
		function (alignment) {
			switch (alignment) {
				case 0:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
							]));
				case 1:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
							]));
				case 2:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
							]));
				case 3:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							]));
				case 4:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
							]));
				default:
					return _Utils_Tuple2(
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
									]))
							]),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
							]));
			}
		})
	]);
var $mdgriffith$elm_ui$Internal$Style$gridAlignments = function (values) {
	var createDescription = function (alignment) {
		return _List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$selfName(alignment),
						values(alignment))
					]))
			]);
	};
	return $mdgriffith$elm_ui$Internal$Style$Batch(
		A2($elm$core$List$concatMap, createDescription, $mdgriffith$elm_ui$Internal$Style$alignments));
};
var $mdgriffith$elm_ui$Internal$Style$Above = 0;
var $mdgriffith$elm_ui$Internal$Style$Behind = 5;
var $mdgriffith$elm_ui$Internal$Style$Below = 1;
var $mdgriffith$elm_ui$Internal$Style$OnLeft = 3;
var $mdgriffith$elm_ui$Internal$Style$OnRight = 2;
var $mdgriffith$elm_ui$Internal$Style$Within = 4;
var $mdgriffith$elm_ui$Internal$Style$locations = function () {
	var loc = 0;
	var _v0 = function () {
		switch (loc) {
			case 0:
				return 0;
			case 1:
				return 0;
			case 2:
				return 0;
			case 3:
				return 0;
			case 4:
				return 0;
			default:
				return 0;
		}
	}();
	return _List_fromArray(
		[0, 1, 2, 3, 4, 5]);
}();
var $mdgriffith$elm_ui$Internal$Style$baseSheet = _List_fromArray(
	[
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		'html,body',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		_Utils_ap(
			$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
			_Utils_ap(
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gX),
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f0))),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-height', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.di),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'img',
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'max-width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'object-fit', 'cover')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj) + ':focus',
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'outline', 'none')
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gL),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', '100%'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Child,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f4),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bu),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20')
							]))
					]))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bu),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gX),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				$mdgriffith$elm_ui$Internal$Style$Batch(
				function (fn) {
					return A2($elm$core$List$map, fn, $mdgriffith$elm_ui$Internal$Style$locations);
				}(
					function (loc) {
						switch (loc) {
							case 0:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e6),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.di),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
												])),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 1:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fn),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'bottom', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												])),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX),
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', 'auto')
												]))
										]));
							case 2:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gt),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 3:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gs),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'right', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '20'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							case 4:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f4),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
							default:
								return A2(
									$mdgriffith$elm_ui$Internal$Style$Descriptor,
									$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fm),
									_List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'absolute'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none'),
											A2(
											$mdgriffith$elm_ui$Internal$Style$Child,
											'*',
											_List_fromArray(
												[
													A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto')
												]))
										]));
						}
					}))
			])),
		A2(
		$mdgriffith$elm_ui$Internal$Style$Class,
		$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
		_List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'relative'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'resize', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'box-sizing', 'border-box'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'padding', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-size', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-family', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', 'inherit'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'none'),
				A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'inherit'),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dk),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-wrap', 'wrap')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ei),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-moz-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-webkit-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, '-ms-user-select', 'none'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'user-select', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fG),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'pointer')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fH),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gC),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ca),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'auto !important')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.bc),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.a7),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.cl, $mdgriffith$elm_ui$Internal$Style$classes.bc)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.cl, $mdgriffith$elm_ui$Internal$Style$classes.a7)) + ':hover',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.fS, $mdgriffith$elm_ui$Internal$Style$classes.bc)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.fS, $mdgriffith$elm_ui$Internal$Style$classes.a7)) + ':focus',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.cC, $mdgriffith$elm_ui$Internal$Style$classes.bc)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot(
					_Utils_ap($mdgriffith$elm_ui$Internal$Style$classes.cC, $mdgriffith$elm_ui$Internal$Style$classes.a7)) + ':active',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'opacity', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.eZ),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Prop,
						'transition',
						A2(
							$elm$core$String$join,
							', ',
							A2(
								$elm$core$List$map,
								function (x) {
									return x + ' 160ms';
								},
								_List_fromArray(
									['transform', 'opacity', 'filter', 'background-color', 'color', 'font-size']))))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gP),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gQ),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gM),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gR),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'auto'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ac),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-shrink', '1')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fz),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fA),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-x', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fB),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-y', 'hidden')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dh),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', 'auto')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.b9),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-width', '0')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ft),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dashed')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fu),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'dotted')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fv),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'border-style', 'solid')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cw),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gd),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'line-height', '1.05'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background', 'transparent'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'inherit')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gX),
				$mdgriffith$elm_ui$Internal$Style$elDescription),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gM),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'row'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0%'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e2),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.d8),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dV),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.di),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cd),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.ff,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.fd,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fa),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-left', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.fd,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fa),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-right', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.fd,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fb),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.fd + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.ff + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.fd)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_Nil);
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_Nil);
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.g$),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cn),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'baseline')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ac),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-direction', 'column'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', '0px'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'min-height', 'min-content'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dU),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '100000')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.di),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e3),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.dh),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.fc,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:first-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.fe,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fb),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.fe,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fb),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', '0 !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:only-of-type.' + $mdgriffith$elm_ui$Internal$Style$classes.fe,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '1'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fb),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto !important'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto !important')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						's:last-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.fe + ' ~ u'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'u:first-of-type.' + ($mdgriffith$elm_ui$Internal$Style$classes.fc + (' ~ s.' + $mdgriffith$elm_ui$Internal$Style$classes.fe)),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-bottom', 'auto')
											]));
								case 1:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin-top', 'auto')
											]));
								case 2:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-end')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'flex-start')
											]));
								case 4:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
											]),
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'center')
											]));
								default:
									return _Utils_Tuple2(
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
											]),
										_List_Nil);
							}
						}),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cd),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-grow', '0'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-self', 'stretch !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.g$),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'space-between')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fW),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', '-ms-grid'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						'.gp',
						_List_fromArray(
							[
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Supports,
						_Utils_Tuple2('display', 'grid'),
						_List_fromArray(
							[
								_Utils_Tuple2('display', 'grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$gridAlignments(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-start')
										]);
								case 1:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'flex-end')
										]);
								case 2:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-end')
										]);
								case 3:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'flex-start')
										]);
								case 4:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'align-items', 'center')
										]);
								default:
									return _List_fromArray(
										[
											A2($mdgriffith$elm_ui$Internal$Style$Prop, 'justify-content', 'center')
										]);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.em),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj + ':first-child'),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.fj + ($mdgriffith$elm_ui$Internal$Style$selfName(3) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.fj))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot(
							$mdgriffith$elm_ui$Internal$Style$classes.fj + ($mdgriffith$elm_ui$Internal$Style$selfName(2) + (':first-child + .' + $mdgriffith$elm_ui$Internal$Style$classes.fj))),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'margin', '0 !important')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left'),
												A2(
												$mdgriffith$elm_ui$Internal$Style$Descriptor,
												'::after',
												_List_fromArray(
													[
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', '\"\"'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'table'),
														A2($mdgriffith$elm_ui$Internal$Style$Prop, 'clear', 'both')
													]))
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f9),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'background-color', 'transparent')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gc),
				_List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'flex-basis', 'auto')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gb),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'cursor', 'text'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ga),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'pre-wrap !important'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'color', 'transparent')
							]))
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.en),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'block'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'overflow-wrap', 'break-word'),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Descriptor,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cU),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '0'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fm),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'z-index', '-1')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cw),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.en),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::after',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								'::before',
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'content', 'none')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$AllChildren,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gX),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal'),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e2),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-block')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.f4),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fm),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.e6),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fn),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gt),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Descriptor,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gs),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'flex')
									])),
								A2(
								$mdgriffith$elm_ui$Internal$Style$Child,
								$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cw),
								_List_fromArray(
									[
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline'),
										A2($mdgriffith$elm_ui$Internal$Style$Prop, 'white-space', 'normal')
									]))
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gM),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ac),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-flex')
							])),
						A2(
						$mdgriffith$elm_ui$Internal$Style$Child,
						$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fW),
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'inline-grid')
							])),
						$mdgriffith$elm_ui$Internal$Style$describeAlignment(
						function (alignment) {
							switch (alignment) {
								case 0:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 1:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								case 2:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'right')
											]));
								case 3:
									return _Utils_Tuple2(
										_List_Nil,
										_List_fromArray(
											[
												A2($mdgriffith$elm_ui$Internal$Style$Prop, 'float', 'left')
											]));
								case 4:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
								default:
									return _Utils_Tuple2(_List_Nil, _List_Nil);
							}
						})
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.hidden',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'display', 'none')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ho),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '100')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hf),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '200')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hj),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '300')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hl),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '400')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hk),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '500')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hn),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '600')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fr),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '700')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.he),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '800')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hg),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-weight', '900')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gf),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'italic')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ha),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hx),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				_Utils_ap(
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hx),
					$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.ha)),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration', 'line-through underline'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip-ink', 'auto'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-decoration-skip', 'ink')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hq),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-style', 'normal')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hh),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cx),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'justify-all')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hd),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'center')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hm),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'right')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				$mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.hi),
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'text-align', 'left')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Descriptor,
				'.modal',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'position', 'fixed'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'left', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'top', '0'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'width', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'height', '100%'),
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'pointer-events', 'none')
					]))
			]))
	]);
var $mdgriffith$elm_ui$Internal$Style$fontVariant = function (_var) {
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + _var,
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\"'))
				])),
			A2(
			$mdgriffith$elm_ui$Internal$Style$Class,
			'.v-' + (_var + '-off'),
			_List_fromArray(
				[
					A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-feature-settings', '\"' + (_var + '\" 0'))
				]))
		]);
};
var $mdgriffith$elm_ui$Internal$Style$commonValues = $elm$core$List$concat(
	_List_fromArray(
		[
			A2(
			$elm$core$List$map,
			function (x) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.border-' + $elm$core$String$fromInt(x),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'border-width',
							$elm$core$String$fromInt(x) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 6)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 8, 32)),
			A2(
			$elm$core$List$map,
			function (i) {
				return A2(
					$mdgriffith$elm_ui$Internal$Style$Class,
					'.p-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Style$Prop,
							'padding',
							$elm$core$String$fromInt(i) + 'px')
						]));
			},
			A2($elm$core$List$range, 0, 24)),
			_List_fromArray(
			[
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'small-caps')
					])),
				A2(
				$mdgriffith$elm_ui$Internal$Style$Class,
				'.v-smcp-off',
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Internal$Style$Prop, 'font-variant', 'normal')
					]))
			]),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('zero'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('onum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('liga'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('dlig'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('ordn'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('tnum'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('afrc'),
			$mdgriffith$elm_ui$Internal$Style$fontVariant('frac')
		]));
var $mdgriffith$elm_ui$Internal$Style$explainer = '\n.explain {\n    border: 6px solid rgb(174, 121, 15) !important;\n}\n.explain > .' + ($mdgriffith$elm_ui$Internal$Style$classes.fj + (' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n.ctr {\n    border: none !important;\n}\n.explain > .ctr > .' + ($mdgriffith$elm_ui$Internal$Style$classes.fj + ' {\n    border: 4px dashed rgb(0, 151, 167) !important;\n}\n\n')));
var $mdgriffith$elm_ui$Internal$Style$inputTextReset = '\ninput[type="search"],\ninput[type="search"]::-webkit-search-decoration,\ninput[type="search"]::-webkit-search-cancel-button,\ninput[type="search"]::-webkit-search-results-button,\ninput[type="search"]::-webkit-search-results-decoration {\n  -webkit-appearance:none;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$sliderReset = '\ninput[type=range] {\n  -webkit-appearance: none; \n  background: transparent;\n  position:absolute;\n  left:0;\n  top:0;\n  z-index:10;\n  width: 100%;\n  outline: dashed 1px;\n  height: 100%;\n  opacity: 0;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$thumbReset = '\ninput[type=range]::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-moz-range-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range]::-ms-thumb {\n    opacity: 0.5;\n    width: 80px;\n    height: 80px;\n    background-color: black;\n    border:none;\n    border-radius: 5px;\n}\ninput[type=range][orient=vertical]{\n    writing-mode: bt-lr; /* IE */\n    -webkit-appearance: slider-vertical;  /* WebKit */\n}\n';
var $mdgriffith$elm_ui$Internal$Style$trackReset = '\ninput[type=range]::-moz-range-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-ms-track {\n    background: transparent;\n    cursor: pointer;\n}\ninput[type=range]::-webkit-slider-runnable-track {\n    background: transparent;\n    cursor: pointer;\n}\n';
var $mdgriffith$elm_ui$Internal$Style$overrides = '@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gM) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj) + (' { flex-basis: auto !important; } ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.gM) + (' > ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj) + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.cd) + (' { flex-basis: auto !important; }}' + ($mdgriffith$elm_ui$Internal$Style$inputTextReset + ($mdgriffith$elm_ui$Internal$Style$sliderReset + ($mdgriffith$elm_ui$Internal$Style$trackReset + ($mdgriffith$elm_ui$Internal$Style$thumbReset + $mdgriffith$elm_ui$Internal$Style$explainer)))))))))))))));
var $mdgriffith$elm_ui$Internal$Style$Intermediate = $elm$core$Basics$identity;
var $mdgriffith$elm_ui$Internal$Style$emptyIntermediate = F2(
	function (selector, closing) {
		return {aR: closing, n: _List_Nil, S: _List_Nil, A: selector};
	});
var $mdgriffith$elm_ui$Internal$Style$renderRules = F2(
	function (_v0, rulesToRender) {
		var parent = _v0;
		var generateIntermediates = F2(
			function (rule, rendered) {
				switch (rule.$) {
					case 0:
						var name = rule.a;
						var val = rule.b;
						return _Utils_update(
							rendered,
							{
								S: A2(
									$elm$core$List$cons,
									_Utils_Tuple2(name, val),
									rendered.S)
							});
					case 3:
						var _v2 = rule.a;
						var prop = _v2.a;
						var value = _v2.b;
						var props = rule.b;
						return _Utils_update(
							rendered,
							{
								n: A2(
									$elm$core$List$cons,
									{aR: '\n}', n: _List_Nil, S: props, A: '@supports (' + (prop + (':' + (value + (') {' + parent.A))))},
									rendered.n)
							});
					case 5:
						var selector = rule.a;
						var adjRules = rule.b;
						return _Utils_update(
							rendered,
							{
								n: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.A + (' + ' + selector), ''),
										adjRules),
									rendered.n)
							});
					case 1:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								n: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.A + (' > ' + child), ''),
										childRules),
									rendered.n)
							});
					case 2:
						var child = rule.a;
						var childRules = rule.b;
						return _Utils_update(
							rendered,
							{
								n: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.A + (' ' + child), ''),
										childRules),
									rendered.n)
							});
					case 4:
						var descriptor = rule.a;
						var descriptorRules = rule.b;
						return _Utils_update(
							rendered,
							{
								n: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2(
											$mdgriffith$elm_ui$Internal$Style$emptyIntermediate,
											_Utils_ap(parent.A, descriptor),
											''),
										descriptorRules),
									rendered.n)
							});
					default:
						var batched = rule.a;
						return _Utils_update(
							rendered,
							{
								n: A2(
									$elm$core$List$cons,
									A2(
										$mdgriffith$elm_ui$Internal$Style$renderRules,
										A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, parent.A, ''),
										batched),
									rendered.n)
							});
				}
			});
		return A3($elm$core$List$foldr, generateIntermediates, parent, rulesToRender);
	});
var $mdgriffith$elm_ui$Internal$Style$renderCompact = function (styleClasses) {
	var renderValues = function (values) {
		return $elm$core$String$concat(
			A2(
				$elm$core$List$map,
				function (_v3) {
					var x = _v3.a;
					var y = _v3.b;
					return x + (':' + (y + ';'));
				},
				values));
	};
	var renderClass = function (rule) {
		var _v2 = rule.S;
		if (!_v2.b) {
			return '';
		} else {
			return rule.A + ('{' + (renderValues(rule.S) + (rule.aR + '}')));
		}
	};
	var renderIntermediate = function (_v0) {
		var rule = _v0;
		return _Utils_ap(
			renderClass(rule),
			$elm$core$String$concat(
				A2($elm$core$List$map, renderIntermediate, rule.n)));
	};
	return $elm$core$String$concat(
		A2(
			$elm$core$List$map,
			renderIntermediate,
			A3(
				$elm$core$List$foldr,
				F2(
					function (_v1, existing) {
						var name = _v1.a;
						var styleRules = _v1.b;
						return A2(
							$elm$core$List$cons,
							A2(
								$mdgriffith$elm_ui$Internal$Style$renderRules,
								A2($mdgriffith$elm_ui$Internal$Style$emptyIntermediate, name, ''),
								styleRules),
							existing);
					}),
				_List_Nil,
				styleClasses)));
};
var $mdgriffith$elm_ui$Internal$Style$rules = _Utils_ap(
	$mdgriffith$elm_ui$Internal$Style$overrides,
	$mdgriffith$elm_ui$Internal$Style$renderCompact(
		_Utils_ap($mdgriffith$elm_ui$Internal$Style$baseSheet, $mdgriffith$elm_ui$Internal$Style$commonValues)));
var $mdgriffith$elm_ui$Internal$Model$staticRoot = function (opts) {
	var _v0 = opts.go;
	switch (_v0) {
		case 0:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'div',
				_List_Nil,
				_List_fromArray(
					[
						A3(
						$elm$virtual_dom$VirtualDom$node,
						'style',
						_List_Nil,
						_List_fromArray(
							[
								$elm$virtual_dom$VirtualDom$text($mdgriffith$elm_ui$Internal$Style$rules)
							]))
					]));
		case 1:
			return $elm$virtual_dom$VirtualDom$text('');
		default:
			return A3(
				$elm$virtual_dom$VirtualDom$node,
				'elm-ui-static-rules',
				_List_fromArray(
					[
						A2(
						$elm$virtual_dom$VirtualDom$property,
						'rules',
						$elm$json$Json$Encode$string($mdgriffith$elm_ui$Internal$Style$rules))
					]),
				_List_Nil);
	}
};
var $mdgriffith$elm_ui$Internal$Model$fontName = function (font) {
	switch (font.$) {
		case 0:
			return 'serif';
		case 1:
			return 'sans-serif';
		case 2:
			return 'monospace';
		case 3:
			var name = font.a;
			return '\"' + (name + '\"');
		case 4:
			var name = font.a;
			var url = font.b;
			return '\"' + (name + '\"');
		default:
			var name = font.a.gp;
			return '\"' + (name + '\"');
	}
};
var $mdgriffith$elm_ui$Internal$Model$isSmallCaps = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return name === 'smcp';
		case 1:
			var name = _var.a;
			return false;
		default:
			var name = _var.a;
			var index = _var.b;
			return (name === 'smcp') && (index === 1);
	}
};
var $mdgriffith$elm_ui$Internal$Model$hasSmallCaps = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$isSmallCaps, font.bE);
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderProps = F3(
	function (force, _v0, existing) {
		var key = _v0.a;
		var val = _v0.b;
		return force ? (existing + ('\n  ' + (key + (': ' + (val + ' !important;'))))) : (existing + ('\n  ' + (key + (': ' + (val + ';')))));
	});
var $mdgriffith$elm_ui$Internal$Model$renderStyle = F4(
	function (options, maybePseudo, selector, props) {
		if (maybePseudo.$ === 1) {
			return _List_fromArray(
				[
					selector + ('{' + (A3(
					$elm$core$List$foldl,
					$mdgriffith$elm_ui$Internal$Model$renderProps(false),
					'',
					props) + '\n}'))
				]);
		} else {
			var pseudo = maybePseudo.a;
			switch (pseudo) {
				case 1:
					var _v2 = options.cl;
					switch (_v2) {
						case 0:
							return _List_Nil;
						case 2:
							return _List_fromArray(
								[
									selector + ('-hv {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(true),
									'',
									props) + '\n}'))
								]);
						default:
							return _List_fromArray(
								[
									selector + ('-hv:hover {' + (A3(
									$elm$core$List$foldl,
									$mdgriffith$elm_ui$Internal$Model$renderProps(false),
									'',
									props) + '\n}'))
								]);
					}
				case 0:
					var renderedProps = A3(
						$elm$core$List$foldl,
						$mdgriffith$elm_ui$Internal$Model$renderProps(false),
						'',
						props);
					return _List_fromArray(
						[
							selector + ('-fs:focus {' + (renderedProps + '\n}')),
							('.' + ($mdgriffith$elm_ui$Internal$Style$classes.fj + (':focus ' + (selector + '-fs  {')))) + (renderedProps + '\n}'),
							(selector + '-fs:focus-within {') + (renderedProps + '\n}'),
							('.ui-slide-bar:focus + ' + ($mdgriffith$elm_ui$Internal$Style$dot($mdgriffith$elm_ui$Internal$Style$classes.fj) + (' .focusable-thumb' + (selector + '-fs {')))) + (renderedProps + '\n}')
						]);
				default:
					return _List_fromArray(
						[
							selector + ('-act:active {' + (A3(
							$elm$core$List$foldl,
							$mdgriffith$elm_ui$Internal$Model$renderProps(false),
							'',
							props) + '\n}'))
						]);
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderVariant = function (_var) {
	switch (_var.$) {
		case 0:
			var name = _var.a;
			return '\"' + (name + '\"');
		case 1:
			var name = _var.a;
			return '\"' + (name + '\" 0');
		default:
			var name = _var.a;
			var index = _var.b;
			return '\"' + (name + ('\" ' + $elm$core$String$fromInt(index)));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderVariants = function (typeface) {
	if (typeface.$ === 5) {
		var font = typeface.a;
		return $elm$core$Maybe$Just(
			A2(
				$elm$core$String$join,
				', ',
				A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$renderVariant, font.bE)));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$transformValue = function (transform) {
	switch (transform.$) {
		case 0:
			return $elm$core$Maybe$Nothing;
		case 1:
			var _v1 = transform.a;
			var x = _v1.a;
			var y = _v1.b;
			var z = _v1.c;
			return $elm$core$Maybe$Just(
				'translate3d(' + ($elm$core$String$fromFloat(x) + ('px, ' + ($elm$core$String$fromFloat(y) + ('px, ' + ($elm$core$String$fromFloat(z) + 'px)'))))));
		default:
			var _v2 = transform.a;
			var tx = _v2.a;
			var ty = _v2.b;
			var tz = _v2.c;
			var _v3 = transform.b;
			var sx = _v3.a;
			var sy = _v3.b;
			var sz = _v3.c;
			var _v4 = transform.c;
			var ox = _v4.a;
			var oy = _v4.b;
			var oz = _v4.c;
			var angle = transform.d;
			var translate = 'translate3d(' + ($elm$core$String$fromFloat(tx) + ('px, ' + ($elm$core$String$fromFloat(ty) + ('px, ' + ($elm$core$String$fromFloat(tz) + 'px)')))));
			var scale = 'scale3d(' + ($elm$core$String$fromFloat(sx) + (', ' + ($elm$core$String$fromFloat(sy) + (', ' + ($elm$core$String$fromFloat(sz) + ')')))));
			var rotate = 'rotate3d(' + ($elm$core$String$fromFloat(ox) + (', ' + ($elm$core$String$fromFloat(oy) + (', ' + ($elm$core$String$fromFloat(oz) + (', ' + ($elm$core$String$fromFloat(angle) + 'rad)')))))));
			return $elm$core$Maybe$Just(translate + (' ' + (scale + (' ' + rotate))));
	}
};
var $mdgriffith$elm_ui$Internal$Model$renderStyleRule = F3(
	function (options, rule, maybePseudo) {
		switch (rule.$) {
			case 0:
				var selector = rule.a;
				var props = rule.b;
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, selector, props);
			case 13:
				var name = rule.a;
				var prop = rule.b;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, 'box-shadow', prop)
						]));
			case 12:
				var name = rule.a;
				var transparency = rule.b;
				var opacity = A2(
					$elm$core$Basics$max,
					0,
					A2($elm$core$Basics$min, 1, 1 - transparency));
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + name,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'opacity',
							$elm$core$String$fromFloat(opacity))
						]));
			case 2:
				var i = rule.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.font-size-' + $elm$core$String$fromInt(i),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'font-size',
							$elm$core$String$fromInt(i) + 'px')
						]));
			case 1:
				var name = rule.a;
				var typefaces = rule.b;
				var features = A2(
					$elm$core$String$join,
					', ',
					A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Internal$Model$renderVariants, typefaces));
				var families = _List_fromArray(
					[
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-family',
						A2(
							$elm$core$String$join,
							', ',
							A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$fontName, typefaces))),
						A2($mdgriffith$elm_ui$Internal$Model$Property, 'font-feature-settings', features),
						A2(
						$mdgriffith$elm_ui$Internal$Model$Property,
						'font-variant',
						A2($elm$core$List$any, $mdgriffith$elm_ui$Internal$Model$hasSmallCaps, typefaces) ? 'small-caps' : 'normal')
					]);
				return A4($mdgriffith$elm_ui$Internal$Model$renderStyle, options, maybePseudo, '.' + name, families);
			case 3:
				var _class = rule.a;
				var prop = rule.b;
				var val = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2($mdgriffith$elm_ui$Internal$Model$Property, prop, val)
						]));
			case 4:
				var _class = rule.a;
				var prop = rule.b;
				var color = rule.c;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					'.' + _class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							prop,
							$mdgriffith$elm_ui$Internal$Model$formatColor(color))
						]));
			case 5:
				var cls = rule.a;
				var x = rule.b;
				var y = rule.c;
				var yPx = $elm$core$String$fromInt(y) + 'px';
				var xPx = $elm$core$String$fromInt(x) + 'px';
				var single = '.' + $mdgriffith$elm_ui$Internal$Style$classes.gX;
				var row = '.' + $mdgriffith$elm_ui$Internal$Style$classes.gM;
				var wrappedRow = '.' + ($mdgriffith$elm_ui$Internal$Style$classes.dk + row);
				var right = '.' + $mdgriffith$elm_ui$Internal$Style$classes.dn;
				var paragraph = '.' + $mdgriffith$elm_ui$Internal$Style$classes.en;
				var page = '.' + $mdgriffith$elm_ui$Internal$Style$classes.em;
				var left = '.' + $mdgriffith$elm_ui$Internal$Style$classes.dm;
				var halfY = $elm$core$String$fromFloat(y / 2) + 'px';
				var halfX = $elm$core$String$fromFloat(x / 2) + 'px';
				var column = '.' + $mdgriffith$elm_ui$Internal$Style$classes.ac;
				var _class = '.' + cls;
				var any = '.' + $mdgriffith$elm_ui$Internal$Style$classes.fj;
				return $elm$core$List$concat(
					_List_fromArray(
						[
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (row + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (wrappedRow + (' > ' + any)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin', halfY + (' ' + halfX))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (column + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + (any + (' + ' + any)))),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-top', yPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (page + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_Utils_ap(_class, paragraph),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							'textarea' + (any + _class),
							_List_fromArray(
								[
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'line-height',
									'calc(1em + ' + ($elm$core$String$fromInt(y) + 'px)')),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'height',
									'calc(100% + ' + ($elm$core$String$fromInt(y) + 'px)'))
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + left)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-right', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + (' > ' + right)),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'margin-left', xPx)
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::after'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-top',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								])),
							A4(
							$mdgriffith$elm_ui$Internal$Model$renderStyle,
							options,
							maybePseudo,
							_class + (paragraph + '::before'),
							_List_fromArray(
								[
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'content', '\'\''),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'display', 'block'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'height', '0'),
									A2($mdgriffith$elm_ui$Internal$Model$Property, 'width', '0'),
									A2(
									$mdgriffith$elm_ui$Internal$Model$Property,
									'margin-bottom',
									$elm$core$String$fromInt((-1) * ((y / 2) | 0)) + 'px')
								]))
						]));
			case 7:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'padding',
							$elm$core$String$fromFloat(top) + ('px ' + ($elm$core$String$fromFloat(right) + ('px ' + ($elm$core$String$fromFloat(bottom) + ('px ' + ($elm$core$String$fromFloat(left) + 'px')))))))
						]));
			case 6:
				var cls = rule.a;
				var top = rule.b;
				var right = rule.c;
				var bottom = rule.d;
				var left = rule.e;
				var _class = '.' + cls;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$renderStyle,
					options,
					maybePseudo,
					_class,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Internal$Model$Property,
							'border-width',
							$elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px')))))))
						]));
			case 8:
				var template = rule.a;
				var toGridLengthHelper = F3(
					function (minimum, maximum, x) {
						toGridLengthHelper:
						while (true) {
							switch (x.$) {
								case 0:
									var px = x.a;
									return $elm$core$String$fromInt(px) + 'px';
								case 1:
									var _v2 = _Utils_Tuple2(minimum, maximum);
									if (_v2.a.$ === 1) {
										if (_v2.b.$ === 1) {
											var _v3 = _v2.a;
											var _v4 = _v2.b;
											return 'max-content';
										} else {
											var _v6 = _v2.a;
											var maxSize = _v2.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v2.b.$ === 1) {
											var minSize = _v2.a.a;
											var _v5 = _v2.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + 'max-content)'));
										} else {
											var minSize = _v2.a.a;
											var maxSize = _v2.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 2:
									var i = x.a;
									var _v7 = _Utils_Tuple2(minimum, maximum);
									if (_v7.a.$ === 1) {
										if (_v7.b.$ === 1) {
											var _v8 = _v7.a;
											var _v9 = _v7.b;
											return $elm$core$String$fromInt(i) + 'fr';
										} else {
											var _v11 = _v7.a;
											var maxSize = _v7.b.a;
											return 'minmax(max-content, ' + ($elm$core$String$fromInt(maxSize) + 'px)');
										}
									} else {
										if (_v7.b.$ === 1) {
											var minSize = _v7.a.a;
											var _v10 = _v7.b;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(i) + ('fr' + 'fr)'))));
										} else {
											var minSize = _v7.a.a;
											var maxSize = _v7.b.a;
											return 'minmax(' + ($elm$core$String$fromInt(minSize) + ('px, ' + ($elm$core$String$fromInt(maxSize) + 'px)')));
										}
									}
								case 3:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = $elm$core$Maybe$Just(m),
										$temp$maximum = maximum,
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
								default:
									var m = x.a;
									var len = x.b;
									var $temp$minimum = minimum,
										$temp$maximum = $elm$core$Maybe$Just(m),
										$temp$x = len;
									minimum = $temp$minimum;
									maximum = $temp$maximum;
									x = $temp$x;
									continue toGridLengthHelper;
							}
						}
					});
				var toGridLength = function (x) {
					return A3(toGridLengthHelper, $elm$core$Maybe$Nothing, $elm$core$Maybe$Nothing, x);
				};
				var xSpacing = toGridLength(template.g0.a);
				var ySpacing = toGridLength(template.g0.b);
				var rows = function (x) {
					return 'grid-template-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.gN)));
				var msRows = function (x) {
					return '-ms-grid-rows: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.D)));
				var msColumns = function (x) {
					return '-ms-grid-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						ySpacing,
						A2($elm$core$List$map, toGridLength, template.D)));
				var gapY = 'grid-row-gap:' + (toGridLength(template.g0.b) + ';');
				var gapX = 'grid-column-gap:' + (toGridLength(template.g0.a) + ';');
				var columns = function (x) {
					return 'grid-template-columns: ' + (x + ';');
				}(
					A2(
						$elm$core$String$join,
						' ',
						A2($elm$core$List$map, toGridLength, template.D)));
				var _class = '.grid-rows-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.gN)) + ('-cols-' + (A2(
					$elm$core$String$join,
					'-',
					A2($elm$core$List$map, $mdgriffith$elm_ui$Internal$Model$lengthClassName, template.D)) + ('-space-x-' + ($mdgriffith$elm_ui$Internal$Model$lengthClassName(template.g0.a) + ('-space-y-' + $mdgriffith$elm_ui$Internal$Model$lengthClassName(template.g0.b)))))));
				var modernGrid = _class + ('{' + (columns + (rows + (gapX + (gapY + '}')))));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msColumns + (msRows + '}')));
				return _List_fromArray(
					[base, supports]);
			case 9:
				var position = rule.a;
				var msPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'-ms-grid-row: ' + ($elm$core$String$fromInt(position.gM) + ';'),
							'-ms-grid-row-span: ' + ($elm$core$String$fromInt(position.cV) + ';'),
							'-ms-grid-column: ' + ($elm$core$String$fromInt(position.fC) + ';'),
							'-ms-grid-column-span: ' + ($elm$core$String$fromInt(position.hC) + ';')
						]));
				var modernPosition = A2(
					$elm$core$String$join,
					' ',
					_List_fromArray(
						[
							'grid-row: ' + ($elm$core$String$fromInt(position.gM) + (' / ' + ($elm$core$String$fromInt(position.gM + position.cV) + ';'))),
							'grid-column: ' + ($elm$core$String$fromInt(position.fC) + (' / ' + ($elm$core$String$fromInt(position.fC + position.hC) + ';')))
						]));
				var _class = '.grid-pos-' + ($elm$core$String$fromInt(position.gM) + ('-' + ($elm$core$String$fromInt(position.fC) + ('-' + ($elm$core$String$fromInt(position.hC) + ('-' + $elm$core$String$fromInt(position.cV)))))));
				var modernGrid = _class + ('{' + (modernPosition + '}'));
				var supports = '@supports (display:grid) {' + (modernGrid + '}');
				var base = _class + ('{' + (msPosition + '}'));
				return _List_fromArray(
					[base, supports]);
			case 11:
				var _class = rule.a;
				var styles = rule.b;
				var renderPseudoRule = function (style) {
					return A3(
						$mdgriffith$elm_ui$Internal$Model$renderStyleRule,
						options,
						style,
						$elm$core$Maybe$Just(_class));
				};
				return A2($elm$core$List$concatMap, renderPseudoRule, styles);
			default:
				var transform = rule.a;
				var val = $mdgriffith$elm_ui$Internal$Model$transformValue(transform);
				var _class = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				var _v12 = _Utils_Tuple2(_class, val);
				if ((!_v12.a.$) && (!_v12.b.$)) {
					var cls = _v12.a.a;
					var v = _v12.b.a;
					return A4(
						$mdgriffith$elm_ui$Internal$Model$renderStyle,
						options,
						maybePseudo,
						'.' + cls,
						_List_fromArray(
							[
								A2($mdgriffith$elm_ui$Internal$Model$Property, 'transform', v)
							]));
				} else {
					return _List_Nil;
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$encodeStyles = F2(
	function (options, stylesheet) {
		return $elm$json$Json$Encode$object(
			A2(
				$elm$core$List$map,
				function (style) {
					var styled = A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing);
					return _Utils_Tuple2(
						$mdgriffith$elm_ui$Internal$Model$getStyleName(style),
						A2($elm$json$Json$Encode$list, $elm$json$Json$Encode$string, styled));
				},
				stylesheet));
	});
var $mdgriffith$elm_ui$Internal$Model$bracket = F2(
	function (selector, rules) {
		var renderPair = function (_v0) {
			var name = _v0.a;
			var val = _v0.b;
			return name + (': ' + (val + ';'));
		};
		return selector + (' {' + (A2(
			$elm$core$String$join,
			'',
			A2($elm$core$List$map, renderPair, rules)) + '}'));
	});
var $mdgriffith$elm_ui$Internal$Model$fontRule = F3(
	function (name, modifier, _v0) {
		var parentAdj = _v0.a;
		var textAdjustment = _v0.b;
		return _List_fromArray(
			[
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + (', ' + ('.' + (name + (' .' + modifier))))))), parentAdj),
				A2($mdgriffith$elm_ui$Internal$Model$bracket, '.' + (name + ('.' + (modifier + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.cw + (', .' + (name + (' .' + (modifier + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.cw)))))))))), textAdjustment)
			]);
	});
var $mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule = F3(
	function (fontToAdjust, _v0, otherFontName) {
		var full = _v0.a;
		var capital = _v0.b;
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_Utils_ap(
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.gY, capital),
				A3($mdgriffith$elm_ui$Internal$Model$fontRule, name, $mdgriffith$elm_ui$Internal$Style$classes.fU, full)));
	});
var $mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule = F2(
	function (fontToAdjust, otherFontName) {
		var name = _Utils_eq(fontToAdjust, otherFontName) ? fontToAdjust : (otherFontName + (' .' + fontToAdjust));
		return A2(
			$elm$core$String$join,
			' ',
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.gY + (', ' + ('.' + (name + (' .' + $mdgriffith$elm_ui$Internal$Style$classes.gY))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('line-height', '1')
						])),
					A2(
					$mdgriffith$elm_ui$Internal$Model$bracket,
					'.' + (name + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.gY + ('> .' + ($mdgriffith$elm_ui$Internal$Style$classes.cw + (', .' + (name + (' .' + ($mdgriffith$elm_ui$Internal$Style$classes.gY + (' > .' + $mdgriffith$elm_ui$Internal$Style$classes.cw)))))))))),
					_List_fromArray(
						[
							_Utils_Tuple2('vertical-align', '0'),
							_Utils_Tuple2('line-height', '1')
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$adjust = F3(
	function (size, height, vertical) {
		return {cV: height / size, eQ: size, e0: vertical};
	});
var $elm$core$List$maximum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$max, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $elm$core$List$minimum = function (list) {
	if (list.b) {
		var x = list.a;
		var xs = list.b;
		return $elm$core$Maybe$Just(
			A3($elm$core$List$foldl, $elm$core$Basics$min, x, xs));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$convertAdjustment = function (adjustment) {
	var lines = _List_fromArray(
		[adjustment.bL, adjustment.bK, adjustment.bP, adjustment.bV]);
	var lineHeight = 1.5;
	var normalDescender = (lineHeight - 1) / 2;
	var oldMiddle = lineHeight / 2;
	var descender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.bP,
		$elm$core$List$minimum(lines));
	var newBaseline = A2(
		$elm$core$Maybe$withDefault,
		adjustment.bK,
		$elm$core$List$minimum(
			A2(
				$elm$core$List$filter,
				function (x) {
					return !_Utils_eq(x, descender);
				},
				lines)));
	var base = lineHeight;
	var ascender = A2(
		$elm$core$Maybe$withDefault,
		adjustment.bL,
		$elm$core$List$maximum(lines));
	var capitalSize = 1 / (ascender - newBaseline);
	var capitalVertical = 1 - ascender;
	var fullSize = 1 / (ascender - descender);
	var fullVertical = 1 - ascender;
	var newCapitalMiddle = ((ascender - newBaseline) / 2) + newBaseline;
	var newFullMiddle = ((ascender - descender) / 2) + descender;
	return {
		bL: A3($mdgriffith$elm_ui$Internal$Model$adjust, capitalSize, ascender - newBaseline, capitalVertical),
		dT: A3($mdgriffith$elm_ui$Internal$Model$adjust, fullSize, ascender - descender, fullVertical)
	};
};
var $mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules = function (converted) {
	return _Utils_Tuple2(
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'block')
			]),
		_List_fromArray(
			[
				_Utils_Tuple2('display', 'inline-block'),
				_Utils_Tuple2(
				'line-height',
				$elm$core$String$fromFloat(converted.cV)),
				_Utils_Tuple2(
				'vertical-align',
				$elm$core$String$fromFloat(converted.e0) + 'em'),
				_Utils_Tuple2(
				'font-size',
				$elm$core$String$fromFloat(converted.eQ) + 'em')
			]));
};
var $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment = function (typefaces) {
	return A3(
		$elm$core$List$foldl,
		F2(
			function (face, found) {
				if (found.$ === 1) {
					if (face.$ === 5) {
						var _with = face.a;
						var _v2 = _with.bH;
						if (_v2.$ === 1) {
							return found;
						} else {
							var adjustment = _v2.a;
							return $elm$core$Maybe$Just(
								_Utils_Tuple2(
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.dT;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment))),
									$mdgriffith$elm_ui$Internal$Model$fontAdjustmentRules(
										function ($) {
											return $.bL;
										}(
											$mdgriffith$elm_ui$Internal$Model$convertAdjustment(adjustment)))));
						}
					} else {
						return found;
					}
				} else {
					return found;
				}
			}),
		$elm$core$Maybe$Nothing,
		typefaces);
};
var $mdgriffith$elm_ui$Internal$Model$renderTopLevelValues = function (rules) {
	var withImport = function (font) {
		if (font.$ === 4) {
			var url = font.b;
			return $elm$core$Maybe$Just('@import url(\'' + (url + '\');'));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	};
	var fontImports = function (_v2) {
		var name = _v2.a;
		var typefaces = _v2.b;
		var imports = A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$filterMap, withImport, typefaces));
		return imports;
	};
	var allNames = A2($elm$core$List$map, $elm$core$Tuple$first, rules);
	var fontAdjustments = function (_v1) {
		var name = _v1.a;
		var typefaces = _v1.b;
		var _v0 = $mdgriffith$elm_ui$Internal$Model$typefaceAdjustment(typefaces);
		if (_v0.$ === 1) {
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Internal$Model$renderNullAdjustmentRule(name),
					allNames));
		} else {
			var adjustment = _v0.a;
			return A2(
				$elm$core$String$join,
				'',
				A2(
					$elm$core$List$map,
					A2($mdgriffith$elm_ui$Internal$Model$renderFontAdjustmentRule, name, adjustment),
					allNames));
		}
	};
	return _Utils_ap(
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontImports, rules)),
		A2(
			$elm$core$String$join,
			'\n',
			A2($elm$core$List$map, fontAdjustments, rules)));
};
var $mdgriffith$elm_ui$Internal$Model$topLevelValue = function (rule) {
	if (rule.$ === 1) {
		var name = rule.a;
		var typefaces = rule.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(name, typefaces));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$toStyleSheetString = F2(
	function (options, stylesheet) {
		var combine = F2(
			function (style, rendered) {
				return {
					cu: _Utils_ap(
						rendered.cu,
						A3($mdgriffith$elm_ui$Internal$Model$renderStyleRule, options, style, $elm$core$Maybe$Nothing)),
					b4: function () {
						var _v1 = $mdgriffith$elm_ui$Internal$Model$topLevelValue(style);
						if (_v1.$ === 1) {
							return rendered.b4;
						} else {
							var topLevel = _v1.a;
							return A2($elm$core$List$cons, topLevel, rendered.b4);
						}
					}()
				};
			});
		var _v0 = A3(
			$elm$core$List$foldl,
			combine,
			{cu: _List_Nil, b4: _List_Nil},
			stylesheet);
		var rules = _v0.cu;
		var topLevel = _v0.b4;
		return _Utils_ap(
			$mdgriffith$elm_ui$Internal$Model$renderTopLevelValues(topLevel),
			$elm$core$String$concat(rules));
	});
var $mdgriffith$elm_ui$Internal$Model$toStyleSheet = F2(
	function (options, styleSheet) {
		var _v0 = options.go;
		switch (_v0) {
			case 0:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			case 1:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'div',
					_List_Nil,
					_List_fromArray(
						[
							A3(
							$elm$virtual_dom$VirtualDom$node,
							'style',
							_List_Nil,
							_List_fromArray(
								[
									$elm$virtual_dom$VirtualDom$text(
									A2($mdgriffith$elm_ui$Internal$Model$toStyleSheetString, options, styleSheet))
								]))
						]));
			default:
				return A3(
					$elm$virtual_dom$VirtualDom$node,
					'elm-ui-rules',
					_List_fromArray(
						[
							A2(
							$elm$virtual_dom$VirtualDom$property,
							'rules',
							A2($mdgriffith$elm_ui$Internal$Model$encodeStyles, options, styleSheet))
						]),
					_List_Nil);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$embedKeyed = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.fS)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			_Utils_Tuple2(
				'static-stylesheet',
				$mdgriffith$elm_ui$Internal$Model$staticRoot(opts)),
			A2(
				$elm$core$List$cons,
				_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
				children)) : A2(
			$elm$core$List$cons,
			_Utils_Tuple2('dynamic-stylesheet', dynamicStyleSheet),
			children);
	});
var $mdgriffith$elm_ui$Internal$Model$embedWith = F4(
	function (_static, opts, styles, children) {
		var dynamicStyleSheet = A2(
			$mdgriffith$elm_ui$Internal$Model$toStyleSheet,
			opts,
			A3(
				$elm$core$List$foldl,
				$mdgriffith$elm_ui$Internal$Model$reduceStyles,
				_Utils_Tuple2(
					$elm$core$Set$empty,
					$mdgriffith$elm_ui$Internal$Model$renderFocusStyle(opts.fS)),
				styles).b);
		return _static ? A2(
			$elm$core$List$cons,
			$mdgriffith$elm_ui$Internal$Model$staticRoot(opts),
			A2($elm$core$List$cons, dynamicStyleSheet, children)) : A2($elm$core$List$cons, dynamicStyleSheet, children);
	});
var $mdgriffith$elm_ui$Internal$Flag$heightBetween = $mdgriffith$elm_ui$Internal$Flag$flag(45);
var $mdgriffith$elm_ui$Internal$Flag$heightFill = $mdgriffith$elm_ui$Internal$Flag$flag(37);
var $mdgriffith$elm_ui$Internal$Flag$present = F2(
	function (myFlag, _v0) {
		var fieldOne = _v0.a;
		var fieldTwo = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return _Utils_eq(first & fieldOne, first);
		} else {
			var second = myFlag.a;
			return _Utils_eq(second & fieldTwo, second);
		}
	});
var $elm$html$Html$s = _VirtualDom_node('s');
var $elm$html$Html$u = _VirtualDom_node('u');
var $mdgriffith$elm_ui$Internal$Flag$widthBetween = $mdgriffith$elm_ui$Internal$Flag$flag(44);
var $mdgriffith$elm_ui$Internal$Flag$widthFill = $mdgriffith$elm_ui$Internal$Flag$flag(39);
var $mdgriffith$elm_ui$Internal$Model$finalizeNode = F6(
	function (has, node, attributes, children, embedMode, parentContext) {
		var createNode = F2(
			function (nodeName, attrs) {
				if (children.$ === 1) {
					var keyed = children.a;
					return A3(
						$elm$virtual_dom$VirtualDom$keyedNode,
						nodeName,
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return keyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, false, opts, styles, keyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedKeyed, true, opts, styles, keyed);
							}
						}());
				} else {
					var unkeyed = children.a;
					return A2(
						function () {
							switch (nodeName) {
								case 'div':
									return $elm$html$Html$div;
								case 'p':
									return $elm$html$Html$p;
								default:
									return $elm$virtual_dom$VirtualDom$node(nodeName);
							}
						}(),
						attrs,
						function () {
							switch (embedMode.$) {
								case 0:
									return unkeyed;
								case 2:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, false, opts, styles, unkeyed);
								default:
									var opts = embedMode.a;
									var styles = embedMode.b;
									return A4($mdgriffith$elm_ui$Internal$Model$embedWith, true, opts, styles, unkeyed);
							}
						}());
				}
			});
		var html = function () {
			switch (node.$) {
				case 0:
					return A2(createNode, 'div', attributes);
				case 1:
					var nodeName = node.a;
					return A2(createNode, nodeName, attributes);
				default:
					var nodeName = node.a;
					var internal = node.b;
					return A3(
						$elm$virtual_dom$VirtualDom$node,
						nodeName,
						attributes,
						_List_fromArray(
							[
								A2(
								createNode,
								internal,
								_List_fromArray(
									[
										$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.gX))
									]))
							]));
			}
		}();
		switch (parentContext) {
			case 0:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$widthBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignRight, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.fj, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.cd, $mdgriffith$elm_ui$Internal$Style$classes.aS, $mdgriffith$elm_ui$Internal$Style$classes.ff])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerX, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.fj, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.cd, $mdgriffith$elm_ui$Internal$Style$classes.aS, $mdgriffith$elm_ui$Internal$Style$classes.fd])))
						]),
					_List_fromArray(
						[html])) : html));
			case 1:
				return (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightFill, has) && (!A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$heightBetween, has))) ? html : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$centerY, has) ? A2(
					$elm$html$Html$s,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.fj, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.cd, $mdgriffith$elm_ui$Internal$Style$classes.fe])))
						]),
					_List_fromArray(
						[html])) : (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$alignBottom, has) ? A2(
					$elm$html$Html$u,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class(
							A2(
								$elm$core$String$join,
								' ',
								_List_fromArray(
									[$mdgriffith$elm_ui$Internal$Style$classes.fj, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.cd, $mdgriffith$elm_ui$Internal$Style$classes.fc])))
						]),
					_List_fromArray(
						[html])) : html));
			default:
				return html;
		}
	});
var $mdgriffith$elm_ui$Internal$Model$textElementClasses = $mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.cw + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.dh + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cW)))));
var $mdgriffith$elm_ui$Internal$Model$textElement = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$textElementFillClasses = $mdgriffith$elm_ui$Internal$Style$classes.fj + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.cw + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.di + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.cX)))));
var $mdgriffith$elm_ui$Internal$Model$textElementFill = function (str) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Model$textElementFillClasses)
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $mdgriffith$elm_ui$Internal$Model$createElement = F3(
	function (context, children, rendered) {
		var gatherKeyed = F2(
			function (_v8, _v9) {
				var key = _v8.a;
				var child = _v8.b;
				var htmls = _v9.a;
				var existingStyles = _v9.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									html(context)),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.f$, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.hb : _Utils_ap(styled.hb, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									A2(styled.f$, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context)),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.hb : _Utils_ap(styled.hb, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_Tuple2(
									key,
									_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str)),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		var gather = F2(
			function (child, _v6) {
				var htmls = _v6.a;
				var existingStyles = _v6.b;
				switch (child.$) {
					case 0:
						var html = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								html(context),
								htmls),
							existingStyles);
					case 1:
						var styled = child.a;
						return _Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asParagraph) ? _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.f$, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.hb : _Utils_ap(styled.hb, existingStyles)) : _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								A2(styled.f$, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, context),
								htmls),
							$elm$core$List$isEmpty(existingStyles) ? styled.hb : _Utils_ap(styled.hb, existingStyles));
					case 2:
						var str = child.a;
						return _Utils_Tuple2(
							A2(
								$elm$core$List$cons,
								_Utils_eq(context, $mdgriffith$elm_ui$Internal$Model$asEl) ? $mdgriffith$elm_ui$Internal$Model$textElementFill(str) : $mdgriffith$elm_ui$Internal$Model$textElement(str),
								htmls),
							existingStyles);
					default:
						return _Utils_Tuple2(htmls, existingStyles);
				}
			});
		if (children.$ === 1) {
			var keyedChildren = children.a;
			var _v1 = A3(
				$elm$core$List$foldr,
				gatherKeyed,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				keyedChildren);
			var keyed = _v1.a;
			var styles = _v1.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.hb : _Utils_ap(rendered.hb, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.V,
						rendered.Y,
						rendered.aY,
						$mdgriffith$elm_ui$Internal$Model$Keyed(
							A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.aQ)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						f$: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.V,
							rendered.Y,
							rendered.aY,
							$mdgriffith$elm_ui$Internal$Model$Keyed(
								A3($mdgriffith$elm_ui$Internal$Model$addKeyedChildren, 'nearby-element-pls', keyed, rendered.aQ))),
						hb: allStyles
					});
			}
		} else {
			var unkeyedChildren = children.a;
			var _v3 = A3(
				$elm$core$List$foldr,
				gather,
				_Utils_Tuple2(_List_Nil, _List_Nil),
				unkeyedChildren);
			var unkeyed = _v3.a;
			var styles = _v3.b;
			var newStyles = $elm$core$List$isEmpty(styles) ? rendered.hb : _Utils_ap(rendered.hb, styles);
			if (!newStyles.b) {
				return $mdgriffith$elm_ui$Internal$Model$Unstyled(
					A5(
						$mdgriffith$elm_ui$Internal$Model$finalizeNode,
						rendered.V,
						rendered.Y,
						rendered.aY,
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.aQ)),
						$mdgriffith$elm_ui$Internal$Model$NoStyleSheet));
			} else {
				var allStyles = newStyles;
				return $mdgriffith$elm_ui$Internal$Model$Styled(
					{
						f$: A4(
							$mdgriffith$elm_ui$Internal$Model$finalizeNode,
							rendered.V,
							rendered.Y,
							rendered.aY,
							$mdgriffith$elm_ui$Internal$Model$Unkeyed(
								A2($mdgriffith$elm_ui$Internal$Model$addChildren, unkeyed, rendered.aQ))),
						hb: allStyles
					});
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Single = F3(
	function (a, b, c) {
		return {$: 3, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$Transform = function (a) {
	return {$: 10, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$Field = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$add = F2(
	function (myFlag, _v0) {
		var one = _v0.a;
		var two = _v0.b;
		if (!myFlag.$) {
			var first = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, first | one, two);
		} else {
			var second = myFlag.a;
			return A2($mdgriffith$elm_ui$Internal$Flag$Field, one, second | two);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehind = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$ChildrenInFront = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$nearbyElement = F2(
	function (location, elem) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class(
					function () {
						switch (location) {
							case 0:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bu, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.e6]));
							case 1:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bu, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.fn]));
							case 2:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bu, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.gt]));
							case 3:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bu, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.gs]));
							case 4:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bu, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.f4]));
							default:
								return A2(
									$elm$core$String$join,
									' ',
									_List_fromArray(
										[$mdgriffith$elm_ui$Internal$Style$classes.bu, $mdgriffith$elm_ui$Internal$Style$classes.gX, $mdgriffith$elm_ui$Internal$Style$classes.fm]));
						}
					}())
				]),
			_List_fromArray(
				[
					function () {
					switch (elem.$) {
						case 3:
							return $elm$virtual_dom$VirtualDom$text('');
						case 2:
							var str = elem.a;
							return $mdgriffith$elm_ui$Internal$Model$textElement(str);
						case 0:
							var html = elem.a;
							return html($mdgriffith$elm_ui$Internal$Model$asEl);
						default:
							var styled = elem.a;
							return A2(styled.f$, $mdgriffith$elm_ui$Internal$Model$NoStyleSheet, $mdgriffith$elm_ui$Internal$Model$asEl);
					}
				}()
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$addNearbyElement = F3(
	function (location, elem, existing) {
		var nearby = A2($mdgriffith$elm_ui$Internal$Model$nearbyElement, location, elem);
		switch (existing.$) {
			case 0:
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						_List_fromArray(
							[nearby]));
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						_List_fromArray(
							[nearby]));
				}
			case 1:
				var existingBehind = existing.a;
				if (location === 5) {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenBehind(
						A2($elm$core$List$cons, nearby, existingBehind));
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						_List_fromArray(
							[nearby]));
				}
			case 2:
				var existingInFront = existing.a;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						_List_fromArray(
							[nearby]),
						existingInFront);
				} else {
					return $mdgriffith$elm_ui$Internal$Model$ChildrenInFront(
						A2($elm$core$List$cons, nearby, existingInFront));
				}
			default:
				var existingBehind = existing.a;
				var existingInFront = existing.b;
				if (location === 5) {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						A2($elm$core$List$cons, nearby, existingBehind),
						existingInFront);
				} else {
					return A2(
						$mdgriffith$elm_ui$Internal$Model$ChildrenBehindAndInFront,
						existingBehind,
						A2($elm$core$List$cons, nearby, existingInFront));
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Embedded = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$NodeName = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$addNodeName = F2(
	function (newNode, old) {
		switch (old.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NodeName(newNode);
			case 1:
				var name = old.a;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, name, newNode);
			default:
				var x = old.a;
				var y = old.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Embedded, x, y);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$alignXName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.cD + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.dm);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.cD + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.dn);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.cD + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fa);
	}
};
var $mdgriffith$elm_ui$Internal$Model$alignYName = function (align) {
	switch (align) {
		case 0:
			return $mdgriffith$elm_ui$Internal$Style$classes.cE + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fg);
		case 2:
			return $mdgriffith$elm_ui$Internal$Style$classes.cE + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.e9);
		default:
			return $mdgriffith$elm_ui$Internal$Style$classes.cE + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.fb);
	}
};
var $mdgriffith$elm_ui$Internal$Model$FullTransform = F4(
	function (a, b, c, d) {
		return {$: 2, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Internal$Model$Moved = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$composeTransformation = F2(
	function (transform, component) {
		switch (transform.$) {
			case 0:
				switch (component.$) {
					case 0:
						var x = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, 0, 0));
					case 1:
						var y = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, y, 0));
					case 2:
						var z = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(0, 0, z));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var xyz = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(0, 0, 0),
							xyz,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			case 1:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(newX, y, z));
					case 1:
						var newY = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, newY, z));
					case 2:
						var newZ = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(
							_Utils_Tuple3(x, y, newZ));
					case 3:
						var xyz = component.a;
						return $mdgriffith$elm_ui$Internal$Model$Moved(xyz);
					case 4:
						var xyz = component.a;
						var angle = component.b;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							_Utils_Tuple3(1, 1, 1),
							xyz,
							angle);
					default:
						var scale = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							moved,
							scale,
							_Utils_Tuple3(0, 0, 1),
							0);
				}
			default:
				var moved = transform.a;
				var x = moved.a;
				var y = moved.b;
				var z = moved.c;
				var scaled = transform.b;
				var origin = transform.c;
				var angle = transform.d;
				switch (component.$) {
					case 0:
						var newX = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(newX, y, z),
							scaled,
							origin,
							angle);
					case 1:
						var newY = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, newY, z),
							scaled,
							origin,
							angle);
					case 2:
						var newZ = component.a;
						return A4(
							$mdgriffith$elm_ui$Internal$Model$FullTransform,
							_Utils_Tuple3(x, y, newZ),
							scaled,
							origin,
							angle);
					case 3:
						var newMove = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, newMove, scaled, origin, angle);
					case 4:
						var newOrigin = component.a;
						var newAngle = component.b;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, scaled, newOrigin, newAngle);
					default:
						var newScale = component.a;
						return A4($mdgriffith$elm_ui$Internal$Model$FullTransform, moved, newScale, origin, angle);
				}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$height = $mdgriffith$elm_ui$Internal$Flag$flag(7);
var $mdgriffith$elm_ui$Internal$Flag$heightContent = $mdgriffith$elm_ui$Internal$Flag$flag(36);
var $mdgriffith$elm_ui$Internal$Flag$merge = F2(
	function (_v0, _v1) {
		var one = _v0.a;
		var two = _v0.b;
		var three = _v1.a;
		var four = _v1.b;
		return A2($mdgriffith$elm_ui$Internal$Flag$Field, one | three, two | four);
	});
var $mdgriffith$elm_ui$Internal$Flag$none = A2($mdgriffith$elm_ui$Internal$Flag$Field, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$renderHeight = function (h) {
	switch (h.$) {
		case 0:
			var px = h.a;
			var val = $elm$core$String$fromInt(px);
			var name = 'height-px-' + val;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.dU + (' ' + name),
				_List_fromArray(
					[
						A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height', val + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.cW,
				_List_Nil);
		case 2:
			var portion = h.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.cX,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.dV + (' height-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.fj + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.ac + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'height-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = h.a;
			var len = h.b;
			var cls = 'min-height-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-height',
				$elm$core$String$fromInt(minSize) + 'px !important');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = h.a;
			var len = h.b;
			var cls = 'max-height-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-height',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderHeight(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$heightBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$widthContent = $mdgriffith$elm_ui$Internal$Flag$flag(38);
var $mdgriffith$elm_ui$Internal$Model$renderWidth = function (w) {
	switch (w.$) {
		case 0:
			var px = w.a;
			return _Utils_Tuple3(
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Style$classes.e2 + (' width-px-' + $elm$core$String$fromInt(px)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						'width-px-' + $elm$core$String$fromInt(px),
						'width',
						$elm$core$String$fromInt(px) + 'px')
					]));
		case 1:
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthContent, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.dh,
				_List_Nil);
		case 2:
			var portion = w.a;
			return (portion === 1) ? _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.di,
				_List_Nil) : _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthFill, $mdgriffith$elm_ui$Internal$Flag$none),
				$mdgriffith$elm_ui$Internal$Style$classes.e3 + (' width-fill-' + $elm$core$String$fromInt(portion)),
				_List_fromArray(
					[
						A3(
						$mdgriffith$elm_ui$Internal$Model$Single,
						$mdgriffith$elm_ui$Internal$Style$classes.fj + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.gM + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
							'width-fill-' + $elm$core$String$fromInt(portion))))),
						'flex-grow',
						$elm$core$String$fromInt(portion * 100000))
					]));
		case 3:
			var minSize = w.a;
			var len = w.b;
			var cls = 'min-width-' + $elm$core$String$fromInt(minSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'min-width',
				$elm$core$String$fromInt(minSize) + 'px');
			var _v1 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v1.a;
			var newAttrs = _v1.b;
			var newStyle = _v1.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
		default:
			var maxSize = w.a;
			var len = w.b;
			var cls = 'max-width-' + $elm$core$String$fromInt(maxSize);
			var style = A3(
				$mdgriffith$elm_ui$Internal$Model$Single,
				cls,
				'max-width',
				$elm$core$String$fromInt(maxSize) + 'px');
			var _v2 = $mdgriffith$elm_ui$Internal$Model$renderWidth(len);
			var newFlag = _v2.a;
			var newAttrs = _v2.b;
			var newStyle = _v2.c;
			return _Utils_Tuple3(
				A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$widthBetween, newFlag),
				cls + (' ' + newAttrs),
				A2($elm$core$List$cons, style, newStyle));
	}
};
var $mdgriffith$elm_ui$Internal$Flag$borderWidth = $mdgriffith$elm_ui$Internal$Flag$flag(27);
var $mdgriffith$elm_ui$Internal$Model$skippable = F2(
	function (flag, style) {
		if (_Utils_eq(flag, $mdgriffith$elm_ui$Internal$Flag$borderWidth)) {
			if (style.$ === 3) {
				var val = style.c;
				switch (val) {
					case '0px':
						return true;
					case '1px':
						return true;
					case '2px':
						return true;
					case '3px':
						return true;
					case '4px':
						return true;
					case '5px':
						return true;
					case '6px':
						return true;
					default:
						return false;
				}
			} else {
				return false;
			}
		} else {
			switch (style.$) {
				case 2:
					var i = style.a;
					return (i >= 8) && (i <= 32);
				case 7:
					var name = style.a;
					var t = style.b;
					var r = style.c;
					var b = style.d;
					var l = style.e;
					return _Utils_eq(t, b) && (_Utils_eq(t, r) && (_Utils_eq(t, l) && ((t >= 0) && (t <= 24))));
				default:
					return false;
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Flag$width = $mdgriffith$elm_ui$Internal$Flag$flag(6);
var $mdgriffith$elm_ui$Internal$Flag$xAlign = $mdgriffith$elm_ui$Internal$Flag$flag(30);
var $mdgriffith$elm_ui$Internal$Flag$yAlign = $mdgriffith$elm_ui$Internal$Flag$flag(29);
var $mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive = F8(
	function (classes, node, has, transform, styles, attrs, children, elementAttrs) {
		gatherAttrRecursive:
		while (true) {
			if (!elementAttrs.b) {
				var _v1 = $mdgriffith$elm_ui$Internal$Model$transformClass(transform);
				if (_v1.$ === 1) {
					return {
						aY: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes),
							attrs),
						aQ: children,
						V: has,
						Y: node,
						hb: styles
					};
				} else {
					var _class = _v1.a;
					return {
						aY: A2(
							$elm$core$List$cons,
							$elm$html$Html$Attributes$class(classes + (' ' + _class)),
							attrs),
						aQ: children,
						V: has,
						Y: node,
						hb: A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$Transform(transform),
							styles)
					};
				}
			} else {
				var attribute = elementAttrs.a;
				var remaining = elementAttrs.b;
				switch (attribute.$) {
					case 0:
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 3:
						var flag = attribute.a;
						var exactClassName = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = exactClassName + (' ' + classes),
								$temp$node = node,
								$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					case 1:
						var actualAttribute = attribute.a;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = styles,
							$temp$attrs = A2($elm$core$List$cons, actualAttribute, attrs),
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 4:
						var flag = attribute.a;
						var style = attribute.b;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, flag, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							if (A2($mdgriffith$elm_ui$Internal$Model$skippable, flag, style)) {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							} else {
								var $temp$classes = $mdgriffith$elm_ui$Internal$Model$getStyleName(style) + (' ' + classes),
									$temp$node = node,
									$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
									$temp$transform = transform,
									$temp$styles = A2($elm$core$List$cons, style, styles),
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							}
						}
					case 10:
						var flag = attribute.a;
						var component = attribute.b;
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, flag, has),
							$temp$transform = A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, transform, component),
							$temp$styles = styles,
							$temp$attrs = attrs,
							$temp$children = children,
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 7:
						var width = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$width, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (width.$) {
								case 0:
									var px = width.a;
									var $temp$classes = ($mdgriffith$elm_ui$Internal$Style$classes.e2 + (' width-px-' + $elm$core$String$fromInt(px))) + (' ' + classes),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3(
											$mdgriffith$elm_ui$Internal$Model$Single,
											'width-px-' + $elm$core$String$fromInt(px),
											'width',
											$elm$core$String$fromInt(px) + 'px'),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.dh),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$widthContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = width.a;
									if (portion === 1) {
										var $temp$classes = classes + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.di),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.e3 + (' width-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$widthFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.fj + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.gM + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'width-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v4 = $mdgriffith$elm_ui$Internal$Model$renderWidth(width);
									var addToFlags = _v4.a;
									var newClass = _v4.b;
									var newStyles = _v4.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$width, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 8:
						var height = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$height, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							switch (height.$) {
								case 0:
									var px = height.a;
									var val = $elm$core$String$fromInt(px) + 'px';
									var name = 'height-px-' + val;
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.dU + (' ' + (name + (' ' + classes))),
										$temp$node = node,
										$temp$has = A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has),
										$temp$transform = transform,
										$temp$styles = A2(
										$elm$core$List$cons,
										A3($mdgriffith$elm_ui$Internal$Model$Single, name, 'height ', val),
										styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 1:
									var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.cW + (' ' + classes),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$add,
										$mdgriffith$elm_ui$Internal$Flag$heightContent,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								case 2:
									var portion = height.a;
									if (portion === 1) {
										var $temp$classes = $mdgriffith$elm_ui$Internal$Style$classes.cX + (' ' + classes),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.dV + (' height-fill-' + $elm$core$String$fromInt(portion)))),
											$temp$node = node,
											$temp$has = A2(
											$mdgriffith$elm_ui$Internal$Flag$add,
											$mdgriffith$elm_ui$Internal$Flag$heightFill,
											A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
											$temp$transform = transform,
											$temp$styles = A2(
											$elm$core$List$cons,
											A3(
												$mdgriffith$elm_ui$Internal$Model$Single,
												$mdgriffith$elm_ui$Internal$Style$classes.fj + ('.' + ($mdgriffith$elm_ui$Internal$Style$classes.ac + (' > ' + $mdgriffith$elm_ui$Internal$Style$dot(
													'height-fill-' + $elm$core$String$fromInt(portion))))),
												'flex-grow',
												$elm$core$String$fromInt(portion * 100000)),
											styles),
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								default:
									var _v6 = $mdgriffith$elm_ui$Internal$Model$renderHeight(height);
									var addToFlags = _v6.a;
									var newClass = _v6.b;
									var newStyles = _v6.c;
									var $temp$classes = classes + (' ' + newClass),
										$temp$node = node,
										$temp$has = A2(
										$mdgriffith$elm_ui$Internal$Flag$merge,
										addToFlags,
										A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$height, has)),
										$temp$transform = transform,
										$temp$styles = _Utils_ap(newStyles, styles),
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
							}
						}
					case 2:
						var description = attribute.a;
						switch (description.$) {
							case 0:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'main', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 1:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'nav', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 2:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'footer', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 3:
								var $temp$classes = classes,
									$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'aside', node),
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 4:
								var i = description.a;
								if (i <= 1) {
									var $temp$classes = classes,
										$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h1', node),
										$temp$has = has,
										$temp$transform = transform,
										$temp$styles = styles,
										$temp$attrs = attrs,
										$temp$children = children,
										$temp$elementAttrs = remaining;
									classes = $temp$classes;
									node = $temp$node;
									has = $temp$has;
									transform = $temp$transform;
									styles = $temp$styles;
									attrs = $temp$attrs;
									children = $temp$children;
									elementAttrs = $temp$elementAttrs;
									continue gatherAttrRecursive;
								} else {
									if (i < 7) {
										var $temp$classes = classes,
											$temp$node = A2(
											$mdgriffith$elm_ui$Internal$Model$addNodeName,
											'h' + $elm$core$String$fromInt(i),
											node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									} else {
										var $temp$classes = classes,
											$temp$node = A2($mdgriffith$elm_ui$Internal$Model$addNodeName, 'h6', node),
											$temp$has = has,
											$temp$transform = transform,
											$temp$styles = styles,
											$temp$attrs = attrs,
											$temp$children = children,
											$temp$elementAttrs = remaining;
										classes = $temp$classes;
										node = $temp$node;
										has = $temp$has;
										transform = $temp$transform;
										styles = $temp$styles;
										attrs = $temp$attrs;
										children = $temp$children;
										elementAttrs = $temp$elementAttrs;
										continue gatherAttrRecursive;
									}
								}
							case 9:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = attrs,
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 8:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'role', 'button'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 5:
								var label = description.a;
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-label', label),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							case 6:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'polite'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
							default:
								var $temp$classes = classes,
									$temp$node = node,
									$temp$has = has,
									$temp$transform = transform,
									$temp$styles = styles,
									$temp$attrs = A2(
									$elm$core$List$cons,
									A2($elm$virtual_dom$VirtualDom$attribute, 'aria-live', 'assertive'),
									attrs),
									$temp$children = children,
									$temp$elementAttrs = remaining;
								classes = $temp$classes;
								node = $temp$node;
								has = $temp$has;
								transform = $temp$transform;
								styles = $temp$styles;
								attrs = $temp$attrs;
								children = $temp$children;
								elementAttrs = $temp$elementAttrs;
								continue gatherAttrRecursive;
						}
					case 9:
						var location = attribute.a;
						var elem = attribute.b;
						var newStyles = function () {
							switch (elem.$) {
								case 3:
									return styles;
								case 2:
									var str = elem.a;
									return styles;
								case 0:
									var html = elem.a;
									return styles;
								default:
									var styled = elem.a;
									return _Utils_ap(styles, styled.hb);
							}
						}();
						var $temp$classes = classes,
							$temp$node = node,
							$temp$has = has,
							$temp$transform = transform,
							$temp$styles = newStyles,
							$temp$attrs = attrs,
							$temp$children = A3($mdgriffith$elm_ui$Internal$Model$addNearbyElement, location, elem, children),
							$temp$elementAttrs = remaining;
						classes = $temp$classes;
						node = $temp$node;
						has = $temp$has;
						transform = $temp$transform;
						styles = $temp$styles;
						attrs = $temp$attrs;
						children = $temp$children;
						elementAttrs = $temp$elementAttrs;
						continue gatherAttrRecursive;
					case 6:
						var x = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignXName(x) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (x) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerX, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignRight, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$xAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
					default:
						var y = attribute.a;
						if (A2($mdgriffith$elm_ui$Internal$Flag$present, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)) {
							var $temp$classes = classes,
								$temp$node = node,
								$temp$has = has,
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						} else {
							var $temp$classes = $mdgriffith$elm_ui$Internal$Model$alignYName(y) + (' ' + classes),
								$temp$node = node,
								$temp$has = function (flags) {
								switch (y) {
									case 1:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$centerY, flags);
									case 2:
										return A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$alignBottom, flags);
									default:
										return flags;
								}
							}(
								A2($mdgriffith$elm_ui$Internal$Flag$add, $mdgriffith$elm_ui$Internal$Flag$yAlign, has)),
								$temp$transform = transform,
								$temp$styles = styles,
								$temp$attrs = attrs,
								$temp$children = children,
								$temp$elementAttrs = remaining;
							classes = $temp$classes;
							node = $temp$node;
							has = $temp$has;
							transform = $temp$transform;
							styles = $temp$styles;
							attrs = $temp$attrs;
							children = $temp$children;
							elementAttrs = $temp$elementAttrs;
							continue gatherAttrRecursive;
						}
				}
			}
		}
	});
var $mdgriffith$elm_ui$Internal$Model$Untransformed = {$: 0};
var $mdgriffith$elm_ui$Internal$Model$untransformed = $mdgriffith$elm_ui$Internal$Model$Untransformed;
var $mdgriffith$elm_ui$Internal$Model$element = F4(
	function (context, node, attributes, children) {
		return A3(
			$mdgriffith$elm_ui$Internal$Model$createElement,
			context,
			children,
			A8(
				$mdgriffith$elm_ui$Internal$Model$gatherAttrRecursive,
				$mdgriffith$elm_ui$Internal$Model$contextClasses(context),
				node,
				$mdgriffith$elm_ui$Internal$Flag$none,
				$mdgriffith$elm_ui$Internal$Model$untransformed,
				_List_Nil,
				_List_Nil,
				$mdgriffith$elm_ui$Internal$Model$NoNearbyChildren,
				$elm$core$List$reverse(attributes)));
	});
var $mdgriffith$elm_ui$Internal$Model$Fill = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Element$fill = $mdgriffith$elm_ui$Internal$Model$Fill(1);
var $mdgriffith$elm_ui$Internal$Model$SpacingStyle = F3(
	function (a, b, c) {
		return {$: 5, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Model$StyleClass = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$spacing = $mdgriffith$elm_ui$Internal$Flag$flag(3);
var $mdgriffith$elm_ui$Internal$Model$spacingName = F2(
	function (x, y) {
		return 'spacing-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y)));
	});
var $mdgriffith$elm_ui$Element$spacing = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$spacing,
		A3(
			$mdgriffith$elm_ui$Internal$Model$SpacingStyle,
			A2($mdgriffith$elm_ui$Internal$Model$spacingName, x, x),
			x,
			x));
};
var $mdgriffith$elm_ui$Internal$Model$Width = function (a) {
	return {$: 7, a: a};
};
var $mdgriffith$elm_ui$Element$width = $mdgriffith$elm_ui$Internal$Model$Width;
var $mdgriffith$elm_ui$Element$paragraph = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asParagraph,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Paragraph),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$spacing(5),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Parser$Element$Text = F2(
	function (a, b) {
		return {$: 0, a: a, b: b};
	});
var $author$project$Utility$pairFromList = function (strings) {
	if ((strings.b && strings.b.b) && (!strings.b.b.b)) {
		var x = strings.a;
		var _v1 = strings.b;
		var y = _v1.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(x, y));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Utility$keyValueDict = function (strings_) {
	return $elm$core$Dict$fromList(
		$elm_community$maybe_extra$Maybe$Extra$values(
			A2(
				$elm$core$List$map,
				$author$project$Utility$pairFromList,
				A2(
					$elm$core$List$map,
					$elm$core$List$map($elm$core$String$trim),
					A2(
						$elm$core$List$map,
						$elm$core$String$split(':'),
						strings_)))));
};
var $author$project$Render$Utility$getPrecision = function (args) {
	var dict = $author$project$Utility$keyValueDict(args);
	return A2(
		$elm$core$Maybe$andThen,
		$elm$core$String$toInt,
		A2($elm$core$Dict$get, 'precision', dict));
};
var $author$project$Render$Utility$getPrecisionWithDefault = F2(
	function (_default, args) {
		return A2(
			$elm$core$Maybe$withDefault,
			_default,
			$author$project$Render$Utility$getPrecision(args));
	});
var $author$project$Render$Utility$extractText = function (element) {
	if (!element.$) {
		var content = element.a;
		return $elm$core$Maybe$Just(content);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Render$Utility$getTextList = function (element) {
	if (element.$ === 2) {
		var list_ = element.a;
		return $elm$core$List$concat(
			A2(
				$elm$core$List$map,
				$elm$core$List$map($elm$core$String$trim),
				A2(
					$elm$core$List$map,
					$elm$core$String$split(','),
					A2(
						$elm$core$List$map,
						$elm$core$Maybe$withDefault(''),
						A2($elm$core$List$map, $author$project$Render$Utility$extractText, list_)))));
	} else {
		return _List_Nil;
	}
};
var $author$project$Utility$roundTo = F2(
	function (k, x) {
		var factor = A2($elm$core$Basics$pow, 10.0, k);
		return $elm$core$Basics$round(factor * x) / factor;
	});
var $mdgriffith$elm_ui$Internal$Model$AsRow = 0;
var $mdgriffith$elm_ui$Internal$Model$asRow = 0;
var $mdgriffith$elm_ui$Internal$Model$Height = function (a) {
	return {$: 8, a: a};
};
var $mdgriffith$elm_ui$Element$height = $mdgriffith$elm_ui$Internal$Model$Height;
var $mdgriffith$elm_ui$Internal$Model$Attr = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$htmlClass = function (cls) {
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		$elm$html$Html$Attributes$class(cls));
};
var $mdgriffith$elm_ui$Internal$Model$Content = {$: 1};
var $mdgriffith$elm_ui$Element$shrink = $mdgriffith$elm_ui$Internal$Model$Content;
var $mdgriffith$elm_ui$Element$row = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asRow,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.bO + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.aS)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $elm$core$List$sum = function (numbers) {
	return A3($elm$core$List$foldl, $elm$core$Basics$add, 0, numbers);
};
var $mdgriffith$elm_ui$Element$text = function (content) {
	return $mdgriffith$elm_ui$Internal$Model$Text(content);
};
var $author$project$Widget$Data$average = F5(
	function (renderArgs, name, args, body, sm) {
		var precision = A2($author$project$Render$Utility$getPrecisionWithDefault, 2, args);
		var numbers_ = $author$project$Render$Utility$getTextList(body);
		var numbers = $elm_community$maybe_extra$Maybe$Extra$values(
			A2($elm$core$List$map, $elm$core$String$toFloat, numbers_));
		var sum_ = $elm$core$List$sum(numbers);
		var n = $elm$core$List$length(numbers);
		var average_ = sum_ / n;
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$text('average'),
				_Utils_ap(
					A2($elm$core$List$map, $mdgriffith$elm_ui$Element$text, numbers_),
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('=')
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(
								$elm$core$String$fromFloat(
									A2($author$project$Utility$roundTo, precision, average_)))
							])))));
	});
var $jxxcarlson$elm_graph$SimpleGraph$Color = function (a) {
	return {$: 0, a: a};
};
var $jxxcarlson$elm_graph$SimpleGraph$DeltaX = function (a) {
	return {$: 3, a: a};
};
var $jxxcarlson$elm_graph$SimpleGraph$Scale = F2(
	function (a, b) {
		return {$: 4, a: a, b: b};
	});
var $jxxcarlson$elm_graph$SimpleGraph$XTickmarks = function (a) {
	return {$: 1, a: a};
};
var $jxxcarlson$elm_graph$SimpleGraph$YTickmarks = function (a) {
	return {$: 2, a: a};
};
var $elm$svg$Svg$Attributes$fontSize = _VirtualDom_attribute('font-size');
var $jxxcarlson$elm_graph$SimpleGraph$roundTo = F2(
	function (k, x) {
		var kk = k;
		return function (y) {
			return y / A2($elm$core$Basics$pow, 10.0, kk);
		}(
			$elm$core$Basics$round(
				x * A2($elm$core$Basics$pow, 10.0, kk)));
	});
var $elm$svg$Svg$text_ = $elm$svg$Svg$trustedNode('text');
var $elm$svg$Svg$Attributes$transform = _VirtualDom_attribute('transform');
var $elm$svg$Svg$Attributes$x = _VirtualDom_attribute('x');
var $elm$svg$Svg$Attributes$y = _VirtualDom_attribute('y');
var $jxxcarlson$elm_graph$SimpleGraph$bMakeYLabel = F2(
	function (_v0, y) {
		var yMax = _v0.a;
		var graphHeight = _v0.b;
		var label = $elm$core$String$fromFloat(
			A2($jxxcarlson$elm_graph$SimpleGraph$roundTo, 1, y));
		return A2(
			$elm$svg$Svg$text_,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$transform('translate(0,' + ('-3' + ') scale(1,-1)')),
					$elm$svg$Svg$Attributes$x('-30'),
					$elm$svg$Svg$Attributes$y(
					$elm$core$String$fromFloat(((-y) * graphHeight) / yMax)),
					$elm$svg$Svg$Attributes$fontSize('9px')
				]),
			_List_fromArray(
				[
					$elm$svg$Svg$text(label)
				]));
	});
var $elm$svg$Svg$g = $elm$svg$Svg$trustedNode('g');
var $jxxcarlson$elm_graph$SimpleGraph$findMap = F2(
	function (f, list) {
		findMap:
		while (true) {
			if (!list.b) {
				return $elm$core$Maybe$Nothing;
			} else {
				var x = list.a;
				var xs = list.b;
				var _v1 = f(x);
				if (!_v1.$) {
					var v = _v1.a;
					return $elm$core$Maybe$Just(v);
				} else {
					var $temp$f = f,
						$temp$list = xs;
					f = $temp$f;
					list = $temp$list;
					continue findMap;
				}
			}
		}
	});
var $jxxcarlson$elm_graph$SimpleGraph$yTickmarks_ = function (option) {
	if (option.$ === 2) {
		var k = option.a;
		return $elm$core$Maybe$Just(k);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jxxcarlson$elm_graph$SimpleGraph$yTickmarks = function (options) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		A2($jxxcarlson$elm_graph$SimpleGraph$findMap, $jxxcarlson$elm_graph$SimpleGraph$yTickmarks_, options));
};
var $jxxcarlson$elm_graph$SimpleGraph$bMakeYLabels = F2(
	function (yMax, ga) {
		var n = $jxxcarlson$elm_graph$SimpleGraph$yTickmarks(ga.gx);
		var _v0 = !n;
		if (_v0) {
			return A2($elm$svg$Svg$g, _List_Nil, _List_Nil);
		} else {
			return A2(
				$elm$svg$Svg$g,
				_List_Nil,
				A2(
					$elm$core$List$map,
					$jxxcarlson$elm_graph$SimpleGraph$bMakeYLabel(
						_Utils_Tuple2(yMax, ga.cR)),
					A2(
						$elm$core$List$map,
						function (k) {
							return (k * yMax) / (n - 1);
						},
						A2($elm$core$List$range, 0, n - 1))));
		}
	});
var $elm$svg$Svg$Attributes$fill = _VirtualDom_attribute('fill');
var $elm$svg$Svg$Attributes$height = _VirtualDom_attribute('height');
var $elm$svg$Svg$rect = $elm$svg$Svg$trustedNode('rect');
var $elm$svg$Svg$Attributes$width = _VirtualDom_attribute('width');
var $jxxcarlson$elm_graph$SimpleGraph$barRect = F5(
	function (color, barWidth, barHeight, x, fraction) {
		return A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$width(
					$elm$core$String$fromFloat(barWidth)),
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromFloat(fraction * barHeight)),
					$elm$svg$Svg$Attributes$x(
					$elm$core$String$fromFloat(x)),
					$elm$svg$Svg$Attributes$fill(color)
				]),
			_List_Nil);
	});
var $jxxcarlson$elm_graph$SimpleGraph$scale_ = function (option) {
	if (option.$ === 4) {
		var kx = option.a;
		var ky = option.b;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(kx, ky));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jxxcarlson$elm_graph$SimpleGraph$scale = function (options) {
	return A2(
		$elm$core$Maybe$withDefault,
		_Utils_Tuple2(1.0, 1.0),
		A2($jxxcarlson$elm_graph$SimpleGraph$findMap, $jxxcarlson$elm_graph$SimpleGraph$scale_, options));
};
var $jxxcarlson$elm_graph$SimpleGraph$buildSVGTransformString = function (ga) {
	var _v0 = $jxxcarlson$elm_graph$SimpleGraph$scale(ga.gx);
	var kx = _v0.a;
	var ky = _v0.b;
	var translateX = function () {
		var _v2 = kx < 0;
		if (!_v2) {
			return '0';
		} else {
			return $elm$core$String$fromFloat((-ga.cS) + 60);
		}
	}();
	var scaleString = 'scale(' + ($elm$core$String$fromFloat(kx) + (', ' + ($elm$core$String$fromFloat(ky) + ')')));
	var translateY = function () {
		var _v1 = ky < 0;
		if (!_v1) {
			return '0';
		} else {
			return $elm$core$String$fromFloat(-ga.cR);
		}
	}();
	var translateString = 'translate(' + (translateX + (', ' + (translateY + ')')));
	return scaleString + (' ' + translateString);
};
var $elm$svg$Svg$line = $elm$svg$Svg$trustedNode('line');
var $jxxcarlson$elm_graph$SimpleGraph$lineColor_ = function (option) {
	if (!option.$) {
		var str = option.a;
		return $elm$core$Maybe$Just(str);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jxxcarlson$elm_graph$SimpleGraph$lineColor = function (options) {
	return A2(
		$elm$core$Maybe$withDefault,
		'rgb(40, 40, 40)',
		A2($jxxcarlson$elm_graph$SimpleGraph$findMap, $jxxcarlson$elm_graph$SimpleGraph$lineColor_, options));
};
var $elm$svg$Svg$Attributes$stroke = _VirtualDom_attribute('stroke');
var $elm$svg$Svg$Attributes$strokeWidth = _VirtualDom_attribute('stroke-width');
var $elm$svg$Svg$Attributes$x1 = _VirtualDom_attribute('x1');
var $elm$svg$Svg$Attributes$x2 = _VirtualDom_attribute('x2');
var $elm$svg$Svg$Attributes$y1 = _VirtualDom_attribute('y1');
var $elm$svg$Svg$Attributes$y2 = _VirtualDom_attribute('y2');
var $jxxcarlson$elm_graph$SimpleGraph$segmentToSVG = F2(
	function (options, _v0) {
		var _v1 = _v0.a;
		var x1 = _v1.a;
		var y1 = _v1.b;
		var _v2 = _v0.b;
		var x2 = _v2.a;
		var y2 = _v2.b;
		return A2(
			$elm$svg$Svg$line,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$x1(
					$elm$core$String$fromFloat(x1)),
					$elm$svg$Svg$Attributes$y1(
					$elm$core$String$fromFloat(y1)),
					$elm$svg$Svg$Attributes$x2(
					$elm$core$String$fromFloat(x2)),
					$elm$svg$Svg$Attributes$y2(
					$elm$core$String$fromFloat(y2)),
					$elm$svg$Svg$Attributes$stroke(
					$jxxcarlson$elm_graph$SimpleGraph$lineColor(options)),
					$elm$svg$Svg$Attributes$strokeWidth('1')
				]),
			_List_Nil);
	});
var $jxxcarlson$elm_graph$SimpleGraph$bxTickmark = function (x) {
	return A2(
		$jxxcarlson$elm_graph$SimpleGraph$segmentToSVG,
		_List_Nil,
		_Utils_Tuple2(
			_Utils_Tuple2(x, 0),
			_Utils_Tuple2(x, -8)));
};
var $jxxcarlson$elm_graph$SimpleGraph$deltaX_ = function (option) {
	if (option.$ === 3) {
		var dx = option.a;
		return $elm$core$Maybe$Just(dx);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jxxcarlson$elm_graph$SimpleGraph$deltaX = function (options) {
	return A2(
		$elm$core$Maybe$withDefault,
		15,
		A2($jxxcarlson$elm_graph$SimpleGraph$findMap, $jxxcarlson$elm_graph$SimpleGraph$deltaX_, options));
};
var $jxxcarlson$elm_graph$SimpleGraph$xTickmarks_ = function (option) {
	if (option.$ === 1) {
		var k = option.a;
		return $elm$core$Maybe$Just(k);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $jxxcarlson$elm_graph$SimpleGraph$xTickmarks = function (options) {
	return A2(
		$elm$core$Maybe$withDefault,
		0,
		A2($jxxcarlson$elm_graph$SimpleGraph$findMap, $jxxcarlson$elm_graph$SimpleGraph$xTickmarks_, options));
};
var $jxxcarlson$elm_graph$SimpleGraph$bxTickmarks = function (ga) {
	var dx = $jxxcarlson$elm_graph$SimpleGraph$xTickmarks(ga.gx) * $jxxcarlson$elm_graph$SimpleGraph$deltaX(ga.gx);
	var n = $elm$core$Basics$round(ga.cS / dx);
	return A2(
		$elm$svg$Svg$g,
		_List_Nil,
		A2(
			$elm$core$List$map,
			$jxxcarlson$elm_graph$SimpleGraph$bxTickmark,
			A2(
				$elm$core$List$map,
				function (k) {
					return k * dx;
				},
				A2($elm$core$List$range, 0, n - 1))));
};
var $jxxcarlson$elm_graph$SimpleGraph$byTickmark = function (y) {
	return A2(
		$jxxcarlson$elm_graph$SimpleGraph$segmentToSVG,
		_List_Nil,
		_Utils_Tuple2(
			_Utils_Tuple2(0, y),
			_Utils_Tuple2(-8, y)));
};
var $jxxcarlson$elm_graph$SimpleGraph$byTickmarks = function (ga) {
	var n = $jxxcarlson$elm_graph$SimpleGraph$yTickmarks(ga.gx);
	return A2(
		$elm$svg$Svg$g,
		_List_Nil,
		A2(
			$elm$core$List$map,
			$jxxcarlson$elm_graph$SimpleGraph$byTickmark,
			A2(
				$elm$core$List$map,
				function (k) {
					return (k * ga.cR) / (n - 1);
				},
				A2($elm$core$List$range, 0, n - 1))));
};
var $jxxcarlson$elm_graph$SimpleGraph$xCoordinates = F2(
	function (n, dx) {
		return A2(
			$elm$core$List$map,
			function (i) {
				return i * dx;
			},
			A2($elm$core$List$range, 0, n));
	});
var $jxxcarlson$elm_graph$SimpleGraph$prepare = F2(
	function (dx, data) {
		var ymax = A2(
			$elm$core$Maybe$withDefault,
			1,
			$elm$core$List$maximum(data));
		var ys = A2(
			$elm$core$List$map,
			function (y) {
				return y / ymax;
			},
			data);
		var xs = A2(
			$jxxcarlson$elm_graph$SimpleGraph$xCoordinates,
			$elm$core$List$length(data),
			dx);
		return _Utils_Tuple2(
			ymax,
			A3($elm$core$List$map2, $elm$core$Tuple$pair, xs, ys));
	});
var $jxxcarlson$elm_graph$SimpleGraph$barChartAsSVG = F2(
	function (ga, data) {
		var yTickmarks2 = $jxxcarlson$elm_graph$SimpleGraph$byTickmarks(ga);
		var xTickmarks2 = $jxxcarlson$elm_graph$SimpleGraph$bxTickmarks(ga);
		var transformer = $elm$svg$Svg$Attributes$transform(
			$jxxcarlson$elm_graph$SimpleGraph$buildSVGTransformString(ga));
		var ordinate = A2(
			$jxxcarlson$elm_graph$SimpleGraph$segmentToSVG,
			_List_Nil,
			_Utils_Tuple2(
				_Utils_Tuple2(0, 0),
				_Utils_Tuple2(0, ga.cR)));
		var barWidth = 0.8 * $jxxcarlson$elm_graph$SimpleGraph$deltaX(ga.gx);
		var gbar = function (_v1) {
			var x = _v1.a;
			var y = _v1.b;
			return A5(
				$jxxcarlson$elm_graph$SimpleGraph$barRect,
				$jxxcarlson$elm_graph$SimpleGraph$lineColor(ga.gx),
				barWidth,
				ga.cR,
				x,
				y);
		};
		var abscissa = A2(
			$jxxcarlson$elm_graph$SimpleGraph$segmentToSVG,
			_List_Nil,
			_Utils_Tuple2(
				_Utils_Tuple2(0, 0),
				_Utils_Tuple2(ga.cS, 0)));
		var _v0 = A2(
			$jxxcarlson$elm_graph$SimpleGraph$prepare,
			$jxxcarlson$elm_graph$SimpleGraph$deltaX(ga.gx),
			data);
		var yMax = _v0.a;
		var preparedData = _v0.b;
		var yLabels = A2($jxxcarlson$elm_graph$SimpleGraph$bMakeYLabels, yMax, ga);
		return A2(
			$elm$svg$Svg$g,
			_List_fromArray(
				[transformer]),
			_Utils_ap(
				A2($elm$core$List$map, gbar, preparedData),
				_List_fromArray(
					[abscissa, ordinate, xTickmarks2, yTickmarks2, yLabels])));
	});
var $elm$svg$Svg$Attributes$viewBox = _VirtualDom_attribute('viewBox');
var $jxxcarlson$elm_graph$SimpleGraph$barChart = F2(
	function (ga, data) {
		return A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$transform('scale(1,-1)'),
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromFloat(ga.cR + 40)),
					$elm$svg$Svg$Attributes$width(
					$elm$core$String$fromFloat(ga.cS + 40)),
					$elm$svg$Svg$Attributes$viewBox(
					'-60 -20 ' + ($elm$core$String$fromFloat(ga.cS + 40) + (' ' + $elm$core$String$fromFloat(ga.cR + 20))))
				]),
			_List_fromArray(
				[
					A2($jxxcarlson$elm_graph$SimpleGraph$barChartAsSVG, ga, data)
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$Class = F2(
	function (a, b) {
		return {$: 3, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontWeight = $mdgriffith$elm_ui$Internal$Flag$flag(13);
var $mdgriffith$elm_ui$Element$Font$bold = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$fontWeight, $mdgriffith$elm_ui$Internal$Style$classes.fr);
var $mdgriffith$elm_ui$Element$none = $mdgriffith$elm_ui$Internal$Model$Empty;
var $author$project$Render$Utility$captionElement = function (dict) {
	var _v0 = A2($elm$core$Dict$get, 'caption', dict);
	if (!_v0.$) {
		var caption = _v0.a;
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$bold]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(caption)
				]));
	} else {
		return $mdgriffith$elm_ui$Element$none;
	}
};
var $mdgriffith$elm_ui$Internal$Model$AsColumn = 1;
var $mdgriffith$elm_ui$Internal$Model$asColumn = 1;
var $mdgriffith$elm_ui$Element$column = F2(
	function (attrs, children) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asColumn,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.fD + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.bO)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						attrs))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(children));
	});
var $author$project$Render$Utility$getCSV = function (element) {
	if (element.$ === 2) {
		var list_ = element.a;
		var _v1 = A2($elm$core$List$map, $author$project$Render$Utility$extractText, list_);
		if ((_v1.b && (!_v1.a.$)) && (!_v1.b.b)) {
			var data = _v1.a.a;
			return A2(
				$elm$core$List$map,
				$elm$core$List$map($elm$core$String$trim),
				A2(
					$elm$core$List$map,
					$elm$core$String$split(','),
					A2($elm$core$String$split, '\n', data)));
		} else {
			return _List_fromArray(
				[_List_Nil]);
		}
	} else {
		return _List_fromArray(
			[_List_Nil]);
	}
};
var $author$project$Render$Utility$getColumn = F2(
	function (dict, body) {
		var toInt_ = F2(
			function (_default, str) {
				return A2(
					$elm$core$Maybe$withDefault,
					_default,
					$elm$core$String$toInt(str));
			});
		var rawData = $author$project$Render$Utility$getCSV(body);
		var getDataColumn = F2(
			function (i, data) {
				return A2(
					$elm$core$List$map,
					function (column) {
						return A2($elm_community$list_extra$List$Extra$getAt, i, column);
					},
					rawData);
			});
		var cutoff = A2(
			$elm$core$Maybe$andThen,
			$elm$core$String$toFloat,
			A2($elm$core$Dict$get, 'cutoff', dict));
		var filter = function (data_) {
			if (!cutoff.$) {
				var cutoffValue = cutoff.a;
				return A2(
					$elm$core$List$filter,
					function (x) {
						return _Utils_cmp(x, cutoffValue) < 0;
					},
					data_);
			} else {
				return data_;
			}
		};
		var col = function () {
			var _v0 = A2($elm$core$Dict$get, 'column', dict);
			if (!_v0.$) {
				var i = _v0.a;
				return A2(toInt_, 0, i) - 1;
			} else {
				return 0;
			}
		}();
		return filter(
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2(
					$elm$core$List$map,
					$elm$core$String$toFloat,
					$elm_community$maybe_extra$Maybe$Extra$values(
						A2(
							getDataColumn,
							col,
							$author$project$Render$Utility$getCSV(body))))));
	});
var $author$project$Widget$Data$bargraph = F5(
	function (renderArgs, name, args, body, sm) {
		var graphWidth = 300.0;
		var graphHeight = 200.0;
		var dict = $author$project$Utility$keyValueDict(args);
		var numbers = A2(
			$elm$core$List$map,
			function (x) {
				return x + 0.5;
			},
			A2($author$project$Render$Utility$getColumn, dict, body));
		var n = $elm$core$List$length(numbers);
		var deltaX = graphWidth / n;
		var options = _List_fromArray(
			[
				$jxxcarlson$elm_graph$SimpleGraph$Color('rgb(200,0,0)'),
				$jxxcarlson$elm_graph$SimpleGraph$DeltaX(deltaX),
				$jxxcarlson$elm_graph$SimpleGraph$YTickmarks(6),
				$jxxcarlson$elm_graph$SimpleGraph$XTickmarks(
				$elm$core$Basics$round(n + 1)),
				A2($jxxcarlson$elm_graph$SimpleGraph$Scale, 1.0, 1.0)
			]);
		var dataMin = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$minimum(numbers));
		var dataMax = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$maximum(numbers));
		var barGraphAttributes = {cR: graphHeight, cS: graphWidth, gx: options};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$html(
					A2(
						$jxxcarlson$elm_graph$SimpleGraph$barChart,
						barGraphAttributes,
						A2(
							$elm$core$List$map,
							function (x) {
								return x + 0.001;
							},
							numbers))),
					$author$project$Render$Utility$captionElement(dict),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(12)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							'data points: ' + ($elm$core$String$fromFloat(n) + ', ')),
							$mdgriffith$elm_ui$Element$text(
							'min: ' + ($elm$core$String$fromFloat(
								A2($author$project$Utility$roundTo, 2, dataMin)) + ', ')),
							$mdgriffith$elm_ui$Element$text(
							'max: ' + $elm$core$String$fromFloat(
								A2($author$project$Utility$roundTo, 2, dataMax)))
						]))
				]));
	});
var $mdgriffith$elm_ui$Internal$Model$Rgba = F4(
	function (a, b, c, d) {
		return {$: 0, a: a, b: b, c: c, d: d};
	});
var $mdgriffith$elm_ui$Element$rgb = F3(
	function (r, g, b) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, r, g, b, 1);
	});
var $author$project$Render$Elm$codeColor = A3($mdgriffith$elm_ui$Element$rgb, 0.4, 0, 0.8);
var $mdgriffith$elm_ui$Internal$Model$Colored = F3(
	function (a, b, c) {
		return {$: 4, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Internal$Flag$bgColor = $mdgriffith$elm_ui$Internal$Flag$flag(8);
var $mdgriffith$elm_ui$Internal$Model$formatColorClass = function (_v0) {
	var red = _v0.a;
	var green = _v0.b;
	var blue = _v0.c;
	var alpha = _v0.d;
	return $mdgriffith$elm_ui$Internal$Model$floatClass(red) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(green) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(blue) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(alpha))))));
};
var $mdgriffith$elm_ui$Element$Background$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$bgColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'background-color',
			clr));
};
var $mdgriffith$elm_ui$Internal$Flag$fontColor = $mdgriffith$elm_ui$Internal$Flag$flag(14);
var $mdgriffith$elm_ui$Element$Font$color = function (fontColor) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(fontColor),
			'color',
			fontColor));
};
var $mdgriffith$elm_ui$Element$el = F2(
	function (attrs, child) {
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					attrs)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[child])));
	});
var $mdgriffith$elm_ui$Internal$Model$FontFamily = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$fontFamily = $mdgriffith$elm_ui$Internal$Flag$flag(5);
var $mdgriffith$elm_ui$Internal$Model$renderFontClassName = F2(
	function (font, current) {
		return _Utils_ap(
			current,
			function () {
				switch (font.$) {
					case 0:
						return 'serif';
					case 1:
						return 'sans-serif';
					case 2:
						return 'monospace';
					case 3:
						var name = font.a;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					case 4:
						var name = font.a;
						var url = font.b;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
					default:
						var name = font.a.gp;
						return A2(
							$elm$core$String$join,
							'-',
							$elm$core$String$words(
								$elm$core$String$toLower(name)));
				}
			}());
	});
var $mdgriffith$elm_ui$Element$Font$family = function (families) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontFamily,
		A2(
			$mdgriffith$elm_ui$Internal$Model$FontFamily,
			A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'ff-', families),
			families));
};
var $author$project$Render$Elm$isBlankItem = function (el) {
	if (!el.$) {
		var str = el.a;
		return $elm$core$String$trim(str) === '';
	} else {
		return false;
	}
};
var $author$project$Render$Elm$filterOutBlankItems = function (list_) {
	return A2(
		$elm$core$List$filter,
		function (item_) {
			return !$author$project$Render$Elm$isBlankItem(item_);
		},
		list_);
};
var $author$project$Render$Utility$getArg = F2(
	function (k, stringList) {
		return A2($elm_community$list_extra$List$Extra$getAt, k, stringList);
	});
var $author$project$Render$Utility$getInt = F2(
	function (k, stringList) {
		return A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$andThen,
				$elm$core$String$toInt,
				A2($elm_community$list_extra$List$Extra$getAt, k, stringList)));
	});
var $mdgriffith$elm_ui$Internal$Model$AlignY = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Top = 0;
var $mdgriffith$elm_ui$Element$alignTop = $mdgriffith$elm_ui$Internal$Model$AlignY(0);
var $author$project$Utility$entities = function (strings_) {
	return $elm_community$maybe_extra$Maybe$Extra$values(
		A2(
			$elm$core$List$map,
			$elm$core$List$head,
			A2(
				$elm$core$List$filter,
				function (x) {
					return $elm$core$List$length(x) === 1;
				},
				A2(
					$elm$core$List$map,
					$elm$core$List$map($elm$core$String$trim),
					A2(
						$elm$core$List$map,
						$elm$core$String$split(':'),
						strings_)))));
};
var $mdgriffith$elm_ui$Internal$Model$MoveY = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$TransformComponent = F2(
	function (a, b) {
		return {$: 10, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$moveY = $mdgriffith$elm_ui$Internal$Flag$flag(26);
var $mdgriffith$elm_ui$Element$moveDown = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(y));
};
var $mdgriffith$elm_ui$Internal$Model$FontSize = function (a) {
	return {$: 2, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$fontSize = $mdgriffith$elm_ui$Internal$Flag$flag(4);
var $mdgriffith$elm_ui$Element$Font$size = function (i) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$fontSize,
		$mdgriffith$elm_ui$Internal$Model$FontSize(i));
};
var $author$project$Render$Elm$getPrefixSymbol = F2(
	function (k, args_) {
		var _v0 = A2(
			$elm$core$Maybe$map,
			$elm$core$String$trim,
			$elm$core$List$head(
				$author$project$Utility$entities(args_)));
		if (_v0.$ === 1) {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(16)
					]),
				$mdgriffith$elm_ui$Element$text('•'));
		} else {
			switch (_v0.a) {
				case 'numbered':
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(12),
								$mdgriffith$elm_ui$Element$alignTop,
								$mdgriffith$elm_ui$Element$moveDown(2.2)
							]),
						$mdgriffith$elm_ui$Element$text(
							$elm$core$String$fromInt(k + 1) + '.'));
				case 'bullet':
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(16)
							]),
						$mdgriffith$elm_ui$Element$text('•'));
				case 'none':
					return $mdgriffith$elm_ui$Element$none;
				default:
					var str = _v0.a;
					return A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$size(16)
							]),
						$mdgriffith$elm_ui$Element$text(str));
			}
		}
	});
var $author$project$Render$Elm$getText = function (element) {
	if ((((element.$ === 2) && element.a.b) && (!element.a.a.$)) && (!element.a.b.b)) {
		var _v1 = element.a;
		var _v2 = _v1.a;
		var content = _v2.a;
		return $elm$core$Maybe$Just(content);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$AlignX = function (a) {
	return {$: 6, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$Left = 0;
var $mdgriffith$elm_ui$Element$alignLeft = $mdgriffith$elm_ui$Internal$Model$AlignX(0);
var $mdgriffith$elm_ui$Internal$Model$Right = 2;
var $mdgriffith$elm_ui$Element$alignRight = $mdgriffith$elm_ui$Internal$Model$AlignX(2);
var $mdgriffith$elm_ui$Internal$Model$CenterX = 1;
var $mdgriffith$elm_ui$Element$centerX = $mdgriffith$elm_ui$Internal$Model$AlignX(1);
var $mdgriffith$elm_ui$Element$image = F2(
	function (attrs, _v0) {
		var description = _v0.fK;
		var src = _v0.g2;
		var imageAttributes = A2(
			$elm$core$List$filter,
			function (a) {
				switch (a.$) {
					case 7:
						return true;
					case 8:
						return true;
					default:
						return false;
				}
			},
			attrs);
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.f0),
				attrs),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[
						A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asEl,
						$mdgriffith$elm_ui$Internal$Model$NodeName('img'),
						_Utils_ap(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$src(src)),
									$mdgriffith$elm_ui$Internal$Model$Attr(
									$elm$html$Html$Attributes$alt(description))
								]),
							imageAttributes),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil))
					])));
	});
var $mdgriffith$elm_ui$Internal$Model$Px = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$px = $mdgriffith$elm_ui$Internal$Model$Px;
var $author$project$Render$Elm$image = F5(
	function (renderArgs, name, args, body, sm) {
		var dict = $author$project$Utility$keyValueDict(args);
		var placement = function () {
			var _v3 = A2($elm$core$Dict$get, 'placement', dict);
			if (_v3.$ === 1) {
				return $mdgriffith$elm_ui$Element$centerX;
			} else {
				switch (_v3.a) {
					case 'left':
						return $mdgriffith$elm_ui$Element$alignLeft;
					case 'right':
						return $mdgriffith$elm_ui$Element$alignRight;
					case 'center':
						return $mdgriffith$elm_ui$Element$centerX;
					default:
						return $mdgriffith$elm_ui$Element$centerX;
				}
			}
		}();
		var width = function () {
			var _v1 = A2($elm$core$Dict$get, 'width', dict);
			if (_v1.$ === 1) {
				return $mdgriffith$elm_ui$Element$fill;
			} else {
				var w_ = _v1.a;
				var _v2 = $elm$core$String$toInt(w_);
				if (_v2.$ === 1) {
					return $mdgriffith$elm_ui$Element$fill;
				} else {
					var w = _v2.a;
					return $mdgriffith$elm_ui$Element$px(w);
				}
			}
		}();
		var description = A2(
			$elm$core$Maybe$withDefault,
			'',
			A2($elm$core$Dict$get, 'caption', dict));
		var caption = function () {
			var _v0 = A2($elm$core$Dict$get, 'caption', dict);
			if (_v0.$ === 1) {
				return $mdgriffith$elm_ui$Element$none;
			} else {
				var c = _v0.a;
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$centerX]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill)
								]),
							$mdgriffith$elm_ui$Element$text(c))
						]));
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8),
					placement,
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(400))
				]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$image,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$width(width),
							placement
						]),
					{
						fK: description,
						g2: A2(
							$elm$core$Maybe$withDefault,
							'no image url',
							$author$project$Render$Elm$getText(body))
					}),
					caption
				]));
	});
var $mdgriffith$elm_ui$Element$Font$italic = $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gf);
var $jxxcarlson$elm_graph$SimpleGraph$getDataWindow = function (pointList) {
	var ys = A2($elm$core$List$map, $elm$core$Tuple$second, pointList);
	var yMin = A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$List$minimum(ys));
	var yMax = A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$List$maximum(ys));
	var xs = A2($elm$core$List$map, $elm$core$Tuple$first, pointList);
	var xMin = A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$List$minimum(xs));
	var xMax = A2(
		$elm$core$Maybe$withDefault,
		0,
		$elm$core$List$maximum(xs));
	return {_: xMax, o: xMin, aa: yMax, t: yMin};
};
var $jxxcarlson$elm_graph$SimpleGraph$boundingBox = F2(
	function (options, dw) {
		var _v0 = _Utils_Tuple2(
			$jxxcarlson$elm_graph$SimpleGraph$xTickmarks(options),
			$jxxcarlson$elm_graph$SimpleGraph$yTickmarks(options));
		if ((!_v0.a) && (!_v0.b)) {
			return _List_Nil;
		} else {
			return _List_fromArray(
				[
					_Utils_Tuple2(dw.o, dw.t),
					_Utils_Tuple2(dw._, dw.t),
					_Utils_Tuple2(dw._, dw.aa),
					_Utils_Tuple2(dw.o, dw.aa),
					_Utils_Tuple2(dw.o, dw.t)
				]);
		}
	});
var $jxxcarlson$elm_graph$SimpleGraph$getScaleFactor = F2(
	function (dataWindow, gA) {
		var ky = gA.cR / (dataWindow.aa - dataWindow.t);
		var kx = gA.cS / (dataWindow._ - dataWindow.o);
		return _Utils_Tuple2(kx, ky);
	});
var $jxxcarlson$elm_graph$SimpleGraph$makeXLabel = F3(
	function (_v0, dw, x) {
		var kx = _v0.a;
		var ky = _v0.b;
		var label = $elm$core$String$fromFloat(
			A2($jxxcarlson$elm_graph$SimpleGraph$roundTo, 1, x));
		var dx = $elm$core$String$fromFloat(kx * (x - dw.o));
		return A2(
			$elm$svg$Svg$text_,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$transform('translate(' + (dx + ',0) scale(1,-1)')),
					$elm$svg$Svg$Attributes$x('-8'),
					$elm$svg$Svg$Attributes$y('20'),
					$elm$svg$Svg$Attributes$fontSize('9px')
				]),
			_List_fromArray(
				[
					$elm$svg$Svg$text(label)
				]));
	});
var $jxxcarlson$elm_graph$SimpleGraph$makeXLabels = F3(
	function (_v0, dw, n) {
		var kx = _v0.a;
		var ky = _v0.b;
		var _v1 = !n;
		if (_v1) {
			return A2($elm$svg$Svg$g, _List_Nil, _List_Nil);
		} else {
			return function (x) {
				return A2($elm$svg$Svg$g, _List_Nil, x);
			}(
				A2(
					$elm$core$List$map,
					A2(
						$jxxcarlson$elm_graph$SimpleGraph$makeXLabel,
						_Utils_Tuple2(kx, ky),
						dw),
					A2(
						$elm$core$List$map,
						function (k) {
							return dw.o + ((k * (dw._ - dw.o)) / (n - 1));
						},
						A2($elm$core$List$range, 0, n - 1))));
		}
	});
var $jxxcarlson$elm_graph$SimpleGraph$tickMarkLength = 7.5;
var $jxxcarlson$elm_graph$SimpleGraph$makeXTickMark = F3(
	function (ky, dw, x) {
		return _List_fromArray(
			[
				_Utils_Tuple2(x, dw.t),
				_Utils_Tuple2(x, dw.t - ($jxxcarlson$elm_graph$SimpleGraph$tickMarkLength / ky))
			]);
	});
var $jxxcarlson$elm_graph$SimpleGraph$translate = F2(
	function (_v0, data) {
		var dx = _v0.a;
		var dy = _v0.b;
		return A2(
			$elm$core$List$map,
			function (_v1) {
				var x = _v1.a;
				var y = _v1.b;
				return _Utils_Tuple2(x + dx, y + dy);
			},
			data);
	});
var $jxxcarlson$elm_graph$SimpleGraph$makeXTickMarks = F4(
	function (_v0, render, dw, n) {
		var kx = _v0.a;
		var ky = _v0.b;
		var _v1 = !n;
		if (_v1) {
			return function (x) {
				return A2($elm$svg$Svg$g, _List_Nil, x);
			}(
				A2($elm$core$List$map, render, _List_Nil));
		} else {
			return function (x) {
				return A2($elm$svg$Svg$g, _List_Nil, x);
			}(
				A2(
					$elm$core$List$map,
					render,
					A2(
						$elm$core$List$map,
						$jxxcarlson$elm_graph$SimpleGraph$translate(
							_Utils_Tuple2(dw.o, 0)),
						A2(
							$elm$core$List$map,
							A2($jxxcarlson$elm_graph$SimpleGraph$makeXTickMark, ky, dw),
							A2(
								$elm$core$List$map,
								function (k) {
									return (k * (dw._ - dw.o)) / (n - 1);
								},
								A2($elm$core$List$range, 0, n - 1))))));
		}
	});
var $jxxcarlson$elm_graph$SimpleGraph$makeYLabel = F3(
	function (_v0, dw, y) {
		var kx = _v0.a;
		var ky = _v0.b;
		var label = $elm$core$String$fromFloat(
			A2($jxxcarlson$elm_graph$SimpleGraph$roundTo, 1, y));
		var dy = $elm$core$String$fromFloat((ky * (y - dw.t)) - 3);
		return A2(
			$elm$svg$Svg$text_,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$transform('translate(0,' + (dy + ') scale(1,-1)')),
					$elm$svg$Svg$Attributes$x(
					$elm$core$String$fromFloat(-30)),
					$elm$svg$Svg$Attributes$y('0'),
					$elm$svg$Svg$Attributes$fontSize('9px')
				]),
			_List_fromArray(
				[
					$elm$svg$Svg$text(label)
				]));
	});
var $jxxcarlson$elm_graph$SimpleGraph$makeYLabels = F3(
	function (_v0, dw, n) {
		var kx = _v0.a;
		var ky = _v0.b;
		var _v1 = !n;
		if (_v1) {
			return A2($elm$svg$Svg$g, _List_Nil, _List_Nil);
		} else {
			return function (x) {
				return A2($elm$svg$Svg$g, _List_Nil, x);
			}(
				A2(
					$elm$core$List$map,
					A2(
						$jxxcarlson$elm_graph$SimpleGraph$makeYLabel,
						_Utils_Tuple2(kx, ky),
						dw),
					A2(
						$elm$core$List$map,
						function (k) {
							return dw.t + ((k * (dw.aa - dw.t)) / (n - 1));
						},
						A2($elm$core$List$range, 0, n - 1))));
		}
	});
var $jxxcarlson$elm_graph$SimpleGraph$makeYTickMark = F3(
	function (kx, dw, y) {
		return _List_fromArray(
			[
				_Utils_Tuple2(dw.o, y),
				_Utils_Tuple2(dw.o - ($jxxcarlson$elm_graph$SimpleGraph$tickMarkLength / kx), y)
			]);
	});
var $jxxcarlson$elm_graph$SimpleGraph$makeYTickMarks = F4(
	function (_v0, render, dw, n) {
		var kx = _v0.a;
		var ky = _v0.b;
		var _v1 = !n;
		if (_v1) {
			return function (x) {
				return A2($elm$svg$Svg$g, _List_Nil, x);
			}(
				A2($elm$core$List$map, render, _List_Nil));
		} else {
			return function (x) {
				return A2($elm$svg$Svg$g, _List_Nil, x);
			}(
				A2(
					$elm$core$List$map,
					render,
					A2(
						$elm$core$List$map,
						$jxxcarlson$elm_graph$SimpleGraph$translate(
							_Utils_Tuple2(0, dw.t)),
						A2(
							$elm$core$List$map,
							A2($jxxcarlson$elm_graph$SimpleGraph$makeYTickMark, kx, dw),
							A2(
								$elm$core$List$map,
								function (k) {
									return (k * (dw.aa - dw.t)) / (n - 1);
								},
								A2($elm$core$List$range, 0, n - 1))))));
		}
	});
var $jxxcarlson$elm_graph$SimpleGraph$rescale = F2(
	function (_v0, data) {
		var kx = _v0.a;
		var ky = _v0.b;
		return A2(
			$elm$core$List$map,
			function (_v1) {
				var x = _v1.a;
				var y = _v1.b;
				return _Utils_Tuple2(kx * x, ky * y);
			},
			data);
	});
var $jxxcarlson$elm_graph$SimpleGraph$segments = function (list) {
	var n = $elm$core$List$length(list);
	return A3(
		$elm$core$List$map2,
		$elm$core$Tuple$pair,
		A2($elm$core$List$take, n - 1, list),
		A2($elm$core$List$drop, 1, list));
};
var $jxxcarlson$elm_graph$SimpleGraph$segmentsToSVG = F2(
	function (options, segmentList) {
		return function (x) {
			return A2($elm$svg$Svg$g, _List_Nil, x);
		}(
			A2(
				$elm$core$List$map,
				$jxxcarlson$elm_graph$SimpleGraph$segmentToSVG(options),
				segmentList));
	});
var $jxxcarlson$elm_graph$SimpleGraph$lineChartAsSVGWithDataWindow = F3(
	function (dw, ga, data) {
		var transformer = $elm$svg$Svg$Attributes$transform(
			$jxxcarlson$elm_graph$SimpleGraph$buildSVGTransformString(ga));
		var scaleFactor = A2($jxxcarlson$elm_graph$SimpleGraph$getScaleFactor, dw, ga);
		var xLabels = A3(
			$jxxcarlson$elm_graph$SimpleGraph$makeXLabels,
			scaleFactor,
			dw,
			$jxxcarlson$elm_graph$SimpleGraph$xTickmarks(ga.gx));
		var yLabels = A3(
			$jxxcarlson$elm_graph$SimpleGraph$makeYLabels,
			scaleFactor,
			dw,
			$jxxcarlson$elm_graph$SimpleGraph$yTickmarks(ga.gx));
		var renderPlain = function (data_) {
			return A2(
				$jxxcarlson$elm_graph$SimpleGraph$segmentsToSVG,
				_List_Nil,
				$jxxcarlson$elm_graph$SimpleGraph$segments(
					A2(
						$jxxcarlson$elm_graph$SimpleGraph$rescale,
						scaleFactor,
						A2(
							$jxxcarlson$elm_graph$SimpleGraph$translate,
							_Utils_Tuple2(-dw.o, -dw.t),
							data_))));
		};
		var xTickMarks_ = A4(
			$jxxcarlson$elm_graph$SimpleGraph$makeXTickMarks,
			scaleFactor,
			renderPlain,
			dw,
			$jxxcarlson$elm_graph$SimpleGraph$xTickmarks(ga.gx));
		var yTickMarks_ = A4(
			$jxxcarlson$elm_graph$SimpleGraph$makeYTickMarks,
			scaleFactor,
			renderPlain,
			dw,
			$jxxcarlson$elm_graph$SimpleGraph$yTickmarks(ga.gx));
		var render = function (data_) {
			return A2(
				$jxxcarlson$elm_graph$SimpleGraph$segmentsToSVG,
				ga.gx,
				$jxxcarlson$elm_graph$SimpleGraph$segments(
					A2(
						$jxxcarlson$elm_graph$SimpleGraph$rescale,
						scaleFactor,
						A2(
							$jxxcarlson$elm_graph$SimpleGraph$translate,
							_Utils_Tuple2(-dw.o, -dw.t),
							data_))));
		};
		var theData = render(data);
		var ordinate = renderPlain(
			_List_fromArray(
				[
					_Utils_Tuple2(dw.o, dw.t),
					_Utils_Tuple2(dw.o, dw.aa)
				]));
		var boundingBox_ = renderPlain(
			A2($jxxcarlson$elm_graph$SimpleGraph$boundingBox, ga.gx, dw));
		var abscissa = renderPlain(
			_List_fromArray(
				[
					_Utils_Tuple2(dw.o, 0),
					_Utils_Tuple2(dw._, 0)
				]));
		return A2(
			$elm$svg$Svg$g,
			_List_fromArray(
				[transformer]),
			_List_fromArray(
				[theData, abscissa, ordinate, boundingBox_, xTickMarks_, yTickMarks_, xLabels, yLabels]));
	});
var $jxxcarlson$elm_graph$SimpleGraph$lineChartWithDataWindow = F3(
	function (dw, ga, data) {
		return A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$transform('scale(1,-1)'),
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromFloat(ga.cR + 40)),
					$elm$svg$Svg$Attributes$width(
					$elm$core$String$fromFloat(ga.cS + 50)),
					$elm$svg$Svg$Attributes$viewBox(
					'-40 -20 ' + ($elm$core$String$fromFloat(ga.cS + 50) + (' ' + $elm$core$String$fromFloat(ga.cR + 40))))
				]),
			_List_fromArray(
				[
					A3($jxxcarlson$elm_graph$SimpleGraph$lineChartAsSVGWithDataWindow, dw, ga, data)
				]));
	});
var $jxxcarlson$elm_graph$SimpleGraph$lineChart = F2(
	function (ga, data) {
		return A3(
			$jxxcarlson$elm_graph$SimpleGraph$lineChartWithDataWindow,
			$jxxcarlson$elm_graph$SimpleGraph$getDataWindow(data),
			ga,
			data);
	});
var $author$project$Render$Utility$makePair = function (ns) {
	if ((ns.b && ns.b.b) && (!ns.b.b.b)) {
		var x = ns.a;
		var _v1 = ns.b;
		var y = _v1.a;
		return $elm$core$Maybe$Just(
			_Utils_Tuple2(x, y));
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $author$project$Widget$Data$linegraph = F5(
	function (renderArgs, name, args, body, sm) {
		var numbers_ = $author$project$Render$Utility$getCSV(body);
		var points = $elm_community$maybe_extra$Maybe$Extra$values(
			A2(
				$elm$core$List$map,
				$author$project$Render$Utility$makePair,
				A2(
					$elm$core$List$map,
					$elm_community$maybe_extra$Maybe$Extra$values,
					A2(
						$elm$core$List$map,
						$elm$core$List$map($elm$core$String$toFloat),
						numbers_))));
		var n = $elm$core$List$length(points);
		var graphWidth = 350.0;
		var graphHeight = 200.0;
		var dict = $author$project$Utility$keyValueDict(args);
		var deltaX = graphWidth / n;
		var options = _List_fromArray(
			[
				$jxxcarlson$elm_graph$SimpleGraph$Color('rgb(0,0,200)'),
				$jxxcarlson$elm_graph$SimpleGraph$DeltaX(deltaX),
				$jxxcarlson$elm_graph$SimpleGraph$YTickmarks(6),
				$jxxcarlson$elm_graph$SimpleGraph$XTickmarks(
				$elm$core$Basics$round(n + 1)),
				A2($jxxcarlson$elm_graph$SimpleGraph$Scale, 1.0, 1.0)
			]);
		var lineGraphAttributes = {cR: graphHeight, cS: graphWidth, gx: options};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$html(
					A2($jxxcarlson$elm_graph$SimpleGraph$lineChart, lineGraphAttributes, points)),
					$author$project$Render$Utility$captionElement(dict)
				]));
	});
var $author$project$Render$Elm$linkColor = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
var $elm$html$Html$Attributes$rel = _VirtualDom_attribute('rel');
var $mdgriffith$elm_ui$Element$newTabLink = F2(
	function (attrs, _v0) {
		var label = _v0.gi;
		var url = _v0.e_;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Attributes$target('_blank')),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cf + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aS + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.d8)))),
									attrs)))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Render$Elm$link = F5(
	function (renderArgs, name, args, body, sm) {
		var _v0 = A2($author$project$Render$Utility$getArg, 0, args);
		if (_v0.$ === 1) {
			var url_ = A2(
				$elm$core$Maybe$withDefault,
				'missing url',
				$author$project$Render$Elm$getText(body));
			return A2(
				$mdgriffith$elm_ui$Element$newTabLink,
				_List_Nil,
				{
					gi: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$linkColor),
								$mdgriffith$elm_ui$Element$Font$italic
							]),
						$mdgriffith$elm_ui$Element$text(url_)),
					e_: url_
				});
		} else {
			var labelText = _v0.a;
			return A2(
				$mdgriffith$elm_ui$Element$newTabLink,
				_List_Nil,
				{
					gi: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$linkColor),
								$mdgriffith$elm_ui$Element$Font$italic
							]),
						$mdgriffith$elm_ui$Element$text(labelText)),
					e_: A2(
						$elm$core$Maybe$withDefault,
						'missing url',
						$author$project$Render$Elm$getText(body))
				});
		}
	});
var $mdgriffith$elm_ui$Internal$Model$PaddingStyle = F5(
	function (a, b, c, d, e) {
		return {$: 7, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Internal$Flag$padding = $mdgriffith$elm_ui$Internal$Flag$flag(2);
var $mdgriffith$elm_ui$Internal$Model$paddingName = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($elm$core$String$fromInt(top) + ('-' + ($elm$core$String$fromInt(right) + ('-' + ($elm$core$String$fromInt(bottom) + ('-' + $elm$core$String$fromInt(left)))))));
	});
var $mdgriffith$elm_ui$Element$paddingEach = function (_v0) {
	var left = _v0.c_;
	var bottom = _v0.cH;
	var right = _v0.da;
	var top = _v0.dg;
	if (_Utils_eq(top, right) && (_Utils_eq(top, bottom) && _Utils_eq(top, left))) {
		var topFloat = top;
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				'p-' + $elm$core$String$fromInt(top),
				topFloat,
				topFloat,
				topFloat,
				topFloat));
	} else {
		return A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$padding,
			A5(
				$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
				A4($mdgriffith$elm_ui$Internal$Model$paddingName, top, right, bottom, left),
				top,
				right,
				bottom,
				left));
	}
};
var $author$project$Render$Elm$listPadding = $mdgriffith$elm_ui$Element$paddingEach(
	{cH: 0, c_: 18, da: 0, dg: 0});
var $author$project$Render$Elm$listTitle = function (args_) {
	var dict = $author$project$Utility$keyValueDict(args_);
	var title = A2($elm$core$Dict$get, 'title', dict);
	if (title.$ === 1) {
		return $mdgriffith$elm_ui$Element$none;
	} else {
		var title_ = title.a;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$bold]),
			$mdgriffith$elm_ui$Element$text(title_));
	}
};
var $mdgriffith$elm_ui$Internal$Model$Monospace = {$: 2};
var $mdgriffith$elm_ui$Element$Font$monospace = $mdgriffith$elm_ui$Internal$Model$Monospace;
var $mdgriffith$elm_ui$Element$paddingXY = F2(
	function (x, y) {
		if (_Utils_eq(x, y)) {
			var f = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + $elm$core$String$fromInt(x),
					f,
					f,
					f,
					f));
		} else {
			var yFloat = y;
			var xFloat = x;
			return A2(
				$mdgriffith$elm_ui$Internal$Model$StyleClass,
				$mdgriffith$elm_ui$Internal$Flag$padding,
				A5(
					$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
					'p-' + ($elm$core$String$fromInt(x) + ('-' + $elm$core$String$fromInt(y))),
					yFloat,
					xFloat,
					yFloat,
					xFloat));
		}
	});
var $author$project$Render$Elm$getLines = function (str) {
	var nonBreakingSpace = $elm$core$String$fromChar('\u00A0');
	return A2(
		$elm$core$List$map,
		function (s) {
			return (s === '') ? nonBreakingSpace : A3($elm$core$String$replace, ' ', nonBreakingSpace, s);
		},
		$elm$core$String$lines(str));
};
var $author$project$Render$Elm$getText2 = function (element) {
	if (element.$ === 2) {
		var list_ = element.a;
		return A2(
			$elm$core$String$join,
			'\n',
			$elm_community$maybe_extra$Maybe$Extra$values(
				A2($elm$core$List$map, $author$project$Render$Utility$extractText, list_)));
	} else {
		return '';
	}
};
var $mdgriffith$elm_ui$Element$htmlAttribute = $mdgriffith$elm_ui$Internal$Model$Attr;
var $author$project$Render$Utility$htmlAttribute = F2(
	function (key, value) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$attribute, key, value));
	});
var $author$project$Render$Elm$indentation = $mdgriffith$elm_ui$Element$paddingEach(
	{cH: 0, c_: 18, da: 0, dg: 0});
var $author$project$Render$Elm$poetry = F5(
	function (renderArgs, _v0, _v1, body, sm) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size(14),
					A2($author$project$Render$Utility$htmlAttribute, 'white-space', 'pre'),
					$author$project$Render$Elm$indentation,
					$mdgriffith$elm_ui$Element$spacing(4)
				]),
			A2(
				$elm$core$List$map,
				$mdgriffith$elm_ui$Element$text,
				$author$project$Render$Elm$getLines(
					$elm$core$String$trim(
						$author$project$Render$Elm$getText2(body)))));
	});
var $author$project$Render$Elm$redColor = A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0);
var $mdgriffith$elm_ui$Internal$Model$Typeface = function (a) {
	return {$: 3, a: a};
};
var $mdgriffith$elm_ui$Element$Font$typeface = $mdgriffith$elm_ui$Internal$Model$Typeface;
var $author$project$Render$Elm$renderCodeBlock = F5(
	function (renderArgs, _v0, _v1, body, sm) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$typeface('Inconsolata'),
							$mdgriffith$elm_ui$Element$Font$monospace
						])),
					$mdgriffith$elm_ui$Element$Font$size(14),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$codeColor),
					A2($author$project$Render$Utility$htmlAttribute, 'white-space', 'pre'),
					$author$project$Render$Elm$indentation
				]),
			A2(
				$elm$core$List$map,
				$mdgriffith$elm_ui$Element$text,
				$author$project$Render$Elm$getLines(
					$elm$core$String$trim(
						$author$project$Render$Elm$getText2(body)))));
	});
var $author$project$Render$Types$InlineMathMode = 0;
var $author$project$Render$Elm$isDisplayMathMode = function (displayMode) {
	if (!displayMode) {
		return false;
	} else {
		return true;
	}
};
var $author$project$Render$Elm$mathText_ = F4(
	function (displayMode, selectedId, content, sm) {
		return A3(
			$elm$html$Html$node,
			'math-text',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Attributes$property,
					'display',
					$elm$json$Json$Encode$bool(
						$author$project$Render$Elm$isDisplayMathMode(displayMode))),
					A2(
					$elm$html$Html$Attributes$property,
					'content',
					$elm$json$Json$Encode$string(content))
				]),
			_List_Nil);
	});
var $author$project$Render$Elm$mathText = F4(
	function (renderArgs, displayMode, content, sm) {
		return $mdgriffith$elm_ui$Element$html(
			A3(
				$elm$html$Html$Keyed$node,
				'span',
				_List_Nil,
				_List_fromArray(
					[
						_Utils_Tuple2(
						$elm$core$String$fromInt(renderArgs.bR),
						A4($author$project$Render$Elm$mathText_, displayMode, renderArgs.gT, content, sm))
					])));
	});
var $author$project$Render$Elm$renderMath = F5(
	function (renderArgs, name, args, body, sm) {
		var _v0 = $author$project$Render$Elm$getText(body);
		if (!_v0.$) {
			var content = _v0.a;
			return A4($author$project$Render$Elm$mathText, renderArgs, 0, content, sm);
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$redColor)
					]),
				$mdgriffith$elm_ui$Element$text('Error rendering math !!!'));
		}
	});
var $author$project$Render$Types$DisplayMathMode = 1;
var $author$project$Render$Elm$renderMathDisplay = F5(
	function (rendArgs, name, args, body, sm) {
		var _v0 = $author$project$Render$Elm$getText(body);
		if (!_v0.$) {
			var content = _v0.a;
			return A4($author$project$Render$Elm$mathText, rendArgs, 1, content, sm);
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$redColor)
					]),
				$mdgriffith$elm_ui$Element$text('Error rendering math !!!'));
		}
	});
var $author$project$Render$Elm$blueColor = A3($mdgriffith$elm_ui$Element$rgb, 0, 0, 0.8);
var $author$project$Render$Elm$violetColor = A3($mdgriffith$elm_ui$Element$rgb, 0.4, 0, 0.8);
var $author$project$Render$Elm$renderMissingElement = F2(
	function (name, body) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text('[')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$blueColor),
							$mdgriffith$elm_ui$Element$Font$bold
						]),
					$mdgriffith$elm_ui$Element$text(name + ' ')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$violetColor)
						]),
					$mdgriffith$elm_ui$Element$text(
						A2(
							$elm$core$Maybe$withDefault,
							'',
							$author$project$Render$Elm$getText(body)))),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$redColor)
						]),
					$mdgriffith$elm_ui$Element$text(' << element misstyped or unimplemented')),
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_fromArray(
						[$mdgriffith$elm_ui$Element$Font$bold]),
					$mdgriffith$elm_ui$Element$text(']'))
				]));
	});
var $mdgriffith$elm_ui$Element$rgb255 = F3(
	function (red, green, blue) {
		return A4($mdgriffith$elm_ui$Internal$Model$Rgba, red / 255, green / 255, blue / 255, 1);
	});
var $author$project$Render$Utility$getPoints = F2(
	function (dict, body) {
		var ycutoff = A2(
			$elm$core$Maybe$andThen,
			$elm$core$String$toFloat,
			A2($elm$core$Dict$get, 'ycutoff', dict));
		var yfilter = function (points_) {
			if (!ycutoff.$) {
				var ycutoffValue = ycutoff.a;
				return A2(
					$elm$core$List$filter,
					function (_v5) {
						var x = _v5.a;
						var y = _v5.b;
						return _Utils_cmp(y, ycutoffValue) < 0;
					},
					points_);
			} else {
				return points_;
			}
		};
		var xcutoff = A2(
			$elm$core$Maybe$andThen,
			$elm$core$String$toFloat,
			A2($elm$core$Dict$get, 'xcutoff', dict));
		var xfilter = function (points_) {
			if (!xcutoff.$) {
				var xcutoffValue = xcutoff.a;
				return A2(
					$elm$core$List$filter,
					function (_v3) {
						var x = _v3.a;
						var y = _v3.b;
						return _Utils_cmp(x, xcutoffValue) < 0;
					},
					points_);
			} else {
				return points_;
			}
		};
		var toInt_ = F2(
			function (_default, str) {
				return A2(
					$elm$core$Maybe$withDefault,
					_default,
					$elm$core$String$toInt(str));
			});
		var rawData = $author$project$Render$Utility$getCSV(body);
		var getDataColumns = F3(
			function (i, j, data) {
				return A2(
					$elm$core$List$map,
					function (column) {
						return _List_fromArray(
							[
								A2($elm_community$list_extra$List$Extra$getAt, i, column),
								A2($elm_community$list_extra$List$Extra$getAt, j, column)
							]);
					},
					rawData);
			});
		var _v0 = function () {
			var _v1 = _Utils_Tuple2(
				A2($elm$core$Dict$get, 'col1', dict),
				A2($elm$core$Dict$get, 'col2', dict));
			if ((!_v1.a.$) && (!_v1.b.$)) {
				var i = _v1.a.a;
				var j = _v1.b.a;
				return _Utils_Tuple2(
					A2(toInt_, 0, i) - 1,
					A2(toInt_, 1, j) - 1);
			} else {
				return _Utils_Tuple2(0, 1);
			}
		}();
		var col1 = _v0.a;
		var col2 = _v0.b;
		return yfilter(
			xfilter(
				$elm_community$maybe_extra$Maybe$Extra$values(
					A2(
						$elm$core$List$map,
						$author$project$Render$Utility$makePair,
						A2(
							$elm$core$List$map,
							$elm_community$maybe_extra$Maybe$Extra$values,
							A2(
								$elm$core$List$map,
								$elm$core$List$map($elm$core$String$toFloat),
								A2(
									$elm$core$List$map,
									$elm_community$maybe_extra$Maybe$Extra$values,
									A3(
										getDataColumns,
										col1,
										col2,
										$author$project$Render$Utility$getCSV(body)))))))));
	});
var $jxxcarlson$elm_graph$SimpleGraph$dot = F4(
	function (color, diameter, x, y) {
		return A2(
			$elm$svg$Svg$rect,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$width(
					$elm$core$String$fromFloat(diameter)),
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromFloat(diameter)),
					$elm$svg$Svg$Attributes$x(
					$elm$core$String$fromFloat(x)),
					$elm$svg$Svg$Attributes$y(
					$elm$core$String$fromFloat(y)),
					$elm$svg$Svg$Attributes$fill(color)
				]),
			_List_Nil);
	});
var $jxxcarlson$elm_graph$SimpleGraph$scatterPlotAsSVG = F2(
	function (ga, data) {
		var transformer = $elm$svg$Svg$Attributes$transform(
			$jxxcarlson$elm_graph$SimpleGraph$buildSVGTransformString(ga));
		var dw = $jxxcarlson$elm_graph$SimpleGraph$getDataWindow(data);
		var scaleFactor = A2($jxxcarlson$elm_graph$SimpleGraph$getScaleFactor, dw, ga);
		var renderPlain = function (data_) {
			return A2(
				$jxxcarlson$elm_graph$SimpleGraph$segmentsToSVG,
				_List_Nil,
				$jxxcarlson$elm_graph$SimpleGraph$segments(
					A2(
						$jxxcarlson$elm_graph$SimpleGraph$rescale,
						scaleFactor,
						A2(
							$jxxcarlson$elm_graph$SimpleGraph$translate,
							_Utils_Tuple2(-dw.o, -dw.t),
							data_))));
		};
		var xScaleFactor = ga.cS / (dw._ - dw.o);
		var yScaleFactor = ga.cR / (dw.aa - dw.t);
		var rescaledData = A2(
			$elm$core$List$map,
			function (_v1) {
				var x = _v1.a;
				var y = _v1.b;
				return _Utils_Tuple2(xScaleFactor * x, yScaleFactor * y);
			},
			data);
		var diameter = 4.0;
		var dot_ = function (_v0) {
			var x = _v0.a;
			var y = _v0.b;
			return A4(
				$jxxcarlson$elm_graph$SimpleGraph$dot,
				$jxxcarlson$elm_graph$SimpleGraph$lineColor(ga.gx),
				diameter,
				x,
				y);
		};
		var rendered = A2($elm$core$List$map, dot_, rescaledData);
		var boundingBox_ = renderPlain(
			A2(
				$jxxcarlson$elm_graph$SimpleGraph$boundingBox,
				ga.gx,
				_Utils_update(
					dw,
					{_: dw._ + (diameter / xScaleFactor), aa: dw.aa + (diameter / yScaleFactor)})));
		return A2(
			$elm$svg$Svg$g,
			_List_fromArray(
				[transformer]),
			_Utils_ap(
				rendered,
				_List_fromArray(
					[boundingBox_])));
	});
var $jxxcarlson$elm_graph$SimpleGraph$scatterPlot = F2(
	function (ga, data) {
		return A2(
			$elm$svg$Svg$svg,
			_List_fromArray(
				[
					$elm$svg$Svg$Attributes$transform('scale(1,-1)'),
					$elm$svg$Svg$Attributes$height(
					$elm$core$String$fromFloat(ga.cR + 40)),
					$elm$svg$Svg$Attributes$width(
					$elm$core$String$fromFloat(ga.cS + 50)),
					$elm$svg$Svg$Attributes$viewBox(
					'0 0' + ($elm$core$String$fromFloat(ga.cS + 50) + (' ' + $elm$core$String$fromFloat(ga.cR + 50))))
				]),
			_List_fromArray(
				[
					A2($jxxcarlson$elm_graph$SimpleGraph$scatterPlotAsSVG, ga, data)
				]));
	});
var $author$project$Widget$Data$scatterplot = F5(
	function (renderArgs, name, args, body, sm) {
		var graphWidth = 400.0;
		var graphHeight = 400.0;
		var dict = $author$project$Utility$keyValueDict(args);
		var points = A2($author$project$Render$Utility$getPoints, dict, body);
		var n = $elm$core$List$length(points);
		var points2 = A2(
			$elm$core$List$map,
			function (_v0) {
				var x = _v0.a;
				var y = _v0.b;
				return _Utils_Tuple2(x - 0.03, y);
			},
			points);
		var xmax = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$maximum(
				A2($elm$core$List$map, $elm$core$Tuple$first, points)));
		var ymax = A2(
			$elm$core$Maybe$withDefault,
			0,
			$elm$core$List$maximum(
				A2($elm$core$List$map, $elm$core$Tuple$second, points)));
		var deltaX = graphWidth / n;
		var options = _List_fromArray(
			[
				$jxxcarlson$elm_graph$SimpleGraph$Color('rgb(0,0,200)'),
				$jxxcarlson$elm_graph$SimpleGraph$DeltaX(deltaX),
				$jxxcarlson$elm_graph$SimpleGraph$YTickmarks(6),
				$jxxcarlson$elm_graph$SimpleGraph$XTickmarks(
				$elm$core$Basics$round(n + 1)),
				A2($jxxcarlson$elm_graph$SimpleGraph$Scale, 1.0, 1.0)
			]);
		var scatterPlotAttributes = {cR: graphHeight, cS: graphWidth, gx: options};
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_Nil,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$html(
					A2($jxxcarlson$elm_graph$SimpleGraph$scatterPlot, scatterPlotAttributes, points2)),
					$author$project$Render$Utility$captionElement(dict),
					A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(12)
						]),
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$text(
							'data points: ' + ($elm$core$String$fromFloat(n) + ', ')),
							$mdgriffith$elm_ui$Element$text(
							'xmax: ' + ($elm$core$String$fromFloat(
								A2($author$project$Utility$roundTo, 0, xmax)) + ', ')),
							$mdgriffith$elm_ui$Element$text(
							'ymax: ' + $elm$core$String$fromFloat(
								A2($author$project$Utility$roundTo, 0, ymax)))
						]))
				]));
	});
var $author$project$Render$Elm$paddingAbove = function (k) {
	return $mdgriffith$elm_ui$Element$paddingEach(
		{cH: 0, c_: 0, da: 0, dg: k});
};
var $author$project$Render$Elm$sectionFontSize = 24;
var $author$project$Render$Elm$section = F5(
	function (renderArgs, name, args, body, sm) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size($author$project$Render$Elm$sectionFontSize),
					$author$project$Render$Elm$paddingAbove(
					$elm$core$Basics$round(0.8 * $author$project$Render$Elm$sectionFontSize))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					A2(
						$elm$core$Maybe$withDefault,
						'no section name found',
						$author$project$Render$Elm$getText(body)))
				]));
	});
var $author$project$Render$Elm$section2FontSize = 18;
var $author$project$Render$Elm$section2 = F5(
	function (renderArgs, name, args, body, sm) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size($author$project$Render$Elm$section2FontSize),
					$author$project$Render$Elm$paddingAbove(
					$elm$core$Basics$round(0.8 * $author$project$Render$Elm$section2FontSize))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					A2(
						$elm$core$Maybe$withDefault,
						'no subsection name found',
						$author$project$Render$Elm$getText(body)))
				]));
	});
var $author$project$Render$Elm$section3FontSize = 16;
var $author$project$Render$Elm$section3 = F5(
	function (renderArgs, name, args, body, sm) {
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$size($author$project$Render$Elm$section3FontSize),
					$author$project$Render$Elm$paddingAbove(
					$elm$core$Basics$round(0.8 * $author$project$Render$Elm$section3FontSize))
				]),
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$text(
					A2(
						$elm$core$Maybe$withDefault,
						'no subsubsection name found',
						$author$project$Render$Elm$getText(body)))
				]));
	});
var $elm$core$Basics$sqrt = _Basics_sqrt;
var $author$project$Widget$Data$stdev = F5(
	function (renderArgs, name, args, body, sm) {
		var precision = A2($author$project$Render$Utility$getPrecisionWithDefault, 2, args);
		var numbers_ = $author$project$Render$Utility$getTextList(body);
		var numbers = $elm_community$maybe_extra$Maybe$Extra$values(
			A2($elm$core$List$map, $elm$core$String$toFloat, numbers_));
		var sum_ = $elm$core$List$sum(numbers);
		var n = $elm$core$List$length(numbers);
		var average_ = sum_ / n;
		var deltas = A2(
			$elm$core$List$map,
			function (x) {
				return x - average_;
			},
			numbers);
		var sumOfDeltasSquared = $elm$core$List$sum(
			A3($elm$core$List$map2, $elm$core$Basics$mul, deltas, deltas));
		var stdev_ = $elm$core$Basics$sqrt(sumOfDeltasSquared) / (n - 1);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$text('stdev'),
				_Utils_ap(
					A2($elm$core$List$map, $mdgriffith$elm_ui$Element$text, numbers_),
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('=')
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(
								$elm$core$String$fromFloat(
									A2($author$project$Utility$roundTo, precision, stdev_)))
							])))));
	});
var $author$project$Widget$Data$sum = F5(
	function (renderArgs, name, args, body, sm) {
		var precision = A2($author$project$Render$Utility$getPrecisionWithDefault, 2, args);
		var numbers_ = $author$project$Render$Utility$getTextList(body);
		var numbers = $elm_community$maybe_extra$Maybe$Extra$values(
			A2($elm$core$List$map, $elm$core$String$toFloat, numbers_));
		var sum_ = $elm$core$List$sum(numbers);
		return A2(
			$mdgriffith$elm_ui$Element$row,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(8)
				]),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$text('sum'),
				_Utils_ap(
					A2($elm$core$List$map, $mdgriffith$elm_ui$Element$text, numbers_),
					_Utils_ap(
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text('=')
							]),
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$text(
								$elm$core$String$fromFloat(
									A2($author$project$Utility$roundTo, precision, sum_)))
							])))));
	});
var $author$project$Render$Elm$theoremLikeElements = _List_fromArray(
	['theorem', 'proposition', 'proof', 'definition', 'example', 'problem', 'corollary', 'lemma']);
var $elm_community$string_extra$String$Extra$changeCase = F2(
	function (mutator, word) {
		return A2(
			$elm$core$Maybe$withDefault,
			'',
			A2(
				$elm$core$Maybe$map,
				function (_v0) {
					var head = _v0.a;
					var tail = _v0.b;
					return A2(
						$elm$core$String$cons,
						mutator(head),
						tail);
				},
				$elm$core$String$uncons(word)));
	});
var $elm$core$Char$toUpper = _Char_toUpper;
var $elm_community$string_extra$String$Extra$toSentenceCase = function (word) {
	return A2($elm_community$string_extra$String$Extra$changeCase, $elm$core$Char$toUpper, word);
};
var $author$project$Render$Elm$yellowColor = A3($mdgriffith$elm_ui$Element$rgb, 1.0, 1.0, 0);
var $author$project$Render$Elm$error = F5(
	function (renderArgs, name, args_, body, sm) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$violetColor)
				]),
			A2($author$project$Render$Elm$renderElement, renderArgs, body));
	});
var $author$project$Render$Elm$fontRGB = F5(
	function (renderArgs, name, args, body, sm) {
		var r = A2($author$project$Render$Utility$getInt, 0, args);
		var g = A2($author$project$Render$Utility$getInt, 1, args);
		var b = A2($author$project$Render$Utility$getInt, 2, args);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					A3($mdgriffith$elm_ui$Element$rgb255, r, g, b)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 4, 2)
				]),
			A2($author$project$Render$Elm$renderElement, renderArgs, body));
	});
var $author$project$Render$Elm$highlight = F5(
	function (renderArgs, _v13, _v14, body, _v15) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color($author$project$Render$Elm$yellowColor),
					A2($mdgriffith$elm_ui$Element$paddingXY, 4, 2)
				]),
			A2($author$project$Render$Elm$renderElement, renderArgs, body));
	});
var $author$project$Render$Elm$highlightRGB = F5(
	function (renderArgs, _v12, args, body, sm) {
		var r = A2($author$project$Render$Utility$getInt, 0, args);
		var g = A2($author$project$Render$Utility$getInt, 1, args);
		var b = A2($author$project$Render$Utility$getInt, 2, args);
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb255, r, g, b)),
					A2($mdgriffith$elm_ui$Element$paddingXY, 4, 2)
				]),
			A2($author$project$Render$Elm$renderElement, renderArgs, body));
	});
var $author$project$Render$Elm$item = F5(
	function (renderArgs, name, args_, body, sm) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			_List_Nil,
			_List_fromArray(
				[
					A2($author$project$Render$Elm$renderElement, renderArgs, body)
				]));
	});
var $author$project$Render$Elm$list = F5(
	function (renderArgs, name, args_, body, sm) {
		if (body.$ === 2) {
			var list_ = body.a;
			return A2(
				$mdgriffith$elm_ui$Element$column,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(4),
						$author$project$Render$Elm$listPadding
					]),
				A2(
					$elm$core$List$cons,
					$author$project$Render$Elm$listTitle(args_),
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (k, item_) {
								return A3(
									$author$project$Render$Elm$renderListItem,
									A2($author$project$Render$Elm$getPrefixSymbol, k, args_),
									renderArgs,
									item_);
							}),
						$author$project$Render$Elm$filterOutBlankItems(list_))));
		} else {
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$redColor)
					]),
				$mdgriffith$elm_ui$Element$text('Malformed list'));
		}
	});
var $author$project$Render$Elm$renderCode = F5(
	function (renderArgs, _v9, _v10, body, sm) {
		var adjustedBody = function (text) {
			return A2($author$project$Parser$Element$Text, text, sm);
		}(
			A3(
				$elm$core$String$replace,
				'\\]',
				']',
				A3(
					$elm$core$String$replace,
					'\\[',
					'[',
					A2(
						$elm$core$Maybe$withDefault,
						'(body)',
						$author$project$Render$Elm$getText(body)))));
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$family(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$typeface('Inconsolata'),
							$mdgriffith$elm_ui$Element$Font$monospace
						])),
					$mdgriffith$elm_ui$Element$Font$size(14),
					$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$codeColor)
				]),
			A2($author$project$Render$Elm$renderElement, renderArgs, adjustedBody));
	});
var $author$project$Render$Elm$renderElement = F2(
	function (renderArgs, element) {
		switch (element.$) {
			case 0:
				var str = element.a;
				return A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					$mdgriffith$elm_ui$Element$text(str));
			case 1:
				var name = element.a;
				var args = element.b;
				var body = element.c;
				var sm = element.d;
				return A5($author$project$Render$Elm$renderWithDictionary, renderArgs, name, args, body, sm);
			default:
				var list_ = element.a;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					$author$project$Render$Elm$format,
					A2(
						$elm$core$List$map,
						$author$project$Render$Elm$renderElement(renderArgs),
						list_));
		}
	});
var $author$project$Render$Elm$renderItalic = F5(
	function (renderArgs, _v6, _v7, body, sm) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$italic]),
			A2($author$project$Render$Elm$renderElement, renderArgs, body));
	});
var $author$project$Render$Elm$renderListItem = F3(
	function (prefixSymbol, renderArgs, elt) {
		_v4$2:
		while (true) {
			if (elt.$ === 1) {
				switch (elt.a) {
					case 'item':
						var body = elt.c;
						return A2(
							$mdgriffith$elm_ui$Element$row,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$spacing(8)
								]),
							_List_fromArray(
								[
									prefixSymbol,
									A2($author$project$Render$Elm$renderElement, renderArgs, elt)
								]));
					case 'list':
						var args = elt.b;
						var body = elt.c;
						if (body.$ === 2) {
							var list_ = body.a;
							return A2(
								$mdgriffith$elm_ui$Element$column,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$spacing(4),
										$author$project$Render$Elm$listPadding
									]),
								A2(
									$elm$core$List$cons,
									$author$project$Render$Elm$listTitle(args),
									A2(
										$elm$core$List$indexedMap,
										F2(
											function (k, item_) {
												return A3(
													$author$project$Render$Elm$renderListItem,
													A2($author$project$Render$Elm$getPrefixSymbol, k, args),
													renderArgs,
													item_);
											}),
										$author$project$Render$Elm$filterOutBlankItems(list_))));
						} else {
							return A2(
								$mdgriffith$elm_ui$Element$el,
								_List_fromArray(
									[
										$mdgriffith$elm_ui$Element$Font$color($author$project$Render$Elm$redColor)
									]),
								$mdgriffith$elm_ui$Element$text('Malformed list'));
						}
					default:
						break _v4$2;
				}
			} else {
				break _v4$2;
			}
		}
		return $mdgriffith$elm_ui$Element$none;
	});
var $author$project$Render$Elm$renderStrong = F5(
	function (renderArgs, _v2, _v3, body, sm) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$Font$bold]),
			A2($author$project$Render$Elm$renderElement, renderArgs, body));
	});
var $author$project$Render$Elm$renderWithDictionary = F5(
	function (renderArgs, name, args, body, sm) {
		var _v1 = A2(
			$elm$core$Dict$get,
			name,
			$author$project$Render$Elm$cyclic$renderElementDict());
		if (_v1.$ === 1) {
			return A2($elm$core$List$member, name, $author$project$Render$Elm$theoremLikeElements) ? A5($author$project$Render$Elm$renderaAsTheoremLikeElement, renderArgs, name, args, body, sm) : A2($author$project$Render$Elm$renderMissingElement, name, body);
		} else {
			var f = _v1.a;
			return A5(f, renderArgs, name, args, body, sm);
		}
	});
var $author$project$Render$Elm$renderaAsTheoremLikeElement = F5(
	function (renderArgs, name, args, body, sm) {
		var label_ = A2($author$project$Render$Utility$getArg, 0, args);
		var heading = function () {
			if (label_.$ === 1) {
				return A2(
					$mdgriffith$elm_ui$Element$row,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							$mdgriffith$elm_ui$Element$text(
								$elm_community$string_extra$String$Extra$toSentenceCase(name) + '.'))
						]));
			} else {
				var label = label_.a;
				return A2(
					$mdgriffith$elm_ui$Element$paragraph,
					_List_Nil,
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							$mdgriffith$elm_ui$Element$text(
								$elm_community$string_extra$String$Extra$toSentenceCase(name))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_Nil,
							$mdgriffith$elm_ui$Element$text(' (' + (label + ')'))),
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$Font$bold]),
							$mdgriffith$elm_ui$Element$text('.'))
						]));
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$spacing(3)
				]),
			_List_fromArray(
				[
					heading,
					A2(
					$mdgriffith$elm_ui$Element$el,
					_List_Nil,
					A2($author$project$Render$Elm$renderElement, renderArgs, body))
				]));
	});
function $author$project$Render$Elm$cyclic$renderElementDict() {
	return $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2('Error', $author$project$Render$Elm$error),
				_Utils_Tuple2('strong', $author$project$Render$Elm$renderStrong),
				_Utils_Tuple2('italic', $author$project$Render$Elm$renderItalic),
				_Utils_Tuple2('highlight', $author$project$Render$Elm$highlight),
				_Utils_Tuple2('highlightRGB', $author$project$Render$Elm$highlightRGB),
				_Utils_Tuple2('fontRGB', $author$project$Render$Elm$fontRGB),
				_Utils_Tuple2('code', $author$project$Render$Elm$renderCode),
				_Utils_Tuple2('codeblock', $author$project$Render$Elm$renderCodeBlock),
				_Utils_Tuple2('poetry', $author$project$Render$Elm$poetry),
				_Utils_Tuple2('section', $author$project$Render$Elm$section),
				_Utils_Tuple2('section2', $author$project$Render$Elm$section2),
				_Utils_Tuple2('section3', $author$project$Render$Elm$section3),
				_Utils_Tuple2('list', $author$project$Render$Elm$list),
				_Utils_Tuple2('item', $author$project$Render$Elm$item),
				_Utils_Tuple2('link', $author$project$Render$Elm$link),
				_Utils_Tuple2('image', $author$project$Render$Elm$image),
				_Utils_Tuple2('math', $author$project$Render$Elm$renderMath),
				_Utils_Tuple2('mathdisplay', $author$project$Render$Elm$renderMathDisplay),
				_Utils_Tuple2('sum', $author$project$Widget$Data$sum),
				_Utils_Tuple2('average', $author$project$Widget$Data$average),
				_Utils_Tuple2('stdev', $author$project$Widget$Data$stdev),
				_Utils_Tuple2('bargraph', $author$project$Widget$Data$bargraph),
				_Utils_Tuple2('linegraph', $author$project$Widget$Data$linegraph),
				_Utils_Tuple2('scatterplot', $author$project$Widget$Data$scatterplot)
			]));
}
var $author$project$Render$Elm$renderElementDict = $author$project$Render$Elm$cyclic$renderElementDict();
$author$project$Render$Elm$cyclic$renderElementDict = function () {
	return $author$project$Render$Elm$renderElementDict;
};
var $author$project$Render$Elm$renderList = F2(
	function (renderArgs, list_) {
		return A2(
			$mdgriffith$elm_ui$Element$paragraph,
			$author$project$Render$Elm$format,
			A2(
				$elm$core$List$map,
				$author$project$Render$Elm$renderElement(renderArgs),
				list_));
	});
var $author$project$Parser$Document$Start = 0;
var $author$project$Parser$Document$init = F2(
	function (generation, strList) {
		return {
			h: _List_Nil,
			C: 0,
			ab: 0,
			bR: generation,
			a4: strList,
			Q: 0,
			z: _List_Nil,
			gB: $author$project$Parser$Data$init($author$project$Parser$Data$defaultConfig)
		};
	});
var $author$project$Parser$Document$loop = F2(
	function (s, nextState_) {
		loop:
		while (true) {
			var _v0 = nextState_(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$nextState_ = nextState_;
				s = $temp$s;
				nextState_ = $temp$nextState_;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Parser$Document$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$Document$InElementBlock = 2;
var $author$project$Parser$Document$InTextBlock = 1;
var $author$project$Parser$Document$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$Parser$Document$differentialBlockLevel = function (str) {
	var chars = A2($elm$core$String$split, '', str);
	var leftBrackets = $elm$core$List$length(
		A2(
			$elm$core$List$filter,
			function (s) {
				return s === '[';
			},
			chars));
	var rightBrackets = $elm$core$List$length(
		A2(
			$elm$core$List$filter,
			function (s) {
				return s === ']';
			},
			chars));
	return leftBrackets - rightBrackets;
};
var $author$project$Parser$Document$countLines = function (list) {
	return function (x) {
		return x + 1;
	}(
		$elm$core$List$length(
			$elm$core$List$concat(
				A2($elm$core$List$map, $elm$core$String$lines, list))));
};
var $author$project$Parser$Error$CArgsAndBody = 3;
var $author$project$Parser$Error$CBody = 2;
var $author$project$Parser$Error$CElement = 0;
var $author$project$Parser$Element$Element = F4(
	function (a, b, c, d) {
		return {$: 1, a: a, b: b, c: c, d: d};
	});
var $author$project$Parser$Element$LX = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $author$project$Parser$Error$CArgs = 1;
var $author$project$Parser$Tool$between = F3(
	function (p, q, r) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (x) {
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (_v1) {
						return x;
					},
					r);
			},
			A2(
				$elm$parser$Parser$Advanced$andThen,
				function (_v0) {
					return q;
				},
				p));
	});
var $author$project$Parser$Error$ExpectingComma = {$: 0};
var $author$project$Parser$Element$comma_ = $elm$parser$Parser$Advanced$symbol(
	A2($elm$parser$Parser$Advanced$Token, ',', $author$project$Parser$Error$ExpectingComma));
var $author$project$Parser$Tool$first = F2(
	function (p, q) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (x) {
				return A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return x;
					},
					q);
			},
			p);
	});
var $author$project$Parser$Element$comma = A2($author$project$Parser$Tool$first, $author$project$Parser$Element$comma_, $elm$parser$Parser$Advanced$spaces);
var $author$project$Parser$Error$EndOfInput = {$: 5};
var $author$project$Parser$Tool$manyHelp = F2(
	function (p, vs) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v0) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$Advanced$end($author$project$Parser$Error$EndOfInput)),
					A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						function (v) {
							return $elm$parser$Parser$Advanced$Loop(
								A2($elm$core$List$cons, v, vs));
						}),
					p),
					A2(
					$elm$parser$Parser$Advanced$map,
					function (_v1) {
						return $elm$parser$Parser$Advanced$Done(
							$elm$core$List$reverse(vs));
					},
					$elm$parser$Parser$Advanced$succeed(0))
				]));
	});
var $author$project$Parser$Tool$manyWithInitialList = F2(
	function (initialList, p) {
		return A2(
			$elm$parser$Parser$Advanced$loop,
			initialList,
			$author$project$Parser$Tool$manyHelp(p));
	});
var $author$project$Parser$Tool$manyNonEmpty_ = F2(
	function (p, q) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (x) {
				return A2(
					$author$project$Parser$Tool$manyWithInitialList,
					_List_fromArray(
						[x]),
					q);
			},
			p);
	});
var $author$project$Parser$Tool$second = F2(
	function (p, q) {
		return A2(
			$elm$parser$Parser$Advanced$andThen,
			function (_v0) {
				return q;
			},
			p);
	});
var $author$project$Parser$Tool$manySeparatedBy = F2(
	function (sep, p) {
		return A2(
			$author$project$Parser$Tool$manyNonEmpty_,
			p,
			A2($author$project$Parser$Tool$second, sep, p));
	});
var $author$project$Parser$Element$rawText_ = function (stopChars) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed(
					F3(
						function (begin, end, content) {
							return {
								cK: A3($elm$core$String$slice, begin, end, content),
								gj: end - begin,
								g3: begin
							};
						})),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getOffset,
					$elm$parser$Parser$Advanced$chompWhile(
						function (c) {
							return !A2($elm$core$List$member, c, stopChars);
						}))),
			$elm$parser$Parser$Advanced$getOffset),
		$elm$parser$Parser$Advanced$getSource);
};
var $author$project$Parser$Element$string_ = function (stopChars) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		function ($) {
			return $.cK;
		},
		$author$project$Parser$Element$rawText_(stopChars));
};
var $author$project$Parser$Element$string = function (stopChars) {
	return A2(
		$author$project$Parser$Tool$first,
		$author$project$Parser$Element$string_(stopChars),
		$elm$parser$Parser$Advanced$spaces);
};
var $author$project$Parser$Element$innerElementArgs = A2(
	$author$project$Parser$Tool$manySeparatedBy,
	$author$project$Parser$Element$comma,
	$author$project$Parser$Element$string(
		_List_fromArray(
			[',', '|'])));
var $author$project$Parser$Error$ExpectingPipe = {$: 3};
var $author$project$Parser$Element$pipeSymbol = $elm$parser$Parser$Advanced$symbol(
	A2($elm$parser$Parser$Advanced$Token, '|', $author$project$Parser$Error$ExpectingPipe));
var $author$project$Parser$Element$elementArgs = A2(
	$elm$parser$Parser$Advanced$inContext,
	1,
	A3($author$project$Parser$Tool$between, $author$project$Parser$Element$pipeSymbol, $author$project$Parser$Element$innerElementArgs, $author$project$Parser$Element$pipeSymbol));
var $author$project$Parser$Element$elementName = A2(
	$author$project$Parser$Tool$first,
	$author$project$Parser$Element$string_(
		_List_fromArray(
			['[', ']', ' ', '\n'])),
	$elm$parser$Parser$Advanced$spaces);
var $author$project$Parser$Error$ExpectingLeftBracket = {$: 1};
var $author$project$Parser$Element$leftBracket = $elm$parser$Parser$Advanced$symbol(
	A2($elm$parser$Parser$Advanced$Token, '[', $author$project$Parser$Error$ExpectingLeftBracket));
var $author$project$Parser$Tool$many = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		_List_Nil,
		$author$project$Parser$Tool$manyHelp(p));
};
var $author$project$Parser$Error$ExpectingRightBracket = {$: 2};
var $author$project$Parser$Element$rightBracket = $elm$parser$Parser$Advanced$symbol(
	A2($elm$parser$Parser$Advanced$Token, ']', $author$project$Parser$Error$ExpectingRightBracket));
var $author$project$Parser$Error$TextExpression = 4;
var $author$project$Parser$XString$isLanguageChar = function (c) {
	return (c === '|') || ((c === '[') || ((c === ']') || (c === '\\')));
};
var $author$project$Parser$XString$isNonLanguageChar = function (c) {
	return !$author$project$Parser$XString$isLanguageChar(c);
};
var $author$project$Parser$XString$reduce = function (list) {
	var start = A2(
		$elm$core$Maybe$withDefault,
		0,
		A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.g3;
			},
			$elm$core$List$head(list)));
	var reversedList = $elm$core$List$reverse(list);
	var finish = A2(
		$elm$core$Maybe$withDefault,
		0,
		A2(
			$elm$core$Maybe$map,
			function ($) {
				return $.ck;
			},
			$elm$core$List$head(reversedList)));
	return {
		cK: A3(
			$elm$core$List$foldl,
			$elm$core$Basics$append,
			'',
			A2(
				$elm$core$List$map,
				function ($) {
					return $.cK;
				},
				reversedList)),
		ck: finish,
		g3: start
	};
};
var $author$project$Parser$Error$ExpectingEscape = {$: 4};
var $author$project$Parser$Error$UnHandledError = function (a) {
	return {$: 9, a: a};
};
var $author$project$Parser$Tool$char = function (prefixTest) {
	return A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed(
					F3(
						function (start, finish, content) {
							return {
								cK: A3($elm$core$String$slice, start, finish, content),
								ck: finish,
								g3: start
							};
						})),
				A2(
					$elm$parser$Parser$Advanced$ignorer,
					$elm$parser$Parser$Advanced$getOffset,
					A2(
						$elm$parser$Parser$Advanced$chompIf,
						function (c) {
							return prefixTest(c);
						},
						$author$project$Parser$Error$UnHandledError(3)))),
			$elm$parser$Parser$Advanced$getOffset),
		$elm$parser$Parser$Advanced$getSource);
};
var $author$project$Parser$XString$escapedChar = A2(
	$elm$parser$Parser$Advanced$map,
	function (result) {
		return {cK: '\\' + result.cK, ck: result.ck, g3: result.g3 - 1};
	},
	A2(
		$author$project$Parser$Tool$second,
		$elm$parser$Parser$Advanced$symbol(
			A2($elm$parser$Parser$Advanced$Token, '\\', $author$project$Parser$Error$ExpectingEscape)),
		$author$project$Parser$Tool$char(
			function (c) {
				return true;
			})));
var $author$project$Parser$Tool$manyNonEmpty = function (p) {
	return A2(
		$elm$parser$Parser$Advanced$andThen,
		function (x) {
			return A2(
				$author$project$Parser$Tool$manyWithInitialList,
				_List_fromArray(
					[x]),
				p);
		},
		p);
};
var $author$project$Parser$Tool$text = F2(
	function (prefixTest, predicate) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (start, finish, content) {
								return {
									cK: A3($elm$core$String$slice, start, finish, content),
									ck: finish,
									g3: start
								};
							})),
					A2(
						$elm$parser$Parser$Advanced$ignorer,
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							$elm$parser$Parser$Advanced$getOffset,
							A2(
								$elm$parser$Parser$Advanced$chompIf,
								function (c) {
									return prefixTest(c);
								},
								$author$project$Parser$Error$UnHandledError(2))),
						$elm$parser$Parser$Advanced$chompWhile(
							function (c) {
								return predicate(c);
							}))),
				$elm$parser$Parser$Advanced$getOffset),
			$elm$parser$Parser$Advanced$getSource);
	});
var $author$project$Parser$XString$textWithPredicate_ = function (predicate) {
	return A2(
		$author$project$Parser$Tool$text,
		predicate,
		function (c) {
			return (c !== '\\') && predicate(c);
		});
};
var $author$project$Parser$XString$textListWithPredicate = function (predicate) {
	return $author$project$Parser$Tool$manyNonEmpty(
		$elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					$author$project$Parser$XString$textWithPredicate_(predicate),
					$author$project$Parser$XString$escapedChar
				])));
};
var $author$project$Parser$XString$textWithPredicate = function (predicate) {
	return A2(
		$elm$parser$Parser$Advanced$map,
		$author$project$Parser$XString$reduce,
		$author$project$Parser$XString$textListWithPredicate(predicate));
};
var $author$project$Parser$Element$plainText = F2(
	function (generation, lineNumber) {
		return A2(
			$elm$parser$Parser$Advanced$inContext,
			4,
			A2(
				$elm$parser$Parser$Advanced$map,
				function (data) {
					return A2(
						$author$project$Parser$Element$Text,
						data.cK,
						$elm$core$Maybe$Just(
							{fp: lineNumber, bR: generation, gj: data.ck - data.g3, bZ: data.g3}));
				},
				$author$project$Parser$XString$textWithPredicate($author$project$Parser$XString$isNonLanguageChar)));
	});
var $author$project$Parser$Tool$oneChar = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed(
				F3(
					function (begin, end, data) {
						return A3($elm$core$String$slice, begin, end, data);
					})),
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$getOffset,
				A2(
					$elm$parser$Parser$Advanced$chompIf,
					function (c) {
						return true;
					},
					$author$project$Parser$Error$UnHandledError(4)))),
		$elm$parser$Parser$Advanced$getOffset),
	$elm$parser$Parser$Advanced$getSource);
var $author$project$Parser$RawString$updateState = F3(
	function (maxHashes, c, state) {
		return (c === '#') ? ((A2($elm$core$String$right, 1, state.cK) === '#') ? ((_Utils_cmp(state.W + 1, state.W + 1) > 0) ? $elm$parser$Parser$Advanced$Done(
			{
				cK: _Utils_ap(state.cK, c),
				W: state.W + 1
			}) : $elm$parser$Parser$Advanced$Loop(
			{
				cK: _Utils_ap(state.cK, c),
				W: state.W + 1
			})) : $elm$parser$Parser$Advanced$Loop(
			{
				cK: _Utils_ap(state.cK, c),
				W: 1
			})) : $elm$parser$Parser$Advanced$Loop(
			{
				cK: _Utils_ap(state.cK, c),
				W: 0
			});
	});
var $author$project$Parser$RawString$rawStringHelp = F2(
	function (hashes, state) {
		return (_Utils_cmp(state.W, hashes) > -1) ? $elm$parser$Parser$Advanced$succeed(
			$elm$parser$Parser$Advanced$Done(state)) : A2(
			$elm$parser$Parser$Advanced$map,
			function (c) {
				return A3($author$project$Parser$RawString$updateState, hashes, c, state);
			},
			$author$project$Parser$Tool$oneChar);
	});
var $author$project$Parser$RawString$rawStringLoop = function (hashes) {
	return A2(
		$elm$parser$Parser$Advanced$loop,
		{cK: '', W: 0},
		$author$project$Parser$RawString$rawStringHelp(hashes));
};
var $author$project$Parser$Error$ExpectingRawPrefix = {$: 8};
var $author$project$Parser$RawString$rawStringPrefix = A2(
	$elm$parser$Parser$Advanced$keeper,
	A2(
		$elm$parser$Parser$Advanced$keeper,
		$elm$parser$Parser$Advanced$succeed(
			F2(
				function (begin, end) {
					return (end - begin) - 3;
				})),
		A2(
			$elm$parser$Parser$Advanced$ignorer,
			A2(
				$elm$parser$Parser$Advanced$ignorer,
				$elm$parser$Parser$Advanced$getOffset,
				$elm$parser$Parser$Advanced$symbol(
					A2($elm$parser$Parser$Advanced$Token, 'raw#', $author$project$Parser$Error$ExpectingRawPrefix))),
			$elm$parser$Parser$Advanced$chompWhile(
				function (c) {
					return c === '#';
				}))),
	$elm$parser$Parser$Advanced$getOffset);
var $author$project$Parser$RawString$parser = A2(
	$elm$parser$Parser$Advanced$andThen,
	function (maxHashes) {
		return A2(
			$elm$parser$Parser$Advanced$map,
			function (ls) {
				return A2($elm$core$String$dropRight, maxHashes, ls.cK);
			},
			$author$project$Parser$RawString$rawStringLoop(maxHashes));
	},
	$author$project$Parser$RawString$rawStringPrefix);
var $author$project$Parser$Element$rawString = F2(
	function (generation, lineNumber) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					$elm$parser$Parser$Advanced$succeed(
						F3(
							function (start, source, finish) {
								return A2(
									$author$project$Parser$Element$Text,
									source,
									$elm$core$Maybe$Just(
										{fp: lineNumber, bR: generation, gj: finish - start, bZ: start}));
							})),
					$elm$parser$Parser$Advanced$getOffset),
				$author$project$Parser$RawString$parser),
			$elm$parser$Parser$Advanced$getOffset);
	});
var $author$project$Parser$Element$text = F2(
	function (generation, lineNumber) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$Parser$Element$rawString, generation, lineNumber),
					A2($author$project$Parser$Element$plainText, generation, lineNumber)
				]));
	});
var $author$project$Parser$Element$argsAndBody = F2(
	function (generation, lineNumber) {
		return A2(
			$elm$parser$Parser$Advanced$inContext,
			3,
			$elm$parser$Parser$Advanced$oneOf(
				_List_fromArray(
					[
						A2($author$project$Parser$Element$argsAndBody_, generation, lineNumber),
						A2($author$project$Parser$Element$bodyOnly, generation, lineNumber)
					])));
	});
var $author$project$Parser$Element$argsAndBody_ = F2(
	function (generation, lineNumber) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				$elm$parser$Parser$Advanced$succeed(
					F2(
						function (args, body_) {
							return _Utils_Tuple2(args, body_);
						})),
				A2($elm$parser$Parser$Advanced$ignorer, $author$project$Parser$Element$elementArgs, $elm$parser$Parser$Advanced$spaces)),
			A2($author$project$Parser$Element$elementBody, generation, lineNumber));
	});
var $author$project$Parser$Element$bodyOnly = F2(
	function (generation, lineNumber) {
		return A2(
			$elm$parser$Parser$Advanced$keeper,
			$elm$parser$Parser$Advanced$succeed(
				function (body_) {
					return _Utils_Tuple2(_List_Nil, body_);
				}),
			A2($author$project$Parser$Element$elementBody, generation, lineNumber));
	});
var $author$project$Parser$Element$element = F2(
	function (generation, lineNumber) {
		return $elm$parser$Parser$Advanced$oneOf(
			_List_fromArray(
				[
					A2($author$project$Parser$Element$primitiveElement, generation, lineNumber),
					A2($author$project$Parser$Element$text, generation, lineNumber)
				]));
	});
var $author$project$Parser$Element$elementBody = F2(
	function (generation, lineNumber) {
		return A2(
			$elm$parser$Parser$Advanced$inContext,
			2,
			$elm$parser$Parser$Advanced$lazy(
				function (_v1) {
					return A2(
						$elm$parser$Parser$Advanced$map,
						function (list) {
							return A2($author$project$Parser$Element$LX, list, $elm$core$Maybe$Nothing);
						},
						$author$project$Parser$Tool$many(
							A2($author$project$Parser$Element$element, generation, lineNumber)));
				}));
	});
var $author$project$Parser$Element$primitiveElement = F2(
	function (generation, blockOffset) {
		return A2(
			$elm$parser$Parser$Advanced$inContext,
			0,
			A2(
				$elm$parser$Parser$Advanced$keeper,
				A2(
					$elm$parser$Parser$Advanced$keeper,
					A2(
						$elm$parser$Parser$Advanced$keeper,
						A2(
							$elm$parser$Parser$Advanced$keeper,
							A2(
								$elm$parser$Parser$Advanced$keeper,
								$elm$parser$Parser$Advanced$succeed(
									F5(
										function (start, name, _v0, end, source) {
											var args = _v0.a;
											var body_ = _v0.b;
											return A4(
												$author$project$Parser$Element$Element,
												name,
												args,
												body_,
												$elm$core$Maybe$Just(
													{fp: blockOffset, bR: generation, gj: end - start, bZ: start}));
										})),
								A2($elm$parser$Parser$Advanced$ignorer, $elm$parser$Parser$Advanced$getOffset, $author$project$Parser$Element$leftBracket)),
							$author$project$Parser$Element$elementName),
						A2(
							$elm$parser$Parser$Advanced$ignorer,
							A2(
								$elm$parser$Parser$Advanced$ignorer,
								A2($author$project$Parser$Element$argsAndBody, generation, blockOffset),
								$elm$parser$Parser$Advanced$spaces),
							$author$project$Parser$Element$rightBracket)),
					$elm$parser$Parser$Advanced$getOffset),
				$elm$parser$Parser$Advanced$getSource));
	});
var $author$project$Parser$Getters$getSource = function (expr) {
	switch (expr.$) {
		case 0:
			var sm = expr.b;
			return sm;
		case 1:
			var sm = expr.d;
			return sm;
		default:
			var expr_ = expr.a;
			var sm = expr.b;
			return sm;
	}
};
var $author$project$Parser$SourceMap$dummy = {fp: 0, bR: 0, gj: 0, bZ: 0};
var $author$project$Parser$RecoveryData$problemWithElement = {
	fJ: 1,
	gz: A4(
		$author$project$Parser$Element$Element,
		'fontRGB',
		_List_fromArray(
			['255', '0', '0']),
		A2(
			$author$project$Parser$Element$Text,
			$elm$core$String$fromChar('⚠') + (' unmatched $ in' + $elm$core$String$fromChar('\u00A0')),
			$elm$core$Maybe$Nothing),
		$elm$core$Maybe$Nothing),
	es: $author$project$Parser$Error$ExpectingRightBracket,
	hp: 1
};
var $author$project$Parser$RecoveryData$recoveryData = _List_fromArray(
	[$author$project$Parser$RecoveryData$problemWithElement]);
var $author$project$Parser$RecoveryData$get_ = function (problem) {
	return $elm$core$List$head(
		A2(
			$elm$core$List$filter,
			function (r) {
				return _Utils_eq(r.es, problem);
			},
			$author$project$Parser$RecoveryData$recoveryData));
};
var $author$project$Parser$RecoveryData$setSourceMap = F2(
	function (sm, expr) {
		switch (expr.$) {
			case 0:
				var e = expr.a;
				return A2($author$project$Parser$Element$Text, e, sm);
			case 1:
				var name = expr.a;
				var args = expr.b;
				var body = expr.c;
				return A4($author$project$Parser$Element$Element, name, args, body, sm);
			default:
				var list = expr.a;
				return A2($author$project$Parser$Element$LX, list, sm);
		}
	});
var $author$project$Parser$RecoveryData$get = F2(
	function (tc_, problem) {
		var oldSourceMap = $author$project$Parser$SourceMap$dummy;
		var newSourceMap = $elm$core$Maybe$Just(
			_Utils_update(
				oldSourceMap,
				{fp: tc_.aZ}));
		return A2(
			$elm$core$Maybe$map,
			function (r) {
				return _Utils_update(
					r,
					{
						gz: A2($author$project$Parser$RecoveryData$setSourceMap, newSourceMap, r.gz)
					});
			},
			$author$project$Parser$RecoveryData$get_(problem));
	});
var $author$project$Parser$Driver$fakeLeftBracket = $elm$core$String$fromChar('⁅');
var $author$project$Parser$Driver$fakePipeSymbol = $elm$core$String$fromChar('ǀ');
var $author$project$Parser$Driver$fakeRightBracket = $elm$core$String$fromChar('⁆');
var $author$project$Parser$Driver$newOffset = F3(
	function (tc_, errorColumn_, mRecoveryData_) {
		if (!mRecoveryData_.$) {
			var rd = mRecoveryData_.a;
			return tc_.bZ + rd.fJ;
		} else {
			return tc_.bZ + errorColumn_;
		}
	});
var $author$project$Parser$Element$elementList = F2(
	function (generation, lineNumber) {
		return $author$project$Parser$Tool$many(
			A2($author$project$Parser$Element$element, generation, lineNumber));
	});
var $author$project$Parser$Driver$parse__ = function (str) {
	var _v0 = A2(
		$elm$parser$Parser$Advanced$run,
		A2($author$project$Parser$Element$elementList, 0, 0),
		str);
	if (!_v0.$) {
		var list = _v0.a;
		return list;
	} else {
		return _List_Nil;
	}
};
var $elm_community$list_extra$List$Extra$updateIf = F3(
	function (predicate, update, list) {
		return A2(
			$elm$core$List$map,
			function (item) {
				return predicate(item) ? update(item) : item;
			},
			list);
	});
var $elm_community$list_extra$List$Extra$setIf = F3(
	function (predicate, replacement, list) {
		return A3(
			$elm_community$list_extra$List$Extra$updateIf,
			predicate,
			$elm$core$Basics$always(replacement),
			list);
	});
var $author$project$Parser$Driver$handlePipeError = F4(
	function (tc_, mFirstError, errorColumn, mRecoveryData) {
		var textLines = $elm$core$String$lines(tc_.cw);
		var errorRow = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.gM;
				},
				mFirstError));
		var errorLines = A2($elm$core$List$take, errorRow - 1, textLines);
		var badText = function () {
			var _v0 = $elm$core$List$head(textLines);
			if (_v0.$ === 1) {
				return 'Oops, couldn\'t find your error text';
			} else {
				var str = _v0.a;
				return str;
			}
		}();
		var correctedText = function (s) {
			return s + (' ?? ' + $author$project$Parser$Driver$fakeRightBracket);
		}(
			A3(
				$elm$core$String$replace,
				'|',
				$author$project$Parser$Driver$fakePipeSymbol,
				A3($elm$core$String$replace, '[', $author$project$Parser$Driver$fakeLeftBracket, badText)));
		var replacementText = '[highlightRGB |255, 130, 130| missing trailing pipe symbol in] [highlightRGB |186, 205, 255| ' + (correctedText + ' ]');
		var newTextLines = $elm$core$List$reverse(
			A3(
				$elm_community$list_extra$List$Extra$setIf,
				function (t) {
					return _Utils_eq(t, badText);
				},
				replacementText,
				textLines));
		return {
			fo: '?? TO DO',
			aZ: tc_.aZ,
			bk: tc_.bk,
			bR: tc_.bR,
			bZ: A3($author$project$Parser$Driver$newOffset, tc_, errorColumn, mRecoveryData),
			c8: $author$project$Parser$Driver$parse__(
				A2($elm$core$String$join, '\n', errorLines)),
			aB: _List_Nil,
			cw: A2(
				$elm$core$String$join,
				'\n',
				$elm$core$List$reverse(newTextLines))
		};
	});
var $author$project$Parser$Driver$handleRightBracketError = F4(
	function (tc_, mFirstError, errorColumn, mRecoveryData) {
		var textLines = $elm$core$String$lines(tc_.cw);
		var errorRow = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.gM;
				},
				mFirstError));
		var errorLines = A2($elm$core$List$take, errorRow, textLines);
		var badText = function () {
			var _v0 = $elm$core$List$head(textLines);
			if (_v0.$ === 1) {
				return 'Oops, couldn\'t find your error text';
			} else {
				var str = _v0.a;
				return str;
			}
		}();
		var correctedText = function (s) {
			return s + (' ?? ' + $author$project$Parser$Driver$fakeRightBracket);
		}(
			A3(
				$elm$core$String$replace,
				'|',
				$author$project$Parser$Driver$fakePipeSymbol,
				A3($elm$core$String$replace, '[', $author$project$Parser$Driver$fakeLeftBracket, badText)));
		var replacementText = '[highlightRGB |255, 130, 130| missing right bracket in] [highlightRGB |186, 205, 255| ' + (correctedText + ' ]');
		var newTextLines = $elm$core$List$reverse(
			A3(
				$elm_community$list_extra$List$Extra$setIf,
				function (t) {
					return _Utils_eq(t, badText);
				},
				replacementText,
				errorLines));
		var newText = A2(
			$elm$core$String$join,
			'\n',
			$elm$core$List$reverse(newTextLines));
		return {
			fo: '?? TO DO',
			aZ: tc_.aZ,
			bk: tc_.bk,
			bR: tc_.bR,
			bZ: A3($author$project$Parser$Driver$newOffset, tc_, errorColumn, mRecoveryData),
			c8: A2($elm$core$List$drop, 1, tc_.c8),
			aB: _List_Nil,
			cw: newText
		};
	});
var $author$project$Parser$Driver$makeNewText = F3(
	function (tc_, errorColumn_, mRecoveryData) {
		if (!mRecoveryData.$) {
			var rd = mRecoveryData.a;
			return A2($elm$core$String$dropLeft, rd.hp, tc_.cw);
		} else {
			return A2($elm$core$String$dropLeft, errorColumn_, tc_.cw);
		}
	});
var $author$project$Parser$Driver$newParsed = F3(
	function (tc_, lxError_, mRecoveryData) {
		if (!mRecoveryData.$) {
			var rd = mRecoveryData.a;
			return A2($elm$core$List$cons, rd.gz, tc_.c8);
		} else {
			return A2($elm$core$List$cons, lxError_, tc_.c8);
		}
	});
var $author$project$Parser$Driver$newStack = F3(
	function (tc_, errorText_, mRecoveryData) {
		if (!mRecoveryData.$) {
			return _Utils_eq(
				$elm$core$List$head(tc_.aB),
				$elm$core$Maybe$Just('highlight')) ? tc_.aB : A2($elm$core$List$cons, 'highlight', tc_.aB);
		} else {
			return A2(
				$elm$core$List$cons,
				errorText_,
				A2($elm$core$List$cons, 'highlight', tc_.aB));
		}
	});
var $author$project$Parser$Driver$unhandledError = F6(
	function (tc_, mFirstError, errorColumn, mRecoveryData, lxError, errorText) {
		return {
			fo: '?? TO DO',
			aZ: tc_.aZ,
			bk: tc_.bk,
			bR: tc_.bR,
			bZ: A3($author$project$Parser$Driver$newOffset, tc_, errorColumn, mRecoveryData),
			c8: A3($author$project$Parser$Driver$newParsed, tc_, lxError, mRecoveryData),
			aB: A3($author$project$Parser$Driver$newStack, tc_, errorText, mRecoveryData),
			cw: A3($author$project$Parser$Driver$makeNewText, tc_, errorColumn, mRecoveryData)
		};
	});
var $author$project$Parser$Driver$handleError = F2(
	function (tc_, e) {
		var mFirstError = $elm$core$List$head(e);
		var problem = A2(
			$elm$core$Maybe$withDefault,
			$author$project$Parser$Error$UnHandledError(0),
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.es;
				},
				mFirstError));
		var mRecoveryData = A2($author$project$Parser$RecoveryData$get, tc_, problem);
		var errorColumn = A2(
			$elm$core$Maybe$withDefault,
			0,
			A2(
				$elm$core$Maybe$map,
				function ($) {
					return $.fC;
				},
				mFirstError));
		var errorText = A2($elm$core$String$left, errorColumn, tc_.cw);
		var lxError = A4(
			$author$project$Parser$Element$Element,
			'Error',
			_List_Nil,
			A2($author$project$Parser$Element$Text, errorText, $elm$core$Maybe$Nothing),
			$elm$core$Maybe$Just(
				{fp: tc_.aZ, bR: tc_.bR, gj: errorColumn, bZ: tc_.bZ + errorColumn}));
		switch (problem.$) {
			case 2:
				return A4($author$project$Parser$Driver$handleRightBracketError, tc_, mFirstError, errorColumn, mRecoveryData);
			case 3:
				return A4($author$project$Parser$Driver$handlePipeError, tc_, mFirstError, errorColumn, mRecoveryData);
			default:
				return A6($author$project$Parser$Driver$unhandledError, tc_, mFirstError, errorColumn, mRecoveryData, lxError, errorText);
		}
	});
var $author$project$Parser$Driver$incrementSourceMapOffset = F2(
	function (delta, sourceMap) {
		if (!sourceMap.$) {
			var sm = sourceMap.a;
			return $elm$core$Maybe$Just(
				_Utils_update(
					sm,
					{bZ: sm.bZ + delta}));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$Parser$Driver$incrementOffset = F2(
	function (delta, expr) {
		switch (expr.$) {
			case 0:
				var s = expr.a;
				var sm = expr.b;
				return A2(
					$author$project$Parser$Element$Text,
					s,
					A2($author$project$Parser$Driver$incrementSourceMapOffset, delta, sm));
			case 1:
				var name = expr.a;
				var args = expr.b;
				var body_ = expr.c;
				var sm = expr.d;
				return A4(
					$author$project$Parser$Element$Element,
					name,
					args,
					body_,
					A2($author$project$Parser$Driver$incrementSourceMapOffset, delta, sm));
			default:
				var e = expr.a;
				var sm = expr.b;
				return A2(
					$author$project$Parser$Element$LX,
					e,
					A2($author$project$Parser$Driver$incrementSourceMapOffset, delta, sm));
		}
	});
var $author$project$Parser$Driver$packet = {
	fV: $author$project$Parser$Getters$getSource,
	fX: $elm$core$Maybe$Just($author$project$Parser$Driver$handleError),
	f_: $elm$core$Maybe$Nothing,
	f5: $author$project$Parser$Driver$incrementOffset,
	gA: $author$project$Parser$Element$element
};
var $author$project$Parser$TextCursor$init = F3(
	function (generation, blockIndex, text) {
		return {fo: '', aZ: blockIndex, bk: 0, bR: generation, bZ: 0, c8: _List_Nil, aB: _List_Nil, cw: text};
	});
var $author$project$Parser$Tool$loop = F2(
	function (s, nextState) {
		loop:
		while (true) {
			var _v0 = nextState(s);
			if (!_v0.$) {
				var s_ = _v0.a;
				var $temp$s = s_,
					$temp$nextState = nextState;
				s = $temp$s;
				nextState = $temp$nextState;
				continue loop;
			} else {
				var b = _v0.a;
				return b;
			}
		}
	});
var $author$project$Parser$Tool$Done = function (a) {
	return {$: 1, a: a};
};
var $author$project$Parser$Tool$Loop = function (a) {
	return {$: 0, a: a};
};
var $author$project$Parser$Loop$newExpr = F3(
	function (packet, tc_, expr) {
		var _v0 = $elm$core$List$head(tc_.aB);
		if ((!_v0.$) && (_v0.a === 'highlight')) {
			var _v1 = packet.f_;
			if (_v1.$ === 1) {
				return A2(packet.f5, tc_.bZ, expr);
			} else {
				var hl = _v1.a;
				return A2(
					packet.f5,
					tc_.bZ,
					A2(
						hl,
						expr,
						packet.fV(expr)));
			}
		} else {
			return A2(packet.f5, tc_.bZ, expr);
		}
	});
var $author$project$Parser$Loop$nextCursor = F2(
	function (packet, tc) {
		if ((tc.cw === '') || (tc.bk > 100)) {
			return $author$project$Parser$Tool$Done(
				_Utils_update(
					tc,
					{
						c8: $elm$core$List$reverse(tc.c8)
					}));
		} else {
			var _v0 = A2(
				$elm$parser$Parser$Advanced$run,
				A2(packet.gA, tc.bR, tc.aZ),
				tc.cw);
			if (!_v0.$) {
				var expr = _v0.a;
				var sourceMapLength = A2(
					$elm$core$Maybe$withDefault,
					0,
					A2(
						$elm$core$Maybe$map,
						function ($) {
							return $.gj;
						},
						packet.fV(expr)));
				return $author$project$Parser$Tool$Loop(
					_Utils_update(
						tc,
						{
							fo: _Utils_ap(
								tc.fo,
								A2($elm$core$String$left, sourceMapLength, tc.cw)),
							bk: tc.bk + 1,
							bZ: tc.bZ + sourceMapLength,
							c8: A2(
								$elm$core$List$cons,
								A3($author$project$Parser$Loop$newExpr, packet, tc, expr),
								tc.c8),
							cw: A2($elm$core$String$dropLeft, sourceMapLength, tc.cw)
						}));
			} else {
				var e = _v0.a;
				var _v1 = packet.fX;
				if (_v1.$ === 1) {
					return $author$project$Parser$Tool$Loop(
						_Utils_update(
							tc,
							{bk: tc.bk + 1}));
				} else {
					var he = _v1.a;
					return $author$project$Parser$Tool$Loop(
						A2(he, tc, e));
				}
			}
		}
	});
var $author$project$Parser$Loop$parseLoop = F4(
	function (packet, generation, initialLineNumber, str) {
		return A2(
			$author$project$Parser$Tool$loop,
			A3($author$project$Parser$TextCursor$init, generation, initialLineNumber, str),
			$author$project$Parser$Loop$nextCursor(packet));
	});
var $author$project$Parser$Driver$parseLoop = F3(
	function (generation, initialLineNumber, str) {
		return A4($author$project$Parser$Loop$parseLoop, $author$project$Parser$Driver$packet, generation, initialLineNumber, str);
	});
var $author$project$Parser$Document$pushBlock_ = F2(
	function (line, state) {
		var str = A2(
			$elm$core$String$join,
			'\n',
			$elm$core$List$reverse(state.h)) + ('\n' + line);
		var tc = A3($author$project$Parser$Driver$parseLoop, state.bR, state.Q, str);
		return _Utils_update(
			state,
			{
				h: _List_Nil,
				C: 0,
				ab: 0,
				Q: state.Q + $author$project$Parser$Document$countLines(state.h),
				z: A2($elm$core$List$cons, tc, state.z)
			});
	});
var $author$project$Parser$Document$addToBlockContents = F2(
	function (currentLine_, state) {
		var deltaBlockLevel = $author$project$Parser$Document$differentialBlockLevel(currentLine_);
		var newBlockLevel = state.C + deltaBlockLevel;
		return ((!newBlockLevel) && (deltaBlockLevel < 0)) ? A2($author$project$Parser$Document$pushBlock_, '\n' + currentLine_, state) : _Utils_update(
			state,
			{
				h: A2($elm$core$List$cons, currentLine_, state.h),
				C: newBlockLevel
			});
	});
var $author$project$Parser$Document$LTBlank = 0;
var $author$project$Parser$Document$LTBeginElement = 2;
var $elm$parser$Parser$keeper = $elm$parser$Parser$Advanced$keeper;
var $author$project$Parser$Document$beginElementParser = A2(
	$elm$parser$Parser$keeper,
	$elm$parser$Parser$succeed(
		function (s) {
			return 2;
		}),
	$elm$parser$Parser$symbol('['));
var $author$project$Parser$Document$LTComment = 4;
var $author$project$Parser$Document$commentParser = A2(
	$elm$parser$Parser$keeper,
	$elm$parser$Parser$succeed(
		function (s) {
			return 4;
		}),
	$elm$parser$Parser$symbol('%'));
var $author$project$Parser$Document$LTEndElement = 3;
var $author$project$Parser$Document$endElementParser = A2(
	$elm$parser$Parser$keeper,
	$elm$parser$Parser$succeed(
		function (s) {
			return 3;
		}),
	$elm$parser$Parser$symbol(']'));
var $author$project$Parser$Document$LTTextBlock = 1;
var $author$project$Parser$Document$textBlockParser = A2(
	$elm$parser$Parser$ignorer,
	$elm$parser$Parser$succeed(1),
	$elm$parser$Parser$chompIf(
		function (_v0) {
			return true;
		}));
var $author$project$Parser$Document$lineTypeParser = $elm$parser$Parser$oneOf(
	_List_fromArray(
		[
			$author$project$Parser$Document$commentParser,
			$author$project$Parser$Document$beginElementParser,
			$author$project$Parser$Document$endElementParser,
			$author$project$Parser$Document$textBlockParser,
			$elm$parser$Parser$succeed(0)
		]));
var $author$project$Parser$Document$classify = function (str) {
	var _v0 = A2($elm$parser$Parser$run, $author$project$Parser$Document$lineTypeParser, str);
	if (!_v0.$) {
		var lt = _v0.a;
		return lt;
	} else {
		return 0;
	}
};
var $author$project$Parser$Document$flush = function (state) {
	var input = A2(
		$elm$core$String$join,
		'\n',
		$elm$core$List$reverse(state.h));
	var newState = function () {
		if (input === '') {
			return state;
		} else {
			var tc_ = A3($author$project$Parser$Driver$parseLoop, state.bR, state.Q, input);
			var tc = _Utils_update(
				tc_,
				{cw: input});
			return _Utils_update(
				state,
				{
					z: A2($elm$core$List$cons, tc, state.z)
				});
		}
	}();
	return newState;
};
var $author$project$Parser$Document$initBlock = F3(
	function (blockType_, currentLine_, state) {
		return _Utils_update(
			state,
			{
				h: _List_fromArray(
					[currentLine_]),
				ab: blockType_
			});
	});
var $author$project$Parser$Document$popBlockStack = F2(
	function (currentLine_, state) {
		var newBlockLevel = state.C + $author$project$Parser$Document$differentialBlockLevel(currentLine_);
		if (!newBlockLevel) {
			var input_ = A2(
				$elm$core$String$join,
				'\n',
				$elm$core$List$reverse(
					A2($elm$core$List$cons, currentLine_, state.h)));
			var tc_ = A3($author$project$Parser$Driver$parseLoop, state.bR, state.Q, input_);
			var tc = _Utils_update(
				tc_,
				{cw: input_});
			return _Utils_update(
				state,
				{
					h: A2($elm$core$List$cons, currentLine_, state.h),
					C: 0,
					ab: 0,
					Q: state.Q + (2 + $elm$core$List$length(state.h)),
					z: A2($elm$core$List$cons, tc, state.z)
				});
		} else {
			return _Utils_update(
				state,
				{
					h: A2($elm$core$List$cons, currentLine_, state.h),
					C: newBlockLevel
				});
		}
	});
var $author$project$Parser$Document$pushBlock = function (state) {
	return A2($author$project$Parser$Document$pushBlock_, '', state);
};
var $author$project$Parser$Document$pushBlockStack = F2(
	function (currentLine_, state) {
		var deltaBlockLevel = $author$project$Parser$Document$differentialBlockLevel(currentLine_);
		var newBlockLevel = state.C + deltaBlockLevel;
		return (!newBlockLevel) ? A2($author$project$Parser$Document$pushBlock_, '\n' + currentLine_, state) : _Utils_update(
			state,
			{
				h: A2($elm$core$List$cons, currentLine_, state.h),
				C: newBlockLevel
			});
	});
var $author$project$Parser$Document$start = function (state) {
	return _Utils_update(
		state,
		{h: _List_Nil, C: 0, ab: 0});
};
var $author$project$Parser$Document$startBlock = F2(
	function (currentLine_, state) {
		var deltaBlockLevel = $author$project$Parser$Document$differentialBlockLevel(currentLine_);
		var newBlockLevel = state.C + deltaBlockLevel;
		return _Utils_update(
			state,
			{
				h: A2($elm$core$List$cons, currentLine_, state.h),
				C: newBlockLevel,
				ab: 2
			});
	});
var $author$project$Parser$Document$nextState = function (state_) {
	var _v0 = $elm$core$List$head(state_.a4);
	if (_v0.$ === 1) {
		return $author$project$Parser$Document$Done(
			$author$project$Parser$Document$flush(state_));
	} else {
		var currentLine = _v0.a;
		var state = _Utils_update(
			state_,
			{
				a4: A2($elm$core$List$drop, 1, state_.a4)
			});
		var _v1 = _Utils_Tuple2(
			state.ab,
			$author$project$Parser$Document$classify(currentLine));
		switch (_v1.b) {
			case 4:
				var _v2 = _v1.b;
				return $author$project$Parser$Document$Loop(
					_Utils_update(
						state,
						{
							a4: A2($elm$core$List$drop, 1, state.a4)
						}));
			case 0:
				switch (_v1.a) {
					case 0:
						var _v3 = _v1.a;
						var _v4 = _v1.b;
						return $author$project$Parser$Document$Loop(
							$author$project$Parser$Document$start(state));
					case 1:
						var _v11 = _v1.a;
						var _v12 = _v1.b;
						return $author$project$Parser$Document$Loop(
							$author$project$Parser$Document$pushBlock(state));
					default:
						var _v19 = _v1.a;
						var _v20 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A2($author$project$Parser$Document$pushBlockStack, currentLine, state));
				}
			case 2:
				switch (_v1.a) {
					case 0:
						var _v5 = _v1.a;
						var _v6 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A2(
								$author$project$Parser$Document$startBlock,
								currentLine,
								_Utils_update(
									state,
									{ab: 2})));
					case 1:
						var _v13 = _v1.a;
						var _v14 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A2($author$project$Parser$Document$startBlock, currentLine, state));
					default:
						var _v21 = _v1.a;
						var _v22 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A2($author$project$Parser$Document$startBlock, currentLine, state));
				}
			case 3:
				switch (_v1.a) {
					case 0:
						var _v7 = _v1.a;
						var _v8 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A3($author$project$Parser$Document$initBlock, 1, 'Error: ' + currentLine, state));
					case 1:
						var _v15 = _v1.a;
						var _v16 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A2($author$project$Parser$Document$addToBlockContents, currentLine, state));
					default:
						var _v23 = _v1.a;
						var _v24 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A2($author$project$Parser$Document$popBlockStack, currentLine, state));
				}
			default:
				switch (_v1.a) {
					case 0:
						var _v9 = _v1.a;
						var _v10 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A3($author$project$Parser$Document$initBlock, 1, currentLine, state));
					case 1:
						var _v17 = _v1.a;
						var _v18 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A2($author$project$Parser$Document$addToBlockContents, currentLine, state));
					default:
						var _v25 = _v1.a;
						var _v26 = _v1.b;
						return $author$project$Parser$Document$Loop(
							A2($author$project$Parser$Document$addToBlockContents, currentLine, state));
				}
		}
	}
};
var $author$project$Parser$Document$runloop = F2(
	function (generation, strList) {
		return A2(
			$author$project$Parser$Document$loop,
			A2($author$project$Parser$Document$init, generation, strList),
			$author$project$Parser$Document$nextState);
	});
var $author$project$Parser$Document$toParsed = function (state) {
	return $elm$core$List$reverse(
		A2(
			$elm$core$List$map,
			function ($) {
				return $.c8;
			},
			state.z));
};
var $author$project$CaYaTeX$render = F2(
	function (id, data) {
		return A2(
			$elm$core$List$map,
			$author$project$Render$Elm$renderList(
				$author$project$CaYaTeX$initState(data.bR)),
			$author$project$Parser$Document$toParsed(
				A2(
					$author$project$Parser$Document$runloop,
					data.bR,
					$elm$core$String$lines(data.cK))));
	});
var $author$project$Markdown$Render$Composite = function (a) {
	return {$: 1, a: a};
};
var $author$project$Markdown$Render$Simple = function (a) {
	return {$: 0, a: a};
};
var $author$project$Markdown$Render$IDClicked = $elm$core$Basics$identity;
var $author$project$Markdown$Render$DisplayMathMode = 1;
var $author$project$Markdown$Render$isDisplayMathMode = function (displayMode) {
	if (!displayMode) {
		return false;
	} else {
		return true;
	}
};
var $author$project$Markdown$Render$mathText = F2(
	function (displayMode, content) {
		return A3(
			$elm$html$Html$node,
			'math-text',
			_List_fromArray(
				[
					A2(
					$elm$html$Html$Attributes$property,
					'display',
					$elm$json$Json$Encode$bool(
						$author$project$Markdown$Render$isDisplayMathMode(displayMode))),
					A2(
					$elm$html$Html$Attributes$property,
					'content',
					$elm$json$Json$Encode$string(
						A3($elm$core$String$replace, '\\ \\', '\\\\', content)))
				]),
			_List_Nil);
	});
var $author$project$Markdown$Render$displayMathText = function (str) {
	var str2 = $elm$core$String$trim(str);
	return A2(
		$author$project$Markdown$Render$mathText,
		1,
		$elm$core$String$trim(str));
};
var $author$project$Markdown$Parse$stringFromId = function (_v0) {
	var id = _v0.a;
	var version = _v0.b;
	return 'i' + ($elm$core$String$fromInt(id) + ('v' + $elm$core$String$fromInt(version)));
};
var $author$project$Markdown$Render$idAttr = function (id) {
	return $elm$html$Html$Attributes$id(
		$author$project$Markdown$Parse$stringFromId(id));
};
var $author$project$Markdown$Parse$project = function (_v0) {
	var bt = _v0.b;
	var lev = _v0.c;
	var content = _v0.d;
	return A3($author$project$Markdown$Parse$MDBlock, bt, lev, content);
};
var $author$project$Markdown$Render$blockLevelClass = function (k) {
	return $elm$html$Html$Attributes$class(
		'mm-block-' + $elm$core$String$fromInt(k));
};
var $author$project$BlockType$deleteLangPrefix = F2(
	function (lang, str) {
		return A2(
			$elm$core$String$dropLeft,
			$elm$core$String$length(
				$author$project$BlockType$stringOfLanguage(lang)) + 1,
			str);
	});
var $elm$html$Html$hr = _VirtualDom_node('hr');
var $author$project$Markdown$Render$marginOfLevel = function (level) {
	return A2(
		$elm$html$Html$Attributes$style,
		'margin-left',
		$elm$core$String$fromInt(0 * level) + 'px');
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$Css = function (a) {
	return {$: 3, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$Elm = function (a) {
	return {$: 0, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$Javascript = function (a) {
	return {$: 2, a: a};
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$bold = function (style) {
	return _Utils_update(
		style,
		{ah: true});
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Monokai$requiredStyles = {
	ao: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#003800')),
	as: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#75715e')),
	at: A2(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$noEmphasis,
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#f8f8f2'),
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#23241f')),
	au: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#380000')),
	ag: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$backgroundColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#343434')),
	aC: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#ae81ff')),
	aD: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#e6db74')),
	aE: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#f92672')),
	aF: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#66d9ef')),
	aG: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#a6e22e')),
	aH: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#ae81ff')),
	aI: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
		$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#fd971f'))
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Monokai$theme = {
	fI: _List_fromArray(
		[
			_Utils_Tuple2(
			_List_fromArray(
				[
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$Elm(6),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$Javascript(3),
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$Css($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$Property)
				]),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$italic(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#66d9ef')))),
			_Utils_Tuple2(
			_List_fromArray(
				[
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$Javascript(8)
				]),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$italic(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#a6e22e')))),
			_Utils_Tuple2(
			_List_fromArray(
				[
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$Css(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Language$Css$AtRule(0))
				]),
			$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$bold(
				$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$textColor(
					$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Style$Hex('#f92672'))))
		]),
	gI: $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Monokai$requiredStyles
};
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Monokai$css = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Type$toCss($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Monokai$theme);
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$monokai = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$Monokai$css;
var $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$monokai = $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$Theme$monokai;
var $author$project$Markdown$Render$parserOfLanguage = function (lang_) {
	switch (lang_) {
		case 0:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$elm;
		case 1:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$css;
		case 2:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$javascript;
		case 3:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$json;
		case 4:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$python;
		case 5:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$sql;
		case 6:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$xml;
		case 7:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$noLang;
		default:
			return $pablohirafuji$elm_syntax_highlight$SyntaxHighlight$noLang;
	}
};
var $author$project$Markdown$Render$highlightColor = '#d7d6ff';
var $author$project$Markdown$Render$selectedStyle_ = F2(
	function (targetId, currentId) {
		return _Utils_eq(targetId, currentId) ? A2($elm$html$Html$Attributes$style, 'background-color', $author$project$Markdown$Render$highlightColor) : A2($elm$html$Html$Attributes$style, 'background-color', '#fff');
	});
var $author$project$Markdown$Render$renderAsVerbatim = F5(
	function (info, selectedId, id, level, blockContent) {
		if ((!blockContent.$) && (!blockContent.a.$)) {
			var str = blockContent.a.a;
			return A2(
				$elm$html$Html$pre,
				_List_fromArray(
					[
						$author$project$Markdown$Render$idAttr(id),
						$author$project$Markdown$Render$marginOfLevel(level),
						A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text('@@' + (info + str))
					]));
		} else {
			return A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('X5')
					]),
				_List_Nil);
		}
	});
var $elm$html$Html$em = _VirtualDom_node('em');
var $elm$parser$Parser$Expecting = function (a) {
	return {$: 0, a: a};
};
var $elm$parser$Parser$toToken = function (str) {
	return A2(
		$elm$parser$Parser$Advanced$Token,
		str,
		$elm$parser$Parser$Expecting(str));
};
var $elm$parser$Parser$chompUntil = function (str) {
	return $elm$parser$Parser$Advanced$chompUntil(
		$elm$parser$Parser$toToken(str));
};
var $elm$parser$Parser$chompUntilEndOr = $elm$parser$Parser$Advanced$chompUntilEndOr;
var $author$project$Markdown$Parse$argPairParser = function (sep) {
	return A2(
		$elm$parser$Parser$keeper,
		A2(
			$elm$parser$Parser$keeper,
			A2(
				$elm$parser$Parser$ignorer,
				$elm$parser$Parser$succeed($elm$core$Tuple$pair),
				$elm$parser$Parser$spaces),
			A2(
				$elm$parser$Parser$ignorer,
				A2(
					$elm$parser$Parser$ignorer,
					A2(
						$elm$parser$Parser$map,
						$elm$core$String$trim,
						$elm$parser$Parser$getChompedString(
							$elm$parser$Parser$chompUntil(sep))),
					$elm$parser$Parser$symbol('>')),
				$elm$parser$Parser$spaces)),
		A2(
			$elm$parser$Parser$map,
			$elm$core$String$trim,
			$elm$parser$Parser$getChompedString(
				$elm$parser$Parser$chompUntilEndOr('\n'))));
};
var $author$project$Markdown$Parse$getArgPair = F2(
	function (sep, str) {
		var _v0 = A2(
			$elm$parser$Parser$run,
			$author$project$Markdown$Parse$argPairParser(sep),
			str);
		if (!_v0.$) {
			var p = _v0.a;
			return $elm$core$Maybe$Just(p);
		} else {
			return $elm$core$Maybe$Nothing;
		}
	});
var $author$project$HtmlEntity$dict = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('Aacute', 'Á'),
			_Utils_Tuple2('bbA', '𝔸'),
			_Utils_Tuple2('bbB', '𝔹'),
			_Utils_Tuple2('bbC', 'ℂ'),
			_Utils_Tuple2('bbD', '𝔻'),
			_Utils_Tuple2('bbE', '𝔼'),
			_Utils_Tuple2('bbF', '𝔽'),
			_Utils_Tuple2('bbG', '𝔾'),
			_Utils_Tuple2('bbH', 'ℍ'),
			_Utils_Tuple2('bbI', '𝕀'),
			_Utils_Tuple2('bbJ', '𝕁'),
			_Utils_Tuple2('bbK', '𝕂'),
			_Utils_Tuple2('bbL', '𝕃'),
			_Utils_Tuple2('bbM', '𝕄'),
			_Utils_Tuple2('bbN', 'ℕ'),
			_Utils_Tuple2('bbO', '𝕆'),
			_Utils_Tuple2('bbP', 'ℙ'),
			_Utils_Tuple2('bbQ', 'ℚ'),
			_Utils_Tuple2('bbR', 'ℝ'),
			_Utils_Tuple2('bbS', '𝕊'),
			_Utils_Tuple2('bbT', '𝕋'),
			_Utils_Tuple2('bbU', '𝕌'),
			_Utils_Tuple2('bbV', '𝕍'),
			_Utils_Tuple2('bbW', '𝕎'),
			_Utils_Tuple2('bbX', '𝕏'),
			_Utils_Tuple2('bbY', '𝕐'),
			_Utils_Tuple2('bbZ', 'ℤ'),
			_Utils_Tuple2('def', '≔'),
			_Utils_Tuple2('down', '↓'),
			_Utils_Tuple2('up', '↑'),
			_Utils_Tuple2('nor', '⊽'),
			_Utils_Tuple2('nand', '⊼'),
			_Utils_Tuple2('boolzero', '0'),
			_Utils_Tuple2('boolone', '1'),
			_Utils_Tuple2('to', '→'),
			_Utils_Tuple2('from', '←'),
			_Utils_Tuple2('caA', '𝒜'),
			_Utils_Tuple2('caB', 'ℬ'),
			_Utils_Tuple2('caC', '𝒞'),
			_Utils_Tuple2('caD', '𝒟'),
			_Utils_Tuple2('caE', 'ℰ'),
			_Utils_Tuple2('caF', 'ℱ'),
			_Utils_Tuple2('caG', '𝒢'),
			_Utils_Tuple2('caH', 'ℋ'),
			_Utils_Tuple2('caI', 'ℐ'),
			_Utils_Tuple2('caJ', '𝒥'),
			_Utils_Tuple2('caK', '𝒦'),
			_Utils_Tuple2('caL', 'ℒ'),
			_Utils_Tuple2('caM', 'ℳ'),
			_Utils_Tuple2('caN', '𝒩'),
			_Utils_Tuple2('caO', '𝒪'),
			_Utils_Tuple2('caP', '𝒫'),
			_Utils_Tuple2('caQ', '𝒬'),
			_Utils_Tuple2('caR', 'ℛ'),
			_Utils_Tuple2('caS', '𝒮'),
			_Utils_Tuple2('caT', '𝒯'),
			_Utils_Tuple2('caU', '𝒰'),
			_Utils_Tuple2('caV', '𝒱'),
			_Utils_Tuple2('caW', '𝒲'),
			_Utils_Tuple2('caX', '𝒳'),
			_Utils_Tuple2('caY', '𝒴'),
			_Utils_Tuple2('caZ', '𝒵'),
			_Utils_Tuple2('Abreve', 'Ă'),
			_Utils_Tuple2('abreve', 'ă'),
			_Utils_Tuple2('ac', '∾'),
			_Utils_Tuple2('acd', '∿'),
			_Utils_Tuple2('acE', '∾̳'),
			_Utils_Tuple2('Acirc', 'Â'),
			_Utils_Tuple2('acirc', 'â'),
			_Utils_Tuple2('acute', '´'),
			_Utils_Tuple2('Acy', 'А'),
			_Utils_Tuple2('acy', 'а'),
			_Utils_Tuple2('AElig', 'Æ'),
			_Utils_Tuple2('aelig', 'æ'),
			_Utils_Tuple2('af', '\u2061'),
			_Utils_Tuple2('Afr', '\uD835\uDD04'),
			_Utils_Tuple2('afr', '\uD835\uDD1E'),
			_Utils_Tuple2('Agrave', 'À'),
			_Utils_Tuple2('agrave', 'à'),
			_Utils_Tuple2('alefsym', 'ℵ'),
			_Utils_Tuple2('aleph', 'ℵ'),
			_Utils_Tuple2('Alpha', 'Α'),
			_Utils_Tuple2('alpha', 'α'),
			_Utils_Tuple2('Amacr', 'Ā'),
			_Utils_Tuple2('amacr', 'ā'),
			_Utils_Tuple2('amalg', '⨿'),
			_Utils_Tuple2('amp', '&'),
			_Utils_Tuple2('AMP', '&'),
			_Utils_Tuple2('andand', '⩕'),
			_Utils_Tuple2('And', '⩓'),
			_Utils_Tuple2('and', '∧'),
			_Utils_Tuple2('andd', '⩜'),
			_Utils_Tuple2('andslope', '⩘'),
			_Utils_Tuple2('andv', '⩚'),
			_Utils_Tuple2('ang', '∠'),
			_Utils_Tuple2('ange', '⦤'),
			_Utils_Tuple2('angle', '∠'),
			_Utils_Tuple2('angmsdaa', '⦨'),
			_Utils_Tuple2('angmsdab', '⦩'),
			_Utils_Tuple2('angmsdac', '⦪'),
			_Utils_Tuple2('angmsdad', '⦫'),
			_Utils_Tuple2('angmsdae', '⦬'),
			_Utils_Tuple2('angmsdaf', '⦭'),
			_Utils_Tuple2('angmsdag', '⦮'),
			_Utils_Tuple2('angmsdah', '⦯'),
			_Utils_Tuple2('angmsd', '∡'),
			_Utils_Tuple2('angrt', '∟'),
			_Utils_Tuple2('angrtvb', '⊾'),
			_Utils_Tuple2('angrtvbd', '⦝'),
			_Utils_Tuple2('angsph', '∢'),
			_Utils_Tuple2('angst', 'Å'),
			_Utils_Tuple2('angzarr', '⍼'),
			_Utils_Tuple2('Aogon', 'Ą'),
			_Utils_Tuple2('aogon', 'ą'),
			_Utils_Tuple2('Aopf', '\uD835\uDD38'),
			_Utils_Tuple2('aopf', '\uD835\uDD52'),
			_Utils_Tuple2('apacir', '⩯'),
			_Utils_Tuple2('ap', '≈'),
			_Utils_Tuple2('apE', '⩰'),
			_Utils_Tuple2('ape', '≊'),
			_Utils_Tuple2('apid', '≋'),
			_Utils_Tuple2('apos', '\''),
			_Utils_Tuple2('ApplyFunction', '\u2061'),
			_Utils_Tuple2('approx', '≈'),
			_Utils_Tuple2('approxeq', '≊'),
			_Utils_Tuple2('Aring', 'Å'),
			_Utils_Tuple2('aring', 'å'),
			_Utils_Tuple2('Ascr', '\uD835\uDC9C'),
			_Utils_Tuple2('ascr', '\uD835\uDCB6'),
			_Utils_Tuple2('Assign', '≔'),
			_Utils_Tuple2('ast', '*'),
			_Utils_Tuple2('asymp', '≈'),
			_Utils_Tuple2('asympeq', '≍'),
			_Utils_Tuple2('Atilde', 'Ã'),
			_Utils_Tuple2('atilde', 'ã'),
			_Utils_Tuple2('Auml', 'Ä'),
			_Utils_Tuple2('auml', 'ä'),
			_Utils_Tuple2('awconint', '∳'),
			_Utils_Tuple2('awint', '⨑'),
			_Utils_Tuple2('backcong', '≌'),
			_Utils_Tuple2('backepsilon', '϶'),
			_Utils_Tuple2('backprime', '‵'),
			_Utils_Tuple2('backsim', '∽'),
			_Utils_Tuple2('backsimeq', '⋍'),
			_Utils_Tuple2('Backslash', '∖'),
			_Utils_Tuple2('Barv', '⫧'),
			_Utils_Tuple2('barvee', '⊽'),
			_Utils_Tuple2('barwed', '⌅'),
			_Utils_Tuple2('Barwed', '⌆'),
			_Utils_Tuple2('barwedge', '⌅'),
			_Utils_Tuple2('bbrk', '⎵'),
			_Utils_Tuple2('bbrktbrk', '⎶'),
			_Utils_Tuple2('bcong', '≌'),
			_Utils_Tuple2('Bcy', 'Б'),
			_Utils_Tuple2('bcy', 'б'),
			_Utils_Tuple2('bdquo', '„'),
			_Utils_Tuple2('becaus', '∵'),
			_Utils_Tuple2('because', '∵'),
			_Utils_Tuple2('Because', '∵'),
			_Utils_Tuple2('bemptyv', '⦰'),
			_Utils_Tuple2('bepsi', '϶'),
			_Utils_Tuple2('bernou', 'ℬ'),
			_Utils_Tuple2('Bernoullis', 'ℬ'),
			_Utils_Tuple2('Beta', 'Β'),
			_Utils_Tuple2('beta', 'β'),
			_Utils_Tuple2('beth', 'ℶ'),
			_Utils_Tuple2('between', '≬'),
			_Utils_Tuple2('Bfr', '\uD835\uDD05'),
			_Utils_Tuple2('bfr', '\uD835\uDD1F'),
			_Utils_Tuple2('bigcap', '⋂'),
			_Utils_Tuple2('bigcirc', '◯'),
			_Utils_Tuple2('bigcup', '⋃'),
			_Utils_Tuple2('bigodot', '⨀'),
			_Utils_Tuple2('bigoplus', '⨁'),
			_Utils_Tuple2('bigotimes', '⨂'),
			_Utils_Tuple2('bigsqcup', '⨆'),
			_Utils_Tuple2('bigstar', '★'),
			_Utils_Tuple2('bigtriangledown', '▽'),
			_Utils_Tuple2('bigtriangleup', '△'),
			_Utils_Tuple2('biguplus', '⨄'),
			_Utils_Tuple2('bigvee', '⋁'),
			_Utils_Tuple2('bigwedge', '⋀'),
			_Utils_Tuple2('bkarow', '⤍'),
			_Utils_Tuple2('blacklozenge', '⧫'),
			_Utils_Tuple2('blacksquare', '▪'),
			_Utils_Tuple2('blacktriangle', '▴'),
			_Utils_Tuple2('blacktriangledown', '▾'),
			_Utils_Tuple2('blacktriangleleft', '◂'),
			_Utils_Tuple2('blacktriangleright', '▸'),
			_Utils_Tuple2('blank', '␣'),
			_Utils_Tuple2('blk12', '▒'),
			_Utils_Tuple2('blk14', '░'),
			_Utils_Tuple2('blk34', '▓'),
			_Utils_Tuple2('block', '█'),
			_Utils_Tuple2('bne', '=⃥'),
			_Utils_Tuple2('bnequiv', '≡⃥'),
			_Utils_Tuple2('bNot', '⫭'),
			_Utils_Tuple2('bnot', '⌐'),
			_Utils_Tuple2('Bopf', '\uD835\uDD39'),
			_Utils_Tuple2('bopf', '\uD835\uDD53'),
			_Utils_Tuple2('bot', '⊥'),
			_Utils_Tuple2('bottom', '⊥'),
			_Utils_Tuple2('bowtie', '⋈'),
			_Utils_Tuple2('boxbox', '⧉'),
			_Utils_Tuple2('boxdl', '┐'),
			_Utils_Tuple2('boxdL', '╕'),
			_Utils_Tuple2('boxDl', '╖'),
			_Utils_Tuple2('boxDL', '╗'),
			_Utils_Tuple2('boxdr', '┌'),
			_Utils_Tuple2('boxdR', '╒'),
			_Utils_Tuple2('boxDr', '╓'),
			_Utils_Tuple2('boxDR', '╔'),
			_Utils_Tuple2('boxh', '─'),
			_Utils_Tuple2('boxH', '═'),
			_Utils_Tuple2('boxhd', '┬'),
			_Utils_Tuple2('boxHd', '╤'),
			_Utils_Tuple2('boxhD', '╥'),
			_Utils_Tuple2('boxHD', '╦'),
			_Utils_Tuple2('boxhu', '┴'),
			_Utils_Tuple2('boxHu', '╧'),
			_Utils_Tuple2('boxhU', '╨'),
			_Utils_Tuple2('boxHU', '╩'),
			_Utils_Tuple2('boxminus', '⊟'),
			_Utils_Tuple2('boxplus', '⊞'),
			_Utils_Tuple2('boxtimes', '⊠'),
			_Utils_Tuple2('boxul', '┘'),
			_Utils_Tuple2('boxuL', '╛'),
			_Utils_Tuple2('boxUl', '╜'),
			_Utils_Tuple2('boxUL', '╝'),
			_Utils_Tuple2('boxur', '└'),
			_Utils_Tuple2('boxuR', '╘'),
			_Utils_Tuple2('boxUr', '╙'),
			_Utils_Tuple2('boxUR', '╚'),
			_Utils_Tuple2('boxv', '│'),
			_Utils_Tuple2('boxV', '║'),
			_Utils_Tuple2('boxvh', '┼'),
			_Utils_Tuple2('boxvH', '╪'),
			_Utils_Tuple2('boxVh', '╫'),
			_Utils_Tuple2('boxVH', '╬'),
			_Utils_Tuple2('boxvl', '┤'),
			_Utils_Tuple2('boxvL', '╡'),
			_Utils_Tuple2('boxVl', '╢'),
			_Utils_Tuple2('boxVL', '╣'),
			_Utils_Tuple2('boxvr', '├'),
			_Utils_Tuple2('boxvR', '╞'),
			_Utils_Tuple2('boxVr', '╟'),
			_Utils_Tuple2('boxVR', '╠'),
			_Utils_Tuple2('bprime', '‵'),
			_Utils_Tuple2('breve', '˘'),
			_Utils_Tuple2('Breve', '˘'),
			_Utils_Tuple2('brvbar', '¦'),
			_Utils_Tuple2('bscr', '\uD835\uDCB7'),
			_Utils_Tuple2('Bscr', 'ℬ'),
			_Utils_Tuple2('bsemi', '⁏'),
			_Utils_Tuple2('bsim', '∽'),
			_Utils_Tuple2('bsime', '⋍'),
			_Utils_Tuple2('bsolb', '⧅'),
			_Utils_Tuple2('bsol', '\\'),
			_Utils_Tuple2('bsolhsub', '⟈'),
			_Utils_Tuple2('bull', '•'),
			_Utils_Tuple2('bullet', '•'),
			_Utils_Tuple2('bump', '≎'),
			_Utils_Tuple2('bumpE', '⪮'),
			_Utils_Tuple2('bumpe', '≏'),
			_Utils_Tuple2('Bumpeq', '≎'),
			_Utils_Tuple2('bumpeq', '≏'),
			_Utils_Tuple2('Cacute', 'Ć'),
			_Utils_Tuple2('cacute', 'ć'),
			_Utils_Tuple2('capand', '⩄'),
			_Utils_Tuple2('capbrcup', '⩉'),
			_Utils_Tuple2('capcap', '⩋'),
			_Utils_Tuple2('cap', '∩'),
			_Utils_Tuple2('Cap', '⋒'),
			_Utils_Tuple2('capcup', '⩇'),
			_Utils_Tuple2('capdot', '⩀'),
			_Utils_Tuple2('CapitalDifferentialD', 'ⅅ'),
			_Utils_Tuple2('caps', '∩︀'),
			_Utils_Tuple2('caret', '⁁'),
			_Utils_Tuple2('caron', 'ˇ'),
			_Utils_Tuple2('Cayleys', 'ℭ'),
			_Utils_Tuple2('ccaps', '⩍'),
			_Utils_Tuple2('Ccaron', 'Č'),
			_Utils_Tuple2('ccaron', 'č'),
			_Utils_Tuple2('Ccedil', 'Ç'),
			_Utils_Tuple2('ccedil', 'ç'),
			_Utils_Tuple2('Ccirc', 'Ĉ'),
			_Utils_Tuple2('ccirc', 'ĉ'),
			_Utils_Tuple2('Cconint', '∰'),
			_Utils_Tuple2('ccups', '⩌'),
			_Utils_Tuple2('ccupssm', '⩐'),
			_Utils_Tuple2('Cdot', 'Ċ'),
			_Utils_Tuple2('cdot', 'ċ'),
			_Utils_Tuple2('cedil', '¸'),
			_Utils_Tuple2('Cedilla', '¸'),
			_Utils_Tuple2('cemptyv', '⦲'),
			_Utils_Tuple2('cent', '¢'),
			_Utils_Tuple2('centerdot', '·'),
			_Utils_Tuple2('CenterDot', '·'),
			_Utils_Tuple2('cfr', '\uD835\uDD20'),
			_Utils_Tuple2('Cfr', 'ℭ'),
			_Utils_Tuple2('CHcy', 'Ч'),
			_Utils_Tuple2('chcy', 'ч'),
			_Utils_Tuple2('check', '✓'),
			_Utils_Tuple2('checkmark', '✓'),
			_Utils_Tuple2('Chi', 'Χ'),
			_Utils_Tuple2('chi', 'χ'),
			_Utils_Tuple2('circ', 'ˆ'),
			_Utils_Tuple2('circeq', '≗'),
			_Utils_Tuple2('circlearrowleft', '↺'),
			_Utils_Tuple2('circlearrowright', '↻'),
			_Utils_Tuple2('circledast', '⊛'),
			_Utils_Tuple2('circledcirc', '⊚'),
			_Utils_Tuple2('circleddash', '⊝'),
			_Utils_Tuple2('CircleDot', '⊙'),
			_Utils_Tuple2('circledR', '®'),
			_Utils_Tuple2('circledS', 'Ⓢ'),
			_Utils_Tuple2('CircleMinus', '⊖'),
			_Utils_Tuple2('CirclePlus', '⊕'),
			_Utils_Tuple2('CircleTimes', '⊗'),
			_Utils_Tuple2('cir', '○'),
			_Utils_Tuple2('cirE', '⧃'),
			_Utils_Tuple2('cire', '≗'),
			_Utils_Tuple2('cirfnint', '⨐'),
			_Utils_Tuple2('cirmid', '⫯'),
			_Utils_Tuple2('cirscir', '⧂'),
			_Utils_Tuple2('ClockwiseContourIntegral', '∲'),
			_Utils_Tuple2('CloseCurlyDoubleQuote', '”'),
			_Utils_Tuple2('CloseCurlyQuote', '’'),
			_Utils_Tuple2('clubs', '♣'),
			_Utils_Tuple2('clubsuit', '♣'),
			_Utils_Tuple2('colon', ':'),
			_Utils_Tuple2('Colon', '∷'),
			_Utils_Tuple2('Colone', '⩴'),
			_Utils_Tuple2('colone', '≔'),
			_Utils_Tuple2('coloneq', '≔'),
			_Utils_Tuple2('comma', ','),
			_Utils_Tuple2('commat', '@'),
			_Utils_Tuple2('comp', '∁'),
			_Utils_Tuple2('compfn', '∘'),
			_Utils_Tuple2('complement', '∁'),
			_Utils_Tuple2('complexes', 'ℂ'),
			_Utils_Tuple2('cong', '≅'),
			_Utils_Tuple2('congdot', '⩭'),
			_Utils_Tuple2('Congruent', '≡'),
			_Utils_Tuple2('conint', '∮'),
			_Utils_Tuple2('Conint', '∯'),
			_Utils_Tuple2('ContourIntegral', '∮'),
			_Utils_Tuple2('copf', '\uD835\uDD54'),
			_Utils_Tuple2('Copf', 'ℂ'),
			_Utils_Tuple2('coprod', '∐'),
			_Utils_Tuple2('Coproduct', '∐'),
			_Utils_Tuple2('copy', '©'),
			_Utils_Tuple2('COPY', '©'),
			_Utils_Tuple2('copysr', '℗'),
			_Utils_Tuple2('CounterClockwiseContourIntegral', '∳'),
			_Utils_Tuple2('crarr', '↵'),
			_Utils_Tuple2('cross', '✗'),
			_Utils_Tuple2('Cross', '⨯'),
			_Utils_Tuple2('Cscr', '\uD835\uDC9E'),
			_Utils_Tuple2('cscr', '\uD835\uDCB8'),
			_Utils_Tuple2('csub', '⫏'),
			_Utils_Tuple2('csube', '⫑'),
			_Utils_Tuple2('csup', '⫐'),
			_Utils_Tuple2('csupe', '⫒'),
			_Utils_Tuple2('ctdot', '⋯'),
			_Utils_Tuple2('cudarrl', '⤸'),
			_Utils_Tuple2('cudarrr', '⤵'),
			_Utils_Tuple2('cuepr', '⋞'),
			_Utils_Tuple2('cuesc', '⋟'),
			_Utils_Tuple2('cularr', '↶'),
			_Utils_Tuple2('cularrp', '⤽'),
			_Utils_Tuple2('cupbrcap', '⩈'),
			_Utils_Tuple2('cupcap', '⩆'),
			_Utils_Tuple2('CupCap', '≍'),
			_Utils_Tuple2('cup', '∪'),
			_Utils_Tuple2('Cup', '⋓'),
			_Utils_Tuple2('cupcup', '⩊'),
			_Utils_Tuple2('cupdot', '⊍'),
			_Utils_Tuple2('cupor', '⩅'),
			_Utils_Tuple2('cups', '∪︀'),
			_Utils_Tuple2('curarr', '↷'),
			_Utils_Tuple2('curarrm', '⤼'),
			_Utils_Tuple2('curlyeqprec', '⋞'),
			_Utils_Tuple2('curlyeqsucc', '⋟'),
			_Utils_Tuple2('curlyvee', '⋎'),
			_Utils_Tuple2('curlywedge', '⋏'),
			_Utils_Tuple2('curren', '¤'),
			_Utils_Tuple2('curvearrowleft', '↶'),
			_Utils_Tuple2('curvearrowright', '↷'),
			_Utils_Tuple2('cuvee', '⋎'),
			_Utils_Tuple2('cuwed', '⋏'),
			_Utils_Tuple2('cwconint', '∲'),
			_Utils_Tuple2('cwint', '∱'),
			_Utils_Tuple2('cylcty', '⌭'),
			_Utils_Tuple2('dagger', '†'),
			_Utils_Tuple2('Dagger', '‡'),
			_Utils_Tuple2('daleth', 'ℸ'),
			_Utils_Tuple2('darr', '↓'),
			_Utils_Tuple2('Darr', '↡'),
			_Utils_Tuple2('dArr', '⇓'),
			_Utils_Tuple2('dash', '‐'),
			_Utils_Tuple2('Dashv', '⫤'),
			_Utils_Tuple2('dashv', '⊣'),
			_Utils_Tuple2('dbkarow', '⤏'),
			_Utils_Tuple2('dblac', '˝'),
			_Utils_Tuple2('Dcaron', 'Ď'),
			_Utils_Tuple2('dcaron', 'ď'),
			_Utils_Tuple2('Dcy', 'Д'),
			_Utils_Tuple2('dcy', 'д'),
			_Utils_Tuple2('ddagger', '‡'),
			_Utils_Tuple2('ddarr', '⇊'),
			_Utils_Tuple2('DD', 'ⅅ'),
			_Utils_Tuple2('dd', 'ⅆ'),
			_Utils_Tuple2('DDotrahd', '⤑'),
			_Utils_Tuple2('ddotseq', '⩷'),
			_Utils_Tuple2('deg', '°'),
			_Utils_Tuple2('Del', '∇'),
			_Utils_Tuple2('Delta', 'Δ'),
			_Utils_Tuple2('delta', 'δ'),
			_Utils_Tuple2('demptyv', '⦱'),
			_Utils_Tuple2('dfisht', '⥿'),
			_Utils_Tuple2('Dfr', '\uD835\uDD07'),
			_Utils_Tuple2('dfr', '\uD835\uDD21'),
			_Utils_Tuple2('dHar', '⥥'),
			_Utils_Tuple2('dharl', '⇃'),
			_Utils_Tuple2('dharr', '⇂'),
			_Utils_Tuple2('DiacriticalAcute', '´'),
			_Utils_Tuple2('DiacriticalDot', '˙'),
			_Utils_Tuple2('DiacriticalDoubleAcute', '˝'),
			_Utils_Tuple2('DiacriticalGrave', '`'),
			_Utils_Tuple2('DiacriticalTilde', '˜'),
			_Utils_Tuple2('diam', '⋄'),
			_Utils_Tuple2('diamond', '⋄'),
			_Utils_Tuple2('Diamond', '⋄'),
			_Utils_Tuple2('diamondsuit', '♦'),
			_Utils_Tuple2('diams', '♦'),
			_Utils_Tuple2('die', '¨'),
			_Utils_Tuple2('DifferentialD', 'ⅆ'),
			_Utils_Tuple2('digamma', 'ϝ'),
			_Utils_Tuple2('disin', '⋲'),
			_Utils_Tuple2('div', '÷'),
			_Utils_Tuple2('divide', '÷'),
			_Utils_Tuple2('divideontimes', '⋇'),
			_Utils_Tuple2('divonx', '⋇'),
			_Utils_Tuple2('DJcy', 'Ђ'),
			_Utils_Tuple2('djcy', 'ђ'),
			_Utils_Tuple2('dlcorn', '⌞'),
			_Utils_Tuple2('dlcrop', '⌍'),
			_Utils_Tuple2('dollar', '$'),
			_Utils_Tuple2('Dopf', '\uD835\uDD3B'),
			_Utils_Tuple2('dopf', '\uD835\uDD55'),
			_Utils_Tuple2('Dot', '¨'),
			_Utils_Tuple2('dot', '˙'),
			_Utils_Tuple2('DotDot', '⃜'),
			_Utils_Tuple2('doteq', '≐'),
			_Utils_Tuple2('doteqdot', '≑'),
			_Utils_Tuple2('DotEqual', '≐'),
			_Utils_Tuple2('dotminus', '∸'),
			_Utils_Tuple2('dotplus', '∔'),
			_Utils_Tuple2('dotsquare', '⊡'),
			_Utils_Tuple2('doublebarwedge', '⌆'),
			_Utils_Tuple2('DoubleContourIntegral', '∯'),
			_Utils_Tuple2('DoubleDot', '¨'),
			_Utils_Tuple2('DoubleDownArrow', '⇓'),
			_Utils_Tuple2('DoubleLeftArrow', '⇐'),
			_Utils_Tuple2('DoubleLeftRightArrow', '⇔'),
			_Utils_Tuple2('DoubleLeftTee', '⫤'),
			_Utils_Tuple2('DoubleLongLeftArrow', '⟸'),
			_Utils_Tuple2('DoubleLongLeftRightArrow', '⟺'),
			_Utils_Tuple2('DoubleLongRightArrow', '⟹'),
			_Utils_Tuple2('DoubleRightArrow', '⇒'),
			_Utils_Tuple2('DoubleRightTee', '⊨'),
			_Utils_Tuple2('DoubleUpArrow', '⇑'),
			_Utils_Tuple2('DoubleUpDownArrow', '⇕'),
			_Utils_Tuple2('DoubleVerticalBar', '∥'),
			_Utils_Tuple2('DownArrowBar', '⤓'),
			_Utils_Tuple2('downarrow', '↓'),
			_Utils_Tuple2('DownArrow', '↓'),
			_Utils_Tuple2('Downarrow', '⇓'),
			_Utils_Tuple2('DownArrowUpArrow', '⇵'),
			_Utils_Tuple2('DownBreve', '̑'),
			_Utils_Tuple2('downdownarrows', '⇊'),
			_Utils_Tuple2('downharpoonleft', '⇃'),
			_Utils_Tuple2('downharpoonright', '⇂'),
			_Utils_Tuple2('DownLeftRightVector', '⥐'),
			_Utils_Tuple2('DownLeftTeeVector', '⥞'),
			_Utils_Tuple2('DownLeftVectorBar', '⥖'),
			_Utils_Tuple2('DownLeftVector', '↽'),
			_Utils_Tuple2('DownRightTeeVector', '⥟'),
			_Utils_Tuple2('DownRightVectorBar', '⥗'),
			_Utils_Tuple2('DownRightVector', '⇁'),
			_Utils_Tuple2('DownTeeArrow', '↧'),
			_Utils_Tuple2('DownTee', '⊤'),
			_Utils_Tuple2('drbkarow', '⤐'),
			_Utils_Tuple2('drcorn', '⌟'),
			_Utils_Tuple2('drcrop', '⌌'),
			_Utils_Tuple2('Dscr', '\uD835\uDC9F'),
			_Utils_Tuple2('dscr', '\uD835\uDCB9'),
			_Utils_Tuple2('DScy', 'Ѕ'),
			_Utils_Tuple2('dscy', 'ѕ'),
			_Utils_Tuple2('dsol', '⧶'),
			_Utils_Tuple2('Dstrok', 'Đ'),
			_Utils_Tuple2('dstrok', 'đ'),
			_Utils_Tuple2('dtdot', '⋱'),
			_Utils_Tuple2('dtri', '▿'),
			_Utils_Tuple2('dtrif', '▾'),
			_Utils_Tuple2('duarr', '⇵'),
			_Utils_Tuple2('duhar', '⥯'),
			_Utils_Tuple2('dwangle', '⦦'),
			_Utils_Tuple2('DZcy', 'Џ'),
			_Utils_Tuple2('dzcy', 'џ'),
			_Utils_Tuple2('dzigrarr', '⟿'),
			_Utils_Tuple2('Eacute', 'É'),
			_Utils_Tuple2('eacute', 'é'),
			_Utils_Tuple2('easter', '⩮'),
			_Utils_Tuple2('Ecaron', 'Ě'),
			_Utils_Tuple2('ecaron', 'ě'),
			_Utils_Tuple2('Ecirc', 'Ê'),
			_Utils_Tuple2('ecirc', 'ê'),
			_Utils_Tuple2('ecir', '≖'),
			_Utils_Tuple2('ecolon', '≕'),
			_Utils_Tuple2('Ecy', 'Э'),
			_Utils_Tuple2('ecy', 'э'),
			_Utils_Tuple2('eDDot', '⩷'),
			_Utils_Tuple2('Edot', 'Ė'),
			_Utils_Tuple2('edot', 'ė'),
			_Utils_Tuple2('eDot', '≑'),
			_Utils_Tuple2('ee', 'ⅇ'),
			_Utils_Tuple2('efDot', '≒'),
			_Utils_Tuple2('Efr', '\uD835\uDD08'),
			_Utils_Tuple2('efr', '\uD835\uDD22'),
			_Utils_Tuple2('eg', '⪚'),
			_Utils_Tuple2('Egrave', 'È'),
			_Utils_Tuple2('egrave', 'è'),
			_Utils_Tuple2('egs', '⪖'),
			_Utils_Tuple2('egsdot', '⪘'),
			_Utils_Tuple2('el', '⪙'),
			_Utils_Tuple2('Element', '∈'),
			_Utils_Tuple2('elinters', '⏧'),
			_Utils_Tuple2('ell', 'ℓ'),
			_Utils_Tuple2('els', '⪕'),
			_Utils_Tuple2('elsdot', '⪗'),
			_Utils_Tuple2('Emacr', 'Ē'),
			_Utils_Tuple2('emacr', 'ē'),
			_Utils_Tuple2('empty', '∅'),
			_Utils_Tuple2('emptyset', '∅'),
			_Utils_Tuple2('EmptySmallSquare', '◻'),
			_Utils_Tuple2('emptyv', '∅'),
			_Utils_Tuple2('EmptyVerySmallSquare', '▫'),
			_Utils_Tuple2('emsp13', '\u2004'),
			_Utils_Tuple2('emsp14', '\u2005'),
			_Utils_Tuple2('emsp', '\u2003'),
			_Utils_Tuple2('ENG', 'Ŋ'),
			_Utils_Tuple2('eng', 'ŋ'),
			_Utils_Tuple2('ensp', '\u2002'),
			_Utils_Tuple2('Eogon', 'Ę'),
			_Utils_Tuple2('eogon', 'ę'),
			_Utils_Tuple2('Eopf', '\uD835\uDD3C'),
			_Utils_Tuple2('eopf', '\uD835\uDD56'),
			_Utils_Tuple2('epar', '⋕'),
			_Utils_Tuple2('eparsl', '⧣'),
			_Utils_Tuple2('eplus', '⩱'),
			_Utils_Tuple2('epsi', 'ε'),
			_Utils_Tuple2('Epsilon', 'Ε'),
			_Utils_Tuple2('epsilon', 'ε'),
			_Utils_Tuple2('epsiv', 'ϵ'),
			_Utils_Tuple2('eqcirc', '≖'),
			_Utils_Tuple2('eqcolon', '≕'),
			_Utils_Tuple2('eqsim', '≂'),
			_Utils_Tuple2('eqslantgtr', '⪖'),
			_Utils_Tuple2('eqslantless', '⪕'),
			_Utils_Tuple2('Equal', '⩵'),
			_Utils_Tuple2('equals', '='),
			_Utils_Tuple2('EqualTilde', '≂'),
			_Utils_Tuple2('equest', '≟'),
			_Utils_Tuple2('Equilibrium', '⇌'),
			_Utils_Tuple2('equiv', '≡'),
			_Utils_Tuple2('equivDD', '⩸'),
			_Utils_Tuple2('eqvparsl', '⧥'),
			_Utils_Tuple2('erarr', '⥱'),
			_Utils_Tuple2('erDot', '≓'),
			_Utils_Tuple2('escr', 'ℯ'),
			_Utils_Tuple2('Escr', 'ℰ'),
			_Utils_Tuple2('esdot', '≐'),
			_Utils_Tuple2('Esim', '⩳'),
			_Utils_Tuple2('esim', '≂'),
			_Utils_Tuple2('Eta', 'Η'),
			_Utils_Tuple2('eta', 'η'),
			_Utils_Tuple2('ETH', 'Ð'),
			_Utils_Tuple2('eth', 'ð'),
			_Utils_Tuple2('Euml', 'Ë'),
			_Utils_Tuple2('euml', 'ë'),
			_Utils_Tuple2('euro', '€'),
			_Utils_Tuple2('excl', '!'),
			_Utils_Tuple2('exist', '∃'),
			_Utils_Tuple2('Exists', '∃'),
			_Utils_Tuple2('expectation', 'ℰ'),
			_Utils_Tuple2('exponentiale', 'ⅇ'),
			_Utils_Tuple2('ExponentialE', 'ⅇ'),
			_Utils_Tuple2('fallingdotseq', '≒'),
			_Utils_Tuple2('Fcy', 'Ф'),
			_Utils_Tuple2('fcy', 'ф'),
			_Utils_Tuple2('female', '♀'),
			_Utils_Tuple2('ffilig', 'ﬃ'),
			_Utils_Tuple2('fflig', 'ﬀ'),
			_Utils_Tuple2('ffllig', 'ﬄ'),
			_Utils_Tuple2('Ffr', '\uD835\uDD09'),
			_Utils_Tuple2('ffr', '\uD835\uDD23'),
			_Utils_Tuple2('filig', 'ﬁ'),
			_Utils_Tuple2('FilledSmallSquare', '◼'),
			_Utils_Tuple2('FilledVerySmallSquare', '▪'),
			_Utils_Tuple2('fjlig', 'fj'),
			_Utils_Tuple2('flat', '♭'),
			_Utils_Tuple2('fllig', 'ﬂ'),
			_Utils_Tuple2('fltns', '▱'),
			_Utils_Tuple2('fnof', 'ƒ'),
			_Utils_Tuple2('Fopf', '\uD835\uDD3D'),
			_Utils_Tuple2('fopf', '\uD835\uDD57'),
			_Utils_Tuple2('forall', '∀'),
			_Utils_Tuple2('ForAll', '∀'),
			_Utils_Tuple2('fork', '⋔'),
			_Utils_Tuple2('forkv', '⫙'),
			_Utils_Tuple2('Fouriertrf', 'ℱ'),
			_Utils_Tuple2('fpartint', '⨍'),
			_Utils_Tuple2('frac12', '½'),
			_Utils_Tuple2('frac13', '⅓'),
			_Utils_Tuple2('frac14', '¼'),
			_Utils_Tuple2('frac15', '⅕'),
			_Utils_Tuple2('frac16', '⅙'),
			_Utils_Tuple2('frac18', '⅛'),
			_Utils_Tuple2('frac23', '⅔'),
			_Utils_Tuple2('frac25', '⅖'),
			_Utils_Tuple2('frac34', '¾'),
			_Utils_Tuple2('frac35', '⅗'),
			_Utils_Tuple2('frac38', '⅜'),
			_Utils_Tuple2('frac45', '⅘'),
			_Utils_Tuple2('frac56', '⅚'),
			_Utils_Tuple2('frac58', '⅝'),
			_Utils_Tuple2('frac78', '⅞'),
			_Utils_Tuple2('frasl', '⁄'),
			_Utils_Tuple2('frown', '⌢'),
			_Utils_Tuple2('fscr', '\uD835\uDCBB'),
			_Utils_Tuple2('Fscr', 'ℱ'),
			_Utils_Tuple2('gacute', 'ǵ'),
			_Utils_Tuple2('Gamma', 'Γ'),
			_Utils_Tuple2('gamma', 'γ'),
			_Utils_Tuple2('Gammad', 'Ϝ'),
			_Utils_Tuple2('gammad', 'ϝ'),
			_Utils_Tuple2('gap', '⪆'),
			_Utils_Tuple2('Gbreve', 'Ğ'),
			_Utils_Tuple2('gbreve', 'ğ'),
			_Utils_Tuple2('Gcedil', 'Ģ'),
			_Utils_Tuple2('Gcirc', 'Ĝ'),
			_Utils_Tuple2('gcirc', 'ĝ'),
			_Utils_Tuple2('Gcy', 'Г'),
			_Utils_Tuple2('gcy', 'г'),
			_Utils_Tuple2('Gdot', 'Ġ'),
			_Utils_Tuple2('gdot', 'ġ'),
			_Utils_Tuple2('ge', '≥'),
			_Utils_Tuple2('gE', '≧'),
			_Utils_Tuple2('gEl', '⪌'),
			_Utils_Tuple2('gel', '⋛'),
			_Utils_Tuple2('geq', '≥'),
			_Utils_Tuple2('geqq', '≧'),
			_Utils_Tuple2('geqslant', '⩾'),
			_Utils_Tuple2('gescc', '⪩'),
			_Utils_Tuple2('ges', '⩾'),
			_Utils_Tuple2('gesdot', '⪀'),
			_Utils_Tuple2('gesdoto', '⪂'),
			_Utils_Tuple2('gesdotol', '⪄'),
			_Utils_Tuple2('gesl', '⋛︀'),
			_Utils_Tuple2('gesles', '⪔'),
			_Utils_Tuple2('Gfr', '\uD835\uDD0A'),
			_Utils_Tuple2('gfr', '\uD835\uDD24'),
			_Utils_Tuple2('gg', '≫'),
			_Utils_Tuple2('Gg', '⋙'),
			_Utils_Tuple2('ggg', '⋙'),
			_Utils_Tuple2('gimel', 'ℷ'),
			_Utils_Tuple2('GJcy', 'Ѓ'),
			_Utils_Tuple2('gjcy', 'ѓ'),
			_Utils_Tuple2('gla', '⪥'),
			_Utils_Tuple2('gl', '≷'),
			_Utils_Tuple2('glE', '⪒'),
			_Utils_Tuple2('glj', '⪤'),
			_Utils_Tuple2('gnap', '⪊'),
			_Utils_Tuple2('gnapprox', '⪊'),
			_Utils_Tuple2('gne', '⪈'),
			_Utils_Tuple2('gnE', '≩'),
			_Utils_Tuple2('gneq', '⪈'),
			_Utils_Tuple2('gneqq', '≩'),
			_Utils_Tuple2('gnsim', '⋧'),
			_Utils_Tuple2('Gopf', '\uD835\uDD3E'),
			_Utils_Tuple2('gopf', '\uD835\uDD58'),
			_Utils_Tuple2('grave', '`'),
			_Utils_Tuple2('GreaterEqual', '≥'),
			_Utils_Tuple2('GreaterEqualLess', '⋛'),
			_Utils_Tuple2('GreaterFullEqual', '≧'),
			_Utils_Tuple2('GreaterGreater', '⪢'),
			_Utils_Tuple2('GreaterLess', '≷'),
			_Utils_Tuple2('GreaterSlantEqual', '⩾'),
			_Utils_Tuple2('GreaterTilde', '≳'),
			_Utils_Tuple2('Gscr', '\uD835\uDCA2'),
			_Utils_Tuple2('gscr', 'ℊ'),
			_Utils_Tuple2('gsim', '≳'),
			_Utils_Tuple2('gsime', '⪎'),
			_Utils_Tuple2('gsiml', '⪐'),
			_Utils_Tuple2('gtcc', '⪧'),
			_Utils_Tuple2('gtcir', '⩺'),
			_Utils_Tuple2('gt', '>'),
			_Utils_Tuple2('GT', '>'),
			_Utils_Tuple2('Gt', '≫'),
			_Utils_Tuple2('gtdot', '⋗'),
			_Utils_Tuple2('gtlPar', '⦕'),
			_Utils_Tuple2('gtquest', '⩼'),
			_Utils_Tuple2('gtrapprox', '⪆'),
			_Utils_Tuple2('gtrarr', '⥸'),
			_Utils_Tuple2('gtrdot', '⋗'),
			_Utils_Tuple2('gtreqless', '⋛'),
			_Utils_Tuple2('gtreqqless', '⪌'),
			_Utils_Tuple2('gtrless', '≷'),
			_Utils_Tuple2('gtrsim', '≳'),
			_Utils_Tuple2('gvertneqq', '≩︀'),
			_Utils_Tuple2('gvnE', '≩︀'),
			_Utils_Tuple2('Hacek', 'ˇ'),
			_Utils_Tuple2('hairsp', '\u200A'),
			_Utils_Tuple2('half', '½'),
			_Utils_Tuple2('hamilt', 'ℋ'),
			_Utils_Tuple2('HARDcy', 'Ъ'),
			_Utils_Tuple2('hardcy', 'ъ'),
			_Utils_Tuple2('harrcir', '⥈'),
			_Utils_Tuple2('harr', '↔'),
			_Utils_Tuple2('hArr', '⇔'),
			_Utils_Tuple2('harrw', '↭'),
			_Utils_Tuple2('Hat', '^'),
			_Utils_Tuple2('hbar', 'ℏ'),
			_Utils_Tuple2('Hcirc', 'Ĥ'),
			_Utils_Tuple2('hcirc', 'ĥ'),
			_Utils_Tuple2('hearts', '♥'),
			_Utils_Tuple2('heartsuit', '♥'),
			_Utils_Tuple2('hellip', '…'),
			_Utils_Tuple2('hercon', '⊹'),
			_Utils_Tuple2('hfr', '\uD835\uDD25'),
			_Utils_Tuple2('Hfr', 'ℌ'),
			_Utils_Tuple2('HilbertSpace', 'ℋ'),
			_Utils_Tuple2('hksearow', '⤥'),
			_Utils_Tuple2('hkswarow', '⤦'),
			_Utils_Tuple2('hoarr', '⇿'),
			_Utils_Tuple2('homtht', '∻'),
			_Utils_Tuple2('hookleftarrow', '↩'),
			_Utils_Tuple2('hookrightarrow', '↪'),
			_Utils_Tuple2('hopf', '\uD835\uDD59'),
			_Utils_Tuple2('Hopf', 'ℍ'),
			_Utils_Tuple2('horbar', '―'),
			_Utils_Tuple2('HorizontalLine', '─'),
			_Utils_Tuple2('hscr', '\uD835\uDCBD'),
			_Utils_Tuple2('Hscr', 'ℋ'),
			_Utils_Tuple2('hslash', 'ℏ'),
			_Utils_Tuple2('Hstrok', 'Ħ'),
			_Utils_Tuple2('hstrok', 'ħ'),
			_Utils_Tuple2('HumpDownHump', '≎'),
			_Utils_Tuple2('HumpEqual', '≏'),
			_Utils_Tuple2('hybull', '⁃'),
			_Utils_Tuple2('hyphen', '‐'),
			_Utils_Tuple2('Iacute', 'Í'),
			_Utils_Tuple2('iacute', 'í'),
			_Utils_Tuple2('ic', '\u2063'),
			_Utils_Tuple2('Icirc', 'Î'),
			_Utils_Tuple2('icirc', 'î'),
			_Utils_Tuple2('Icy', 'И'),
			_Utils_Tuple2('icy', 'и'),
			_Utils_Tuple2('Idot', 'İ'),
			_Utils_Tuple2('IEcy', 'Е'),
			_Utils_Tuple2('iecy', 'е'),
			_Utils_Tuple2('iexcl', '¡'),
			_Utils_Tuple2('iff', '⇔'),
			_Utils_Tuple2('ifr', '\uD835\uDD26'),
			_Utils_Tuple2('Ifr', 'ℑ'),
			_Utils_Tuple2('Igrave', 'Ì'),
			_Utils_Tuple2('igrave', 'ì'),
			_Utils_Tuple2('ii', 'ⅈ'),
			_Utils_Tuple2('iiiint', '⨌'),
			_Utils_Tuple2('iiint', '∭'),
			_Utils_Tuple2('iinfin', '⧜'),
			_Utils_Tuple2('iiota', '℩'),
			_Utils_Tuple2('IJlig', 'Ĳ'),
			_Utils_Tuple2('ijlig', 'ĳ'),
			_Utils_Tuple2('Imacr', 'Ī'),
			_Utils_Tuple2('imacr', 'ī'),
			_Utils_Tuple2('image', 'ℑ'),
			_Utils_Tuple2('ImaginaryI', 'ⅈ'),
			_Utils_Tuple2('imagline', 'ℐ'),
			_Utils_Tuple2('imagpart', 'ℑ'),
			_Utils_Tuple2('imath', 'ı'),
			_Utils_Tuple2('Im', 'ℑ'),
			_Utils_Tuple2('imof', '⊷'),
			_Utils_Tuple2('imped', 'Ƶ'),
			_Utils_Tuple2('Implies', '⇒'),
			_Utils_Tuple2('incare', '℅'),
			_Utils_Tuple2('in', '∈'),
			_Utils_Tuple2('infin', '∞'),
			_Utils_Tuple2('infintie', '⧝'),
			_Utils_Tuple2('inodot', 'ı'),
			_Utils_Tuple2('intcal', '⊺'),
			_Utils_Tuple2('int', '∫'),
			_Utils_Tuple2('Int', '∬'),
			_Utils_Tuple2('integers', 'ℤ'),
			_Utils_Tuple2('Integral', '∫'),
			_Utils_Tuple2('intercal', '⊺'),
			_Utils_Tuple2('Intersection', '⋂'),
			_Utils_Tuple2('intlarhk', '⨗'),
			_Utils_Tuple2('intprod', '⨼'),
			_Utils_Tuple2('InvisibleComma', '\u2063'),
			_Utils_Tuple2('InvisibleTimes', '\u2062'),
			_Utils_Tuple2('IOcy', 'Ё'),
			_Utils_Tuple2('iocy', 'ё'),
			_Utils_Tuple2('Iogon', 'Į'),
			_Utils_Tuple2('iogon', 'į'),
			_Utils_Tuple2('Iopf', '\uD835\uDD40'),
			_Utils_Tuple2('iopf', '\uD835\uDD5A'),
			_Utils_Tuple2('Iota', 'Ι'),
			_Utils_Tuple2('iota', 'ι'),
			_Utils_Tuple2('iprod', '⨼'),
			_Utils_Tuple2('iquest', '¿'),
			_Utils_Tuple2('iscr', '\uD835\uDCBE'),
			_Utils_Tuple2('Iscr', 'ℐ'),
			_Utils_Tuple2('isin', '∈'),
			_Utils_Tuple2('isindot', '⋵'),
			_Utils_Tuple2('isinE', '⋹'),
			_Utils_Tuple2('isins', '⋴'),
			_Utils_Tuple2('isinsv', '⋳'),
			_Utils_Tuple2('isinv', '∈'),
			_Utils_Tuple2('it', '\u2062'),
			_Utils_Tuple2('Itilde', 'Ĩ'),
			_Utils_Tuple2('itilde', 'ĩ'),
			_Utils_Tuple2('Iukcy', 'І'),
			_Utils_Tuple2('iukcy', 'і'),
			_Utils_Tuple2('Iuml', 'Ï'),
			_Utils_Tuple2('iuml', 'ï'),
			_Utils_Tuple2('Jcirc', 'Ĵ'),
			_Utils_Tuple2('jcirc', 'ĵ'),
			_Utils_Tuple2('Jcy', 'Й'),
			_Utils_Tuple2('jcy', 'й'),
			_Utils_Tuple2('Jfr', '\uD835\uDD0D'),
			_Utils_Tuple2('jfr', '\uD835\uDD27'),
			_Utils_Tuple2('jmath', 'ȷ'),
			_Utils_Tuple2('Jopf', '\uD835\uDD41'),
			_Utils_Tuple2('jopf', '\uD835\uDD5B'),
			_Utils_Tuple2('Jscr', '\uD835\uDCA5'),
			_Utils_Tuple2('jscr', '\uD835\uDCBF'),
			_Utils_Tuple2('Jsercy', 'Ј'),
			_Utils_Tuple2('jsercy', 'ј'),
			_Utils_Tuple2('Jukcy', 'Є'),
			_Utils_Tuple2('jukcy', 'є'),
			_Utils_Tuple2('Kappa', 'Κ'),
			_Utils_Tuple2('kappa', 'κ'),
			_Utils_Tuple2('kappav', 'ϰ'),
			_Utils_Tuple2('Kcedil', 'Ķ'),
			_Utils_Tuple2('kcedil', 'ķ'),
			_Utils_Tuple2('Kcy', 'К'),
			_Utils_Tuple2('kcy', 'к'),
			_Utils_Tuple2('Kfr', '\uD835\uDD0E'),
			_Utils_Tuple2('kfr', '\uD835\uDD28'),
			_Utils_Tuple2('kgreen', 'ĸ'),
			_Utils_Tuple2('KHcy', 'Х'),
			_Utils_Tuple2('khcy', 'х'),
			_Utils_Tuple2('KJcy', 'Ќ'),
			_Utils_Tuple2('kjcy', 'ќ'),
			_Utils_Tuple2('Kopf', '\uD835\uDD42'),
			_Utils_Tuple2('kopf', '\uD835\uDD5C'),
			_Utils_Tuple2('Kscr', '\uD835\uDCA6'),
			_Utils_Tuple2('kscr', '\uD835\uDCC0'),
			_Utils_Tuple2('lAarr', '⇚'),
			_Utils_Tuple2('Lacute', 'Ĺ'),
			_Utils_Tuple2('lacute', 'ĺ'),
			_Utils_Tuple2('laemptyv', '⦴'),
			_Utils_Tuple2('lagran', 'ℒ'),
			_Utils_Tuple2('Lambda', 'Λ'),
			_Utils_Tuple2('lambda', 'λ'),
			_Utils_Tuple2('lang', '⟨'),
			_Utils_Tuple2('Lang', '⟪'),
			_Utils_Tuple2('langd', '⦑'),
			_Utils_Tuple2('langle', '⟨'),
			_Utils_Tuple2('lap', '⪅'),
			_Utils_Tuple2('Laplacetrf', 'ℒ'),
			_Utils_Tuple2('laquo', '«'),
			_Utils_Tuple2('larrb', '⇤'),
			_Utils_Tuple2('larrbfs', '⤟'),
			_Utils_Tuple2('larr', '←'),
			_Utils_Tuple2('Larr', '↞'),
			_Utils_Tuple2('lArr', '⇐'),
			_Utils_Tuple2('larrfs', '⤝'),
			_Utils_Tuple2('larrhk', '↩'),
			_Utils_Tuple2('larrlp', '↫'),
			_Utils_Tuple2('larrpl', '⤹'),
			_Utils_Tuple2('larrsim', '⥳'),
			_Utils_Tuple2('larrtl', '↢'),
			_Utils_Tuple2('latail', '⤙'),
			_Utils_Tuple2('lAtail', '⤛'),
			_Utils_Tuple2('lat', '⪫'),
			_Utils_Tuple2('late', '⪭'),
			_Utils_Tuple2('lates', '⪭︀'),
			_Utils_Tuple2('lbarr', '⤌'),
			_Utils_Tuple2('lBarr', '⤎'),
			_Utils_Tuple2('lbbrk', '❲'),
			_Utils_Tuple2('lbrace', '{'),
			_Utils_Tuple2('lbrack', '['),
			_Utils_Tuple2('lbrke', '⦋'),
			_Utils_Tuple2('lbrksld', '⦏'),
			_Utils_Tuple2('lbrkslu', '⦍'),
			_Utils_Tuple2('Lcaron', 'Ľ'),
			_Utils_Tuple2('lcaron', 'ľ'),
			_Utils_Tuple2('Lcedil', 'Ļ'),
			_Utils_Tuple2('lcedil', 'ļ'),
			_Utils_Tuple2('lceil', '⌈'),
			_Utils_Tuple2('lcub', '{'),
			_Utils_Tuple2('Lcy', 'Л'),
			_Utils_Tuple2('lcy', 'л'),
			_Utils_Tuple2('ldca', '⤶'),
			_Utils_Tuple2('ldquo', '“'),
			_Utils_Tuple2('ldquor', '„'),
			_Utils_Tuple2('ldrdhar', '⥧'),
			_Utils_Tuple2('ldrushar', '⥋'),
			_Utils_Tuple2('ldsh', '↲'),
			_Utils_Tuple2('le', '≤'),
			_Utils_Tuple2('lE', '≦'),
			_Utils_Tuple2('LeftAngleBracket', '⟨'),
			_Utils_Tuple2('LeftArrowBar', '⇤'),
			_Utils_Tuple2('leftarrow', '←'),
			_Utils_Tuple2('LeftArrow', '←'),
			_Utils_Tuple2('Leftarrow', '⇐'),
			_Utils_Tuple2('LeftArrowRightArrow', '⇆'),
			_Utils_Tuple2('leftarrowtail', '↢'),
			_Utils_Tuple2('LeftCeiling', '⌈'),
			_Utils_Tuple2('LeftDoubleBracket', '⟦'),
			_Utils_Tuple2('LeftDownTeeVector', '⥡'),
			_Utils_Tuple2('LeftDownVectorBar', '⥙'),
			_Utils_Tuple2('LeftDownVector', '⇃'),
			_Utils_Tuple2('LeftFloor', '⌊'),
			_Utils_Tuple2('leftharpoondown', '↽'),
			_Utils_Tuple2('leftharpoonup', '↼'),
			_Utils_Tuple2('leftleftarrows', '⇇'),
			_Utils_Tuple2('leftrightarrow', '↔'),
			_Utils_Tuple2('LeftRightArrow', '↔'),
			_Utils_Tuple2('Leftrightarrow', '⇔'),
			_Utils_Tuple2('leftrightarrows', '⇆'),
			_Utils_Tuple2('leftrightharpoons', '⇋'),
			_Utils_Tuple2('leftrightsquigarrow', '↭'),
			_Utils_Tuple2('LeftRightVector', '⥎'),
			_Utils_Tuple2('LeftTeeArrow', '↤'),
			_Utils_Tuple2('LeftTee', '⊣'),
			_Utils_Tuple2('LeftTeeVector', '⥚'),
			_Utils_Tuple2('leftthreetimes', '⋋'),
			_Utils_Tuple2('LeftTriangleBar', '⧏'),
			_Utils_Tuple2('LeftTriangle', '⊲'),
			_Utils_Tuple2('LeftTriangleEqual', '⊴'),
			_Utils_Tuple2('LeftUpDownVector', '⥑'),
			_Utils_Tuple2('LeftUpTeeVector', '⥠'),
			_Utils_Tuple2('LeftUpVectorBar', '⥘'),
			_Utils_Tuple2('LeftUpVector', '↿'),
			_Utils_Tuple2('LeftVectorBar', '⥒'),
			_Utils_Tuple2('LeftVector', '↼'),
			_Utils_Tuple2('lEg', '⪋'),
			_Utils_Tuple2('leg', '⋚'),
			_Utils_Tuple2('leq', '≤'),
			_Utils_Tuple2('leqq', '≦'),
			_Utils_Tuple2('leqslant', '⩽'),
			_Utils_Tuple2('lescc', '⪨'),
			_Utils_Tuple2('les', '⩽'),
			_Utils_Tuple2('lesdot', '⩿'),
			_Utils_Tuple2('lesdoto', '⪁'),
			_Utils_Tuple2('lesdotor', '⪃'),
			_Utils_Tuple2('lesg', '⋚︀'),
			_Utils_Tuple2('lesges', '⪓'),
			_Utils_Tuple2('lessapprox', '⪅'),
			_Utils_Tuple2('lessdot', '⋖'),
			_Utils_Tuple2('lesseqgtr', '⋚'),
			_Utils_Tuple2('lesseqqgtr', '⪋'),
			_Utils_Tuple2('LessEqualGreater', '⋚'),
			_Utils_Tuple2('LessFullEqual', '≦'),
			_Utils_Tuple2('LessGreater', '≶'),
			_Utils_Tuple2('lessgtr', '≶'),
			_Utils_Tuple2('LessLess', '⪡'),
			_Utils_Tuple2('lesssim', '≲'),
			_Utils_Tuple2('LessSlantEqual', '⩽'),
			_Utils_Tuple2('LessTilde', '≲'),
			_Utils_Tuple2('lfisht', '⥼'),
			_Utils_Tuple2('lfloor', '⌊'),
			_Utils_Tuple2('Lfr', '\uD835\uDD0F'),
			_Utils_Tuple2('lfr', '\uD835\uDD29'),
			_Utils_Tuple2('lg', '≶'),
			_Utils_Tuple2('lgE', '⪑'),
			_Utils_Tuple2('lHar', '⥢'),
			_Utils_Tuple2('lhard', '↽'),
			_Utils_Tuple2('lharu', '↼'),
			_Utils_Tuple2('lharul', '⥪'),
			_Utils_Tuple2('lhblk', '▄'),
			_Utils_Tuple2('LJcy', 'Љ'),
			_Utils_Tuple2('ljcy', 'љ'),
			_Utils_Tuple2('llarr', '⇇'),
			_Utils_Tuple2('ll', '≪'),
			_Utils_Tuple2('Ll', '⋘'),
			_Utils_Tuple2('llcorner', '⌞'),
			_Utils_Tuple2('Lleftarrow', '⇚'),
			_Utils_Tuple2('llhard', '⥫'),
			_Utils_Tuple2('lltri', '◺'),
			_Utils_Tuple2('Lmidot', 'Ŀ'),
			_Utils_Tuple2('lmidot', 'ŀ'),
			_Utils_Tuple2('lmoustache', '⎰'),
			_Utils_Tuple2('lmoust', '⎰'),
			_Utils_Tuple2('lnap', '⪉'),
			_Utils_Tuple2('lnapprox', '⪉'),
			_Utils_Tuple2('lne', '⪇'),
			_Utils_Tuple2('lnE', '≨'),
			_Utils_Tuple2('lneq', '⪇'),
			_Utils_Tuple2('lneqq', '≨'),
			_Utils_Tuple2('lnsim', '⋦'),
			_Utils_Tuple2('loang', '⟬'),
			_Utils_Tuple2('loarr', '⇽'),
			_Utils_Tuple2('lobrk', '⟦'),
			_Utils_Tuple2('longleftarrow', '⟵'),
			_Utils_Tuple2('LongLeftArrow', '⟵'),
			_Utils_Tuple2('Longleftarrow', '⟸'),
			_Utils_Tuple2('longleftrightarrow', '⟷'),
			_Utils_Tuple2('LongLeftRightArrow', '⟷'),
			_Utils_Tuple2('Longleftrightarrow', '⟺'),
			_Utils_Tuple2('longmapsto', '⟼'),
			_Utils_Tuple2('longrightarrow', '⟶'),
			_Utils_Tuple2('LongRightArrow', '⟶'),
			_Utils_Tuple2('Longrightarrow', '⟹'),
			_Utils_Tuple2('looparrowleft', '↫'),
			_Utils_Tuple2('looparrowright', '↬'),
			_Utils_Tuple2('lopar', '⦅'),
			_Utils_Tuple2('Lopf', '\uD835\uDD43'),
			_Utils_Tuple2('lopf', '\uD835\uDD5D'),
			_Utils_Tuple2('loplus', '⨭'),
			_Utils_Tuple2('lotimes', '⨴'),
			_Utils_Tuple2('lowast', '∗'),
			_Utils_Tuple2('lowbar', '_'),
			_Utils_Tuple2('LowerLeftArrow', '↙'),
			_Utils_Tuple2('LowerRightArrow', '↘'),
			_Utils_Tuple2('loz', '◊'),
			_Utils_Tuple2('lozenge', '◊'),
			_Utils_Tuple2('lozf', '⧫'),
			_Utils_Tuple2('lpar', '('),
			_Utils_Tuple2('lparlt', '⦓'),
			_Utils_Tuple2('lrarr', '⇆'),
			_Utils_Tuple2('lrcorner', '⌟'),
			_Utils_Tuple2('lrhar', '⇋'),
			_Utils_Tuple2('lrhard', '⥭'),
			_Utils_Tuple2('lrm', '\u200E'),
			_Utils_Tuple2('lrtri', '⊿'),
			_Utils_Tuple2('lsaquo', '‹'),
			_Utils_Tuple2('lscr', '\uD835\uDCC1'),
			_Utils_Tuple2('Lscr', 'ℒ'),
			_Utils_Tuple2('lsh', '↰'),
			_Utils_Tuple2('Lsh', '↰'),
			_Utils_Tuple2('lsim', '≲'),
			_Utils_Tuple2('lsime', '⪍'),
			_Utils_Tuple2('lsimg', '⪏'),
			_Utils_Tuple2('lsqb', '['),
			_Utils_Tuple2('lsquo', '‘'),
			_Utils_Tuple2('lsquor', '‚'),
			_Utils_Tuple2('Lstrok', 'Ł'),
			_Utils_Tuple2('lstrok', 'ł'),
			_Utils_Tuple2('ltcc', '⪦'),
			_Utils_Tuple2('ltcir', '⩹'),
			_Utils_Tuple2('lt', '<'),
			_Utils_Tuple2('LT', '<'),
			_Utils_Tuple2('Lt', '≪'),
			_Utils_Tuple2('ltdot', '⋖'),
			_Utils_Tuple2('lthree', '⋋'),
			_Utils_Tuple2('ltimes', '⋉'),
			_Utils_Tuple2('ltlarr', '⥶'),
			_Utils_Tuple2('ltquest', '⩻'),
			_Utils_Tuple2('ltri', '◃'),
			_Utils_Tuple2('ltrie', '⊴'),
			_Utils_Tuple2('ltrif', '◂'),
			_Utils_Tuple2('ltrPar', '⦖'),
			_Utils_Tuple2('lurdshar', '⥊'),
			_Utils_Tuple2('luruhar', '⥦'),
			_Utils_Tuple2('lvertneqq', '≨︀'),
			_Utils_Tuple2('lvnE', '≨︀'),
			_Utils_Tuple2('macr', '¯'),
			_Utils_Tuple2('male', '♂'),
			_Utils_Tuple2('malt', '✠'),
			_Utils_Tuple2('maltese', '✠'),
			_Utils_Tuple2('Map', '⤅'),
			_Utils_Tuple2('map', '↦'),
			_Utils_Tuple2('mapsto', '↦'),
			_Utils_Tuple2('mapstodown', '↧'),
			_Utils_Tuple2('mapstoleft', '↤'),
			_Utils_Tuple2('mapstoup', '↥'),
			_Utils_Tuple2('marker', '▮'),
			_Utils_Tuple2('mcomma', '⨩'),
			_Utils_Tuple2('Mcy', 'М'),
			_Utils_Tuple2('mcy', 'м'),
			_Utils_Tuple2('mdash', '—'),
			_Utils_Tuple2('mDDot', '∺'),
			_Utils_Tuple2('measuredangle', '∡'),
			_Utils_Tuple2('MediumSpace', '\u205F'),
			_Utils_Tuple2('Mellintrf', 'ℳ'),
			_Utils_Tuple2('Mfr', '\uD835\uDD10'),
			_Utils_Tuple2('mfr', '\uD835\uDD2A'),
			_Utils_Tuple2('mho', '℧'),
			_Utils_Tuple2('micro', 'µ'),
			_Utils_Tuple2('midast', '*'),
			_Utils_Tuple2('midcir', '⫰'),
			_Utils_Tuple2('mid', '∣'),
			_Utils_Tuple2('middot', '·'),
			_Utils_Tuple2('minusb', '⊟'),
			_Utils_Tuple2('minus', '−'),
			_Utils_Tuple2('minusd', '∸'),
			_Utils_Tuple2('minusdu', '⨪'),
			_Utils_Tuple2('MinusPlus', '∓'),
			_Utils_Tuple2('mlcp', '⫛'),
			_Utils_Tuple2('mldr', '…'),
			_Utils_Tuple2('mnplus', '∓'),
			_Utils_Tuple2('models', '⊧'),
			_Utils_Tuple2('Mopf', '\uD835\uDD44'),
			_Utils_Tuple2('mopf', '\uD835\uDD5E'),
			_Utils_Tuple2('mp', '∓'),
			_Utils_Tuple2('mscr', '\uD835\uDCC2'),
			_Utils_Tuple2('Mscr', 'ℳ'),
			_Utils_Tuple2('mstpos', '∾'),
			_Utils_Tuple2('Mu', 'Μ'),
			_Utils_Tuple2('mu', 'μ'),
			_Utils_Tuple2('multimap', '⊸'),
			_Utils_Tuple2('mumap', '⊸'),
			_Utils_Tuple2('nabla', '∇'),
			_Utils_Tuple2('Nacute', 'Ń'),
			_Utils_Tuple2('nacute', 'ń'),
			_Utils_Tuple2('nang', '∠⃒'),
			_Utils_Tuple2('nap', '≉'),
			_Utils_Tuple2('napE', '⩰̸'),
			_Utils_Tuple2('napid', '≋̸'),
			_Utils_Tuple2('napos', 'ŉ'),
			_Utils_Tuple2('napprox', '≉'),
			_Utils_Tuple2('natural', '♮'),
			_Utils_Tuple2('naturals', 'ℕ'),
			_Utils_Tuple2('natur', '♮'),
			_Utils_Tuple2('nbsp', '\u00A0'),
			_Utils_Tuple2('nbump', '≎̸'),
			_Utils_Tuple2('nbumpe', '≏̸'),
			_Utils_Tuple2('ncap', '⩃'),
			_Utils_Tuple2('Ncaron', 'Ň'),
			_Utils_Tuple2('ncaron', 'ň'),
			_Utils_Tuple2('Ncedil', 'Ņ'),
			_Utils_Tuple2('ncedil', 'ņ'),
			_Utils_Tuple2('ncong', '≇'),
			_Utils_Tuple2('ncongdot', '⩭̸'),
			_Utils_Tuple2('ncup', '⩂'),
			_Utils_Tuple2('Ncy', 'Н'),
			_Utils_Tuple2('ncy', 'н'),
			_Utils_Tuple2('ndash', '–'),
			_Utils_Tuple2('nearhk', '⤤'),
			_Utils_Tuple2('nearr', '↗'),
			_Utils_Tuple2('neArr', '⇗'),
			_Utils_Tuple2('nearrow', '↗'),
			_Utils_Tuple2('ne', '≠'),
			_Utils_Tuple2('nedot', '≐̸'),
			_Utils_Tuple2('NegativeMediumSpace', '\u200B'),
			_Utils_Tuple2('NegativeThickSpace', '\u200B'),
			_Utils_Tuple2('NegativeThinSpace', '\u200B'),
			_Utils_Tuple2('NegativeVeryThinSpace', '\u200B'),
			_Utils_Tuple2('nequiv', '≢'),
			_Utils_Tuple2('nesear', '⤨'),
			_Utils_Tuple2('nesim', '≂̸'),
			_Utils_Tuple2('NestedGreaterGreater', '≫'),
			_Utils_Tuple2('NestedLessLess', '≪'),
			_Utils_Tuple2('NewLine', '\n'),
			_Utils_Tuple2('nexist', '∄'),
			_Utils_Tuple2('nexists', '∄'),
			_Utils_Tuple2('Nfr', '\uD835\uDD11'),
			_Utils_Tuple2('nfr', '\uD835\uDD2B'),
			_Utils_Tuple2('ngE', '≧̸'),
			_Utils_Tuple2('nge', '≱'),
			_Utils_Tuple2('ngeq', '≱'),
			_Utils_Tuple2('ngeqq', '≧̸'),
			_Utils_Tuple2('ngeqslant', '⩾̸'),
			_Utils_Tuple2('nges', '⩾̸'),
			_Utils_Tuple2('nGg', '⋙̸'),
			_Utils_Tuple2('ngsim', '≵'),
			_Utils_Tuple2('nGt', '≫⃒'),
			_Utils_Tuple2('ngt', '≯'),
			_Utils_Tuple2('ngtr', '≯'),
			_Utils_Tuple2('nGtv', '≫̸'),
			_Utils_Tuple2('nharr', '↮'),
			_Utils_Tuple2('nhArr', '⇎'),
			_Utils_Tuple2('nhpar', '⫲'),
			_Utils_Tuple2('ni', '∋'),
			_Utils_Tuple2('nis', '⋼'),
			_Utils_Tuple2('nisd', '⋺'),
			_Utils_Tuple2('niv', '∋'),
			_Utils_Tuple2('NJcy', 'Њ'),
			_Utils_Tuple2('njcy', 'њ'),
			_Utils_Tuple2('nlarr', '↚'),
			_Utils_Tuple2('nlArr', '⇍'),
			_Utils_Tuple2('nldr', '‥'),
			_Utils_Tuple2('nlE', '≦̸'),
			_Utils_Tuple2('nle', '≰'),
			_Utils_Tuple2('nleftarrow', '↚'),
			_Utils_Tuple2('nLeftarrow', '⇍'),
			_Utils_Tuple2('nleftrightarrow', '↮'),
			_Utils_Tuple2('nLeftrightarrow', '⇎'),
			_Utils_Tuple2('nleq', '≰'),
			_Utils_Tuple2('nleqq', '≦̸'),
			_Utils_Tuple2('nleqslant', '⩽̸'),
			_Utils_Tuple2('nles', '⩽̸'),
			_Utils_Tuple2('nless', '≮'),
			_Utils_Tuple2('nLl', '⋘̸'),
			_Utils_Tuple2('nlsim', '≴'),
			_Utils_Tuple2('nLt', '≪⃒'),
			_Utils_Tuple2('nlt', '≮'),
			_Utils_Tuple2('nltri', '⋪'),
			_Utils_Tuple2('nltrie', '⋬'),
			_Utils_Tuple2('nLtv', '≪̸'),
			_Utils_Tuple2('nmid', '∤'),
			_Utils_Tuple2('NoBreak', '\u2060'),
			_Utils_Tuple2('NonBreakingSpace', '\u00A0'),
			_Utils_Tuple2('nopf', '\uD835\uDD5F'),
			_Utils_Tuple2('Nopf', 'ℕ'),
			_Utils_Tuple2('Not', '⫬'),
			_Utils_Tuple2('not', '¬'),
			_Utils_Tuple2('NotCongruent', '≢'),
			_Utils_Tuple2('NotCupCap', '≭'),
			_Utils_Tuple2('NotDoubleVerticalBar', '∦'),
			_Utils_Tuple2('NotElement', '∉'),
			_Utils_Tuple2('NotEqual', '≠'),
			_Utils_Tuple2('NotEqualTilde', '≂̸'),
			_Utils_Tuple2('NotExists', '∄'),
			_Utils_Tuple2('NotGreater', '≯'),
			_Utils_Tuple2('NotGreaterEqual', '≱'),
			_Utils_Tuple2('NotGreaterFullEqual', '≧̸'),
			_Utils_Tuple2('NotGreaterGreater', '≫̸'),
			_Utils_Tuple2('NotGreaterLess', '≹'),
			_Utils_Tuple2('NotGreaterSlantEqual', '⩾̸'),
			_Utils_Tuple2('NotGreaterTilde', '≵'),
			_Utils_Tuple2('NotHumpDownHump', '≎̸'),
			_Utils_Tuple2('NotHumpEqual', '≏̸'),
			_Utils_Tuple2('notin', '∉'),
			_Utils_Tuple2('notindot', '⋵̸'),
			_Utils_Tuple2('notinE', '⋹̸'),
			_Utils_Tuple2('notinva', '∉'),
			_Utils_Tuple2('notinvb', '⋷'),
			_Utils_Tuple2('notinvc', '⋶'),
			_Utils_Tuple2('NotLeftTriangleBar', '⧏̸'),
			_Utils_Tuple2('NotLeftTriangle', '⋪'),
			_Utils_Tuple2('NotLeftTriangleEqual', '⋬'),
			_Utils_Tuple2('NotLess', '≮'),
			_Utils_Tuple2('NotLessEqual', '≰'),
			_Utils_Tuple2('NotLessGreater', '≸'),
			_Utils_Tuple2('NotLessLess', '≪̸'),
			_Utils_Tuple2('NotLessSlantEqual', '⩽̸'),
			_Utils_Tuple2('NotLessTilde', '≴'),
			_Utils_Tuple2('NotNestedGreaterGreater', '⪢̸'),
			_Utils_Tuple2('NotNestedLessLess', '⪡̸'),
			_Utils_Tuple2('notni', '∌'),
			_Utils_Tuple2('notniva', '∌'),
			_Utils_Tuple2('notnivb', '⋾'),
			_Utils_Tuple2('notnivc', '⋽'),
			_Utils_Tuple2('NotPrecedes', '⊀'),
			_Utils_Tuple2('NotPrecedesEqual', '⪯̸'),
			_Utils_Tuple2('NotPrecedesSlantEqual', '⋠'),
			_Utils_Tuple2('NotReverseElement', '∌'),
			_Utils_Tuple2('NotRightTriangleBar', '⧐̸'),
			_Utils_Tuple2('NotRightTriangle', '⋫'),
			_Utils_Tuple2('NotRightTriangleEqual', '⋭'),
			_Utils_Tuple2('NotSquareSubset', '⊏̸'),
			_Utils_Tuple2('NotSquareSubsetEqual', '⋢'),
			_Utils_Tuple2('NotSquareSuperset', '⊐̸'),
			_Utils_Tuple2('NotSquareSupersetEqual', '⋣'),
			_Utils_Tuple2('NotSubset', '⊂⃒'),
			_Utils_Tuple2('NotSubsetEqual', '⊈'),
			_Utils_Tuple2('NotSucceeds', '⊁'),
			_Utils_Tuple2('NotSucceedsEqual', '⪰̸'),
			_Utils_Tuple2('NotSucceedsSlantEqual', '⋡'),
			_Utils_Tuple2('NotSucceedsTilde', '≿̸'),
			_Utils_Tuple2('NotSuperset', '⊃⃒'),
			_Utils_Tuple2('NotSupersetEqual', '⊉'),
			_Utils_Tuple2('NotTilde', '≁'),
			_Utils_Tuple2('NotTildeEqual', '≄'),
			_Utils_Tuple2('NotTildeFullEqual', '≇'),
			_Utils_Tuple2('NotTildeTilde', '≉'),
			_Utils_Tuple2('NotVerticalBar', '∤'),
			_Utils_Tuple2('nparallel', '∦'),
			_Utils_Tuple2('npar', '∦'),
			_Utils_Tuple2('nparsl', '⫽⃥'),
			_Utils_Tuple2('npart', '∂̸'),
			_Utils_Tuple2('npolint', '⨔'),
			_Utils_Tuple2('npr', '⊀'),
			_Utils_Tuple2('nprcue', '⋠'),
			_Utils_Tuple2('nprec', '⊀'),
			_Utils_Tuple2('npreceq', '⪯̸'),
			_Utils_Tuple2('npre', '⪯̸'),
			_Utils_Tuple2('nrarrc', '⤳̸'),
			_Utils_Tuple2('nrarr', '↛'),
			_Utils_Tuple2('nrArr', '⇏'),
			_Utils_Tuple2('nrarrw', '↝̸'),
			_Utils_Tuple2('nrightarrow', '↛'),
			_Utils_Tuple2('nRightarrow', '⇏'),
			_Utils_Tuple2('nrtri', '⋫'),
			_Utils_Tuple2('nrtrie', '⋭'),
			_Utils_Tuple2('nsc', '⊁'),
			_Utils_Tuple2('nsccue', '⋡'),
			_Utils_Tuple2('nsce', '⪰̸'),
			_Utils_Tuple2('Nscr', '\uD835\uDCA9'),
			_Utils_Tuple2('nscr', '\uD835\uDCC3'),
			_Utils_Tuple2('nshortmid', '∤'),
			_Utils_Tuple2('nshortparallel', '∦'),
			_Utils_Tuple2('nsim', '≁'),
			_Utils_Tuple2('nsime', '≄'),
			_Utils_Tuple2('nsimeq', '≄'),
			_Utils_Tuple2('nsmid', '∤'),
			_Utils_Tuple2('nspar', '∦'),
			_Utils_Tuple2('nsqsube', '⋢'),
			_Utils_Tuple2('nsqsupe', '⋣'),
			_Utils_Tuple2('nsub', '⊄'),
			_Utils_Tuple2('nsubE', '⫅̸'),
			_Utils_Tuple2('nsube', '⊈'),
			_Utils_Tuple2('nsubset', '⊂⃒'),
			_Utils_Tuple2('nsubseteq', '⊈'),
			_Utils_Tuple2('nsubseteqq', '⫅̸'),
			_Utils_Tuple2('nsucc', '⊁'),
			_Utils_Tuple2('nsucceq', '⪰̸'),
			_Utils_Tuple2('nsup', '⊅'),
			_Utils_Tuple2('nsupE', '⫆̸'),
			_Utils_Tuple2('nsupe', '⊉'),
			_Utils_Tuple2('nsupset', '⊃⃒'),
			_Utils_Tuple2('nsupseteq', '⊉'),
			_Utils_Tuple2('nsupseteqq', '⫆̸'),
			_Utils_Tuple2('ntgl', '≹'),
			_Utils_Tuple2('Ntilde', 'Ñ'),
			_Utils_Tuple2('ntilde', 'ñ'),
			_Utils_Tuple2('ntlg', '≸'),
			_Utils_Tuple2('ntriangleleft', '⋪'),
			_Utils_Tuple2('ntrianglelefteq', '⋬'),
			_Utils_Tuple2('ntriangleright', '⋫'),
			_Utils_Tuple2('ntrianglerighteq', '⋭'),
			_Utils_Tuple2('Nu', 'Ν'),
			_Utils_Tuple2('nu', 'ν'),
			_Utils_Tuple2('num', '#'),
			_Utils_Tuple2('numero', '№'),
			_Utils_Tuple2('numsp', '\u2007'),
			_Utils_Tuple2('nvap', '≍⃒'),
			_Utils_Tuple2('nvdash', '⊬'),
			_Utils_Tuple2('nvDash', '⊭'),
			_Utils_Tuple2('nVdash', '⊮'),
			_Utils_Tuple2('nVDash', '⊯'),
			_Utils_Tuple2('nvge', '≥⃒'),
			_Utils_Tuple2('nvgt', '>⃒'),
			_Utils_Tuple2('nvHarr', '⤄'),
			_Utils_Tuple2('nvinfin', '⧞'),
			_Utils_Tuple2('nvlArr', '⤂'),
			_Utils_Tuple2('nvle', '≤⃒'),
			_Utils_Tuple2('nvlt', '<⃒'),
			_Utils_Tuple2('nvltrie', '⊴⃒'),
			_Utils_Tuple2('nvrArr', '⤃'),
			_Utils_Tuple2('nvrtrie', '⊵⃒'),
			_Utils_Tuple2('nvsim', '∼⃒'),
			_Utils_Tuple2('nwarhk', '⤣'),
			_Utils_Tuple2('nwarr', '↖'),
			_Utils_Tuple2('nwArr', '⇖'),
			_Utils_Tuple2('nwarrow', '↖'),
			_Utils_Tuple2('nwnear', '⤧'),
			_Utils_Tuple2('Oacute', 'Ó'),
			_Utils_Tuple2('oacute', 'ó'),
			_Utils_Tuple2('oast', '⊛'),
			_Utils_Tuple2('Ocirc', 'Ô'),
			_Utils_Tuple2('ocirc', 'ô'),
			_Utils_Tuple2('ocir', '⊚'),
			_Utils_Tuple2('Ocy', 'О'),
			_Utils_Tuple2('ocy', 'о'),
			_Utils_Tuple2('odash', '⊝'),
			_Utils_Tuple2('Odblac', 'Ő'),
			_Utils_Tuple2('odblac', 'ő'),
			_Utils_Tuple2('odiv', '⨸'),
			_Utils_Tuple2('odot', '⊙'),
			_Utils_Tuple2('odsold', '⦼'),
			_Utils_Tuple2('OElig', 'Œ'),
			_Utils_Tuple2('oelig', 'œ'),
			_Utils_Tuple2('ofcir', '⦿'),
			_Utils_Tuple2('Ofr', '\uD835\uDD12'),
			_Utils_Tuple2('ofr', '\uD835\uDD2C'),
			_Utils_Tuple2('ogon', '˛'),
			_Utils_Tuple2('Ograve', 'Ò'),
			_Utils_Tuple2('ograve', 'ò'),
			_Utils_Tuple2('ogt', '⧁'),
			_Utils_Tuple2('ohbar', '⦵'),
			_Utils_Tuple2('ohm', 'Ω'),
			_Utils_Tuple2('oint', '∮'),
			_Utils_Tuple2('olarr', '↺'),
			_Utils_Tuple2('olcir', '⦾'),
			_Utils_Tuple2('olcross', '⦻'),
			_Utils_Tuple2('oline', '‾'),
			_Utils_Tuple2('olt', '⧀'),
			_Utils_Tuple2('Omacr', 'Ō'),
			_Utils_Tuple2('omacr', 'ō'),
			_Utils_Tuple2('Omega', 'Ω'),
			_Utils_Tuple2('omega', 'ω'),
			_Utils_Tuple2('Omicron', 'Ο'),
			_Utils_Tuple2('omicron', 'ο'),
			_Utils_Tuple2('omid', '⦶'),
			_Utils_Tuple2('ominus', '⊖'),
			_Utils_Tuple2('Oopf', '\uD835\uDD46'),
			_Utils_Tuple2('oopf', '\uD835\uDD60'),
			_Utils_Tuple2('opar', '⦷'),
			_Utils_Tuple2('OpenCurlyDoubleQuote', '“'),
			_Utils_Tuple2('OpenCurlyQuote', '‘'),
			_Utils_Tuple2('operp', '⦹'),
			_Utils_Tuple2('oplus', '⊕'),
			_Utils_Tuple2('orarr', '↻'),
			_Utils_Tuple2('Or', '⩔'),
			_Utils_Tuple2('or', '∨'),
			_Utils_Tuple2('ord', '⩝'),
			_Utils_Tuple2('order', 'ℴ'),
			_Utils_Tuple2('orderof', 'ℴ'),
			_Utils_Tuple2('ordf', 'ª'),
			_Utils_Tuple2('ordm', 'º'),
			_Utils_Tuple2('origof', '⊶'),
			_Utils_Tuple2('oror', '⩖'),
			_Utils_Tuple2('orslope', '⩗'),
			_Utils_Tuple2('orv', '⩛'),
			_Utils_Tuple2('oS', 'Ⓢ'),
			_Utils_Tuple2('Oscr', '\uD835\uDCAA'),
			_Utils_Tuple2('oscr', 'ℴ'),
			_Utils_Tuple2('Oslash', 'Ø'),
			_Utils_Tuple2('oslash', 'ø'),
			_Utils_Tuple2('osol', '⊘'),
			_Utils_Tuple2('Otilde', 'Õ'),
			_Utils_Tuple2('otilde', 'õ'),
			_Utils_Tuple2('otimesas', '⨶'),
			_Utils_Tuple2('Otimes', '⨷'),
			_Utils_Tuple2('otimes', '⊗'),
			_Utils_Tuple2('Ouml', 'Ö'),
			_Utils_Tuple2('ouml', 'ö'),
			_Utils_Tuple2('ovbar', '⌽'),
			_Utils_Tuple2('OverBar', '‾'),
			_Utils_Tuple2('OverBrace', '⏞'),
			_Utils_Tuple2('OverBracket', '⎴'),
			_Utils_Tuple2('OverParenthesis', '⏜'),
			_Utils_Tuple2('para', '¶'),
			_Utils_Tuple2('parallel', '∥'),
			_Utils_Tuple2('par', '∥'),
			_Utils_Tuple2('parsim', '⫳'),
			_Utils_Tuple2('parsl', '⫽'),
			_Utils_Tuple2('part', '∂'),
			_Utils_Tuple2('PartialD', '∂'),
			_Utils_Tuple2('Pcy', 'П'),
			_Utils_Tuple2('pcy', 'п'),
			_Utils_Tuple2('percnt', '%'),
			_Utils_Tuple2('period', '.'),
			_Utils_Tuple2('permil', '‰'),
			_Utils_Tuple2('perp', '⊥'),
			_Utils_Tuple2('pertenk', '‱'),
			_Utils_Tuple2('Pfr', '\uD835\uDD13'),
			_Utils_Tuple2('pfr', '\uD835\uDD2D'),
			_Utils_Tuple2('Phi', 'Φ'),
			_Utils_Tuple2('phi', 'φ'),
			_Utils_Tuple2('phiv', 'ϕ'),
			_Utils_Tuple2('phmmat', 'ℳ'),
			_Utils_Tuple2('phone', '☎'),
			_Utils_Tuple2('Pi', 'Π'),
			_Utils_Tuple2('pi', 'π'),
			_Utils_Tuple2('pitchfork', '⋔'),
			_Utils_Tuple2('piv', 'ϖ'),
			_Utils_Tuple2('planck', 'ℏ'),
			_Utils_Tuple2('planckh', 'ℎ'),
			_Utils_Tuple2('plankv', 'ℏ'),
			_Utils_Tuple2('plusacir', '⨣'),
			_Utils_Tuple2('plusb', '⊞'),
			_Utils_Tuple2('pluscir', '⨢'),
			_Utils_Tuple2('plus', '+'),
			_Utils_Tuple2('plusdo', '∔'),
			_Utils_Tuple2('plusdu', '⨥'),
			_Utils_Tuple2('pluse', '⩲'),
			_Utils_Tuple2('PlusMinus', '±'),
			_Utils_Tuple2('plusmn', '±'),
			_Utils_Tuple2('plussim', '⨦'),
			_Utils_Tuple2('plustwo', '⨧'),
			_Utils_Tuple2('pm', '±'),
			_Utils_Tuple2('Poincareplane', 'ℌ'),
			_Utils_Tuple2('pointint', '⨕'),
			_Utils_Tuple2('popf', '\uD835\uDD61'),
			_Utils_Tuple2('Popf', 'ℙ'),
			_Utils_Tuple2('pound', '£'),
			_Utils_Tuple2('prap', '⪷'),
			_Utils_Tuple2('Pr', '⪻'),
			_Utils_Tuple2('pr', '≺'),
			_Utils_Tuple2('prcue', '≼'),
			_Utils_Tuple2('precapprox', '⪷'),
			_Utils_Tuple2('prec', '≺'),
			_Utils_Tuple2('preccurlyeq', '≼'),
			_Utils_Tuple2('Precedes', '≺'),
			_Utils_Tuple2('PrecedesEqual', '⪯'),
			_Utils_Tuple2('PrecedesSlantEqual', '≼'),
			_Utils_Tuple2('PrecedesTilde', '≾'),
			_Utils_Tuple2('preceq', '⪯'),
			_Utils_Tuple2('precnapprox', '⪹'),
			_Utils_Tuple2('precneqq', '⪵'),
			_Utils_Tuple2('precnsim', '⋨'),
			_Utils_Tuple2('pre', '⪯'),
			_Utils_Tuple2('prE', '⪳'),
			_Utils_Tuple2('precsim', '≾'),
			_Utils_Tuple2('prime', '′'),
			_Utils_Tuple2('Prime', '″'),
			_Utils_Tuple2('primes', 'ℙ'),
			_Utils_Tuple2('prnap', '⪹'),
			_Utils_Tuple2('prnE', '⪵'),
			_Utils_Tuple2('prnsim', '⋨'),
			_Utils_Tuple2('prod', '∏'),
			_Utils_Tuple2('Product', '∏'),
			_Utils_Tuple2('profalar', '⌮'),
			_Utils_Tuple2('profline', '⌒'),
			_Utils_Tuple2('profsurf', '⌓'),
			_Utils_Tuple2('prop', '∝'),
			_Utils_Tuple2('Proportional', '∝'),
			_Utils_Tuple2('Proportion', '∷'),
			_Utils_Tuple2('propto', '∝'),
			_Utils_Tuple2('prsim', '≾'),
			_Utils_Tuple2('prurel', '⊰'),
			_Utils_Tuple2('Pscr', '\uD835\uDCAB'),
			_Utils_Tuple2('pscr', '\uD835\uDCC5'),
			_Utils_Tuple2('Psi', 'Ψ'),
			_Utils_Tuple2('psi', 'ψ'),
			_Utils_Tuple2('puncsp', '\u2008'),
			_Utils_Tuple2('Qfr', '\uD835\uDD14'),
			_Utils_Tuple2('qfr', '\uD835\uDD2E'),
			_Utils_Tuple2('qint', '⨌'),
			_Utils_Tuple2('qopf', '\uD835\uDD62'),
			_Utils_Tuple2('Qopf', 'ℚ'),
			_Utils_Tuple2('qprime', '⁗'),
			_Utils_Tuple2('Qscr', '\uD835\uDCAC'),
			_Utils_Tuple2('qscr', '\uD835\uDCC6'),
			_Utils_Tuple2('quaternions', 'ℍ'),
			_Utils_Tuple2('quatint', '⨖'),
			_Utils_Tuple2('quest', '?'),
			_Utils_Tuple2('questeq', '≟'),
			_Utils_Tuple2('quot', '\"'),
			_Utils_Tuple2('QUOT', '\"'),
			_Utils_Tuple2('rAarr', '⇛'),
			_Utils_Tuple2('race', '∽̱'),
			_Utils_Tuple2('Racute', 'Ŕ'),
			_Utils_Tuple2('racute', 'ŕ'),
			_Utils_Tuple2('radic', '√'),
			_Utils_Tuple2('raemptyv', '⦳'),
			_Utils_Tuple2('rang', '⟩'),
			_Utils_Tuple2('Rang', '⟫'),
			_Utils_Tuple2('rangd', '⦒'),
			_Utils_Tuple2('range', '⦥'),
			_Utils_Tuple2('rangle', '⟩'),
			_Utils_Tuple2('raquo', '»'),
			_Utils_Tuple2('rarrap', '⥵'),
			_Utils_Tuple2('rarrb', '⇥'),
			_Utils_Tuple2('rarrbfs', '⤠'),
			_Utils_Tuple2('rarrc', '⤳'),
			_Utils_Tuple2('rarr', '→'),
			_Utils_Tuple2('Rarr', '↠'),
			_Utils_Tuple2('rArr', '⇒'),
			_Utils_Tuple2('rarrfs', '⤞'),
			_Utils_Tuple2('rarrhk', '↪'),
			_Utils_Tuple2('rarrlp', '↬'),
			_Utils_Tuple2('rarrpl', '⥅'),
			_Utils_Tuple2('rarrsim', '⥴'),
			_Utils_Tuple2('Rarrtl', '⤖'),
			_Utils_Tuple2('rarrtl', '↣'),
			_Utils_Tuple2('rarrw', '↝'),
			_Utils_Tuple2('ratail', '⤚'),
			_Utils_Tuple2('rAtail', '⤜'),
			_Utils_Tuple2('ratio', '∶'),
			_Utils_Tuple2('rationals', 'ℚ'),
			_Utils_Tuple2('rbarr', '⤍'),
			_Utils_Tuple2('rBarr', '⤏'),
			_Utils_Tuple2('RBarr', '⤐'),
			_Utils_Tuple2('rbbrk', '❳'),
			_Utils_Tuple2('rbrace', '}'),
			_Utils_Tuple2('rbrack', ']'),
			_Utils_Tuple2('rbrke', '⦌'),
			_Utils_Tuple2('rbrksld', '⦎'),
			_Utils_Tuple2('rbrkslu', '⦐'),
			_Utils_Tuple2('Rcaron', 'Ř'),
			_Utils_Tuple2('rcaron', 'ř'),
			_Utils_Tuple2('Rcedil', 'Ŗ'),
			_Utils_Tuple2('rcedil', 'ŗ'),
			_Utils_Tuple2('rceil', '⌉'),
			_Utils_Tuple2('rcub', '}'),
			_Utils_Tuple2('Rcy', 'Р'),
			_Utils_Tuple2('rcy', 'р'),
			_Utils_Tuple2('rdca', '⤷'),
			_Utils_Tuple2('rdldhar', '⥩'),
			_Utils_Tuple2('rdquo', '”'),
			_Utils_Tuple2('rdquor', '”'),
			_Utils_Tuple2('rdsh', '↳'),
			_Utils_Tuple2('real', 'ℜ'),
			_Utils_Tuple2('realine', 'ℛ'),
			_Utils_Tuple2('realpart', 'ℜ'),
			_Utils_Tuple2('reals', 'ℝ'),
			_Utils_Tuple2('Re', 'ℜ'),
			_Utils_Tuple2('rect', '▭'),
			_Utils_Tuple2('reg', '®'),
			_Utils_Tuple2('REG', '®'),
			_Utils_Tuple2('ReverseElement', '∋'),
			_Utils_Tuple2('ReverseEquilibrium', '⇋'),
			_Utils_Tuple2('ReverseUpEquilibrium', '⥯'),
			_Utils_Tuple2('rfisht', '⥽'),
			_Utils_Tuple2('rfloor', '⌋'),
			_Utils_Tuple2('rfr', '\uD835\uDD2F'),
			_Utils_Tuple2('Rfr', 'ℜ'),
			_Utils_Tuple2('rHar', '⥤'),
			_Utils_Tuple2('rhard', '⇁'),
			_Utils_Tuple2('rharu', '⇀'),
			_Utils_Tuple2('rharul', '⥬'),
			_Utils_Tuple2('Rho', 'Ρ'),
			_Utils_Tuple2('rho', 'ρ'),
			_Utils_Tuple2('rhov', 'ϱ'),
			_Utils_Tuple2('RightAngleBracket', '⟩'),
			_Utils_Tuple2('RightArrowBar', '⇥'),
			_Utils_Tuple2('rightarrow', '→'),
			_Utils_Tuple2('RightArrow', '→'),
			_Utils_Tuple2('Rightarrow', '⇒'),
			_Utils_Tuple2('RightArrowLeftArrow', '⇄'),
			_Utils_Tuple2('rightarrowtail', '↣'),
			_Utils_Tuple2('RightCeiling', '⌉'),
			_Utils_Tuple2('RightDoubleBracket', '⟧'),
			_Utils_Tuple2('RightDownTeeVector', '⥝'),
			_Utils_Tuple2('RightDownVectorBar', '⥕'),
			_Utils_Tuple2('RightDownVector', '⇂'),
			_Utils_Tuple2('RightFloor', '⌋'),
			_Utils_Tuple2('rightharpoondown', '⇁'),
			_Utils_Tuple2('rightharpoonup', '⇀'),
			_Utils_Tuple2('rightleftarrows', '⇄'),
			_Utils_Tuple2('rightleftharpoons', '⇌'),
			_Utils_Tuple2('rightrightarrows', '⇉'),
			_Utils_Tuple2('rightsquigarrow', '↝'),
			_Utils_Tuple2('RightTeeArrow', '↦'),
			_Utils_Tuple2('RightTee', '⊢'),
			_Utils_Tuple2('RightTeeVector', '⥛'),
			_Utils_Tuple2('rightthreetimes', '⋌'),
			_Utils_Tuple2('RightTriangleBar', '⧐'),
			_Utils_Tuple2('RightTriangle', '⊳'),
			_Utils_Tuple2('RightTriangleEqual', '⊵'),
			_Utils_Tuple2('RightUpDownVector', '⥏'),
			_Utils_Tuple2('RightUpTeeVector', '⥜'),
			_Utils_Tuple2('RightUpVectorBar', '⥔'),
			_Utils_Tuple2('RightUpVector', '↾'),
			_Utils_Tuple2('RightVectorBar', '⥓'),
			_Utils_Tuple2('RightVector', '⇀'),
			_Utils_Tuple2('ring', '˚'),
			_Utils_Tuple2('risingdotseq', '≓'),
			_Utils_Tuple2('rlarr', '⇄'),
			_Utils_Tuple2('rlhar', '⇌'),
			_Utils_Tuple2('rlm', '\u200F'),
			_Utils_Tuple2('rmoustache', '⎱'),
			_Utils_Tuple2('rmoust', '⎱'),
			_Utils_Tuple2('rnmid', '⫮'),
			_Utils_Tuple2('roang', '⟭'),
			_Utils_Tuple2('roarr', '⇾'),
			_Utils_Tuple2('robrk', '⟧'),
			_Utils_Tuple2('ropar', '⦆'),
			_Utils_Tuple2('ropf', '\uD835\uDD63'),
			_Utils_Tuple2('Ropf', 'ℝ'),
			_Utils_Tuple2('roplus', '⨮'),
			_Utils_Tuple2('rotimes', '⨵'),
			_Utils_Tuple2('RoundImplies', '⥰'),
			_Utils_Tuple2('rpar', ')'),
			_Utils_Tuple2('rpargt', '⦔'),
			_Utils_Tuple2('rppolint', '⨒'),
			_Utils_Tuple2('rrarr', '⇉'),
			_Utils_Tuple2('Rrightarrow', '⇛'),
			_Utils_Tuple2('rsaquo', '›'),
			_Utils_Tuple2('rscr', '\uD835\uDCC7'),
			_Utils_Tuple2('Rscr', 'ℛ'),
			_Utils_Tuple2('rsh', '↱'),
			_Utils_Tuple2('Rsh', '↱'),
			_Utils_Tuple2('rsqb', ']'),
			_Utils_Tuple2('rsquo', '’'),
			_Utils_Tuple2('rsquor', '’'),
			_Utils_Tuple2('rthree', '⋌'),
			_Utils_Tuple2('rtimes', '⋊'),
			_Utils_Tuple2('rtri', '▹'),
			_Utils_Tuple2('rtrie', '⊵'),
			_Utils_Tuple2('rtrif', '▸'),
			_Utils_Tuple2('rtriltri', '⧎'),
			_Utils_Tuple2('RuleDelayed', '⧴'),
			_Utils_Tuple2('ruluhar', '⥨'),
			_Utils_Tuple2('rx', '℞'),
			_Utils_Tuple2('Sacute', 'Ś'),
			_Utils_Tuple2('sacute', 'ś'),
			_Utils_Tuple2('sbquo', '‚'),
			_Utils_Tuple2('scap', '⪸'),
			_Utils_Tuple2('Scaron', 'Š'),
			_Utils_Tuple2('scaron', 'š'),
			_Utils_Tuple2('Sc', '⪼'),
			_Utils_Tuple2('sc', '≻'),
			_Utils_Tuple2('sccue', '≽'),
			_Utils_Tuple2('sce', '⪰'),
			_Utils_Tuple2('scE', '⪴'),
			_Utils_Tuple2('Scedil', 'Ş'),
			_Utils_Tuple2('scedil', 'ş'),
			_Utils_Tuple2('Scirc', 'Ŝ'),
			_Utils_Tuple2('scirc', 'ŝ'),
			_Utils_Tuple2('scnap', '⪺'),
			_Utils_Tuple2('scnE', '⪶'),
			_Utils_Tuple2('scnsim', '⋩'),
			_Utils_Tuple2('scpolint', '⨓'),
			_Utils_Tuple2('scsim', '≿'),
			_Utils_Tuple2('Scy', 'С'),
			_Utils_Tuple2('scy', 'с'),
			_Utils_Tuple2('sdotb', '⊡'),
			_Utils_Tuple2('sdot', '⋅'),
			_Utils_Tuple2('sdote', '⩦'),
			_Utils_Tuple2('searhk', '⤥'),
			_Utils_Tuple2('searr', '↘'),
			_Utils_Tuple2('seArr', '⇘'),
			_Utils_Tuple2('searrow', '↘'),
			_Utils_Tuple2('sect', '§'),
			_Utils_Tuple2('semi', ';'),
			_Utils_Tuple2('seswar', '⤩'),
			_Utils_Tuple2('setminus', '∖'),
			_Utils_Tuple2('setmn', '∖'),
			_Utils_Tuple2('sext', '✶'),
			_Utils_Tuple2('Sfr', '\uD835\uDD16'),
			_Utils_Tuple2('sfr', '\uD835\uDD30'),
			_Utils_Tuple2('sfrown', '⌢'),
			_Utils_Tuple2('sharp', '♯'),
			_Utils_Tuple2('SHCHcy', 'Щ'),
			_Utils_Tuple2('shchcy', 'щ'),
			_Utils_Tuple2('SHcy', 'Ш'),
			_Utils_Tuple2('shcy', 'ш'),
			_Utils_Tuple2('ShortDownArrow', '↓'),
			_Utils_Tuple2('ShortLeftArrow', '←'),
			_Utils_Tuple2('shortmid', '∣'),
			_Utils_Tuple2('shortparallel', '∥'),
			_Utils_Tuple2('ShortRightArrow', '→'),
			_Utils_Tuple2('ShortUpArrow', '↑'),
			_Utils_Tuple2('shy', '\u00AD'),
			_Utils_Tuple2('Sigma', 'Σ'),
			_Utils_Tuple2('sigma', 'σ'),
			_Utils_Tuple2('sigmaf', 'ς'),
			_Utils_Tuple2('sigmav', 'ς'),
			_Utils_Tuple2('sim', '∼'),
			_Utils_Tuple2('simdot', '⩪'),
			_Utils_Tuple2('sime', '≃'),
			_Utils_Tuple2('simeq', '≃'),
			_Utils_Tuple2('simg', '⪞'),
			_Utils_Tuple2('simgE', '⪠'),
			_Utils_Tuple2('siml', '⪝'),
			_Utils_Tuple2('simlE', '⪟'),
			_Utils_Tuple2('simne', '≆'),
			_Utils_Tuple2('simplus', '⨤'),
			_Utils_Tuple2('simrarr', '⥲'),
			_Utils_Tuple2('slarr', '←'),
			_Utils_Tuple2('SmallCircle', '∘'),
			_Utils_Tuple2('smallsetminus', '∖'),
			_Utils_Tuple2('smashp', '⨳'),
			_Utils_Tuple2('smeparsl', '⧤'),
			_Utils_Tuple2('smid', '∣'),
			_Utils_Tuple2('smile', '⌣'),
			_Utils_Tuple2('smt', '⪪'),
			_Utils_Tuple2('smte', '⪬'),
			_Utils_Tuple2('smtes', '⪬︀'),
			_Utils_Tuple2('SOFTcy', 'Ь'),
			_Utils_Tuple2('softcy', 'ь'),
			_Utils_Tuple2('solbar', '⌿'),
			_Utils_Tuple2('solb', '⧄'),
			_Utils_Tuple2('sol', '/'),
			_Utils_Tuple2('Sopf', '\uD835\uDD4A'),
			_Utils_Tuple2('sopf', '\uD835\uDD64'),
			_Utils_Tuple2('spades', '♠'),
			_Utils_Tuple2('spadesuit', '♠'),
			_Utils_Tuple2('spar', '∥'),
			_Utils_Tuple2('sqcap', '⊓'),
			_Utils_Tuple2('sqcaps', '⊓︀'),
			_Utils_Tuple2('sqcup', '⊔'),
			_Utils_Tuple2('sqcups', '⊔︀'),
			_Utils_Tuple2('Sqrt', '√'),
			_Utils_Tuple2('sqsub', '⊏'),
			_Utils_Tuple2('sqsube', '⊑'),
			_Utils_Tuple2('sqsubset', '⊏'),
			_Utils_Tuple2('sqsubseteq', '⊑'),
			_Utils_Tuple2('sqsup', '⊐'),
			_Utils_Tuple2('sqsupe', '⊒'),
			_Utils_Tuple2('sqsupset', '⊐'),
			_Utils_Tuple2('sqsupseteq', '⊒'),
			_Utils_Tuple2('square', '□'),
			_Utils_Tuple2('Square', '□'),
			_Utils_Tuple2('SquareIntersection', '⊓'),
			_Utils_Tuple2('SquareSubset', '⊏'),
			_Utils_Tuple2('SquareSubsetEqual', '⊑'),
			_Utils_Tuple2('SquareSuperset', '⊐'),
			_Utils_Tuple2('SquareSupersetEqual', '⊒'),
			_Utils_Tuple2('SquareUnion', '⊔'),
			_Utils_Tuple2('squarf', '▪'),
			_Utils_Tuple2('squ', '□'),
			_Utils_Tuple2('squf', '▪'),
			_Utils_Tuple2('srarr', '→'),
			_Utils_Tuple2('Sscr', '\uD835\uDCAE'),
			_Utils_Tuple2('sscr', '\uD835\uDCC8'),
			_Utils_Tuple2('ssetmn', '∖'),
			_Utils_Tuple2('ssmile', '⌣'),
			_Utils_Tuple2('sstarf', '⋆'),
			_Utils_Tuple2('Star', '⋆'),
			_Utils_Tuple2('star', '☆'),
			_Utils_Tuple2('starf', '★'),
			_Utils_Tuple2('straightepsilon', 'ϵ'),
			_Utils_Tuple2('straightphi', 'ϕ'),
			_Utils_Tuple2('strns', '¯'),
			_Utils_Tuple2('sub', '⊂'),
			_Utils_Tuple2('Sub', '⋐'),
			_Utils_Tuple2('subdot', '⪽'),
			_Utils_Tuple2('subE', '⫅'),
			_Utils_Tuple2('sube', '⊆'),
			_Utils_Tuple2('subedot', '⫃'),
			_Utils_Tuple2('submult', '⫁'),
			_Utils_Tuple2('subnE', '⫋'),
			_Utils_Tuple2('subne', '⊊'),
			_Utils_Tuple2('subplus', '⪿'),
			_Utils_Tuple2('subrarr', '⥹'),
			_Utils_Tuple2('subset', '⊂'),
			_Utils_Tuple2('Subset', '⋐'),
			_Utils_Tuple2('subseteq', '⊆'),
			_Utils_Tuple2('subseteqq', '⫅'),
			_Utils_Tuple2('SubsetEqual', '⊆'),
			_Utils_Tuple2('subsetneq', '⊊'),
			_Utils_Tuple2('subsetneqq', '⫋'),
			_Utils_Tuple2('subsim', '⫇'),
			_Utils_Tuple2('subsub', '⫕'),
			_Utils_Tuple2('subsup', '⫓'),
			_Utils_Tuple2('succapprox', '⪸'),
			_Utils_Tuple2('succ', '≻'),
			_Utils_Tuple2('succcurlyeq', '≽'),
			_Utils_Tuple2('Succeeds', '≻'),
			_Utils_Tuple2('SucceedsEqual', '⪰'),
			_Utils_Tuple2('SucceedsSlantEqual', '≽'),
			_Utils_Tuple2('SucceedsTilde', '≿'),
			_Utils_Tuple2('succeq', '⪰'),
			_Utils_Tuple2('succnapprox', '⪺'),
			_Utils_Tuple2('succneqq', '⪶'),
			_Utils_Tuple2('succnsim', '⋩'),
			_Utils_Tuple2('succsim', '≿'),
			_Utils_Tuple2('SuchThat', '∋'),
			_Utils_Tuple2('sum', '∑'),
			_Utils_Tuple2('Sum', '∑'),
			_Utils_Tuple2('sung', '♪'),
			_Utils_Tuple2('sup1', '¹'),
			_Utils_Tuple2('sup2', '²'),
			_Utils_Tuple2('sup3', '³'),
			_Utils_Tuple2('sup', '⊃'),
			_Utils_Tuple2('Sup', '⋑'),
			_Utils_Tuple2('supdot', '⪾'),
			_Utils_Tuple2('supdsub', '⫘'),
			_Utils_Tuple2('supE', '⫆'),
			_Utils_Tuple2('supe', '⊇'),
			_Utils_Tuple2('supedot', '⫄'),
			_Utils_Tuple2('Superset', '⊃'),
			_Utils_Tuple2('SupersetEqual', '⊇'),
			_Utils_Tuple2('suphsol', '⟉'),
			_Utils_Tuple2('suphsub', '⫗'),
			_Utils_Tuple2('suplarr', '⥻'),
			_Utils_Tuple2('supmult', '⫂'),
			_Utils_Tuple2('supnE', '⫌'),
			_Utils_Tuple2('supne', '⊋'),
			_Utils_Tuple2('supplus', '⫀'),
			_Utils_Tuple2('supset', '⊃'),
			_Utils_Tuple2('Supset', '⋑'),
			_Utils_Tuple2('supseteq', '⊇'),
			_Utils_Tuple2('supseteqq', '⫆'),
			_Utils_Tuple2('supsetneq', '⊋'),
			_Utils_Tuple2('supsetneqq', '⫌'),
			_Utils_Tuple2('supsim', '⫈'),
			_Utils_Tuple2('supsub', '⫔'),
			_Utils_Tuple2('supsup', '⫖'),
			_Utils_Tuple2('swarhk', '⤦'),
			_Utils_Tuple2('swarr', '↙'),
			_Utils_Tuple2('swArr', '⇙'),
			_Utils_Tuple2('swarrow', '↙'),
			_Utils_Tuple2('swnwar', '⤪'),
			_Utils_Tuple2('szlig', 'ß'),
			_Utils_Tuple2('Tab', '\t'),
			_Utils_Tuple2('target', '⌖'),
			_Utils_Tuple2('Tau', 'Τ'),
			_Utils_Tuple2('tau', 'τ'),
			_Utils_Tuple2('tbrk', '⎴'),
			_Utils_Tuple2('Tcaron', 'Ť'),
			_Utils_Tuple2('tcaron', 'ť'),
			_Utils_Tuple2('Tcedil', 'Ţ'),
			_Utils_Tuple2('tcedil', 'ţ'),
			_Utils_Tuple2('Tcy', 'Т'),
			_Utils_Tuple2('tcy', 'т'),
			_Utils_Tuple2('tdot', '⃛'),
			_Utils_Tuple2('telrec', '⌕'),
			_Utils_Tuple2('Tfr', '\uD835\uDD17'),
			_Utils_Tuple2('tfr', '\uD835\uDD31'),
			_Utils_Tuple2('there4', '∴'),
			_Utils_Tuple2('therefore', '∴'),
			_Utils_Tuple2('Therefore', '∴'),
			_Utils_Tuple2('Theta', 'Θ'),
			_Utils_Tuple2('theta', 'θ'),
			_Utils_Tuple2('thetasym', 'ϑ'),
			_Utils_Tuple2('thetav', 'ϑ'),
			_Utils_Tuple2('thickapprox', '≈'),
			_Utils_Tuple2('thicksim', '∼'),
			_Utils_Tuple2('ThickSpace', '\u205F\u200A'),
			_Utils_Tuple2('ThinSpace', '\u2009'),
			_Utils_Tuple2('thinsp', '\u2009'),
			_Utils_Tuple2('thkap', '≈'),
			_Utils_Tuple2('thksim', '∼'),
			_Utils_Tuple2('THORN', 'Þ'),
			_Utils_Tuple2('thorn', 'þ'),
			_Utils_Tuple2('tilde', '˜'),
			_Utils_Tuple2('Tilde', '∼'),
			_Utils_Tuple2('TildeEqual', '≃'),
			_Utils_Tuple2('TildeFullEqual', '≅'),
			_Utils_Tuple2('TildeTilde', '≈'),
			_Utils_Tuple2('timesbar', '⨱'),
			_Utils_Tuple2('timesb', '⊠'),
			_Utils_Tuple2('times', '×'),
			_Utils_Tuple2('timesd', '⨰'),
			_Utils_Tuple2('tint', '∭'),
			_Utils_Tuple2('toea', '⤨'),
			_Utils_Tuple2('topbot', '⌶'),
			_Utils_Tuple2('topcir', '⫱'),
			_Utils_Tuple2('top', '⊤'),
			_Utils_Tuple2('Topf', '\uD835\uDD4B'),
			_Utils_Tuple2('topf', '\uD835\uDD65'),
			_Utils_Tuple2('topfork', '⫚'),
			_Utils_Tuple2('tosa', '⤩'),
			_Utils_Tuple2('tprime', '‴'),
			_Utils_Tuple2('trade', '™'),
			_Utils_Tuple2('TRADE', '™'),
			_Utils_Tuple2('triangle', '▵'),
			_Utils_Tuple2('triangledown', '▿'),
			_Utils_Tuple2('triangleleft', '◃'),
			_Utils_Tuple2('trianglelefteq', '⊴'),
			_Utils_Tuple2('triangleq', '≜'),
			_Utils_Tuple2('triangleright', '▹'),
			_Utils_Tuple2('trianglerighteq', '⊵'),
			_Utils_Tuple2('tridot', '◬'),
			_Utils_Tuple2('trie', '≜'),
			_Utils_Tuple2('triminus', '⨺'),
			_Utils_Tuple2('TripleDot', '⃛'),
			_Utils_Tuple2('triplus', '⨹'),
			_Utils_Tuple2('trisb', '⧍'),
			_Utils_Tuple2('tritime', '⨻'),
			_Utils_Tuple2('trpezium', '⏢'),
			_Utils_Tuple2('Tscr', '\uD835\uDCAF'),
			_Utils_Tuple2('tscr', '\uD835\uDCC9'),
			_Utils_Tuple2('TScy', 'Ц'),
			_Utils_Tuple2('tscy', 'ц'),
			_Utils_Tuple2('TSHcy', 'Ћ'),
			_Utils_Tuple2('tshcy', 'ћ'),
			_Utils_Tuple2('Tstrok', 'Ŧ'),
			_Utils_Tuple2('tstrok', 'ŧ'),
			_Utils_Tuple2('twixt', '≬'),
			_Utils_Tuple2('twoheadleftarrow', '↞'),
			_Utils_Tuple2('twoheadrightarrow', '↠'),
			_Utils_Tuple2('Uacute', 'Ú'),
			_Utils_Tuple2('uacute', 'ú'),
			_Utils_Tuple2('uarr', '↑'),
			_Utils_Tuple2('Uarr', '↟'),
			_Utils_Tuple2('uArr', '⇑'),
			_Utils_Tuple2('Uarrocir', '⥉'),
			_Utils_Tuple2('Ubrcy', 'Ў'),
			_Utils_Tuple2('ubrcy', 'ў'),
			_Utils_Tuple2('Ubreve', 'Ŭ'),
			_Utils_Tuple2('ubreve', 'ŭ'),
			_Utils_Tuple2('Ucirc', 'Û'),
			_Utils_Tuple2('ucirc', 'û'),
			_Utils_Tuple2('Ucy', 'У'),
			_Utils_Tuple2('ucy', 'у'),
			_Utils_Tuple2('udarr', '⇅'),
			_Utils_Tuple2('Udblac', 'Ű'),
			_Utils_Tuple2('udblac', 'ű'),
			_Utils_Tuple2('udhar', '⥮'),
			_Utils_Tuple2('ufisht', '⥾'),
			_Utils_Tuple2('Ufr', '\uD835\uDD18'),
			_Utils_Tuple2('ufr', '\uD835\uDD32'),
			_Utils_Tuple2('Ugrave', 'Ù'),
			_Utils_Tuple2('ugrave', 'ù'),
			_Utils_Tuple2('uHar', '⥣'),
			_Utils_Tuple2('uharl', '↿'),
			_Utils_Tuple2('uharr', '↾'),
			_Utils_Tuple2('uhblk', '▀'),
			_Utils_Tuple2('ulcorn', '⌜'),
			_Utils_Tuple2('ulcorner', '⌜'),
			_Utils_Tuple2('ulcrop', '⌏'),
			_Utils_Tuple2('ultri', '◸'),
			_Utils_Tuple2('Umacr', 'Ū'),
			_Utils_Tuple2('umacr', 'ū'),
			_Utils_Tuple2('uml', '¨'),
			_Utils_Tuple2('UnderBar', '_'),
			_Utils_Tuple2('UnderBrace', '⏟'),
			_Utils_Tuple2('UnderBracket', '⎵'),
			_Utils_Tuple2('UnderParenthesis', '⏝'),
			_Utils_Tuple2('Union', '⋃'),
			_Utils_Tuple2('UnionPlus', '⊎'),
			_Utils_Tuple2('Uogon', 'Ų'),
			_Utils_Tuple2('uogon', 'ų'),
			_Utils_Tuple2('Uopf', '\uD835\uDD4C'),
			_Utils_Tuple2('uopf', '\uD835\uDD66'),
			_Utils_Tuple2('UpArrowBar', '⤒'),
			_Utils_Tuple2('uparrow', '↑'),
			_Utils_Tuple2('UpArrow', '↑'),
			_Utils_Tuple2('Uparrow', '⇑'),
			_Utils_Tuple2('UpArrowDownArrow', '⇅'),
			_Utils_Tuple2('updownarrow', '↕'),
			_Utils_Tuple2('UpDownArrow', '↕'),
			_Utils_Tuple2('Updownarrow', '⇕'),
			_Utils_Tuple2('UpEquilibrium', '⥮'),
			_Utils_Tuple2('upharpoonleft', '↿'),
			_Utils_Tuple2('upharpoonright', '↾'),
			_Utils_Tuple2('uplus', '⊎'),
			_Utils_Tuple2('UpperLeftArrow', '↖'),
			_Utils_Tuple2('UpperRightArrow', '↗'),
			_Utils_Tuple2('upsi', 'υ'),
			_Utils_Tuple2('Upsi', 'ϒ'),
			_Utils_Tuple2('upsih', 'ϒ'),
			_Utils_Tuple2('Upsilon', 'Υ'),
			_Utils_Tuple2('upsilon', 'υ'),
			_Utils_Tuple2('UpTeeArrow', '↥'),
			_Utils_Tuple2('UpTee', '⊥'),
			_Utils_Tuple2('upuparrows', '⇈'),
			_Utils_Tuple2('urcorn', '⌝'),
			_Utils_Tuple2('urcorner', '⌝'),
			_Utils_Tuple2('urcrop', '⌎'),
			_Utils_Tuple2('Uring', 'Ů'),
			_Utils_Tuple2('uring', 'ů'),
			_Utils_Tuple2('urtri', '◹'),
			_Utils_Tuple2('Uscr', '\uD835\uDCB0'),
			_Utils_Tuple2('uscr', '\uD835\uDCCA'),
			_Utils_Tuple2('utdot', '⋰'),
			_Utils_Tuple2('Utilde', 'Ũ'),
			_Utils_Tuple2('utilde', 'ũ'),
			_Utils_Tuple2('utri', '▵'),
			_Utils_Tuple2('utrif', '▴'),
			_Utils_Tuple2('uuarr', '⇈'),
			_Utils_Tuple2('Uuml', 'Ü'),
			_Utils_Tuple2('uuml', 'ü'),
			_Utils_Tuple2('uwangle', '⦧'),
			_Utils_Tuple2('vangrt', '⦜'),
			_Utils_Tuple2('varepsilon', 'ϵ'),
			_Utils_Tuple2('varkappa', 'ϰ'),
			_Utils_Tuple2('varnothing', '∅'),
			_Utils_Tuple2('varphi', 'ϕ'),
			_Utils_Tuple2('varpi', 'ϖ'),
			_Utils_Tuple2('varpropto', '∝'),
			_Utils_Tuple2('varr', '↕'),
			_Utils_Tuple2('vArr', '⇕'),
			_Utils_Tuple2('varrho', 'ϱ'),
			_Utils_Tuple2('varsigma', 'ς'),
			_Utils_Tuple2('varsubsetneq', '⊊︀'),
			_Utils_Tuple2('varsubsetneqq', '⫋︀'),
			_Utils_Tuple2('varsupsetneq', '⊋︀'),
			_Utils_Tuple2('varsupsetneqq', '⫌︀'),
			_Utils_Tuple2('vartheta', 'ϑ'),
			_Utils_Tuple2('vartriangleleft', '⊲'),
			_Utils_Tuple2('vartriangleright', '⊳'),
			_Utils_Tuple2('vBar', '⫨'),
			_Utils_Tuple2('Vbar', '⫫'),
			_Utils_Tuple2('vBarv', '⫩'),
			_Utils_Tuple2('Vcy', 'В'),
			_Utils_Tuple2('vcy', 'в'),
			_Utils_Tuple2('vdash', '⊢'),
			_Utils_Tuple2('vDash', '⊨'),
			_Utils_Tuple2('Vdash', '⊩'),
			_Utils_Tuple2('VDash', '⊫'),
			_Utils_Tuple2('Vdashl', '⫦'),
			_Utils_Tuple2('veebar', '⊻'),
			_Utils_Tuple2('vee', '∨'),
			_Utils_Tuple2('Vee', '⋁'),
			_Utils_Tuple2('veeeq', '≚'),
			_Utils_Tuple2('vellip', '⋮'),
			_Utils_Tuple2('verbar', '|'),
			_Utils_Tuple2('Verbar', '‖'),
			_Utils_Tuple2('vert', '|'),
			_Utils_Tuple2('Vert', '‖'),
			_Utils_Tuple2('VerticalBar', '∣'),
			_Utils_Tuple2('VerticalLine', '|'),
			_Utils_Tuple2('VerticalSeparator', '❘'),
			_Utils_Tuple2('VerticalTilde', '≀'),
			_Utils_Tuple2('VeryThinSpace', '\u200A'),
			_Utils_Tuple2('Vfr', '\uD835\uDD19'),
			_Utils_Tuple2('vfr', '\uD835\uDD33'),
			_Utils_Tuple2('vltri', '⊲'),
			_Utils_Tuple2('vnsub', '⊂⃒'),
			_Utils_Tuple2('vnsup', '⊃⃒'),
			_Utils_Tuple2('Vopf', '\uD835\uDD4D'),
			_Utils_Tuple2('vopf', '\uD835\uDD67'),
			_Utils_Tuple2('vprop', '∝'),
			_Utils_Tuple2('vrtri', '⊳'),
			_Utils_Tuple2('Vscr', '\uD835\uDCB1'),
			_Utils_Tuple2('vscr', '\uD835\uDCCB'),
			_Utils_Tuple2('vsubnE', '⫋︀'),
			_Utils_Tuple2('vsubne', '⊊︀'),
			_Utils_Tuple2('vsupnE', '⫌︀'),
			_Utils_Tuple2('vsupne', '⊋︀'),
			_Utils_Tuple2('Vvdash', '⊪'),
			_Utils_Tuple2('vzigzag', '⦚'),
			_Utils_Tuple2('Wcirc', 'Ŵ'),
			_Utils_Tuple2('wcirc', 'ŵ'),
			_Utils_Tuple2('wedbar', '⩟'),
			_Utils_Tuple2('wedge', '∧'),
			_Utils_Tuple2('Wedge', '⋀'),
			_Utils_Tuple2('wedgeq', '≙'),
			_Utils_Tuple2('weierp', '℘'),
			_Utils_Tuple2('Wfr', '\uD835\uDD1A'),
			_Utils_Tuple2('wfr', '\uD835\uDD34'),
			_Utils_Tuple2('Wopf', '\uD835\uDD4E'),
			_Utils_Tuple2('wopf', '\uD835\uDD68'),
			_Utils_Tuple2('wp', '℘'),
			_Utils_Tuple2('wr', '≀'),
			_Utils_Tuple2('wreath', '≀'),
			_Utils_Tuple2('Wscr', '\uD835\uDCB2'),
			_Utils_Tuple2('wscr', '\uD835\uDCCC'),
			_Utils_Tuple2('xcap', '⋂'),
			_Utils_Tuple2('xcirc', '◯'),
			_Utils_Tuple2('xcup', '⋃'),
			_Utils_Tuple2('xdtri', '▽'),
			_Utils_Tuple2('Xfr', '\uD835\uDD1B'),
			_Utils_Tuple2('xfr', '\uD835\uDD35'),
			_Utils_Tuple2('xharr', '⟷'),
			_Utils_Tuple2('xhArr', '⟺'),
			_Utils_Tuple2('Xi', 'Ξ'),
			_Utils_Tuple2('xi', 'ξ'),
			_Utils_Tuple2('xlarr', '⟵'),
			_Utils_Tuple2('xlArr', '⟸'),
			_Utils_Tuple2('xmap', '⟼'),
			_Utils_Tuple2('xnis', '⋻'),
			_Utils_Tuple2('xodot', '⨀'),
			_Utils_Tuple2('Xopf', '\uD835\uDD4F'),
			_Utils_Tuple2('xopf', '\uD835\uDD69'),
			_Utils_Tuple2('xoplus', '⨁'),
			_Utils_Tuple2('xotime', '⨂'),
			_Utils_Tuple2('xrarr', '⟶'),
			_Utils_Tuple2('xrArr', '⟹'),
			_Utils_Tuple2('Xscr', '\uD835\uDCB3'),
			_Utils_Tuple2('xscr', '\uD835\uDCCD'),
			_Utils_Tuple2('xsqcup', '⨆'),
			_Utils_Tuple2('xuplus', '⨄'),
			_Utils_Tuple2('xutri', '△'),
			_Utils_Tuple2('xvee', '⋁'),
			_Utils_Tuple2('xwedge', '⋀'),
			_Utils_Tuple2('Yacute', 'Ý'),
			_Utils_Tuple2('yacute', 'ý'),
			_Utils_Tuple2('YAcy', 'Я'),
			_Utils_Tuple2('yacy', 'я'),
			_Utils_Tuple2('Ycirc', 'Ŷ'),
			_Utils_Tuple2('ycirc', 'ŷ'),
			_Utils_Tuple2('Ycy', 'Ы'),
			_Utils_Tuple2('ycy', 'ы'),
			_Utils_Tuple2('yen', '¥'),
			_Utils_Tuple2('Yfr', '\uD835\uDD1C'),
			_Utils_Tuple2('yfr', '\uD835\uDD36'),
			_Utils_Tuple2('YIcy', 'Ї'),
			_Utils_Tuple2('yicy', 'ї'),
			_Utils_Tuple2('Yopf', '\uD835\uDD50'),
			_Utils_Tuple2('yopf', '\uD835\uDD6A'),
			_Utils_Tuple2('Yscr', '\uD835\uDCB4'),
			_Utils_Tuple2('yscr', '\uD835\uDCCE'),
			_Utils_Tuple2('YUcy', 'Ю'),
			_Utils_Tuple2('yucy', 'ю'),
			_Utils_Tuple2('yuml', 'ÿ'),
			_Utils_Tuple2('Yuml', 'Ÿ'),
			_Utils_Tuple2('Zacute', 'Ź'),
			_Utils_Tuple2('zacute', 'ź'),
			_Utils_Tuple2('Zcaron', 'Ž'),
			_Utils_Tuple2('zcaron', 'ž'),
			_Utils_Tuple2('Zcy', 'З'),
			_Utils_Tuple2('zcy', 'з'),
			_Utils_Tuple2('Zdot', 'Ż'),
			_Utils_Tuple2('zdot', 'ż'),
			_Utils_Tuple2('zeetrf', 'ℨ'),
			_Utils_Tuple2('ZeroWidthSpace', '\u200B'),
			_Utils_Tuple2('Zeta', 'Ζ'),
			_Utils_Tuple2('zeta', 'ζ'),
			_Utils_Tuple2('zfr', '\uD835\uDD37'),
			_Utils_Tuple2('Zfr', 'ℨ'),
			_Utils_Tuple2('ZHcy', 'Ж'),
			_Utils_Tuple2('zhcy', 'ж'),
			_Utils_Tuple2('zigrarr', '⇝'),
			_Utils_Tuple2('zopf', '\uD835\uDD6B'),
			_Utils_Tuple2('Zopf', 'ℤ'),
			_Utils_Tuple2('Zscr', '\uD835\uDCB5'),
			_Utils_Tuple2('zscr', '\uD835\uDCCF'),
			_Utils_Tuple2('zwj', '\u200D'),
			_Utils_Tuple2('zwnj', '\u200C')
		]));
var $author$project$Markdown$Render$htmlEntity = function (str) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('mm-htmlEntity')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(
				A2(
					$elm$core$Maybe$withDefault,
					'(' + (str + ')'),
					A2($elm$core$Dict$get, str, $author$project$HtmlEntity$dict)))
			]));
};
var $author$project$Markdown$Render$htmlEntity_ = function (element) {
	if (element.$ === 7) {
		var str = element.a;
		return A2(
			$elm$core$Maybe$withDefault,
			'(' + (str + ')'),
			A2($elm$core$Dict$get, str, $author$project$HtmlEntity$dict));
	} else {
		return '';
	}
};
var $author$project$Markdown$Render$InlineMathMode = 0;
var $author$project$Markdown$Render$inlineMathText = F2(
	function (id, str) {
		return A2(
			$author$project$Markdown$Render$mathText,
			0,
			$elm$core$String$trim(str));
	});
var $author$project$Markdown$Render$isPunctuation = function (str) {
	return A2(
		$elm$core$List$member,
		str,
		_List_fromArray(
			['.', ',', ';', ':', '?', '!']));
};
var $author$project$Markdown$Render$renderStanza = F2(
	function (id, arg) {
		var poetryLine = function (line) {
			return A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(line)
					]));
		};
		var lines = A2($elm$core$String$split, '\n', arg);
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$author$project$Markdown$Render$idAttr(id),
					A2($elm$html$Html$Attributes$style, 'margin-left', '24px'),
					A2($elm$html$Html$Attributes$style, 'margin-top', '18px'),
					A2($elm$html$Html$Attributes$style, 'margin-right', '36px'),
					A2($elm$html$Html$Attributes$style, ' margin-bottom', '18px'),
					A2($elm$html$Html$Attributes$style, 'white-space', 'nowrap')
				]),
			A2($elm$core$List$map, poetryLine, lines));
	});
var $author$project$Markdown$Render$strikethrough = function (str) {
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				$elm$html$Html$Attributes$class('mm-strike-through')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(str)
			]));
};
var $author$project$Markdown$Render$joinLine = F4(
	function (selectedId, id, level, items) {
		var folder = F2(
			function (item, _v10) {
				var accString = _v10.a;
				var accElement = _v10.b;
				if (!item.$) {
					var str = item.a;
					return $author$project$Markdown$Render$isPunctuation(
						A2($elm$core$String$left, 1, str)) ? _Utils_Tuple2(
						A2($elm$core$List$cons, str, accString),
						accElement) : _Utils_Tuple2(
						A2($elm$core$List$cons, ' ' + str, accString),
						accElement);
				} else {
					if (!_Utils_eq(accString, _List_Nil)) {
						var content = A2($elm$core$String$join, '', accString);
						var span = A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('innerJoin')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(content)
								]));
						return _Utils_Tuple2(
							_List_Nil,
							A2(
								$elm$core$List$cons,
								A4($author$project$Markdown$Render$renderToHtmlMsg, selectedId, id, level, item),
								A2($elm$core$List$cons, span, accElement)));
					} else {
						return _Utils_Tuple2(
							_List_Nil,
							A2(
								$elm$core$List$cons,
								A4($author$project$Markdown$Render$renderToHtmlMsg, selectedId, id, level, item),
								accElement));
					}
				}
			});
		var flush = function (_v8) {
			var accString = _v8.a;
			var accElement = _v8.b;
			if (!_Utils_eq(accString, _List_Nil)) {
				var content = A2($elm$core$String$join, '', accString);
				var span = A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('X12yada')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(content)
						]));
				return A2($elm$core$List$cons, span, accElement);
			} else {
				return accElement;
			}
		};
		return $elm$core$List$reverse(
			flush(
				A3(
					$elm$core$List$foldl,
					folder,
					_Utils_Tuple2(_List_Nil, _List_Nil),
					items)));
	});
var $author$project$Markdown$Render$renderToHtmlMsg = F4(
	function (selectedId, id, level, mmInline) {
		switch (mmInline.$) {
			case 0:
				var str = mmInline.a;
				return A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$author$project$Markdown$Render$idAttr(id),
							$elm$html$Html$Attributes$class('ordinary'),
							$author$project$Markdown$Render$marginOfLevel(level)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(str)
						]));
			case 1:
				var str = mmInline.a;
				return A2(
					$elm$html$Html$em,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(str)
						]));
			case 2:
				var str = mmInline.a;
				return A2(
					$elm$html$Html$strong,
					_List_Nil,
					_List_fromArray(
						[
							$elm$html$Html$text(str)
						]));
			case 3:
				var str = mmInline.a;
				return A2(
					$elm$html$Html$code,
					_List_fromArray(
						[
							$author$project$Markdown$Render$idAttr(id)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(str)
						]));
			case 4:
				var str = mmInline.a;
				return A2($author$project$Markdown$Render$inlineMathText, id, str);
			case 5:
				var str = mmInline.a;
				return $author$project$Markdown$Render$strikethrough(str);
			case 7:
				var str = mmInline.a;
				return $author$project$Markdown$Render$htmlEntity(str);
			case 8:
				var list = mmInline.a;
				var entities = A2(
					$elm$core$String$join,
					'',
					A2($elm$core$List$map, $author$project$Markdown$Render$htmlEntity_, list)) + ' ';
				return A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('X9')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(entities)
						]));
			case 6:
				var str = mmInline.a;
				return A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('bracketed')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text('[' + (str + ']'))
						]));
			case 10:
				var url = mmInline.a;
				var label = mmInline.b;
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(url),
							$elm$html$Html$Attributes$target('_blank')
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label + ' ')
						]));
			case 9:
				var op = mmInline.a;
				var arg = mmInline.b;
				switch (op) {
					case 'blue':
						return A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'color', 'blue')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(arg + '\n')
								]));
					case 'red':
						return A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'color', 'red')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(arg + '\n')
								]));
					case 'ilink1':
						return A2($elm$html$Html$span, _List_Nil, _List_Nil);
					case 'ilink2':
						return A2($elm$html$Html$span, _List_Nil, _List_Nil);
					case 'ilink3':
						return A2($elm$html$Html$span, _List_Nil, _List_Nil);
					case 'ilink4':
						return A2($elm$html$Html$span, _List_Nil, _List_Nil);
					case 'ylink':
						return A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'color', 'red')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(
									'Y: ' + ($elm$core$String$toUpper(arg) + '\n'))
								]));
					case 'xlink':
						var _v2 = function () {
							var _v3 = A2($author$project$Markdown$Parse$getArgPair, '>', arg);
							if (!_v3.$) {
								var _v4 = _v3.a;
								var a = _v4.a;
								var b = _v4.b;
								return _Utils_Tuple2(a, b);
							} else {
								return _Utils_Tuple2('**', 'bad document id');
							}
						}();
						var docId = _v2.a;
						var label = _v2.b;
						return A2(
							$elm$html$Html$a,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$href('https://minilatex.lamdera.app/' + docId)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(label)
								]));
					default:
						return A2(
							$elm$html$Html$span,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class(op)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(arg)
								]));
				}
			case 11:
				var label_ = mmInline.a;
				var url = mmInline.b;
				var labelParts = A2(
					$elm$core$List$take,
					2,
					A2($elm$core$String$split, '::', label_));
				var _v5 = function () {
					var _v6 = _Utils_Tuple2(
						$elm$core$List$head(labelParts),
						$elm$core$List$head(
							A2($elm$core$List$drop, 1, labelParts)));
					if (!_v6.a.$) {
						if (!_v6.b.$) {
							var label__ = _v6.a.a;
							var class__ = _v6.b.a;
							return _Utils_Tuple2(label__, 'mm-image-' + class__);
						} else {
							var label__ = _v6.a.a;
							var _v7 = _v6.b;
							return _Utils_Tuple2(label__, 'mm-image');
						}
					} else {
						return _Utils_Tuple2('image', 'mm-image');
					}
				}();
				var label = _v5.a;
				var _class = _v5.b;
				return A2(
					$elm$html$Html$img,
					_List_fromArray(
						[
							$author$project$Markdown$Render$idAttr(id),
							$elm$html$Html$Attributes$src(url),
							$elm$html$Html$Attributes$class(_class)
						]),
					_List_fromArray(
						[
							$elm$html$Html$text(label)
						]));
			case 12:
				var arg = mmInline.a;
				var joined = A4($author$project$Markdown$Render$joinLine, selectedId, id, level, arg);
				return ($elm$core$List$length(joined) === 1) ? A2(
					$elm$core$Maybe$withDefault,
					A2(
						$elm$html$Html$span,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('X11')
							]),
						_List_fromArray(
							[
								$elm$html$Html$text('')
							])),
					$elm$core$List$head(joined)) : A2(
					$elm$html$Html$span,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$class('line')
						]),
					joined);
			case 13:
				var arg = mmInline.a;
				var mapper = function (m) {
					return _Utils_Tuple2(
						$author$project$Markdown$Parse$stringFromId(id),
						A4($author$project$Markdown$Render$renderToHtmlMsg, selectedId, id, level, m));
				};
				return A3(
					$elm$html$Html$Keyed$node,
					'div',
					_List_fromArray(
						[
							$author$project$Markdown$Render$idAttr(id),
							A2($author$project$Markdown$Render$selectedStyle_, selectedId, id),
							A2($elm$html$Html$Attributes$style, 'margin-bottom', '18px'),
							$author$project$Markdown$Render$blockLevelClass(level - 1)
						]),
					A2($elm$core$List$map, mapper, arg));
			case 14:
				var arg = mmInline.a;
				return A2($author$project$Markdown$Render$renderStanza, id, arg);
			default:
				var arg = mmInline.a;
				return A2(
					$elm$html$Html$p,
					_List_Nil,
					A2(
						$elm$core$List$map,
						A3($author$project$Markdown$Render$renderToHtmlMsg, selectedId, id, level),
						arg));
		}
	});
var $author$project$Markdown$Render$renderBlockContent = F4(
	function (selectedId, id, level, blockContent) {
		if (!blockContent.$) {
			var mmInline = blockContent.a;
			return A4($author$project$Markdown$Render$renderToHtmlMsg, selectedId, id, level, mmInline);
		} else {
			var str = blockContent.a;
			return A2(
				$elm$html$Html$span,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$class('X8'),
						$author$project$Markdown$Render$idAttr(id),
						$author$project$Markdown$Render$blockLevelClass(level - 1),
						A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
					]),
				_List_fromArray(
					[
						$elm$html$Html$text(str)
					]));
		}
	});
var $elm$html$Html$h1 = _VirtualDom_node('h1');
var $elm$html$Html$h5 = _VirtualDom_node('h5');
var $author$project$Markdown$Render$nameFromBlockContent = function (blockContent) {
	if ((((((((!blockContent.$) && (blockContent.a.$ === 13)) && blockContent.a.a.b) && (blockContent.a.a.a.$ === 12)) && blockContent.a.a.a.a.b) && (!blockContent.a.a.a.a.a.$)) && (!blockContent.a.a.a.a.b.b)) && (!blockContent.a.a.b.b)) {
		var _v1 = blockContent.a.a;
		var _v2 = _v1.a.a;
		var str = _v2.a.a;
		return $elm$core$String$trim(str);
	} else {
		return '';
	}
};
var $author$project$Markdown$Render$renderHeading = F5(
	function (selectedId, id, k, level, blockContent) {
		var name = $author$project$Markdown$Render$nameFromBlockContent(blockContent);
		switch (k) {
			case 1:
				return A2(
					$elm$html$Html$h1,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id(name),
							$elm$html$Html$Attributes$class('mm-h1'),
							A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
			case 2:
				return A2(
					$elm$html$Html$h2,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id(name),
							$elm$html$Html$Attributes$class('mm-h2'),
							A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
			case 3:
				return A2(
					$elm$html$Html$h3,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id(name),
							$elm$html$Html$Attributes$class('mm-h3'),
							A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
			case 4:
				return A2(
					$elm$html$Html$h4,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id(name),
							$elm$html$Html$Attributes$class('mm-h4'),
							A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
			default:
				return A2(
					$elm$html$Html$h5,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$id(name),
							$elm$html$Html$Attributes$class('mm-h5'),
							A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
		}
	});
var $author$project$Markdown$Render$alphabet = function (k) {
	var alpha = _List_fromArray(
		['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']);
	return A2(
		$elm$core$Maybe$withDefault,
		'zz',
		$elm$core$List$head(
			A2($elm$core$List$drop, k - 1, alpha)));
};
var $author$project$Markdown$Render$prependToParagraph = F2(
	function (head, tail) {
		if (tail.$ === 1) {
			return tail;
		} else {
			var mmInLine = tail.a;
			if (mmInLine.$ === 13) {
				var lst = mmInLine.a;
				return $author$project$Markdown$Parse$M(
					$author$project$MDInline$Paragraph(
						A2($elm$core$List$cons, head, lst)));
			} else {
				return tail;
			}
		}
	});
var $author$project$Markdown$Render$romanNumeral = function (k) {
	var alpha = _List_fromArray(
		['i', 'ii', 'iii', 'iv', 'v', 'vi', 'vii', 'viii', 'ix', 'x', 'xi', 'xii', 'xiii', 'xiv', 'xv', 'xvi', 'xvii', 'xviii', 'xix', 'xx', 'xxi', 'xxii', 'xxiii', 'xiv', 'xv', 'xvi']);
	return A2(
		$elm$core$Maybe$withDefault,
		'zz',
		$elm$core$List$head(
			A2($elm$core$List$drop, k - 1, alpha)));
};
var $author$project$Markdown$Render$renderOListItem = F5(
	function (selectedId, id, index, level, blockContent) {
		var label = function () {
			switch (level) {
				case 1:
					return $elm$core$String$fromInt(index) + '. ';
				case 2:
					return $author$project$Markdown$Render$alphabet(index) + '. ';
				case 3:
					return $author$project$Markdown$Render$romanNumeral(index) + '. ';
				case 4:
					return $elm$core$String$fromInt(index) + '. ';
				default:
					return 'N. ';
			}
		}();
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mm-olist-item'),
					$author$project$Markdown$Render$blockLevelClass(level - 1),
					$author$project$Markdown$Render$idAttr(id),
					A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
				]),
			_List_fromArray(
				[
					A4(
					$author$project$Markdown$Render$renderBlockContent,
					selectedId,
					id,
					level,
					A2(
						$author$project$Markdown$Render$prependToParagraph,
						$author$project$MDInline$OrdinaryText(label),
						blockContent))
				]));
	});
var $author$project$Markdown$Render$renderPoetry = F4(
	function (selectedId, id, level, blockContent) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'margin-left', '24px'),
					A2($elm$html$Html$Attributes$style, 'margin-top', '18px'),
					A2($elm$html$Html$Attributes$style, 'margin-right', '36px'),
					A2($elm$html$Html$Attributes$style, ' margin-bottom', '18px'),
					A2($elm$html$Html$Attributes$style, 'white-space', 'nowrap'),
					$author$project$Markdown$Render$marginOfLevel(level),
					A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
				]),
			_List_fromArray(
				[
					A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
				]));
	});
var $author$project$Markdown$Render$renderQuotation = F4(
	function (selectedId, id, level, blockContent) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mm-quotation'),
					$author$project$Markdown$Render$blockLevelClass(level),
					A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
				]),
			_List_fromArray(
				[
					A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
				]));
	});
var $author$project$Markdown$Render$renderSvg_ = function (svgText) {
	var _v0 = $Garados007$elm_svg_parser$SvgParser$parse(svgText);
	if (!_v0.$) {
		var data = _v0.a;
		return data;
	} else {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('X6')
				]),
			_List_Nil);
	}
};
var $author$project$Markdown$Render$renderSvg = function (blockContent) {
	if ((!blockContent.$) && (!blockContent.a.$)) {
		var svgText = blockContent.a.a;
		return $author$project$Markdown$Render$renderSvg_(svgText);
	} else {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('X5')
				]),
			_List_Nil);
	}
};
var $author$project$Markdown$Render$renderUListItem = F4(
	function (selectedId, id, level, blockContent) {
		var label = function () {
			switch (level) {
				case 1:
					return '•  ';
				case 2:
					return '◊ ';
				case 3:
					return '† ';
				case 4:
					return '‡ ';
				default:
					return 'N. ';
			}
		}();
		return A2(
			$elm$html$Html$li,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('mm-ulist-item'),
					$author$project$Markdown$Render$blockLevelClass(level - 1),
					A2(
					$elm$html$Html$Attributes$style,
					'margin-left',
					$elm$core$String$fromInt(20 * level) + 'px'),
					$author$project$Markdown$Render$idAttr(id),
					A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
				]),
			_List_fromArray(
				[
					A4(
					$author$project$Markdown$Render$renderBlockContent,
					selectedId,
					id,
					level,
					A2(
						$author$project$Markdown$Render$prependToParagraph,
						$author$project$MDInline$OrdinaryText(label),
						blockContent))
				]));
	});
var $author$project$Markdown$Render$renderBlock = F3(
	function (selectedId, id, block) {
		if (!block.a.$) {
			switch (block.a.a.$) {
				case 2:
					var _v9 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					if (blockContent.$ === 1) {
						var str = blockContent.a;
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$author$project$Markdown$Render$idAttr(id),
									$author$project$Markdown$Render$marginOfLevel(level),
									A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
								]),
							_List_fromArray(
								[
									$author$project$Markdown$Render$displayMathText(str)
								]));
					} else {
						return $author$project$Markdown$Render$displayMathText('');
					}
				case 1:
					var _v11 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					if (blockContent.$ === 1) {
						var str = blockContent.a;
						return A2(
							$elm$html$Html$pre,
							_List_fromArray(
								[
									$author$project$Markdown$Render$idAttr(id),
									$author$project$Markdown$Render$marginOfLevel(level),
									A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(str)
								]));
					} else {
						return $author$project$Markdown$Render$displayMathText('');
					}
				default:
					var lang = block.a.a.a;
					var level = block.b;
					var blockContent = block.c;
					var _v13 = _Utils_Tuple2(blockContent, lang);
					if (_v13.a.$ === 1) {
						if (_v13.b === 8) {
							var str = _v13.a.a;
							var _v14 = _v13.b;
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Markdown$Render$blockLevelClass(level - 1),
										A2($elm$html$Html$Attributes$style, 'white-space', 'pre-wrap')
									]),
								_List_fromArray(
									[
										$elm$html$Html$text(
										A2($author$project$BlockType$deleteLangPrefix, lang, str))
									]));
						} else {
							var str = _v13.a.a;
							return A2(
								$elm$html$Html$div,
								_List_fromArray(
									[
										$author$project$Markdown$Render$blockLevelClass(level - 1)
									]),
								_List_fromArray(
									[
										$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$useTheme($pablohirafuji$elm_syntax_highlight$SyntaxHighlight$monokai),
										A2(
										$elm$core$Result$withDefault,
										A2(
											$elm$html$Html$pre,
											_List_Nil,
											_List_fromArray(
												[
													A2(
													$elm$html$Html$code,
													_List_Nil,
													_List_fromArray(
														[
															$elm$html$Html$text(str)
														]))
												])),
										A2(
											$elm$core$Result$map,
											$pablohirafuji$elm_syntax_highlight$SyntaxHighlight$toBlockHtml(
												$elm$core$Maybe$Just(1)),
											A2(
												$author$project$Markdown$Render$parserOfLanguage,
												lang,
												$elm$core$String$trimLeft(
													A2($author$project$BlockType$deleteLangPrefix, lang, str)))))
									]));
						}
					} else {
						return $author$project$Markdown$Render$displayMathText('');
					}
			}
		} else {
			switch (block.a.a.$) {
				case 0:
					var _v1 = block.a.a;
					return A2(
						$elm$html$Html$div,
						_List_fromArray(
							[
								$author$project$Markdown$Render$idAttr(id),
								A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
							]),
						_List_Nil);
				case 8:
					var _v2 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent);
				case 10:
					var _v3 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent);
				case 3:
					var k = block.a.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A5($author$project$Markdown$Render$renderHeading, selectedId, id, k, level, blockContent);
				case 5:
					var _v4 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$Render$renderQuotation, selectedId, id, level, blockContent);
				case 7:
					var _v5 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$Render$renderPoetry, selectedId, id, level, blockContent);
				case 1:
					var _v6 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$Render$renderUListItem, selectedId, id, level, blockContent);
				case 2:
					var index = block.a.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A5($author$project$Markdown$Render$renderOListItem, selectedId, id, index, level, blockContent);
				case 4:
					var _v7 = block.a.a;
					return A2(
						$elm$html$Html$hr,
						_List_fromArray(
							[
								$author$project$Markdown$Render$idAttr(id),
								$elm$html$Html$Attributes$class('mm-thematic-break'),
								A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
							]),
						_List_Nil);
				case 9:
					var _v8 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent);
				case 11:
					var _v15 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A2(
						$elm$html$Html$td,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('mm-table-cell')
							]),
						_List_fromArray(
							[
								A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
							]));
				case 12:
					var _v16 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A2(
						$elm$html$Html$tr,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('mm-table-row')
							]),
						_List_fromArray(
							[
								A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
							]));
				case 13:
					var _v17 = block.a.a;
					var level = block.b;
					var blockContent = block.c;
					return A2(
						$elm$html$Html$table,
						_List_fromArray(
							[
								$elm$html$Html$Attributes$class('mm-table'),
								$author$project$Markdown$Render$marginOfLevel(level)
							]),
						_List_fromArray(
							[
								A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
							]));
				default:
					var info = block.a.a.a;
					var level = block.b;
					var blockContent = block.c;
					var _v18 = $elm$core$String$trim(info);
					switch (_v18) {
						case 'svg':
							return $author$project$Markdown$Render$renderSvg(blockContent);
						case 'invisible':
							return A2($elm$html$Html$span, _List_Nil, _List_Nil);
						default:
							return A5($author$project$Markdown$Render$renderAsVerbatim, info, selectedId, id, level, blockContent);
					}
			}
		}
	});
var $author$project$Markdown$Render$selectedStyle = F2(
	function (targetId, currentId) {
		return _Utils_eq(targetId, currentId) ? _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'background-color', $author$project$Markdown$Render$highlightColor),
				A2($elm$html$Html$Attributes$style, 'line-height', '1.5'),
				A2($elm$html$Html$Attributes$style, 'white-space', 'normal')
			]) : _List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'background-color', '#fff'),
				A2($elm$html$Html$Attributes$style, 'line-height', '1.5'),
				A2($elm$html$Html$Attributes$style, 'white-space', 'normal')
			]);
	});
var $author$project$Markdown$Render$mmBlockTreeToHtml = F2(
	function (selectedId, tree) {
		if (_Utils_eq(
			$zwilias$elm_rosetree$Tree$children(tree),
			_List_Nil)) {
			var _v0 = $zwilias$elm_rosetree$Tree$label(tree);
			var id = _v0.a;
			var bt = _v0.b;
			var lev = _v0.c;
			var content = _v0.d;
			if ((!bt.$) && (bt.a.$ === 2)) {
				var _v2 = bt.a;
				return A3(
					$elm$html$Html$Keyed$node,
					'spanXXX',
					_Utils_ap(
						A2($author$project$Markdown$Render$selectedStyle, selectedId, id),
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$author$project$Markdown$Parse$stringFromId(id))
							])),
					_List_fromArray(
						[
							_Utils_Tuple2(
							$author$project$Markdown$Parse$stringFromId(id),
							A3(
								$author$project$Markdown$Render$renderBlock,
								selectedId,
								id,
								A3($author$project$Markdown$Parse$MDBlock, bt, lev, content)))
						]));
			} else {
				return A3(
					$elm$html$Html$Keyed$node,
					'span',
					_Utils_ap(
						A2($author$project$Markdown$Render$selectedStyle, selectedId, id),
						_List_fromArray(
							[
								$elm$html$Html$Events$onClick(
								$author$project$Markdown$Parse$stringFromId(id))
							])),
					_List_fromArray(
						[
							_Utils_Tuple2(
							$author$project$Markdown$Parse$stringFromId(id),
							A3(
								$author$project$Markdown$Render$renderBlock,
								selectedId,
								id,
								A3($author$project$Markdown$Parse$MDBlock, bt, lev, content)))
						]));
			}
		} else {
			var _v3 = $zwilias$elm_rosetree$Tree$label(tree);
			if (_v3.b.$ === 1) {
				switch (_v3.b.a.$) {
					case 12:
						var id = _v3.a;
						var _v4 = _v3.b.a;
						return A2(
							$elm$html$Html$tr,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mm-table-row'),
									A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
								]),
							A2(
								$elm$core$List$map,
								$author$project$Markdown$Render$mmBlockTreeToHtml(selectedId),
								$zwilias$elm_rosetree$Tree$children(tree)));
					case 13:
						var id = _v3.a;
						var _v5 = _v3.b.a;
						return A3(
							$elm$html$Html$Keyed$node,
							'table',
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mm-table'),
									$elm$html$Html$Attributes$id(
									$author$project$Markdown$Parse$stringFromId(id)),
									$elm$html$Html$Events$onClick(
									$author$project$Markdown$Parse$stringFromId(id)),
									A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
								]),
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Markdown$Parse$stringFromId(id),
									A2(
										$elm$html$Html$div,
										_List_Nil,
										A2(
											$elm$core$List$map,
											$author$project$Markdown$Render$mmBlockTreeToHtml(selectedId),
											$zwilias$elm_rosetree$Tree$children(tree))))
								]));
					case 8:
						var id = _v3.a;
						var _v6 = _v3.b.a;
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$class('mm-plain'),
									$elm$html$Html$Attributes$id(
									$author$project$Markdown$Parse$stringFromId(id)),
									$elm$html$Html$Events$onClick(
									$author$project$Markdown$Parse$stringFromId(id)),
									A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
								]),
							A2(
								$elm$core$List$map,
								$author$project$Markdown$Render$mmBlockTreeToHtml(selectedId),
								$zwilias$elm_rosetree$Tree$children(tree)));
					default:
						var id = _v3.a;
						return A3(
							$elm$html$Html$Keyed$node,
							'div',
							_List_fromArray(
								[
									A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
								]),
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Markdown$Parse$stringFromId(id),
									A2(
										$elm$html$Html$div,
										_List_fromArray(
											[
												$elm$html$Html$Attributes$id(
												$author$project$Markdown$Parse$stringFromId(id)),
												$elm$html$Html$Events$onClick(
												$author$project$Markdown$Parse$stringFromId(id))
											]),
										_List_fromArray(
											[
												A3(
												$author$project$Markdown$Render$renderBlock,
												selectedId,
												id,
												$author$project$Markdown$Parse$project(
													$zwilias$elm_rosetree$Tree$label(tree))),
												A2(
												$elm$html$Html$div,
												_List_fromArray(
													[
														$author$project$Markdown$Render$idAttr(id)
													]),
												A2(
													$elm$core$List$map,
													$author$project$Markdown$Render$mmBlockTreeToHtml(selectedId),
													$zwilias$elm_rosetree$Tree$children(tree)))
											])))
								]));
				}
			} else {
				switch (_v3.b.a.$) {
					case 2:
						var id = _v3.a;
						var _v7 = _v3.b.a;
						var content = _v3.d;
						return A3(
							$elm$html$Html$Keyed$node,
							'div',
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(
									$author$project$Markdown$Parse$stringFromId(id)),
									$elm$html$Html$Events$onClick(
									$author$project$Markdown$Parse$stringFromId(id)),
									A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
								]),
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Markdown$Parse$stringFromId(id),
									$author$project$Markdown$Render$displayMathText(
										$author$project$Markdown$Parse$projectedStringOfBlockContent(content)))
								]));
					case 1:
						var id = _v3.a;
						var _v8 = _v3.b.a;
						return A3(
							$elm$html$Html$Keyed$node,
							'pre',
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(
									$author$project$Markdown$Parse$stringFromId(id)),
									$elm$html$Html$Events$onClick(
									$author$project$Markdown$Parse$stringFromId(id)),
									A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
								]),
							_List_fromArray(
								[
									_Utils_Tuple2(
									$author$project$Markdown$Parse$stringFromId(id),
									$elm$html$Html$text('OUF: Verbatim!'))
								]));
					default:
						var id = _v3.a;
						return A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									$elm$html$Html$Attributes$id(
									$author$project$Markdown$Parse$stringFromId(id)),
									$elm$html$Html$Events$onClick(
									$author$project$Markdown$Parse$stringFromId(id)),
									A2($author$project$Markdown$Render$selectedStyle_, selectedId, id)
								]),
							_List_fromArray(
								[
									$elm$html$Html$text('OUF: Code!')
								]));
				}
			}
		}
	});
var $author$project$Markdown$Render$id0 = _Utils_Tuple2(-1, -1);
var $author$project$Markdown$Render$renderTOCHeading = F5(
	function (selectedId, id, k, level, blockContent) {
		var name = '#' + $author$project$Markdown$Render$nameFromBlockContent(blockContent);
		switch (k) {
			case 1:
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(name),
							A2($elm$html$Html$Attributes$style, 'font-size', '13pt')
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
			case 2:
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(name),
							$elm$html$Html$Attributes$class('toc-level-0'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
			case 3:
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(name),
							$elm$html$Html$Attributes$class('toc-level-1'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
			case 4:
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(name),
							$elm$html$Html$Attributes$class('toc-level-2'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
			default:
				return A2(
					$elm$html$Html$a,
					_List_fromArray(
						[
							$elm$html$Html$Attributes$href(name),
							$elm$html$Html$Attributes$class('toc-level-3'),
							A2($elm$html$Html$Attributes$style, 'display', 'block')
						]),
					_List_fromArray(
						[
							A4($author$project$Markdown$Render$renderBlockContent, selectedId, id, level, blockContent)
						]));
		}
	});
var $author$project$Markdown$Render$renderHeadingForTOC = function (heading) {
	if ((heading.a.$ === 1) && (heading.a.a.$ === 3)) {
		var k = heading.a.a.a;
		var level = heading.b;
		var blockContent = heading.c;
		return A5(
			$author$project$Markdown$Render$renderTOCHeading,
			_Utils_Tuple2(0, 0),
			$author$project$Markdown$Render$id0,
			k,
			level,
			blockContent);
	} else {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$elm$html$Html$Attributes$class('X4')
				]),
			_List_Nil);
	}
};
var $author$project$Markdown$Render$tocStyle = _List_fromArray(
	[
		A2($elm$html$Html$Attributes$style, 'font-size', 'x-small'),
		A2($elm$html$Html$Attributes$style, 'margin-left', '15px'),
		A2($elm$html$Html$Attributes$style, 'color', '#555'),
		$elm$html$Html$Attributes$id('toc')
	]);
var $author$project$Markdown$Render$renderTableOfContents = F2(
	function (heading, blockList) {
		var contentHeading = A3(
			$author$project$Markdown$Parse$MDBlock,
			$author$project$BlockType$MarkdownBlock(
				$author$project$BlockType$Heading(1)),
			1,
			$author$project$Markdown$Parse$M(
				$author$project$MDInline$Paragraph(
					_List_fromArray(
						[
							$author$project$MDInline$Line(
							_List_fromArray(
								[
									$author$project$MDInline$OrdinaryText(heading)
								]))
						]))));
		return function (x) {
			return A2($elm$html$Html$div, $author$project$Markdown$Render$tocStyle, x);
		}(
			A2(
				$elm$core$List$map,
				$author$project$Markdown$Render$renderHeadingForTOC,
				function (x) {
					return A2($elm$core$List$cons, contentHeading, x);
				}(
					A2($elm$core$List$drop, 1, blockList))));
	});
var $zwilias$elm_rosetree$Tree$foldlHelp = F4(
	function (f, acc, trees, nextSets) {
		foldlHelp:
		while (true) {
			if (!trees.b) {
				if (nextSets.b) {
					var set = nextSets.a;
					var sets = nextSets.b;
					var $temp$f = f,
						$temp$acc = acc,
						$temp$trees = set,
						$temp$nextSets = sets;
					f = $temp$f;
					acc = $temp$acc;
					trees = $temp$trees;
					nextSets = $temp$nextSets;
					continue foldlHelp;
				} else {
					return acc;
				}
			} else {
				if (!trees.a.b.b) {
					var _v2 = trees.a;
					var d = _v2.a;
					var rest = trees.b;
					var $temp$f = f,
						$temp$acc = A2(f, d, acc),
						$temp$trees = rest,
						$temp$nextSets = nextSets;
					f = $temp$f;
					acc = $temp$acc;
					trees = $temp$trees;
					nextSets = $temp$nextSets;
					continue foldlHelp;
				} else {
					var _v3 = trees.a;
					var d = _v3.a;
					var xs = _v3.b;
					var rest = trees.b;
					var $temp$f = f,
						$temp$acc = A2(f, d, acc),
						$temp$trees = xs,
						$temp$nextSets = A2($elm$core$List$cons, rest, nextSets);
					f = $temp$f;
					acc = $temp$acc;
					trees = $temp$trees;
					nextSets = $temp$nextSets;
					continue foldlHelp;
				}
			}
		}
	});
var $zwilias$elm_rosetree$Tree$foldl = F3(
	function (f, acc, t) {
		return A4(
			$zwilias$elm_rosetree$Tree$foldlHelp,
			f,
			acc,
			_List_fromArray(
				[t]),
			_List_Nil);
	});
var $zwilias$elm_rosetree$Tree$foldr = F3(
	function (f, acc, t) {
		return A3(
			$elm$core$List$foldl,
			f,
			acc,
			A3($zwilias$elm_rosetree$Tree$foldl, $elm$core$List$cons, _List_Nil, t));
	});
var $zwilias$elm_rosetree$Tree$flatten = function (t) {
	return A3($zwilias$elm_rosetree$Tree$foldr, $elm$core$List$cons, _List_Nil, t);
};
var $author$project$Markdown$Render$typeOfMDBlock = function (_v0) {
	var bt = _v0.a;
	return bt;
};
var $author$project$Markdown$Render$isHeading = function (block) {
	var _v0 = $author$project$Markdown$Render$typeOfMDBlock(block);
	if ((_v0.$ === 1) && (_v0.a.$ === 3)) {
		return true;
	} else {
		return false;
	}
};
var $author$project$Markdown$Render$tableOfContentsAsBlocks = function (blockTree) {
	return A2(
		$elm$core$List$filter,
		$author$project$Markdown$Render$isHeading,
		$zwilias$elm_rosetree$Tree$flatten(blockTree));
};
var $author$project$Markdown$Render$tableOfContentsAsHtml = F2(
	function (heading, blockTree) {
		return A2(
			$author$project$Markdown$Render$renderTableOfContents,
			heading,
			$author$project$Markdown$Render$tableOfContentsAsBlocks(blockTree));
	});
var $author$project$Markdown$Render$renderHtmlWithExternalTOC = F3(
	function (selectedId, heading, ast) {
		var toc_ = A2(
			$author$project$Markdown$Render$tableOfContentsAsHtml,
			heading,
			A2($zwilias$elm_rosetree$Tree$map, $author$project$Markdown$Parse$project, ast));
		var bodyAST = $zwilias$elm_rosetree$Tree$children(ast);
		var html = A2(
			$elm$core$List$map,
			$author$project$Markdown$Render$mmBlockTreeToHtml(selectedId),
			bodyAST);
		var title_ = A2(
			$elm$core$Maybe$withDefault,
			A2($elm$html$Html$div, _List_Nil, _List_Nil),
			$elm$core$List$head(html));
		var body = A2($elm$core$List$drop, 1, html);
		return {
			cN: A2(
				$elm$html$Html$div,
				_List_fromArray(
					[
						$elm$html$Html$Attributes$id('__RENDERED_TEXT__')
					]),
				body),
			de: A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[title_])),
			df: A2(
				$elm$html$Html$div,
				_List_Nil,
				_List_fromArray(
					[toc_]))
		};
	});
var $author$project$Markdown$Render$masterId = $elm$html$Html$Attributes$id('__RENDERED_TEXT__');
var $author$project$Markdown$Render$renderHtmlWithTOC = F3(
	function (selectedId, heading, ast) {
		var toc_ = A2(
			$author$project$Markdown$Render$tableOfContentsAsHtml,
			heading,
			A2($zwilias$elm_rosetree$Tree$map, $author$project$Markdown$Parse$project, ast));
		var spacing = A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'padding-bottom', '40px')
				]),
			_List_Nil);
		var separator = A2(
			$elm$html$Html$hr,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'padding-bottom', '2px'),
					A2($elm$html$Html$Attributes$style, 'background-color', '#aaa'),
					A2($elm$html$Html$Attributes$style, 'border-width', '0')
				]),
			_List_Nil);
		var bodyAST = $zwilias$elm_rosetree$Tree$children(ast);
		var headOfBodyAST = A2(
			$elm$core$Maybe$map,
			$zwilias$elm_rosetree$Tree$map($author$project$Markdown$Parse$project),
			$elm$core$List$head(bodyAST));
		var html = A2(
			$elm$core$List$map,
			$author$project$Markdown$Render$mmBlockTreeToHtml(selectedId),
			bodyAST);
		var title_ = A2(
			$elm$core$Maybe$withDefault,
			A2($elm$html$Html$div, _List_Nil, _List_Nil),
			$elm$core$List$head(html));
		var body = A2($elm$core$List$drop, 1, html);
		var _v0 = A2(
			$elm$core$Maybe$map,
			A2($elm$core$Basics$composeL, $author$project$Markdown$Render$isHeading, $zwilias$elm_rosetree$Tree$label),
			headOfBodyAST);
		if ((!_v0.$) && _v0.a) {
			return A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Markdown$Render$masterId]),
				A2(
					$elm$core$List$cons,
					title_,
					A2(
						$elm$core$List$cons,
						separator,
						A2(
							$elm$core$List$cons,
							toc_,
							A2(
								$elm$core$List$cons,
								separator,
								A2($elm$core$List$cons, spacing, body))))));
		} else {
			return A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Markdown$Render$masterId]),
				A2(
					$elm$core$List$cons,
					separator,
					A2(
						$elm$core$List$cons,
						toc_,
						A2(
							$elm$core$List$cons,
							separator,
							A2(
								$elm$core$List$cons,
								spacing,
								A2($elm$core$List$cons, title_, body))))));
		}
	});
var $author$project$Markdown$Render$fromAST = F2(
	function (selectedId, blockTreeWithId) {
		return function (x) {
			return A2(
				$elm$html$Html$div,
				_List_fromArray(
					[$author$project$Markdown$Render$masterId]),
				x);
		}(
			A2(
				$elm$core$List$map,
				$author$project$Markdown$Render$mmBlockTreeToHtml(selectedId),
				$zwilias$elm_rosetree$Tree$children(blockTreeWithId)));
	});
var $author$project$Markdown$Render$toHtmlWithId = F4(
	function (selectedId, version, option, str) {
		return A2(
			$author$project$Markdown$Render$fromAST,
			selectedId,
			A3($author$project$Markdown$Parse$toMDBlockTree, version, option, str));
	});
var $author$project$Markdown$Render$withOptions = F5(
	function (markdownOption, outputOption, selectedId, version, content) {
		switch (outputOption.$) {
			case 0:
				return $author$project$Markdown$Render$Simple(
					A4($author$project$Markdown$Render$toHtmlWithId, selectedId, version, markdownOption, content));
			case 1:
				var title_ = outputOption.a;
				return $author$project$Markdown$Render$Simple(
					A3(
						$author$project$Markdown$Render$renderHtmlWithTOC,
						selectedId,
						title_,
						A3($author$project$Markdown$Parse$toMDBlockTree, version, markdownOption, content)));
			default:
				var title_ = outputOption.a;
				return $author$project$Markdown$Render$Composite(
					A3(
						$author$project$Markdown$Render$renderHtmlWithExternalTOC,
						selectedId,
						title_,
						A3($author$project$Markdown$Parse$toMDBlockTree, version, markdownOption, content)));
		}
	});
var $author$project$Umuli$render = F2(
	function (selectedId, data) {
		switch (data.$) {
			case 0:
				var data_ = data.a;
				return A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Element$html,
					A2(
						$elm$core$List$map,
						$elm$html$Html$map($author$project$Umuli$MLMsg),
						A2($author$project$MiniLatex$EditSimple$get, selectedId, data_)));
			case 1:
				var data_ = data.a;
				var output = A5(
					$author$project$Markdown$Render$withOptions,
					2,
					$author$project$Markdown$Option$InternalTOC('Contents'),
					_Utils_Tuple2(0, 0),
					0,
					data_.gZ);
				if (!output.$) {
					var html = output.a;
					return _List_fromArray(
						[
							$mdgriffith$elm_ui$Element$html(
							A2($elm$html$Html$map, $author$project$Umuli$MDMsg, html))
						]);
				} else {
					var docParts = output.a;
					return A2(
						$elm$core$List$map,
						$mdgriffith$elm_ui$Element$html,
						A2(
							$elm$core$List$map,
							$elm$html$Html$map($author$project$Umuli$MDMsg),
							_List_fromArray(
								[docParts.de, docParts.df, docParts.cN])));
				}
			case 2:
				var data_ = data.a;
				return A2(
					$elm$core$List$map,
					$mdgriffith$elm_ui$Element$map($author$project$Umuli$CYMsg),
					A2($author$project$CaYaTeX$render, '_id_', data_));
			default:
				var data_ = data.a;
				return _List_fromArray(
					[
						$mdgriffith$elm_ui$Element$html(
						A2(
							$elm$html$Html$div,
							_List_fromArray(
								[
									A2($elm$html$Html$Attributes$style, 'white-space', 'pre')
								]),
							_List_fromArray(
								[
									$elm$html$Html$text(data_)
								])))
					]);
		}
	});
var $author$project$Helper$Update$render = F2(
	function (model, str) {
		var newData = A4($author$project$Umuli$update, model.cL, str, $elm$core$Maybe$Nothing, model.dC);
		var renderedText = A2($author$project$Umuli$render, '', newData);
		var n = $elm$core$String$fromInt(model.cL);
		return _Utils_Tuple2(
			_Utils_update(
				model,
				{cL: model.cL + 2, dC: newData}),
			A2(
				$elm$random$Random$generate,
				$author$project$Model$NewSeed,
				A2($elm$random$Random$int, 1, 10000)));
	});
var $author$project$Helper$File$save = function (model) {
	var content = $author$project$Editor$getContent(model.dL);
	return A3($elm$file$File$Download$string, model.dQ, 'text/x-tex', content);
};
var $author$project$Config$saveFileInterval = 5;
var $author$project$Helper$Update$saveFileToServer = function (model) {
	var content = $author$project$Editor$getContent(model.dL);
	return _Utils_Tuple2(
		_Utils_update(
			model,
			{dJ: false}),
		A2($author$project$Helper$File$postToServer, model.dQ, content));
};
var $author$project$Model$NoOp = {$: 1};
var $author$project$UI$setViewPortForSelectedLine = F2(
	function (element, viewport) {
		var y = ((viewport.hB.hI + element.dM.hI) - element.dM.cV) - 100;
		return A2(
			$elm$core$Task$attempt,
			function (_v0) {
				return $author$project$Model$NoOp;
			},
			A3($elm$browser$Browser$Dom$setViewportOf, '__RENDERED_TEXT__', 0, y));
	});
var $author$project$Helper$Update$setViewPortForElement = F2(
	function (model, result) {
		if (!result.$) {
			var _v1 = result.a;
			var element = _v1.a;
			var viewport = _v1.b;
			return _Utils_Tuple2(
				model,
				A2($author$project$UI$setViewPortForSelectedLine, element, viewport));
		} else {
			return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Text$cayatex = '\n\n[section CaYaTeX Test Document]\n\nBy James Carlson and Nicholas Yang\n\n%Notice the a leading percent sign makes a line into\na comment.\n\n[italic CaYaTeX is a simple yet powerful markup\nlanguage that compiles to both LaTeX and Html.]\n\n[italic The present document, written entirely in\nCaYaTeX, lays out our design goals and demonstrates\nsome of the progress we have made towards specifiying\nthe language and implementing it in Elm. While our\nwork is incomplete, it is a start.]\n\n[italic We are also working on an implementation\nin Rust. This will, among other things, help us to\ncross-validate the specification.]\n\nThe project is open source: [link\nhttps://github.com/jxxcarlson/cayatex]\n\n[section2 Design Goals]\n\nThe goals of the CaYaTeX project are for the language\nto be\n\n[list |numbered|\n[item [strong Small], hence easy to learn. [italic To\nthis end there are just two constructs: ordinary text\nand [code elements]].]\n\n[item [strong Powerful]. We borrow ideas from\nfunctional programming. Elements have a Lisp-like\nsyntax with brackets in place of parentheses. An\nelement has the form [code raw##[name |argument-list|\nbody]##] or simply [code raw##[name body]##] The\nargument list is a comma-delimited sequence of strings.\nThe body is an element. The partial element [code name\nargs] is a function [code Element -> Element]. Such\nfunctions can be composed, as in mathematics or as in\nlanguages such as Haskell and Elm. ]\n\n\n[item [strong Extensible]. [italic Via a macro\nfacility].]\n\n[item [strong Multiple inputs and outputs.] Documents\nwritten in CaYaTeX can be compiled to LaTeX, Markdown,\nand HTML. Markdown documents can be compiled to\nCaYaTeX.]\n\n[item [strong Web-ready]. CaYaTeX has a differential\ncompiler that makes it suitable for real-time editing,\ne.g., in a web app. ]\n\n[item [strong Kind and Helpful]. Displays friendly and\ninformative error messages in real time in the rendered\ntext; has hooks for highlighting the corresponding\nsource text in a suitable IDE/editor.]\n\n[item [strong Modern]. Unicode compatible.]]\n\n[strong Note.] [fontRGB |50, 0, 200| At the moment\nwe have not yet implemented differential compilation,\nwhich greatly speeds up compilation during editing.\nAll in due time!]\n\n[section2 Mathematics]\n\n\nPythagoras says that [math a^2 + b^2 = c^2]. This is\nan [strong [italic extremely]] cool result. But just\nas cool is the below:\n\n[mathdisplay \\sum_{n=1}^\\infty \\frac{1}{n} = \\infty,]\n\nwhich goes back to the work of Nicole Oresme\n(1320–1382). See the entry in the [link\n|Stanford Encyclopedia of Philosophy|\nhttps://plato.stanford.edu/entries/nicole-oresme/].\nYou can also consult [link\nhttps://en.wikipedia.org/wiki/Nicole_Oresme].\n\nWe can also do some high-school math, with that\nbeautifully curved integral sign that attracts so many\npeople to the subject:\n\n[mathdisplay \\int_0^1 x^n dx = \\frac{1}{n+1}]\n\nAnd of course, we can also do theorems:\n\n[theorem There are infinitely many primes [math p\n\\equiv 1 \\text{ mod } 4.]]\n\n[corollary |Euclid| There are infinitely many primes.]\n\n\n[section2 Color]\n\nExample: [highlightRGB |252, 178, 50| [fontRGB |23,\n57, 156| [strong What color is this?]]]\n\n[code raw###[highlightRGB |252, 178, 50| [fontRGB |23,\n57, 156| [strong What color is this?]]]###]\n\nNote the nesting of elements, aka function composition.\nWhen we have our macro facility up and running, users\ncan abbreviate constructs like this one, e.g., just\nsay [code raw##[myhighlight| What color is this?]##]\n\n[section2 SourceText]\n\nOne can design elements which manipulate data\n(numerical computations, visualization). Here are some\ndata computations:\n\n[sum 1.2, 2, 3.4, 4]\n\n[average 1.2, 2, 3.4, 4]\n\n[stdev |precision:3| 1.2, 2, 3.4, 4]\n\nIn the numerical examples, the precision of the result\nhas a default value of 2. This can be changed, as one\nsees in the source of the third example, e.g., you\ncan have\n\n[codeblock raw##[stdev | 1.2, 2, 3.4, 4]## ]\n\nor\n\n[codeblock raw##[stdev |precision:3| 1.2, 2, 3.4, 4]## ]\n\n[section2 Graphs]\n\nBelow are three simple data visualizations. We plan\nmore, and more configurability of what you see here.\n\n[section3 Bar graphs]\n\n[bargraph |column:2, yShift: 0.2, caption: Global temperature anomaly 1880-1957|\n1880,-0.12\n1881,-0.07\n1882,-0.07\n1883,-0.15\n1884,-0.21\n1885,-0.22\n1886,-0.21\n1887,-0.25\n1888,-0.15\n1889,-0.10\n1890,-0.33\n1891,-0.25\n1892,-0.30\n1893,-0.31\n1894,-0.28\n1895,-0.22\n1896,-0.09\n1897,-0.12\n1898,-0.26\n1899,-0.12\n1900,-0.07\n1901,-0.14\n1902,-0.25\n1903,-0.34\n1904,-0.42\n1905,-0.29\n1906,-0.22\n1907,-0.37\n1908,-0.44\n1909,-0.43\n1910,-0.38\n1911,-0.43\n1912,-0.33\n1913,-0.31\n1914,-0.14\n1915,-0.07\n1916,-0.29\n1917,-0.31\n1918,-0.20\n1919,-0.20\n1920,-0.21\n1921,-0.14\n1922,-0.22\n1923,-0.21\n1924,-0.24\n1925,-0.14\n1926,-0.06\n1927,-0.14\n1928,-0.17\n1929,-0.29\n1930,-0.09\n1931,-0.07\n1932,-0.11\n1933,-0.24\n1934,-0.10\n1935,-0.14\n1936,-0.11\n1937,-0.01\n1938,-0.02\n1939,-0.01\n1940,0.10\n1941,0.19\n1942,0.15\n1943,0.16\n1944,0.29\n1945,0.17\n1946,-0.01\n1947,-0.05\n1948,-0.06\n1949,-0.06\n1950,-0.17\n1951,-0.01\n1952,0.02\n1953,0.09\n1954,-0.12\n1955,-0.14\n1956,-0.20\n1957,0.05\n]\n\nThe bargraph code:\n\n[codeblock raw##[bargraph |column:2,\n    caption: Global temperature anomaly 1880-1957|\n1880,-0.12\n1881,-0.07\n...]## ]\n\n[section3 Line graphs]\n\n[linegraph |caption: Global temperature anomaly 1880-1957|\n1880,-0.12\n1881,-0.07\n1882,-0.07\n1883,-0.15\n1884,-0.21\n1885,-0.22\n1886,-0.21\n1887,-0.25\n1888,-0.15\n1889,-0.10\n1890,-0.33\n1891,-0.25\n1892,-0.30\n1893,-0.31\n1894,-0.28\n1895,-0.22\n1896,-0.09\n1897,-0.12\n1898,-0.26\n1899,-0.12\n1900,-0.07\n1901,-0.14\n1902,-0.25\n1903,-0.34\n1904,-0.42\n1905,-0.29\n1906,-0.22\n1907,-0.37\n1908,-0.44\n1909,-0.43\n1910,-0.38\n1911,-0.43\n1912,-0.33\n1913,-0.31\n1914,-0.14\n1915,-0.07\n1916,-0.29\n1917,-0.31\n1918,-0.20\n1919,-0.20\n1920,-0.21\n1921,-0.14\n1922,-0.22\n1923,-0.21\n1924,-0.24\n1925,-0.14\n1926,-0.06\n1927,-0.14\n1928,-0.17\n1929,-0.29\n1930,-0.09\n1931,-0.07\n1932,-0.11\n1933,-0.24\n1934,-0.10\n1935,-0.14\n1936,-0.11\n1937,-0.01\n1938,-0.02\n1939,-0.01\n1940,0.10\n1941,0.19\n1942,0.15\n1943,0.16\n1944,0.29\n1945,0.17\n1946,-0.01\n1947,-0.05\n1948,-0.06\n1949,-0.06\n1950,-0.17\n1951,-0.01\n1952,0.02\n1953,0.09\n1954,-0.12\n1955,-0.14\n1956,-0.20\n1957,0.05\n]\n\nThe linegraph code (CSV format):\n\n[codeblock raw##[linegraph |caption: Global\ntemperature anomaly 1880-1957|\n1880,-0.12\n1881,-0.0]\n##]\n\n[section3 Scatter plots]\n\nUse the same syntax as before, but with "scatterplot"\nin place of "linegraph."\n\n[codeblock raw##[scatterplot |col1:3,  col2:4\n  , caption: Hubble\'s 1929 data| ...]##]\n\n[scatterplot |col1:3,  col2:4, caption: Hubble\'s 1929 data|\nobject,ms,R (Mpc),v (km/sec),mt,Mt,"D from mt,Mt",,,,,,,,,\nS.Mag.,..,0.032,170,1.5,-16.0,0.03,Slope when Intercept set to zero,423.901701290206,km/sec/Mpc,,,,,,\nL.Mag.,..,0.03,290,0.5,-17.2,0.03,,,,,,,,,\nN.G.C.6822,..,0.214,-130,9,-12.7,0.22,Slope,453.85999408475,km/sec/Mpc,,,,,,\n598,..,0.263,-70,7,-15.1,0.26,Intercept,-40.4360087766413,km/sec,,,,,,\n221,..,0.275,-185,8.8,-13.4,0.28,R Squared,0.623168376295362,,,,,,,\n224,..,0.275,-220,5,-17.2,0.28,,,,,,,,,\n5457,17,0.45,200,9.9,-13.3,0.44,,,,,,,,,\n4736,17.3,0.5,290,8.4,-15.1,0.50,,,,,,,,,\n5194,17.3,0.5,270,7.4,-16.1,0.50,,,,,,,,,\n4449,17.8,0.63,200,9.5,-14.5,0.63,,,,,,,,,\n4214,18.3,0.8,300,11.3,-13.2,0.79,,,,,,,,,\n3031,18.5,0.9,-30,8.3,-16.4,0.87,,,,,,,,,\n3627,18.5,0.9,650,9.1,-15.7,0.91,,,,,,,,,\n4826,18.5,0.9,150,9,-15.7,0.87,,,,,,,,,\n5236,18.5,0.9,500,10.4,-14.4,0.91,,,,,,,,,\n1068,18.7,1,920,9.1,-15.9,1.00,,,,,,,,,\n5055,19,1.1,450,9.6,-15.6,1.10,,,,,,,,,\n7331,19,1.1,500,10.4,-14.8,1.10,,,,,,,,,\n4258,19.5,1.4,500,8.7,-17.0,1.38,,,,,,,,,\n4151,20,1.7,960,12,-14.2,1.74,,,,,,,,,\n4382,..,2,500,10,-16.5,2.00,,,,,,,,,\n4472,..,2,850,8.8,-17.7,2.00,,,,,,,,,\n4486,..,2,800,9.7,-16.8,2.00,,,,,,,,,\n4649,..,2,1090,9.5,-17.0,2.00,,,,,,,,,\nTable 1,,,,,-15.5,,,,,,,,,,\n]\n\n\n[section2 Unicode]\n\nYou can freely use unicode characters, as in this\npoetry element:\n\n[poetry\nА я иду, где ничего не надо,\nГде самый милый спутник — только тень,\nИ веет ветер из глухого сада,\nА под ногой могильная ступень.\n\n— Анна Ахматова\n]\n\n[section2 Code]\n\nTime for some code: [code raw##col :: Int -> Matrix\na -> [a]##]. Do you recognize the language (ha ha)?\n\nWe can also do code blocks. Syntax highlighting coming\nlater.\n\n[codeblock raw##\n# For Sudoku 3x3 subsquare function\n\ncol :: Int -> Matrix a -> [a]\ncol k = fmap ( !! k)\n\ncols :: Matrix a -> Matrix a\ncols m =\n    fmap (\\k -> col k m) [0..n]\n       where n = length m - 1\n##]\n\n\n[italic [highlight Note the use of Rust-like raw\nstrings in the source text to avoid escaping all the\nbrackets.]]\n\n\n\n[section2 Images]\n\n[image |caption: Rotkehlchen\naufgeplustert, width: 200, placement:\ncenter|https://i.pinimg.com/originals/d4/07/a4/d407a45bcf3ade18468ac7ba633244b9.jpg]\n\n[code raw##[image |caption: Rotkehlchen aufgeplustert, width: 200, placement: center| https://..jpg]##]\n\n[section2 Lists]\n\nNote that lists can be nested and can be given a title\nif desired. The symbol for "bulleted" lists is • by\ndefault, but can be specified by the user.\n\nA numbered list has "numbered" as its first argument,\nas in the example below.\n\n[list |numbered, title:Errands and other stuff|\n\n    [item Bread, milk, O-juice]\n\n    [item Sand paper, white paint]\n\n    [list |none|\n\n        [item A]\n\n        [item B]\n\n        [list |§, title:Greek symbols|\n\n            [item [math \\alpha = 0.123]]\n\n            [item  [math \\beta = 4.567]]\n\n]]]\n\n\n[section2 Appendix: Technical Stuff]\n\nBecause CaYaTeX is so simple, the type of the AST is\nvery small:\n\n[codeblock\n\nraw##type Element\n    = Text String (Maybe SourceMap)\n    | Element\n        String\n        (List String)\n        Element (Maybe SourceMap)\n    | LX (List Element) (Maybe SourceMap)\n##\n]\n\n\n\n';
var $author$project$Text$markdownDemo = '\n# A Pure Elm Markdown Parser\n\n\n## Introduction\n\n![Hummingbird::left](http://noteimages.s3.amazonaws.com/jxxcarlson/hummingbird2.jpg) \n\n\n  This project grew out of the need to have a pure Elm Markdown\n parser-renderer that could also handle mathematical\n text.  Mathematical text is rendered by\n MathJax 3, which has very large performance advantages\n compared to its predecessors.\n The Markdown used here offers three options: *Standard*,\n *Extended* and *ExtendedMath*. The Extended option provides for strike-through\n text, verbatim blocks, poetry blocks, and tables.  ExtendedMath\n handles\n formulas written in TeX/LaTeX:\n\n$$\n\\int_{-\\infty}^\\infty e^{-x^2} dx = \\pi\n$$\n\nNote also that there is an automatically generated\nactive table of contents. It can be placed inside the document\nat the top, to one side, as it is here, or it can be absent.\n\n\nThe [library](https://package.elm-lang.org/packages/jxxcarlson/elm-markdown/latest/)\n with which this demo app is built is suitable for\nlight-weight writing tasks that require\nmathematical notation — problem sets, short class notes, etc.\n\n\nThis project is a work in progress: more to to do make\nit adhere as closely as possible to the CommonMark spec.\nWrite me at jxxcarlson@gmail.com with comments and bug reports,\nor post an issue on the [GitHub repo](https://github.com/jxxcarlson/elm-markdown).\n\nFor installation, see the notes\nat the end. This Markdown package is written in pure Elm.\nIt uses MathJax.js to render math formulas.\n\nBelow we illustrate some typical Markdown elements: images, links, headings, etc.\n\n\nLink: [New York Times](http://nytimes.com)\n\nText styles: **bold** *italic* ~~strike it out~~\n\n\n## Inline Math\n\nThis is a test: $a^2 + b^2 = c^2$.\n\n## Display Math\n\nSo is this:\n\n$$\n\\int_0^1 x^n dx = \\frac{1}{n+1}\n$$\n\n\n## Code\n\nHe said that `a := 0` is an initialization statement.\n\n\n```python\nsum = 0\nfor n in range(1..100):\n  sum = sum + 1.0/n\nsum\n```\n\n## SVG\n\nUse an `@@svg` block to render SVG.\n\n@@svg\n<svg width="100" height="100">\n<circle cx="50" cy="50" r="40" \nstroke="blue" stroke-width="3" fill="cyan" />\n</svg>\n\nHere is the source text:\n\n```nolang\n@@svg\n<svg width="100" height="100">\n<circle cx="50" cy="50" r="40"\nstroke="blue" stroke-width="3" fill="cyan" />\n</svg>\n```\n\n## Verbatim and Tables\n\nA verbatim block begins and ends with four tick marks.\nIt is just like a code block, except that there is no\nsyntax highlighting.  Verbatim blocks are an extension\nof normal Markdown.\n\n````\nVerbatim text has many uses:\n\n   Element    |    Z\n   --------------------\n   Altium     |    4/5\n   Brazilium  |    7/5\n   Certium    |    9/5\n````\n\nBut better here is to use Markdown tables:\n\n|  Element  | Symbol |  Z | A |\n| Hydrogen  | H      |  1 | 1.008   |\n| Helium    | He     |  2 |  4.0026 |\n| Lithium   | Li     |  3 |  6.94   |\n| Beryllium | Be     |  4 |  9.0122 |\n| Boron     | B      |  5 | 10.81   |\n| Carbon    | C      |  6 | 12.011  |\n| Nitrogen  | N      |  7 | 14.007  |\n| Oxygen    | O      |  8 | 15.999  |\n| Flourine  | F      |  9 | 18.998  |\n| Neon      | Ne     | 10 | 20.180  |\n\n\n## Lists\n\nIndent by four spaces for each level.  List items\nare separated by blank lines.\n\n- Solids\n\n    - Iron *(metal)*\n    \n        - Iron disulfide (Pyrite): $FeS_2$, crystalline\n\n        - Iron(II) sulfed $FeS$, not stable, amorphous\n\n    - Selenium *(use for solar cells)*\n\n- Liquids\n\n    - Alcohol *(careful!)*\n\n    - Water *(Ok to drink)*\n\n## Numbered lists\n\nYou can use math inside a numbered list\n\n**Problem Set 19A**\n\n4. Show that $u(x,t) = f(x - ct)$ is a solution to the equation $\\partial u(x,t)/\\partial x + c^{-1} \\partial u(x,t)/\\partial t = 0$.\n\n3. State the wave equation and show that $u(x,t)$ as above is a solution to it.\n\n2. In what direction does the wave defined by $u(x,t) = f(x - ct)$ move?\n\n4.  Find a solution of the wave equation that represents a pulse moving in the opposite direction.\n\n\n\n## Quotations\n\n\nQuotations are offset:\n\n\n> Four score and seven years ago our fathers brought\nforth on this continent, a new nation, conceived in\nLiberty, and dedicated to the proposition that all\nmen are created equal.\n\n> Now we are engaged in a great civil war, testing\nwhether that nation, or any nation so conceived and\nso dedicated, can long endure. We are met on a great\nbattle-field of that war. We have come to dedicate a\nportion of that field, as a final resting place for\nthose who here gave their lives that that nation might\nlive. It is altogether fitting and proper that we\nshould do this.\n\n> But, in a larger sense, we can not dedicate—we can\nnot consecrate—we can not hallow—this ground. The\nbrave men, living and dead, who struggled here, have\nconsecrated it, far above our poor power to add or\ndetract. The world will little note, nor long remember\nwhat we say here, but it can never forget what they did\nhere. It is for us the living, rather, to be dedicated\nhere to the unfinished work which they who fought here\nhave thus far so nobly advanced. It is rather for us\nto be here dedicated to the great task remaining before\nus—that from these honored dead we take increased\ndevotion to that cause for which they gave the last\nfull measure of devotion—that we here highly resolve\nthat these dead shall not have died in vain—that\nthis nation, under God, shall have a new birth of\nfreedom—and that government of the people, by the\npeople, for the people, shall not perish from the earth.\n\n— Abraham Lincoln, *Gettysbug Address*\n\n## Poetry (Extension)\n\nPoetry blocks, an extension of normal Markdown,\nid implemented as a code block with language\n*verse*.\n\n```verse\nTwas brillig, and the slithy toves\nDid gyre and gimble in the wabe:\nAll mimsy were the borogoves,\nAnd the mome raths outgrabe.\n\nBeware the Jabberwock, my son!\nThe jaws that bite, the claws that catch!\nBeware the Jubjub bird, and shun\nThe frumious Bandersnatch!\n```\n\n\nEtcetera!\n\n___\n\n## Installation\n\n\nTo compile, use\n\n```elm\nelm make --output=Main.js\n```\n\nThen open `index.html` to run the app.\n\n\n';
var $author$project$Text$textDictionary = $elm$core$Dict$fromList(
	_List_fromArray(
		[
			_Utils_Tuple2('start.tex', $author$project$Text$start),
			_Utils_Tuple2('markdown.md', $author$project$Text$markdownDemo),
			_Utils_Tuple2('start.cyt', $author$project$Text$cayatex)
		]));
var $author$project$Main$update = F2(
	function (msg, model) {
		switch (msg.$) {
			case 1:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 0:
				var editorMsg = msg.a;
				return A3($author$project$Helper$Update$handleEditorMsg, model, msg, editorMsg);
			case 4:
				var str = msg.a;
				return A2($author$project$Helper$Update$getContent, model, str);
			case 6:
				var msg_ = msg.a;
				return A2($author$project$Helper$Update$debounceMsg, model, msg_);
			case 5:
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{ea: str}),
					$elm$core$Platform$Cmd$none);
			case 3:
				var str = msg.a;
				return A2($author$project$Helper$Update$render, model, str);
			case 7:
				return _Utils_Tuple2(
					model,
					A2(
						$elm$random$Random$generate,
						$author$project$Model$NewSeed,
						A2($elm$random$Random$int, 1, 10000)));
			case 8:
				var newSeed = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{b0: newSeed}),
					$elm$core$Platform$Cmd$none);
			case 9:
				return $author$project$Helper$Update$fullRender(model);
			case 10:
				var result = msg.a;
				return A2($author$project$Helper$Update$setViewPortForElement, model, result);
			case 11:
				var laTeXMsg = msg.a;
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 22:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bm: !model.bm}),
					$elm$core$Platform$Cmd$none);
			case 12:
				return _Utils_Tuple2(
					model,
					$author$project$Helper$File$export(model));
			case 13:
				var _v1 = model.cj;
				if (_v1 === 1) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{dJ: false}),
						$author$project$Helper$File$save(model));
				} else {
					return $author$project$Helper$Update$saveFileToServer(model);
				}
			case 25:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 26:
				var result = msg.a;
				if (!result.$) {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{cj: 0}),
						$elm$core$Platform$Cmd$none);
				} else {
					return _Utils_Tuple2(
						_Utils_update(
							model,
							{cj: 1}),
						$elm$core$Platform$Cmd$none);
				}
			case 14:
				return $author$project$Helper$Update$fileRequested(model);
			case 15:
				var file = msg.a;
				return A3(
					$author$project$Helper$Update$fileSelected,
					model,
					$elm$file$File$name(file),
					file);
			case 16:
				var contents = msg.a;
				return A3(
					$author$project$Helper$Update$load_,
					model.dQ,
					contents,
					_Utils_update(
						model,
						{dJ: true}));
			case 24:
				var fileName = msg.a;
				var _v3 = A2($elm$core$Dict$get, fileName, $author$project$Text$textDictionary);
				if (_v3.$ === 1) {
					return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
				} else {
					var content = _v3.a;
					return _Utils_Tuple2(
						A3($author$project$Helper$Update$loadDocument, fileName, content, model),
						$elm$core$Platform$Cmd$none);
				}
			case 2:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 17:
				return $author$project$Helper$LaTeX$printToPDF(model);
			case 18:
				var printingState = msg.a;
				var cmd = (!printingState) ? A2(
					$elm$core$Task$perform,
					$elm$core$Basics$always(
						$author$project$Model$FinallyDoCleanPrintArtefacts(model.dI)),
					$elm$core$Process$sleep(1000)) : $elm$core$Platform$Cmd$none;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{er: printingState}),
					cmd);
			case 19:
				var result = msg.a;
				return A2($author$project$Helper$LaTeX$gotPdfLink, model, result);
			case 20:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
			case 21:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{dJ: true}),
					$elm$core$Platform$Cmd$none);
			case 23:
				var documentType = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							dC: A4(
								$author$project$Umuli$init,
								$author$project$Model$umuliLang(documentType),
								model.cL,
								'',
								$elm$core$Maybe$Nothing),
							dJ: false,
							fL: documentType,
							dL: A2($author$project$Editor$initWithContent, '', model.cI),
							bm: false
						}),
					A2($author$project$Helper$File$postToServer, model.dQ, ' '));
			case 27:
				var newTime = msg.a;
				return ((!A2($elm$core$Basics$modBy, $author$project$Config$saveFileInterval, model.cy)) && model.dJ) ? $author$project$Helper$Update$saveFileToServer(model) : _Utils_Tuple2(
					_Utils_update(
						model,
						{dB: newTime, cy: model.cy + 1}),
					$elm$core$Platform$Cmd$none);
			case 28:
				var str = msg.a;
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bv: str}),
					$elm$core$Platform$Cmd$none);
			case 29:
				var documentType = $author$project$Model$findDocumentType(model.bv);
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{
							dC: A4(
								$author$project$Umuli$init,
								$author$project$Model$umuliLang(documentType),
								model.cL,
								'',
								$elm$core$Maybe$Nothing),
							dJ: false,
							fL: documentType,
							dL: A2($author$project$Editor$initWithContent, '', model.cI),
							dQ: model.bv,
							bm: false,
							bv: ''
						}),
					A2($author$project$Helper$File$postToServer, model.bv, ''));
			case 30:
				return _Utils_Tuple2(
					_Utils_update(
						model,
						{bm: false}),
					$elm$core$Platform$Cmd$none);
			case 32:
				var msg_ = msg.a;
				return A2(
					$Janiczek$cmd_extra$Cmd$Extra$withCmd,
					$author$project$Outside$sendInfo(msg_),
					model);
			case 31:
				var infoForElm = msg.a;
				var clipboard = infoForElm;
				return A2($author$project$Main$pasteToEditorAndClipboard, model, clipboard);
			default:
				return _Utils_Tuple2(model, $elm$core$Platform$Cmd$none);
		}
	});
var $author$project$Model$Umuli = function (a) {
	return {$: 21, a: a};
};
var $mdgriffith$elm_ui$Internal$Model$CenterY = 1;
var $mdgriffith$elm_ui$Element$centerY = $mdgriffith$elm_ui$Internal$Model$AlignY(1);
var $mdgriffith$elm_ui$Internal$Model$FocusStyleOption = function (a) {
	return {$: 1, a: a};
};
var $mdgriffith$elm_ui$Element$focusStyle = $mdgriffith$elm_ui$Internal$Model$FocusStyleOption;
var $author$project$Style$Element$gray = function (g) {
	return A3($mdgriffith$elm_ui$Element$rgb, g, g, g);
};
var $author$project$Main$htmlAttribute = F2(
	function (key, value) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$attribute, key, value));
	});
var $mdgriffith$elm_ui$Internal$Model$OnlyDynamic = F2(
	function (a, b) {
		return {$: 2, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic = F2(
	function (a, b) {
		return {$: 1, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Model$AllowHover = 1;
var $mdgriffith$elm_ui$Internal$Model$Layout = 0;
var $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle = {
	fl: $elm$core$Maybe$Nothing,
	fs: $elm$core$Maybe$Nothing,
	gW: $elm$core$Maybe$Just(
		{
			b8: 0,
			cc: A4($mdgriffith$elm_ui$Internal$Model$Rgba, 155 / 255, 203 / 255, 1, 1),
			bZ: _Utils_Tuple2(0, 0),
			eQ: 3
		})
};
var $mdgriffith$elm_ui$Internal$Model$optionsToRecord = function (options) {
	var combine = F2(
		function (opt, record) {
			switch (opt.$) {
				case 0:
					var hoverable = opt.a;
					var _v4 = record.cl;
					if (_v4.$ === 1) {
						return _Utils_update(
							record,
							{
								cl: $elm$core$Maybe$Just(hoverable)
							});
					} else {
						return record;
					}
				case 1:
					var focusStyle = opt.a;
					var _v5 = record.fS;
					if (_v5.$ === 1) {
						return _Utils_update(
							record,
							{
								fS: $elm$core$Maybe$Just(focusStyle)
							});
					} else {
						return record;
					}
				default:
					var renderMode = opt.a;
					var _v6 = record.go;
					if (_v6.$ === 1) {
						return _Utils_update(
							record,
							{
								go: $elm$core$Maybe$Just(renderMode)
							});
					} else {
						return record;
					}
			}
		});
	var andFinally = function (record) {
		return {
			fS: function () {
				var _v0 = record.fS;
				if (_v0.$ === 1) {
					return $mdgriffith$elm_ui$Internal$Model$focusDefaultStyle;
				} else {
					var focusable = _v0.a;
					return focusable;
				}
			}(),
			cl: function () {
				var _v1 = record.cl;
				if (_v1.$ === 1) {
					return 1;
				} else {
					var hoverable = _v1.a;
					return hoverable;
				}
			}(),
			go: function () {
				var _v2 = record.go;
				if (_v2.$ === 1) {
					return 0;
				} else {
					var actualMode = _v2.a;
					return actualMode;
				}
			}()
		};
	};
	return andFinally(
		A3(
			$elm$core$List$foldr,
			combine,
			{fS: $elm$core$Maybe$Nothing, cl: $elm$core$Maybe$Nothing, go: $elm$core$Maybe$Nothing},
			options));
};
var $mdgriffith$elm_ui$Internal$Model$toHtml = F2(
	function (mode, el) {
		switch (el.$) {
			case 0:
				var html = el.a;
				return html($mdgriffith$elm_ui$Internal$Model$asEl);
			case 1:
				var html = el.a.f$;
				var styles = el.a.hb;
				return A2(
					html,
					mode(styles),
					$mdgriffith$elm_ui$Internal$Model$asEl);
			case 2:
				var text = el.a;
				return $mdgriffith$elm_ui$Internal$Model$textElement(text);
			default:
				return $mdgriffith$elm_ui$Internal$Model$textElement('');
		}
	});
var $mdgriffith$elm_ui$Internal$Model$renderRoot = F3(
	function (optionList, attributes, child) {
		var options = $mdgriffith$elm_ui$Internal$Model$optionsToRecord(optionList);
		var embedStyle = function () {
			var _v0 = options.go;
			if (_v0 === 1) {
				return $mdgriffith$elm_ui$Internal$Model$OnlyDynamic(options);
			} else {
				return $mdgriffith$elm_ui$Internal$Model$StaticRootAndDynamic(options);
			}
		}();
		return A2(
			$mdgriffith$elm_ui$Internal$Model$toHtml,
			embedStyle,
			A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				attributes,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[child]))));
	});
var $mdgriffith$elm_ui$Internal$Model$SansSerif = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$rootStyle = function () {
	var families = _List_fromArray(
		[
			$mdgriffith$elm_ui$Internal$Model$Typeface('Open Sans'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Helvetica'),
			$mdgriffith$elm_ui$Internal$Model$Typeface('Verdana'),
			$mdgriffith$elm_ui$Internal$Model$SansSerif
		]);
	return _List_fromArray(
		[
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$bgColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'bg-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0)),
				'background-color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 1, 1, 1, 0))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontColor,
			A3(
				$mdgriffith$elm_ui$Internal$Model$Colored,
				'fc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(
					A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1)),
				'color',
				A4($mdgriffith$elm_ui$Internal$Model$Rgba, 0, 0, 0, 1))),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontSize,
			$mdgriffith$elm_ui$Internal$Model$FontSize(20)),
			A2(
			$mdgriffith$elm_ui$Internal$Model$StyleClass,
			$mdgriffith$elm_ui$Internal$Flag$fontFamily,
			A2(
				$mdgriffith$elm_ui$Internal$Model$FontFamily,
				A3($elm$core$List$foldl, $mdgriffith$elm_ui$Internal$Model$renderFontClassName, 'font-', families),
				families))
		]);
}();
var $mdgriffith$elm_ui$Element$layoutWith = F3(
	function (_v0, attrs, child) {
		var options = _v0.gx;
		return A3(
			$mdgriffith$elm_ui$Internal$Model$renderRoot,
			options,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$htmlClass(
					A2(
						$elm$core$String$join,
						' ',
						_List_fromArray(
							[$mdgriffith$elm_ui$Internal$Style$classes.gL, $mdgriffith$elm_ui$Internal$Style$classes.fj, $mdgriffith$elm_ui$Internal$Style$classes.gX]))),
				_Utils_ap($mdgriffith$elm_ui$Internal$Model$rootStyle, attrs)),
			child);
	});
var $author$project$Style$Element$noFocus = {fl: $elm$core$Maybe$Nothing, fs: $elm$core$Maybe$Nothing, gW: $elm$core$Maybe$Nothing};
var $mdgriffith$elm_ui$Internal$Flag$overflow = $mdgriffith$elm_ui$Internal$Flag$flag(20);
var $mdgriffith$elm_ui$Element$scrollbarY = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.gR);
var $author$project$Model$Export = {$: 12};
var $mdgriffith$elm_ui$Internal$Model$Button = {$: 8};
var $elm$html$Html$Attributes$boolProperty = F2(
	function (key, bool) {
		return A2(
			_VirtualDom_property,
			key,
			$elm$json$Json$Encode$bool(bool));
	});
var $elm$html$Html$Attributes$disabled = $elm$html$Html$Attributes$boolProperty('disabled');
var $mdgriffith$elm_ui$Element$Input$enter = 'Enter';
var $mdgriffith$elm_ui$Internal$Model$NoAttribute = {$: 0};
var $mdgriffith$elm_ui$Element$Input$hasFocusStyle = function (attr) {
	if (((attr.$ === 4) && (attr.b.$ === 11)) && (!attr.b.a)) {
		var _v1 = attr.b;
		var _v2 = _v1.a;
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$focusDefault = function (attrs) {
	return A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, attrs) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass('focusable');
};
var $mdgriffith$elm_ui$Element$Events$onClick = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Events$onClick);
var $elm$json$Json$Decode$fail = _Json_fail;
var $elm$virtual_dom$VirtualDom$MayPreventDefault = function (a) {
	return {$: 2, a: a};
};
var $elm$html$Html$Events$preventDefaultOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayPreventDefault(decoder));
	});
var $mdgriffith$elm_ui$Element$Input$onKeyLookup = function (lookup) {
	var decode = function (code) {
		var _v0 = lookup(code);
		if (_v0.$ === 1) {
			return $elm$json$Json$Decode$fail('No key matched');
		} else {
			var msg = _v0.a;
			return $elm$json$Json$Decode$succeed(msg);
		}
	};
	var isKey = A2(
		$elm$json$Json$Decode$andThen,
		decode,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
	return $mdgriffith$elm_ui$Internal$Model$Attr(
		A2(
			$elm$html$Html$Events$preventDefaultOn,
			'keydown',
			A2(
				$elm$json$Json$Decode$map,
				function (fired) {
					return _Utils_Tuple2(fired, true);
				},
				isKey)));
};
var $mdgriffith$elm_ui$Internal$Flag$cursor = $mdgriffith$elm_ui$Internal$Flag$flag(21);
var $mdgriffith$elm_ui$Element$pointer = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.fG);
var $mdgriffith$elm_ui$Element$Input$space = ' ';
var $elm$html$Html$Attributes$tabindex = function (n) {
	return A2(
		_VirtualDom_attribute,
		'tabIndex',
		$elm$core$String$fromInt(n));
};
var $mdgriffith$elm_ui$Element$Input$button = F2(
	function (attrs, _v0) {
		var label = _v0.gi;
		var onPress = _v0.aA;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$div,
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cf + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aS + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.gS + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.ei)))))),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$pointer,
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Element$Input$focusDefault(attrs),
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$Button),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Internal$Model$Attr(
											$elm$html$Html$Attributes$tabindex(0)),
										function () {
											if (onPress.$ === 1) {
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Internal$Model$Attr(
														$elm$html$Html$Attributes$disabled(true)),
													attrs);
											} else {
												var msg = onPress.a;
												return A2(
													$elm$core$List$cons,
													$mdgriffith$elm_ui$Element$Events$onClick(msg),
													A2(
														$elm$core$List$cons,
														$mdgriffith$elm_ui$Element$Input$onKeyLookup(
															function (code) {
																return _Utils_eq(code, $mdgriffith$elm_ui$Element$Input$enter) ? $elm$core$Maybe$Just(msg) : (_Utils_eq(code, $mdgriffith$elm_ui$Element$Input$space) ? $elm$core$Maybe$Just(msg) : $elm$core$Maybe$Nothing);
															}),
														attrs));
											}
										}()))))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $mdgriffith$elm_ui$Internal$Model$Active = 2;
var $mdgriffith$elm_ui$Internal$Model$PseudoSelector = F2(
	function (a, b) {
		return {$: 11, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$active = $mdgriffith$elm_ui$Internal$Flag$flag(32);
var $mdgriffith$elm_ui$Internal$Model$Nearby = F2(
	function (a, b) {
		return {$: 9, a: a, b: b};
	});
var $elm$virtual_dom$VirtualDom$mapAttribute = _VirtualDom_mapAttribute;
var $mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle = F2(
	function (fn, attr) {
		switch (attr.$) {
			case 0:
				return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
			case 2:
				var description = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Describe(description);
			case 6:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignX(x);
			case 5:
				var y = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$AlignY(y);
			case 7:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Width(x);
			case 8:
				var x = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Height(x);
			case 3:
				var x = attr.a;
				var y = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$Class, x, y);
			case 4:
				var flag = attr.a;
				var style = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$StyleClass, flag, style);
			case 9:
				var location = attr.a;
				var elem = attr.b;
				return A2(
					$mdgriffith$elm_ui$Internal$Model$Nearby,
					location,
					A2($mdgriffith$elm_ui$Internal$Model$map, fn, elem));
			case 1:
				var htmlAttr = attr.a;
				return $mdgriffith$elm_ui$Internal$Model$Attr(
					A2($elm$virtual_dom$VirtualDom$mapAttribute, fn, htmlAttr));
			default:
				var fl = attr.a;
				var trans = attr.b;
				return A2($mdgriffith$elm_ui$Internal$Model$TransformComponent, fl, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$removeNever = function (style) {
	return A2($mdgriffith$elm_ui$Internal$Model$mapAttrFromStyle, $elm$core$Basics$never, style);
};
var $mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper = F2(
	function (attr, _v0) {
		var styles = _v0.a;
		var trans = _v0.b;
		var _v1 = $mdgriffith$elm_ui$Internal$Model$removeNever(attr);
		switch (_v1.$) {
			case 4:
				var style = _v1.b;
				return _Utils_Tuple2(
					A2($elm$core$List$cons, style, styles),
					trans);
			case 10:
				var flag = _v1.a;
				var component = _v1.b;
				return _Utils_Tuple2(
					styles,
					A2($mdgriffith$elm_ui$Internal$Model$composeTransformation, trans, component));
			default:
				return _Utils_Tuple2(styles, trans);
		}
	});
var $mdgriffith$elm_ui$Internal$Model$unwrapDecorations = function (attrs) {
	var _v0 = A3(
		$elm$core$List$foldl,
		$mdgriffith$elm_ui$Internal$Model$unwrapDecsHelper,
		_Utils_Tuple2(_List_Nil, $mdgriffith$elm_ui$Internal$Model$Untransformed),
		attrs);
	var styles = _v0.a;
	var transform = _v0.b;
	return A2(
		$elm$core$List$cons,
		$mdgriffith$elm_ui$Internal$Model$Transform(transform),
		styles);
};
var $mdgriffith$elm_ui$Element$mouseDown = function (decs) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$active,
		A2(
			$mdgriffith$elm_ui$Internal$Model$PseudoSelector,
			2,
			$mdgriffith$elm_ui$Internal$Model$unwrapDecorations(decs)));
};
var $author$project$UI$exportButton = function (width) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseDown(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
					])),
				A2($mdgriffith$elm_ui$Element$paddingXY, 4, 8)
			]),
		{
			gi: $mdgriffith$elm_ui$Element$text('Export'),
			aA: $elm$core$Maybe$Just($author$project$Model$Export)
		});
};
var $author$project$View$Footer$fileArchive = function (fa) {
	if (!fa) {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					$author$project$Style$Element$gray(0.5))
				]),
			$mdgriffith$elm_ui$Element$text('Archive: server/data'));
	} else {
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					$author$project$Style$Element$gray(0.5))
				]),
			$mdgriffith$elm_ui$Element$text('Archive: Disk'));
	}
};
var $author$project$View$Footer$fileStatus = function (isDirty) {
	var color = isDirty ? A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0) : A3($mdgriffith$elm_ui$Element$rgb, 0, 0.7, 0);
	return A2(
		$mdgriffith$elm_ui$Element$el,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(color),
				$mdgriffith$elm_ui$Element$centerX,
				$mdgriffith$elm_ui$Element$centerY,
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(8)),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(8))
			]),
		$mdgriffith$elm_ui$Element$text(''));
};
var $author$project$Model$FullRender = {$: 9};
var $author$project$UI$fullRenderButton = function (width) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseDown(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
					])),
				A2($mdgriffith$elm_ui$Element$paddingXY, 4, 8)
			]),
		{
			gi: $mdgriffith$elm_ui$Element$text('Render'),
			aA: $elm$core$Maybe$Just($author$project$Model$FullRender)
		});
};
var $author$project$Model$LoadDocument = function (a) {
	return {$: 24, a: a};
};
var $author$project$UI$loadDocumentButton = function (fileName) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseDown(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
					])),
				A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8)
			]),
		{
			gi: $mdgriffith$elm_ui$Element$text(fileName),
			aA: $elm$core$Maybe$Just(
				$author$project$Model$LoadDocument(fileName))
		});
};
var $mdgriffith$elm_ui$Internal$Model$InFront = 4;
var $mdgriffith$elm_ui$Element$createNearby = F2(
	function (loc, element) {
		if (element.$ === 3) {
			return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
		} else {
			return A2($mdgriffith$elm_ui$Internal$Model$Nearby, loc, element);
		}
	});
var $mdgriffith$elm_ui$Element$inFront = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 4, element);
};
var $mdgriffith$elm_ui$Internal$Model$Bottom = 2;
var $mdgriffith$elm_ui$Element$alignBottom = $mdgriffith$elm_ui$Internal$Model$AlignY(2);
var $author$project$Model$CancelNewfile = {$: 30};
var $author$project$UI$cancelNewFileButton = A2(
	$mdgriffith$elm_ui$Element$Input$button,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$mouseDown(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					$author$project$Style$Element$gray(0.9)),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
				])),
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(30)),
			$mdgriffith$elm_ui$Element$Font$color(
			$author$project$Style$Element$gray(0.9)),
			$mdgriffith$elm_ui$Element$Background$color(
			$author$project$Style$Element$gray(0.4)),
			A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8)
		]),
	{
		gi: $mdgriffith$elm_ui$Element$text('Cancel'),
		aA: $elm$core$Maybe$Just($author$project$Model$CancelNewfile)
	});
var $author$project$Model$GotFilename = function (a) {
	return {$: 28, a: a};
};
var $mdgriffith$elm_ui$Element$Input$Above = 2;
var $mdgriffith$elm_ui$Element$Input$Label = F3(
	function (a, b, c) {
		return {$: 0, a: a, b: b, c: c};
	});
var $mdgriffith$elm_ui$Element$Input$labelAbove = $mdgriffith$elm_ui$Element$Input$Label(2);
var $mdgriffith$elm_ui$Element$Input$TextInputNode = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Element$Input$TextArea = {$: 1};
var $mdgriffith$elm_ui$Internal$Model$LivePolite = {$: 6};
var $mdgriffith$elm_ui$Element$Region$announce = $mdgriffith$elm_ui$Internal$Model$Describe($mdgriffith$elm_ui$Internal$Model$LivePolite);
var $mdgriffith$elm_ui$Element$Input$applyLabel = F3(
	function (attrs, label, input) {
		if (label.$ === 1) {
			var labelText = label.a;
			return A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asColumn,
				$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
				attrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[input])));
		} else {
			var position = label.a;
			var labelAttrs = label.b;
			var labelChild = label.c;
			var labelElement = A4(
				$mdgriffith$elm_ui$Internal$Model$element,
				$mdgriffith$elm_ui$Internal$Model$asEl,
				$mdgriffith$elm_ui$Internal$Model$div,
				labelAttrs,
				$mdgriffith$elm_ui$Internal$Model$Unkeyed(
					_List_fromArray(
						[labelChild])));
			switch (position) {
				case 2:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cn),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
				case 3:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asColumn,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cn),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				case 0:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cn),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[input, labelElement])));
				default:
					return A4(
						$mdgriffith$elm_ui$Internal$Model$element,
						$mdgriffith$elm_ui$Internal$Model$asRow,
						$mdgriffith$elm_ui$Internal$Model$NodeName('label'),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cn),
							attrs),
						$mdgriffith$elm_ui$Internal$Model$Unkeyed(
							_List_fromArray(
								[labelElement, input])));
			}
		}
	});
var $mdgriffith$elm_ui$Element$Input$autofill = A2(
	$elm$core$Basics$composeL,
	$mdgriffith$elm_ui$Internal$Model$Attr,
	$elm$html$Html$Attributes$attribute('autocomplete'));
var $mdgriffith$elm_ui$Internal$Model$Behind = 5;
var $mdgriffith$elm_ui$Element$behindContent = function (element) {
	return A2($mdgriffith$elm_ui$Element$createNearby, 5, element);
};
var $mdgriffith$elm_ui$Element$moveUp = function (y) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveY,
		$mdgriffith$elm_ui$Internal$Model$MoveY(-y));
};
var $mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding = function (attrs) {
	var gatherSpacing = F2(
		function (attr, found) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v2 = attr.b;
				var x = _v2.b;
				var y = _v2.c;
				if (found.$ === 1) {
					return $elm$core$Maybe$Just(y);
				} else {
					return found;
				}
			} else {
				return found;
			}
		});
	var _v0 = A3($elm$core$List$foldr, gatherSpacing, $elm$core$Maybe$Nothing, attrs);
	if (_v0.$ === 1) {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	} else {
		var vSpace = _v0.a;
		return $mdgriffith$elm_ui$Element$moveUp(
			$elm$core$Basics$floor(vSpace / 2));
	}
};
var $mdgriffith$elm_ui$Element$clip = A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$overflow, $mdgriffith$elm_ui$Internal$Style$classes.fz);
var $mdgriffith$elm_ui$Internal$Flag$borderColor = $mdgriffith$elm_ui$Internal$Flag$flag(28);
var $mdgriffith$elm_ui$Element$Border$color = function (clr) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderColor,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Colored,
			'bc-' + $mdgriffith$elm_ui$Internal$Model$formatColorClass(clr),
			'border-color',
			clr));
};
var $mdgriffith$elm_ui$Element$Input$darkGrey = A3($mdgriffith$elm_ui$Element$rgb, 186 / 255, 189 / 255, 182 / 255);
var $mdgriffith$elm_ui$Element$Input$defaultTextPadding = A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12);
var $mdgriffith$elm_ui$Internal$Flag$borderRound = $mdgriffith$elm_ui$Internal$Flag$flag(17);
var $mdgriffith$elm_ui$Element$Border$rounded = function (radius) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderRound,
		A3(
			$mdgriffith$elm_ui$Internal$Model$Single,
			'br-' + $elm$core$String$fromInt(radius),
			'border-radius',
			$elm$core$String$fromInt(radius) + 'px'));
};
var $mdgriffith$elm_ui$Element$Input$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $mdgriffith$elm_ui$Internal$Model$BorderWidth = F5(
	function (a, b, c, d, e) {
		return {$: 6, a: a, b: b, c: c, d: d, e: e};
	});
var $mdgriffith$elm_ui$Element$Border$width = function (v) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$borderWidth,
		A5(
			$mdgriffith$elm_ui$Internal$Model$BorderWidth,
			'b-' + $elm$core$String$fromInt(v),
			v,
			v,
			v,
			v));
};
var $mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle = _List_fromArray(
	[
		$mdgriffith$elm_ui$Element$Input$defaultTextPadding,
		$mdgriffith$elm_ui$Element$Border$rounded(3),
		$mdgriffith$elm_ui$Element$Border$color($mdgriffith$elm_ui$Element$Input$darkGrey),
		$mdgriffith$elm_ui$Element$Background$color($mdgriffith$elm_ui$Element$Input$white),
		$mdgriffith$elm_ui$Element$Border$width(1),
		$mdgriffith$elm_ui$Element$spacing(5),
		$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
		$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink)
	]);
var $mdgriffith$elm_ui$Element$Input$getHeight = function (attr) {
	if (attr.$ === 8) {
		var h = attr.a;
		return $elm$core$Maybe$Just(h);
	} else {
		return $elm$core$Maybe$Nothing;
	}
};
var $mdgriffith$elm_ui$Internal$Model$Label = function (a) {
	return {$: 5, a: a};
};
var $mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute = function (label) {
	if (label.$ === 1) {
		var textLabel = label.a;
		return $mdgriffith$elm_ui$Internal$Model$Describe(
			$mdgriffith$elm_ui$Internal$Model$Label(textLabel));
	} else {
		return $mdgriffith$elm_ui$Internal$Model$NoAttribute;
	}
};
var $mdgriffith$elm_ui$Element$Input$isConstrained = function (len) {
	isConstrained:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return true;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isConstrained;
			default:
				var l = len.b;
				return true;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isHiddenLabel = function (label) {
	if (label.$ === 1) {
		return true;
	} else {
		return false;
	}
};
var $mdgriffith$elm_ui$Element$Input$isStacked = function (label) {
	if (!label.$) {
		var loc = label.a;
		switch (loc) {
			case 0:
				return false;
			case 1:
				return false;
			case 2:
				return true;
			default:
				return true;
		}
	} else {
		return true;
	}
};
var $mdgriffith$elm_ui$Element$Input$negateBox = function (box) {
	return {cH: -box.cH, c_: -box.c_, da: -box.da, dg: -box.dg};
};
var $elm$html$Html$Events$alwaysStop = function (x) {
	return _Utils_Tuple2(x, true);
};
var $elm$virtual_dom$VirtualDom$MayStopPropagation = function (a) {
	return {$: 1, a: a};
};
var $elm$html$Html$Events$stopPropagationOn = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$MayStopPropagation(decoder));
	});
var $elm$json$Json$Decode$at = F2(
	function (fields, decoder) {
		return A3($elm$core$List$foldr, $elm$json$Json$Decode$field, decoder, fields);
	});
var $elm$html$Html$Events$targetValue = A2(
	$elm$json$Json$Decode$at,
	_List_fromArray(
		['target', 'value']),
	$elm$json$Json$Decode$string);
var $elm$html$Html$Events$onInput = function (tagger) {
	return A2(
		$elm$html$Html$Events$stopPropagationOn,
		'input',
		A2(
			$elm$json$Json$Decode$map,
			$elm$html$Html$Events$alwaysStop,
			A2($elm$json$Json$Decode$map, tagger, $elm$html$Html$Events$targetValue)));
};
var $mdgriffith$elm_ui$Element$Input$isFill = function (len) {
	isFill:
	while (true) {
		switch (len.$) {
			case 2:
				return true;
			case 1:
				return false;
			case 0:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isFill;
		}
	}
};
var $mdgriffith$elm_ui$Element$Input$isPixel = function (len) {
	isPixel:
	while (true) {
		switch (len.$) {
			case 1:
				return false;
			case 0:
				return true;
			case 2:
				return false;
			case 3:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
			default:
				var l = len.b;
				var $temp$len = l;
				len = $temp$len;
				continue isPixel;
		}
	}
};
var $mdgriffith$elm_ui$Internal$Model$paddingNameFloat = F4(
	function (top, right, bottom, left) {
		return 'pad-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(top) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(right) + ('-' + ($mdgriffith$elm_ui$Internal$Model$floatClass(bottom) + ('-' + $mdgriffith$elm_ui$Internal$Model$floatClass(left)))))));
	});
var $mdgriffith$elm_ui$Element$Input$redistributeOver = F4(
	function (isMultiline, stacked, attr, els) {
		switch (attr.$) {
			case 9:
				return _Utils_update(
					els,
					{
						c: A2($elm$core$List$cons, attr, els.c)
					});
			case 7:
				var width = attr.a;
				return $mdgriffith$elm_ui$Element$Input$isFill(width) ? _Utils_update(
					els,
					{
						j: A2($elm$core$List$cons, attr, els.j),
						a4: A2($elm$core$List$cons, attr, els.a4),
						c: A2($elm$core$List$cons, attr, els.c)
					}) : (stacked ? _Utils_update(
					els,
					{
						j: A2($elm$core$List$cons, attr, els.j)
					}) : _Utils_update(
					els,
					{
						c: A2($elm$core$List$cons, attr, els.c)
					}));
			case 8:
				var height = attr.a;
				return (!stacked) ? _Utils_update(
					els,
					{
						j: A2($elm$core$List$cons, attr, els.j),
						c: A2($elm$core$List$cons, attr, els.c)
					}) : ($mdgriffith$elm_ui$Element$Input$isFill(height) ? _Utils_update(
					els,
					{
						j: A2($elm$core$List$cons, attr, els.j),
						c: A2($elm$core$List$cons, attr, els.c)
					}) : ($mdgriffith$elm_ui$Element$Input$isPixel(height) ? _Utils_update(
					els,
					{
						c: A2($elm$core$List$cons, attr, els.c)
					}) : _Utils_update(
					els,
					{
						c: A2($elm$core$List$cons, attr, els.c)
					})));
			case 6:
				return _Utils_update(
					els,
					{
						j: A2($elm$core$List$cons, attr, els.j)
					});
			case 5:
				return _Utils_update(
					els,
					{
						j: A2($elm$core$List$cons, attr, els.j)
					});
			case 4:
				switch (attr.b.$) {
					case 5:
						var _v1 = attr.b;
						return _Utils_update(
							els,
							{
								j: A2($elm$core$List$cons, attr, els.j),
								a4: A2($elm$core$List$cons, attr, els.a4),
								c: A2($elm$core$List$cons, attr, els.c),
								bG: A2($elm$core$List$cons, attr, els.bG)
							});
					case 7:
						var cls = attr.a;
						var _v2 = attr.b;
						var pad = _v2.a;
						var t = _v2.b;
						var r = _v2.c;
						var b = _v2.d;
						var l = _v2.e;
						if (isMultiline) {
							return _Utils_update(
								els,
								{
									K: A2($elm$core$List$cons, attr, els.K),
									c: A2($elm$core$List$cons, attr, els.c)
								});
						} else {
							var newTop = t - A2($elm$core$Basics$min, t, b);
							var newLineHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'line-height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newHeight = $mdgriffith$elm_ui$Element$htmlAttribute(
								A2(
									$elm$html$Html$Attributes$style,
									'height',
									'calc(1.0em + ' + ($elm$core$String$fromFloat(
										2 * A2($elm$core$Basics$min, t, b)) + 'px)')));
							var newBottom = b - A2($elm$core$Basics$min, t, b);
							var reducedVerticalPadding = A2(
								$mdgriffith$elm_ui$Internal$Model$StyleClass,
								$mdgriffith$elm_ui$Internal$Flag$padding,
								A5(
									$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
									A4($mdgriffith$elm_ui$Internal$Model$paddingNameFloat, newTop, r, newBottom, l),
									newTop,
									r,
									newBottom,
									l));
							return _Utils_update(
								els,
								{
									K: A2($elm$core$List$cons, attr, els.K),
									a4: A2(
										$elm$core$List$cons,
										newHeight,
										A2($elm$core$List$cons, newLineHeight, els.a4)),
									c: A2($elm$core$List$cons, reducedVerticalPadding, els.c)
								});
						}
					case 6:
						var _v3 = attr.b;
						return _Utils_update(
							els,
							{
								K: A2($elm$core$List$cons, attr, els.K),
								c: A2($elm$core$List$cons, attr, els.c)
							});
					case 10:
						return _Utils_update(
							els,
							{
								K: A2($elm$core$List$cons, attr, els.K),
								c: A2($elm$core$List$cons, attr, els.c)
							});
					case 2:
						return _Utils_update(
							els,
							{
								j: A2($elm$core$List$cons, attr, els.j)
							});
					case 1:
						var _v4 = attr.b;
						return _Utils_update(
							els,
							{
								j: A2($elm$core$List$cons, attr, els.j)
							});
					default:
						var flag = attr.a;
						var cls = attr.b;
						return _Utils_update(
							els,
							{
								c: A2($elm$core$List$cons, attr, els.c)
							});
				}
			case 0:
				return els;
			case 1:
				var a = attr.a;
				return _Utils_update(
					els,
					{
						a4: A2($elm$core$List$cons, attr, els.a4)
					});
			case 2:
				return _Utils_update(
					els,
					{
						a4: A2($elm$core$List$cons, attr, els.a4)
					});
			case 3:
				return _Utils_update(
					els,
					{
						c: A2($elm$core$List$cons, attr, els.c)
					});
			default:
				return _Utils_update(
					els,
					{
						a4: A2($elm$core$List$cons, attr, els.a4)
					});
		}
	});
var $mdgriffith$elm_ui$Element$Input$redistribute = F3(
	function (isMultiline, stacked, attrs) {
		return function (redist) {
			return {
				K: $elm$core$List$reverse(redist.K),
				j: $elm$core$List$reverse(redist.j),
				a4: $elm$core$List$reverse(redist.a4),
				c: $elm$core$List$reverse(redist.c),
				bG: $elm$core$List$reverse(redist.bG)
			};
		}(
			A3(
				$elm$core$List$foldl,
				A2($mdgriffith$elm_ui$Element$Input$redistributeOver, isMultiline, stacked),
				{K: _List_Nil, j: _List_Nil, a4: _List_Nil, c: _List_Nil, bG: _List_Nil},
				attrs));
	});
var $mdgriffith$elm_ui$Element$Input$renderBox = function (_v0) {
	var left = _v0.c_;
	var bottom = _v0.cH;
	var right = _v0.da;
	var top = _v0.dg;
	return $elm$core$String$fromInt(top) + ('px ' + ($elm$core$String$fromInt(right) + ('px ' + ($elm$core$String$fromInt(bottom) + ('px ' + ($elm$core$String$fromInt(left) + 'px'))))));
};
var $mdgriffith$elm_ui$Internal$Model$Transparency = F2(
	function (a, b) {
		return {$: 12, a: a, b: b};
	});
var $mdgriffith$elm_ui$Internal$Flag$transparency = $mdgriffith$elm_ui$Internal$Flag$flag(0);
var $mdgriffith$elm_ui$Element$alpha = function (o) {
	var transparency = function (x) {
		return 1 - x;
	}(
		A2(
			$elm$core$Basics$min,
			1.0,
			A2($elm$core$Basics$max, 0.0, o)));
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$transparency,
		A2(
			$mdgriffith$elm_ui$Internal$Model$Transparency,
			'transparency-' + $mdgriffith$elm_ui$Internal$Model$floatClass(transparency),
			transparency));
};
var $mdgriffith$elm_ui$Element$Input$charcoal = A3($mdgriffith$elm_ui$Element$rgb, 136 / 255, 138 / 255, 133 / 255);
var $mdgriffith$elm_ui$Element$rgba = $mdgriffith$elm_ui$Internal$Model$Rgba;
var $mdgriffith$elm_ui$Element$Input$renderPlaceholder = F3(
	function (_v0, forPlaceholder, on) {
		var placeholderAttrs = _v0.a;
		var placeholderEl = _v0.b;
		return A2(
			$mdgriffith$elm_ui$Element$el,
			_Utils_ap(
				forPlaceholder,
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Font$color($mdgriffith$elm_ui$Element$Input$charcoal),
							$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.ei + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.gC)),
							$mdgriffith$elm_ui$Element$clip,
							$mdgriffith$elm_ui$Element$Border$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$Background$color(
							A4($mdgriffith$elm_ui$Element$rgba, 0, 0, 0, 0)),
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
							$mdgriffith$elm_ui$Element$alpha(
							on ? 1 : 0)
						]),
					placeholderAttrs)),
			placeholderEl);
	});
var $elm$html$Html$Attributes$spellcheck = $elm$html$Html$Attributes$boolProperty('spellcheck');
var $mdgriffith$elm_ui$Element$Input$spellcheck = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$spellcheck);
var $elm$html$Html$Attributes$type_ = $elm$html$Html$Attributes$stringProperty('type');
var $elm$html$Html$Attributes$value = $elm$html$Html$Attributes$stringProperty('value');
var $mdgriffith$elm_ui$Element$Input$value = A2($elm$core$Basics$composeL, $mdgriffith$elm_ui$Internal$Model$Attr, $elm$html$Html$Attributes$value);
var $mdgriffith$elm_ui$Element$Input$textHelper = F3(
	function (textInput, attrs, textOptions) {
		var withDefaults = _Utils_ap($mdgriffith$elm_ui$Element$Input$defaultTextBoxStyle, attrs);
		var redistributed = A3(
			$mdgriffith$elm_ui$Element$Input$redistribute,
			_Utils_eq(textInput.s, $mdgriffith$elm_ui$Element$Input$TextArea),
			$mdgriffith$elm_ui$Element$Input$isStacked(textOptions.gi),
			withDefaults);
		var onlySpacing = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 5)) {
				var _v9 = attr.b;
				return true;
			} else {
				return false;
			}
		};
		var heightConstrained = function () {
			var _v7 = textInput.s;
			if (!_v7.$) {
				var inputType = _v7.a;
				return false;
			} else {
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						$mdgriffith$elm_ui$Element$Input$isConstrained,
						$elm$core$List$head(
							$elm$core$List$reverse(
								A2($elm$core$List$filterMap, $mdgriffith$elm_ui$Element$Input$getHeight, withDefaults)))));
			}
		}();
		var getPadding = function (attr) {
			if ((attr.$ === 4) && (attr.b.$ === 7)) {
				var cls = attr.a;
				var _v6 = attr.b;
				var pad = _v6.a;
				var t = _v6.b;
				var r = _v6.c;
				var b = _v6.d;
				var l = _v6.e;
				return $elm$core$Maybe$Just(
					{
						cH: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(b - 3)),
						c_: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(l - 3)),
						da: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(r - 3)),
						dg: A2(
							$elm$core$Basics$max,
							0,
							$elm$core$Basics$floor(t - 3))
					});
			} else {
				return $elm$core$Maybe$Nothing;
			}
		};
		var parentPadding = A2(
			$elm$core$Maybe$withDefault,
			{cH: 0, c_: 0, da: 0, dg: 0},
			$elm$core$List$head(
				$elm$core$List$reverse(
					A2($elm$core$List$filterMap, getPadding, withDefaults))));
		var inputElement = A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			function () {
				var _v3 = textInput.s;
				if (!_v3.$) {
					var inputType = _v3.a;
					return $mdgriffith$elm_ui$Internal$Model$NodeName('input');
				} else {
					return $mdgriffith$elm_ui$Internal$Model$NodeName('textarea');
				}
			}(),
			_Utils_ap(
				function () {
					var _v4 = textInput.s;
					if (!_v4.$) {
						var inputType = _v4.a;
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Internal$Model$Attr(
								$elm$html$Html$Attributes$type_(inputType)),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gd)
							]);
					} else {
						return _List_fromArray(
							[
								$mdgriffith$elm_ui$Element$clip,
								$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.f9),
								$mdgriffith$elm_ui$Element$Input$calcMoveToCompensateForPadding(withDefaults),
								$mdgriffith$elm_ui$Element$paddingEach(parentPadding),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2(
									$elm$html$Html$Attributes$style,
									'margin',
									$mdgriffith$elm_ui$Element$Input$renderBox(
										$mdgriffith$elm_ui$Element$Input$negateBox(parentPadding)))),
								$mdgriffith$elm_ui$Internal$Model$Attr(
								A2($elm$html$Html$Attributes$style, 'box-sizing', 'content-box'))
							]);
					}
				}(),
				_Utils_ap(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Input$value(textOptions.cw),
							$mdgriffith$elm_ui$Internal$Model$Attr(
							$elm$html$Html$Events$onInput(textOptions.gr)),
							$mdgriffith$elm_ui$Element$Input$hiddenLabelAttribute(textOptions.gi),
							$mdgriffith$elm_ui$Element$Input$spellcheck(textInput.B),
							A2(
							$elm$core$Maybe$withDefault,
							$mdgriffith$elm_ui$Internal$Model$NoAttribute,
							A2($elm$core$Maybe$map, $mdgriffith$elm_ui$Element$Input$autofill, textInput.y))
						]),
					redistributed.a4)),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(_List_Nil));
		var wrappedInput = function () {
			var _v0 = textInput.s;
			if (_v0.$ === 1) {
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					_Utils_ap(
						(heightConstrained ? $elm$core$List$cons($mdgriffith$elm_ui$Element$scrollbarY) : $elm$core$Basics$identity)(
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dR),
									$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gc)
								])),
						redistributed.c),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[
								A4(
								$mdgriffith$elm_ui$Internal$Model$element,
								$mdgriffith$elm_ui$Internal$Model$asParagraph,
								$mdgriffith$elm_ui$Internal$Model$div,
								A2(
									$elm$core$List$cons,
									$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
									A2(
										$elm$core$List$cons,
										$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill),
										A2(
											$elm$core$List$cons,
											$mdgriffith$elm_ui$Element$inFront(inputElement),
											A2(
												$elm$core$List$cons,
												$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.gb),
												redistributed.bG)))),
								$mdgriffith$elm_ui$Internal$Model$Unkeyed(
									function () {
										if (textOptions.cw === '') {
											var _v1 = textOptions.gD;
											if (_v1.$ === 1) {
												return _List_fromArray(
													[
														$mdgriffith$elm_ui$Element$text('\u00A0')
													]);
											} else {
												var place = _v1.a;
												return _List_fromArray(
													[
														A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, _List_Nil, textOptions.cw === '')
													]);
											}
										} else {
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Internal$Model$unstyled(
													A2(
														$elm$html$Html$span,
														_List_fromArray(
															[
																$elm$html$Html$Attributes$class($mdgriffith$elm_ui$Internal$Style$classes.ga)
															]),
														_List_fromArray(
															[
																$elm$html$Html$text(textOptions.cw + '\u00A0')
															])))
												]);
										}
									}()))
							])));
			} else {
				var inputType = _v0.a;
				return A4(
					$mdgriffith$elm_ui$Internal$Model$element,
					$mdgriffith$elm_ui$Internal$Model$asEl,
					$mdgriffith$elm_ui$Internal$Model$div,
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
						A2(
							$elm$core$List$cons,
							A2($elm$core$List$any, $mdgriffith$elm_ui$Element$Input$hasFocusStyle, withDefaults) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.dR),
							$elm$core$List$concat(
								_List_fromArray(
									[
										redistributed.c,
										function () {
										var _v2 = textOptions.gD;
										if (_v2.$ === 1) {
											return _List_Nil;
										} else {
											var place = _v2.a;
											return _List_fromArray(
												[
													$mdgriffith$elm_ui$Element$behindContent(
													A3($mdgriffith$elm_ui$Element$Input$renderPlaceholder, place, redistributed.K, textOptions.cw === ''))
												]);
										}
									}()
									])))),
					$mdgriffith$elm_ui$Internal$Model$Unkeyed(
						_List_fromArray(
							[inputElement])));
			}
		}();
		return A3(
			$mdgriffith$elm_ui$Element$Input$applyLabel,
			A2(
				$elm$core$List$cons,
				A2($mdgriffith$elm_ui$Internal$Model$Class, $mdgriffith$elm_ui$Internal$Flag$cursor, $mdgriffith$elm_ui$Internal$Style$classes.fH),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Element$Input$isHiddenLabel(textOptions.gi) ? $mdgriffith$elm_ui$Internal$Model$NoAttribute : $mdgriffith$elm_ui$Element$spacing(5),
					A2($elm$core$List$cons, $mdgriffith$elm_ui$Element$Region$announce, redistributed.j))),
			textOptions.gi,
			wrappedInput);
	});
var $mdgriffith$elm_ui$Element$Input$text = $mdgriffith$elm_ui$Element$Input$textHelper(
	{
		y: $elm$core$Maybe$Nothing,
		B: false,
		s: $mdgriffith$elm_ui$Element$Input$TextInputNode('text')
	});
var $author$project$UI$inputFilename = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$text,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(35)),
				$mdgriffith$elm_ui$Element$Font$color(
				$author$project$Style$Element$gray(0.2))
			]),
		{
			gi: A2(
				$mdgriffith$elm_ui$Element$Input$labelAbove,
				_List_Nil,
				$mdgriffith$elm_ui$Element$text('File name')),
			gr: $author$project$Model$GotFilename,
			gD: $elm$core$Maybe$Nothing,
			cw: model.bv
		});
};
var $author$project$Model$MakeNewfile = {$: 29};
var $author$project$UI$makeNewFileButton = A2(
	$mdgriffith$elm_ui$Element$Input$button,
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$mouseDown(
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$Font$color(
					$author$project$Style$Element$gray(0.9)),
					$mdgriffith$elm_ui$Element$Background$color(
					A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0, 0))
				])),
			$mdgriffith$elm_ui$Element$Font$color(
			$author$project$Style$Element$gray(0.9)),
			$mdgriffith$elm_ui$Element$height(
			$mdgriffith$elm_ui$Element$px(30)),
			$mdgriffith$elm_ui$Element$Background$color(
			$author$project$Style$Element$gray(0.4)),
			A2($mdgriffith$elm_ui$Element$paddingXY, 8, 0)
		]),
	{
		gi: $mdgriffith$elm_ui$Element$text('New'),
		aA: $elm$core$Maybe$Just($author$project$Model$MakeNewfile)
	});
var $mdgriffith$elm_ui$Internal$Model$MoveX = function (a) {
	return {$: 0, a: a};
};
var $mdgriffith$elm_ui$Internal$Flag$moveX = $mdgriffith$elm_ui$Internal$Flag$flag(25);
var $mdgriffith$elm_ui$Element$moveLeft = function (x) {
	return A2(
		$mdgriffith$elm_ui$Internal$Model$TransformComponent,
		$mdgriffith$elm_ui$Internal$Flag$moveX,
		$mdgriffith$elm_ui$Internal$Model$MoveX(-x));
};
var $mdgriffith$elm_ui$Element$padding = function (x) {
	var f = x;
	return A2(
		$mdgriffith$elm_ui$Internal$Model$StyleClass,
		$mdgriffith$elm_ui$Internal$Flag$padding,
		A5(
			$mdgriffith$elm_ui$Internal$Model$PaddingStyle,
			'p-' + $elm$core$String$fromInt(x),
			f,
			f,
			f,
			f));
};
var $author$project$UI$newDocumentPopup_ = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(8),
				$mdgriffith$elm_ui$Element$Font$size(14),
				$mdgriffith$elm_ui$Element$padding(20),
				$mdgriffith$elm_ui$Element$Font$color(
				$author$project$Style$Element$gray(0.9)),
				$mdgriffith$elm_ui$Element$alignBottom,
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(130)),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(400)),
				$mdgriffith$elm_ui$Element$Background$color(
				$author$project$Style$Element$gray(0.2)),
				$mdgriffith$elm_ui$Element$moveUp(170),
				$mdgriffith$elm_ui$Element$moveLeft(80)
			]),
		_List_fromArray(
			[
				$author$project$UI$inputFilename(model),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$spacing(24),
						$mdgriffith$elm_ui$Element$Font$color(
						$author$project$Style$Element$gray(0.9))
					]),
				_List_fromArray(
					[$author$project$UI$makeNewFileButton, $author$project$UI$cancelNewFileButton]))
			]));
};
var $author$project$Model$ToggleFilePopup = {$: 22};
var $author$project$UI$toggleFileButton = F2(
	function (model, w) {
		var label_ = model.bm ? 'Cancel' : 'New document';
		return A2(
			$mdgriffith$elm_ui$Element$Input$button,
			_List_fromArray(
				[
					$mdgriffith$elm_ui$Element$mouseDown(
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$Background$color(
							A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
						])),
					A2($mdgriffith$elm_ui$Element$paddingXY, 4, 8),
					$mdgriffith$elm_ui$Element$width(
					$mdgriffith$elm_ui$Element$px(w))
				]),
			{
				gi: $mdgriffith$elm_ui$Element$text(label_),
				aA: $elm$core$Maybe$Just($author$project$Model$ToggleFilePopup)
			});
	});
var $author$project$UI$newDocumentPopup = function (model) {
	return model.bm ? A2(
		$mdgriffith$elm_ui$Element$column,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$inFront(
				$author$project$UI$newDocumentPopup_(model))
			]),
		_List_fromArray(
			[
				A2($author$project$UI$toggleFileButton, model, 100)
			])) : A2($author$project$UI$toggleFileButton, model, 100);
};
var $author$project$Model$FileRequested = {$: 14};
var $author$project$UI$openFileButton = function (width) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseDown(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
					])),
				A2($mdgriffith$elm_ui$Element$paddingXY, 4, 8)
			]),
		{
			gi: $mdgriffith$elm_ui$Element$text('Open'),
			aA: $elm$core$Maybe$Just($author$project$Model$FileRequested)
		});
};
var $author$project$Model$PrintToPDF = {$: 17};
var $author$project$Style$Element$blue = A3($mdgriffith$elm_ui$Element$rgb, 0.15, 0.15, 1.0);
var $author$project$UI$elementAttribute = F2(
	function (key, value) {
		return $mdgriffith$elm_ui$Element$htmlAttribute(
			A2($elm$html$Html$Attributes$attribute, key, value));
	});
var $mdgriffith$elm_ui$Element$link = F2(
	function (attrs, _v0) {
		var label = _v0.gi;
		var url = _v0.e_;
		return A4(
			$mdgriffith$elm_ui$Internal$Model$element,
			$mdgriffith$elm_ui$Internal$Model$asEl,
			$mdgriffith$elm_ui$Internal$Model$NodeName('a'),
			A2(
				$elm$core$List$cons,
				$mdgriffith$elm_ui$Internal$Model$Attr(
					$elm$html$Html$Attributes$href(url)),
				A2(
					$elm$core$List$cons,
					$mdgriffith$elm_ui$Internal$Model$Attr(
						$elm$html$Html$Attributes$rel('noopener noreferrer')),
					A2(
						$elm$core$List$cons,
						$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$shrink),
						A2(
							$elm$core$List$cons,
							$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$shrink),
							A2(
								$elm$core$List$cons,
								$mdgriffith$elm_ui$Internal$Model$htmlClass($mdgriffith$elm_ui$Internal$Style$classes.cf + (' ' + ($mdgriffith$elm_ui$Internal$Style$classes.aS + (' ' + $mdgriffith$elm_ui$Internal$Style$classes.d8)))),
								attrs))))),
			$mdgriffith$elm_ui$Internal$Model$Unkeyed(
				_List_fromArray(
					[label])));
	});
var $author$project$Style$Element$buttonFontSize = $mdgriffith$elm_ui$Element$Font$size(16);
var $author$project$Style$Element$mouseDownColor = A3($mdgriffith$elm_ui$Element$rgb, 0.7, 0.1, 0.1);
var $author$project$Style$Element$basicButtonsStyle = _List_fromArray(
	[
		$author$project$Style$Element$buttonFontSize,
		$mdgriffith$elm_ui$Element$pointer,
		$mdgriffith$elm_ui$Element$mouseDown(
		_List_fromArray(
			[
				$author$project$Style$Element$buttonFontSize,
				$mdgriffith$elm_ui$Element$Background$color($author$project$Style$Element$mouseDownColor)
			]))
	]);
var $author$project$Style$Element$simpleButtonStyle = _Utils_ap(
	_List_fromArray(
		[
			$mdgriffith$elm_ui$Element$Background$color(
			$author$project$Style$Element$gray(0.2)),
			$mdgriffith$elm_ui$Element$Font$color(
			$author$project$Style$Element$gray(0.8)),
			A2($mdgriffith$elm_ui$Element$paddingXY, 10, 6)
		]),
	$author$project$Style$Element$basicButtonsStyle);
var $author$project$Style$Element$white = A3($mdgriffith$elm_ui$Element$rgb, 1, 1, 1);
var $author$project$View$Footer$printToPDF = function (model) {
	var _v0 = model.er;
	switch (_v0) {
		case 0:
			return A2(
				$mdgriffith$elm_ui$Element$Input$button,
				A2(
					$elm$core$List$cons,
					A2($author$project$UI$elementAttribute, 'title', 'Generate PDF'),
					$author$project$Style$Element$simpleButtonStyle),
				{
					gi: $mdgriffith$elm_ui$Element$text('PDF'),
					aA: $elm$core$Maybe$Just($author$project$Model$PrintToPDF)
				});
		case 1:
			return A2(
				$mdgriffith$elm_ui$Element$el,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$padding(8),
						$mdgriffith$elm_ui$Element$height(
						$mdgriffith$elm_ui$Element$px(30)),
						$mdgriffith$elm_ui$Element$Background$color($author$project$Style$Element$blue),
						$mdgriffith$elm_ui$Element$Font$color($author$project$Style$Element$white)
					]),
				$mdgriffith$elm_ui$Element$text('Please wait ...'));
		default:
			return A2(
				$mdgriffith$elm_ui$Element$link,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Font$size(14),
						$mdgriffith$elm_ui$Element$Background$color(
						$author$project$Style$Element$gray(0.2)),
						A2($mdgriffith$elm_ui$Element$paddingXY, 8, 8),
						$mdgriffith$elm_ui$Element$Font$color(
						$author$project$Style$Element$gray(0.8)),
						$mdgriffith$elm_ui$Element$Events$onClick(
						$author$project$Model$ChangePrintingState(0)),
						A2($author$project$UI$elementAttribute, 'target', '_blank')
					]),
				{
					gi: A2(
						$mdgriffith$elm_ui$Element$el,
						_List_Nil,
						$mdgriffith$elm_ui$Element$text('Click for PDF')),
					e_: $author$project$Config$pdfServer + ('/pdf/' + model.hz)
				});
	}
};
var $author$project$Model$SaveFile = {$: 13};
var $author$project$UI$saveFileButton = function (width) {
	return A2(
		$mdgriffith$elm_ui$Element$Input$button,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$mouseDown(
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$Background$color(
						A3($mdgriffith$elm_ui$Element$rgb255, 200, 40, 40))
					])),
				A2($mdgriffith$elm_ui$Element$paddingXY, 4, 8)
			]),
		{
			gi: $mdgriffith$elm_ui$Element$text('Save'),
			aA: $elm$core$Maybe$Just($author$project$Model$SaveFile)
		});
};
var $author$project$View$Footer$showIf = F2(
	function (flag, el) {
		return flag ? el : $mdgriffith$elm_ui$Element$none;
	});
var $author$project$View$Footer$view = function (model) {
	return A2(
		$mdgriffith$elm_ui$Element$row,
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$spacing(12),
				$mdgriffith$elm_ui$Element$Font$size(14),
				$mdgriffith$elm_ui$Element$height(
				$mdgriffith$elm_ui$Element$px(35)),
				$mdgriffith$elm_ui$Element$width(
				$mdgriffith$elm_ui$Element$px(
					$elm$core$Basics$round((2 * model.cI.hC) - 7))),
				$mdgriffith$elm_ui$Element$Background$color(
				$author$project$Style$Element$gray(0.2)),
				$mdgriffith$elm_ui$Element$Font$color(
				$author$project$Style$Element$gray(0.9)),
				A2($mdgriffith$elm_ui$Element$paddingXY, 12, 0)
			]),
		_List_fromArray(
			[
				$author$project$UI$openFileButton(100),
				A2(
				$author$project$View$Footer$showIf,
				!model.fL,
				$author$project$UI$exportButton(100)),
				$author$project$UI$saveFileButton(100),
				$author$project$View$Footer$printToPDF(model),
				$author$project$UI$fullRenderButton(100),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						A2($mdgriffith$elm_ui$Element$paddingXY, 24, 0),
						$mdgriffith$elm_ui$Element$spacing(8)
					]),
				_List_fromArray(
					[
						$author$project$UI$newDocumentPopup(model),
						A2(
						$mdgriffith$elm_ui$Element$el,
						_List_fromArray(
							[
								$mdgriffith$elm_ui$Element$Font$color(
								A3($mdgriffith$elm_ui$Element$rgb, 0.9, 0.5, 0.5))
							]),
						$mdgriffith$elm_ui$Element$text('File: ' + model.dQ)),
						$author$project$View$Footer$fileStatus(model.dJ),
						$author$project$View$Footer$fileArchive(model.cj)
					])),
				A2(
				$mdgriffith$elm_ui$Element$row,
				_List_fromArray(
					[
						$mdgriffith$elm_ui$Element$alignRight,
						$mdgriffith$elm_ui$Element$spacing(12)
					]),
				_List_fromArray(
					[
						$author$project$UI$loadDocumentButton('start.cyt'),
						$author$project$UI$loadDocumentButton('start.tex'),
						$author$project$UI$loadDocumentButton('markdown.md')
					]))
			]));
};
var $author$project$EditorMsg$MarkdownMsg = function (a) {
	return {$: 72, a: a};
};
var $author$project$EditorMsg$AcceptReplacementText = function (a) {
	return {$: 66, a: a};
};
var $author$project$View$Search$setHtmlId = function (id) {
	return A2($elm$html$Html$Attributes$attribute, 'id', id);
};
var $elm$html$Html$input = _VirtualDom_node('input');
var $elm$html$Html$Attributes$placeholder = $elm$html$Html$Attributes$stringProperty('placeholder');
var $author$project$Widget$textField = F5(
	function (width, msg, str, attr, innerAttr) {
		return A2(
			$elm$html$Html$div,
			A2(
				$elm$core$List$cons,
				A2($elm$html$Html$Attributes$style, 'margin-bottom', '10px'),
				attr),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$input,
					_Utils_ap(
						_List_fromArray(
							[
								A2(
								$elm$html$Html$Attributes$style,
								'width',
								$elm$core$String$fromInt(width) + 'px'),
								$elm$html$Html$Attributes$type_('text'),
								$elm$html$Html$Attributes$placeholder(str),
								A2($elm$html$Html$Attributes$style, 'margin-right', '8px'),
								$elm$html$Html$Events$onInput(msg)
							]),
						innerAttr),
					_List_Nil)
				]));
	});
var $author$project$View$Search$acceptReplaceText = A5(
	$author$project$Widget$textField,
	267,
	$author$project$EditorMsg$AcceptReplacementText,
	'',
	_List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'float', 'left')
		]),
	_List_fromArray(
		[
			$author$project$View$Search$setHtmlId('replacement-box')
		]));
var $author$project$EditorStyle$mediumGray = '#75767b';
var $author$project$View$Search$px = function (f) {
	return $elm$core$String$fromFloat(f) + 'px';
};
var $author$project$EditorMsg$ReplaceCurrentSelection = {$: 63};
var $elm$html$Html$button = _VirtualDom_node('button');
var $author$project$EditorStyle$darkGray = '#444548';
var $author$project$Widget$rowButtonLabelStyle = function (width) {
	return _List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'font-size', '12px'),
			A2($elm$html$Html$Attributes$style, 'background-color', $author$project$EditorStyle$darkGray),
			A2($elm$html$Html$Attributes$style, 'color', '#eee'),
			A2(
			$elm$html$Html$Attributes$style,
			'width',
			$elm$core$String$fromInt(width) + 'px'),
			A2($elm$html$Html$Attributes$style, 'height', '24px'),
			A2($elm$html$Html$Attributes$style, 'border', 'none')
		]);
};
var $author$project$Widget$rowButtonStyle = _List_fromArray(
	[
		A2($elm$html$Html$Attributes$style, 'font-size', '12px'),
		A2($elm$html$Html$Attributes$style, 'border', 'none'),
		A2($elm$html$Html$Attributes$style, 'margin-right', '8px'),
		A2($elm$html$Html$Attributes$style, 'float', 'left')
	]);
var $author$project$Widget$rowButton = F4(
	function (width, msg, str, attr) {
		return A2(
			$elm$html$Html$div,
			_Utils_ap($author$project$Widget$rowButtonStyle, attr),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$button,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Events$onClick(msg),
						$author$project$Widget$rowButtonLabelStyle(width)),
					_List_fromArray(
						[
							$elm$html$Html$text(str)
						]))
				]));
	});
var $elm$html$Html$Attributes$title = $elm$html$Html$Attributes$stringProperty('title');
var $author$project$View$Search$replaceTextButton = A4(
	$author$project$Widget$rowButton,
	70,
	$author$project$EditorMsg$ReplaceCurrentSelection,
	'Replace',
	_List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'margin-left', '10px'),
			$elm$html$Html$Attributes$title('Replace current search hit')
		]));
var $author$project$View$Search$replacePanel_ = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$author$project$View$Search$px(model.hC)),
				A2($elm$html$Html$Attributes$style, 'padding-top', '5px'),
				A2($elm$html$Html$Attributes$style, 'padding-left', '15px'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
				A2($elm$html$Html$Attributes$style, 'justify-content', 'flex-start'),
				A2($elm$html$Html$Attributes$style, 'align-items', 'baseline'),
				A2($elm$html$Html$Attributes$style, 'height', '30px'),
				A2($elm$html$Html$Attributes$style, 'background-color', $author$project$EditorStyle$mediumGray),
				A2($elm$html$Html$Attributes$style, 'opacity', '0.9'),
				A2($elm$html$Html$Attributes$style, 'font-size', '14px'),
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$author$project$View$Search$px(model.hC - 15))
			]),
		_List_fromArray(
			[$author$project$View$Search$replaceTextButton, $author$project$View$Search$acceptReplaceText]));
};
var $author$project$View$Search$showIf = F2(
	function (flag, el) {
		return flag ? el : A2($elm$html$Html$div, _List_Nil, _List_Nil);
	});
var $author$project$View$Search$replacePanel = function (model) {
	return A2(
		$author$project$View$Search$showIf,
		model.ds && model.eP,
		$author$project$View$Search$replacePanel_(model));
};
var $author$project$EditorMsg$AcceptSearchText = function (a) {
	return {$: 65, a: a};
};
var $author$project$View$Search$acceptSearchText = A5(
	$author$project$Widget$textField,
	220,
	$author$project$EditorMsg$AcceptSearchText,
	'',
	_List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'float', 'left')
		]),
	_List_fromArray(
		[
			$author$project$View$Search$setHtmlId('editor-search-box')
		]));
var $author$project$View$Search$numberOfHitsDisplay = function (model) {
	var n = $elm$core$List$length(
		$lovasoa$elm_rolling_list$RollingList$toList(model.eF));
	var txt = $elm$core$String$fromInt(model.eE + 1) + ('/' + $elm$core$String$fromInt(n));
	return A4(
		$author$project$Widget$rowButton,
		40,
		$author$project$EditorMsg$EditorNoOp,
		txt,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'float', 'left')
			]));
};
var $author$project$EditorMsg$RollSearchSelectionBackward = {$: 62};
var $author$project$View$Search$searchBackwardButton = A4(
	$author$project$Widget$rowButton,
	30,
	$author$project$EditorMsg$RollSearchSelectionBackward,
	'<',
	_List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'float', 'left'),
			$elm$html$Html$Attributes$title('Previous search hit')
		]));
var $author$project$EditorMsg$RollSearchSelectionForward = {$: 61};
var $author$project$View$Search$searchForwardButton = A4(
	$author$project$Widget$rowButton,
	30,
	$author$project$EditorMsg$RollSearchSelectionForward,
	'>',
	_List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'float', 'left'),
			$elm$html$Html$Attributes$title('Next search hit')
		]));
var $author$project$View$Search$searchPanel_ = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$author$project$View$Search$px(model.hC)),
				A2($elm$html$Html$Attributes$style, 'padding-top', '5px'),
				A2($elm$html$Html$Attributes$style, 'padding-left', '25px'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
				A2($elm$html$Html$Attributes$style, 'justify-content', 'left'),
				A2($elm$html$Html$Attributes$style, 'align-items', 'baseline'),
				A2($elm$html$Html$Attributes$style, 'height', '30px'),
				A2($elm$html$Html$Attributes$style, 'background-color', $author$project$EditorStyle$mediumGray),
				A2($elm$html$Html$Attributes$style, 'opacity', '0.9'),
				A2($elm$html$Html$Attributes$style, 'font-size', '14px'),
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$author$project$View$Search$px(model.hC - 25))
			]),
		_List_fromArray(
			[
				$author$project$View$Search$acceptSearchText,
				$author$project$View$Search$numberOfHitsDisplay(model),
				$author$project$View$Search$searchForwardButton,
				$author$project$View$Search$searchBackwardButton
			]));
};
var $author$project$View$Search$searchPanel = function (model) {
	return A2(
		$author$project$View$Search$showIf,
		model.eP,
		$author$project$View$Search$searchPanel_(model));
};
var $author$project$EditorMsg$SelectGroup = {$: 36};
var $author$project$EditorMsg$SelectLine = {$: 31};
var $author$project$View$Editor$editorHeight = function (model) {
	var defaultHeight = model.cV - 16;
	var barHeight = 35;
	var _v0 = _Utils_Tuple2(model.eP, model.ds);
	if (_v0.a) {
		if (!_v0.b) {
			return defaultHeight - barHeight;
		} else {
			return defaultHeight - (2 * barHeight);
		}
	} else {
		if (!_v0.b) {
			return defaultHeight;
		} else {
			return defaultHeight;
		}
	}
};
var $elm$virtual_dom$VirtualDom$Custom = function (a) {
	return {$: 3, a: a};
};
var $elm$html$Html$Events$custom = F2(
	function (event, decoder) {
		return A2(
			$elm$virtual_dom$VirtualDom$on,
			event,
			$elm$virtual_dom$VirtualDom$Custom(decoder));
	});
var $author$project$Keymap$Keydown = F3(
	function (_char, key, modifier) {
		return {dv: _char, d5: key, ee: modifier};
	});
var $author$project$Keymap$characterDecoder = A2(
	$elm$json$Json$Decode$map,
	function (key) {
		var _v0 = $elm$core$String$uncons(key);
		if ((!_v0.$) && (_v0.a.b === '')) {
			var _v1 = _v0.a;
			var _char = _v1.a;
			return $elm$core$Maybe$Just(
				$elm$core$String$fromChar(_char));
		} else {
			return $elm$core$Maybe$Nothing;
		}
	},
	A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string));
var $author$project$EditorMsg$InsertChar = function (a) {
	return {$: 14, a: a};
};
var $author$project$EditorMsg$Clear = {$: 42};
var $author$project$EditorMsg$DeleteLine = {$: 21};
var $author$project$EditorMsg$EditorRequestFile = {$: 47};
var $author$project$EditorMsg$EditorSaveFile = {$: 50};
var $author$project$EditorMsg$FirstLine = {$: 10};
var $author$project$EditorMsg$KillLineAlt = {$: 20};
var $author$project$EditorMsg$LastLine = {$: 11};
var $author$project$EditorMsg$MoveDown = {$: 3};
var $author$project$EditorMsg$MoveLeft = {$: 4};
var $author$project$EditorMsg$MoveRight = {$: 5};
var $author$project$EditorMsg$MoveToLineEnd = {$: 7};
var $author$project$EditorMsg$MoveToLineStart = {$: 6};
var $author$project$EditorMsg$MoveUp = {$: 2};
var $author$project$EditorMsg$PageDown = {$: 9};
var $author$project$EditorMsg$PageUp = {$: 8};
var $author$project$EditorMsg$SelectDown = {$: 33};
var $author$project$EditorMsg$SelectLeft = {$: 34};
var $author$project$EditorMsg$SelectRight = {$: 35};
var $author$project$EditorMsg$SelectUp = {$: 32};
var $author$project$EditorMsg$SendLineForLRSync = {$: 51};
var $author$project$EditorMsg$Test = {$: 43};
var $author$project$EditorMsg$ToggleDarkMode = {$: 68};
var $author$project$EditorMsg$ToggleEditMode = {$: 70};
var $author$project$EditorMsg$ToggleHelp = {$: 69};
var $author$project$EditorMsg$ToggleSearchPanel = {$: 58};
var $author$project$EditorMsg$ToggleShortCutExecution = {$: 71};
var $author$project$EditorMsg$WriteToSystemClipBoard = {$: 56};
var $author$project$Keymap$keymaps = {
	dx: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2('j', $author$project$EditorMsg$SelectGroup),
				_Utils_Tuple2('c', $author$project$EditorMsg$Copy),
				_Utils_Tuple2('.', $author$project$EditorMsg$RollSearchSelectionForward),
				_Utils_Tuple2(',', $author$project$EditorMsg$RollSearchSelectionBackward),
				_Utils_Tuple2('h', $author$project$EditorMsg$ToggleHelp),
				_Utils_Tuple2('l', $author$project$EditorMsg$SelectLine),
				_Utils_Tuple2('x', $author$project$EditorMsg$Cut),
				_Utils_Tuple2('s', $author$project$EditorMsg$ToggleSearchPanel),
				_Utils_Tuple2('d', $author$project$EditorMsg$RemoveCharAfter),
				_Utils_Tuple2('k', $author$project$EditorMsg$KillLine),
				_Utils_Tuple2('u', $author$project$EditorMsg$DeleteLine),
				_Utils_Tuple2('o', $author$project$EditorMsg$EditorRequestFile),
				_Utils_Tuple2('v', $author$project$EditorMsg$Paste),
				_Utils_Tuple2('a', $author$project$EditorMsg$MoveToLineStart),
				_Utils_Tuple2('e', $author$project$EditorMsg$MoveToLineEnd),
				_Utils_Tuple2('z', $author$project$EditorMsg$Undo),
				_Utils_Tuple2('w', $author$project$EditorMsg$WrapSelection),
				_Utils_Tuple2('y', $author$project$EditorMsg$Redo),
				_Utils_Tuple2('\\', $author$project$EditorMsg$SendLineForLRSync)
			])),
	dy: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2('ArrowUp', $author$project$EditorMsg$FirstLine),
				_Utils_Tuple2('ArrowDown', $author$project$EditorMsg$LastLine),
				_Utils_Tuple2('ç', $author$project$EditorMsg$Clear),
				_Utils_Tuple2('ß', $author$project$EditorMsg$EditorSaveFile),
				_Utils_Tuple2('t', $author$project$EditorMsg$Test)
			])),
	dz: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2('C', $author$project$EditorMsg$WriteToSystemClipBoard),
				_Utils_Tuple2('V', $author$project$EditorMsg$CopyPasteClipboard),
				_Utils_Tuple2('W', $author$project$EditorMsg$WrapAll),
				_Utils_Tuple2('S', $author$project$EditorMsg$SendLineForLRSync),
				_Utils_Tuple2('K', $author$project$EditorMsg$KillLineAlt)
			])),
	eh: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2('ArrowUp', $author$project$EditorMsg$MoveUp),
				_Utils_Tuple2('ArrowDown', $author$project$EditorMsg$MoveDown),
				_Utils_Tuple2('ArrowLeft', $author$project$EditorMsg$MoveLeft),
				_Utils_Tuple2('ArrowRight', $author$project$EditorMsg$MoveRight),
				_Utils_Tuple2('Backspace', $author$project$EditorMsg$RemoveCharBefore),
				_Utils_Tuple2('Delete', $author$project$EditorMsg$RemoveCharAfter),
				_Utils_Tuple2('Enter', $author$project$EditorMsg$NewLine),
				_Utils_Tuple2('Home', $author$project$EditorMsg$MoveToLineStart),
				_Utils_Tuple2('End', $author$project$EditorMsg$MoveToLineEnd),
				_Utils_Tuple2('Tab', $author$project$EditorMsg$Indent),
				_Utils_Tuple2('Escape', $author$project$EditorMsg$ToggleShortCutExecution)
			])),
	el: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2('ArrowUp', $author$project$EditorMsg$PageUp),
				_Utils_Tuple2('ArrowDown', $author$project$EditorMsg$PageDown),
				_Utils_Tuple2('ArrowLeft', $author$project$EditorMsg$MoveToLineStart),
				_Utils_Tuple2('ArrowRight', $author$project$EditorMsg$MoveToLineEnd),
				_Utils_Tuple2('ß', $author$project$EditorMsg$SendLineForLRSync),
				_Utils_Tuple2('∂', $author$project$EditorMsg$ToggleDarkMode),
				_Utils_Tuple2('√', $author$project$EditorMsg$ToggleEditMode)
			])),
	eN: $elm$core$Dict$fromList(
		_List_fromArray(
			[
				_Utils_Tuple2('ArrowUp', $author$project$EditorMsg$SelectUp),
				_Utils_Tuple2('ArrowDown', $author$project$EditorMsg$SelectDown),
				_Utils_Tuple2('ArrowLeft', $author$project$EditorMsg$SelectLeft),
				_Utils_Tuple2('ArrowRight', $author$project$EditorMsg$SelectRight),
				_Utils_Tuple2('Tab', $author$project$EditorMsg$Deindent)
			]))
};
var $elm$json$Json$Decode$oneOf = _Json_oneOf;
var $author$project$Keymap$keyToMsg = function (_v0) {
	var _char = _v0.dv;
	var key = _v0.d5;
	var modifier = _v0.ee;
	var keyFrom = function (keymap) {
		return A2(
			$elm$core$Maybe$withDefault,
			$elm$json$Json$Decode$fail('This key does nothing'),
			A2(
				$elm$core$Maybe$map,
				$elm$json$Json$Decode$succeed,
				A2($elm$core$Dict$get, key, keymap)));
	};
	var keyOrCharFrom = function (keymap) {
		return $elm$json$Json$Decode$oneOf(
			_List_fromArray(
				[
					keyFrom(keymap),
					A2(
					$elm$core$Maybe$withDefault,
					$elm$json$Json$Decode$fail('This key does nothing'),
					A2(
						$elm$core$Maybe$map,
						A2($elm$core$Basics$composeR, $author$project$EditorMsg$InsertChar, $elm$json$Json$Decode$succeed),
						_char))
				]));
	};
	switch (modifier) {
		case 0:
			return keyOrCharFrom($author$project$Keymap$keymaps.eh);
		case 1:
			return keyFrom($author$project$Keymap$keymaps.dx);
		case 3:
			return keyOrCharFrom($author$project$Keymap$keymaps.eN);
		case 4:
			return keyFrom($author$project$Keymap$keymaps.dz);
		case 5:
			return keyFrom($author$project$Keymap$keymaps.dy);
		default:
			return keyFrom($author$project$Keymap$keymaps.el);
	}
};
var $elm$json$Json$Decode$map3 = _Json_map3;
var $elm$json$Json$Decode$bool = _Json_decodeBool;
var $author$project$Keymap$Control = 1;
var $author$project$Keymap$ControlAndOption = 5;
var $author$project$Keymap$ControlAndShift = 4;
var $author$project$Keymap$None = 0;
var $author$project$Keymap$Option = 2;
var $author$project$Keymap$Shift = 3;
var $author$project$Keymap$modifierFromFlags = F3(
	function (ctrl, shift, option) {
		var _v0 = _Utils_Tuple3(ctrl, shift, option);
		_v0$5:
		while (true) {
			if (!_v0.a) {
				if (_v0.b) {
					if (!_v0.c) {
						return 3;
					} else {
						break _v0$5;
					}
				} else {
					if (_v0.c) {
						return 2;
					} else {
						break _v0$5;
					}
				}
			} else {
				if (_v0.b) {
					if (!_v0.c) {
						return 4;
					} else {
						break _v0$5;
					}
				} else {
					if (!_v0.c) {
						return 1;
					} else {
						return 5;
					}
				}
			}
		}
		return 0;
	});
var $author$project$Keymap$modifierDecoder = A4(
	$elm$json$Json$Decode$map3,
	$author$project$Keymap$modifierFromFlags,
	A2($elm$json$Json$Decode$field, 'ctrlKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'shiftKey', $elm$json$Json$Decode$bool),
	A2($elm$json$Json$Decode$field, 'altKey', $elm$json$Json$Decode$bool));
var $author$project$Keymap$keydownDecoder = A2(
	$elm$json$Json$Decode$andThen,
	$author$project$Keymap$keyToMsg,
	A4(
		$elm$json$Json$Decode$map3,
		$author$project$Keymap$Keydown,
		$author$project$Keymap$characterDecoder,
		A2($elm$json$Json$Decode$field, 'key', $elm$json$Json$Decode$string),
		$author$project$Keymap$modifierDecoder));
var $author$project$Keymap$transformMsg = function (msg) {
	return {gm: msg, gE: true, g8: true};
};
var $author$project$Keymap$handle = A2(
	$elm$html$Html$Events$custom,
	'keydown',
	A2($elm$json$Json$Decode$map, $author$project$Keymap$transformMsg, $author$project$Keymap$keydownDecoder));
var $author$project$View$Editor$onMultiplelick = F2(
	function (msg1, msg2) {
		return A2(
			$elm$html$Html$Events$on,
			'click',
			A2(
				$elm$json$Json$Decode$andThen,
				function (detail) {
					return (detail === 2) ? $elm$json$Json$Decode$succeed(msg1) : ((detail >= 3) ? $elm$json$Json$Decode$succeed(msg2) : $elm$json$Json$Decode$fail(''));
				},
				A2($elm$json$Json$Decode$field, 'detail', $elm$json$Json$Decode$int)));
	});
var $author$project$View$Editor$px = function (f) {
	return $elm$core$String$fromFloat(f) + 'px';
};
var $author$project$View$Helper$showIf = F2(
	function (flag, el) {
		return flag ? el : A2($elm$html$Html$div, _List_Nil, _List_Nil);
	});
var $author$project$EditorMsg$GoToHoveredPosition = {$: 28};
var $author$project$EditorMsg$Hover = function (a) {
	return {$: 27, a: a};
};
var $author$project$EditorMsg$StartSelecting = {$: 29};
var $author$project$EditorMsg$StopSelecting = {$: 30};
var $author$project$View$Editor$editorBackgroundColor = function (viewMode_) {
	if (!viewMode_) {
		return A2($elm$html$Html$Attributes$style, 'background-color', '#f0f0f0');
	} else {
		return A2($elm$html$Html$Attributes$style, 'background-color', '#444444');
	}
};
var $author$project$Window$lines = F2(
	function (window, lines_) {
		return A3($elm$core$Array$slice, window.bZ, window.bZ + window.cV, lines_);
	});
var $elm$html$Html$Events$onMouseDown = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mousedown',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$onMouseOut = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseout',
		$elm$json$Json$Decode$succeed(msg));
};
var $elm$html$Html$Events$onMouseUp = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseup',
		$elm$json$Json$Decode$succeed(msg));
};
var $author$project$Window$shiftHover = F2(
	function (k, h) {
		switch (h.$) {
			case 0:
				return $author$project$EditorMsg$NoHover;
			case 1:
				var l = h.a;
				return $author$project$EditorMsg$HoverLine(l + k);
			default:
				var p = h.a;
				return $author$project$EditorMsg$HoverChar(
					A2($author$project$Window$shiftPosition, k, p));
		}
	});
var $author$project$Window$shiftSelection = F2(
	function (k, sel) {
		switch (sel.$) {
			case 0:
				return $author$project$EditorMsg$NoSelection;
			case 1:
				var hover = sel.a;
				return $author$project$EditorMsg$SelectingFrom(
					A2($author$project$Window$shiftHover, k, hover));
			case 2:
				var pos = sel.a;
				return $author$project$EditorMsg$SelectedChar(
					A2($author$project$Window$shiftPosition, k, pos));
			default:
				var p = sel.a;
				var q = sel.b;
				return A2(
					$author$project$EditorMsg$Selection,
					A2($author$project$Window$shiftPosition, k, p),
					A2($author$project$Window$shiftPosition, k, q));
		}
	});
var $elm$virtual_dom$VirtualDom$lazy8 = _VirtualDom_lazy8;
var $elm$html$Html$Lazy$lazy8 = $elm$virtual_dom$VirtualDom$lazy8;
var $author$project$View$Editor$editorFontColor = function (viewMode_) {
	if (!viewMode_) {
		return A2($elm$html$Html$Attributes$style, 'color', '#444');
	} else {
		return A2($elm$html$Html$Attributes$style, 'color', '#f0f0f0');
	}
};
var $author$project$View$Editor$nbsp = '\u00A0';
var $elm$html$Html$Events$onMouseOver = function (msg) {
	return A2(
		$elm$html$Html$Events$on,
		'mouseover',
		$elm$json$Json$Decode$succeed(msg));
};
var $author$project$View$Editor$isSelected = F5(
	function (lines, selection, currentHover, line, column) {
		var isSelectedPositions = F2(
			function (from, to) {
				return (_Utils_cmp(from.i, line) < 1) && ((_Utils_cmp(to.i, line) > -1) && ((_Utils_eq(from.i, line) ? (_Utils_cmp(from.ac, column) < 1) : true) && (_Utils_eq(to.i, line) ? (_Utils_cmp(to.ac, column) > -1) : true)));
			});
		switch (selection.$) {
			case 0:
				return false;
			case 1:
				var startHover = selection.a;
				return A2(
					$elm$core$Maybe$withDefault,
					false,
					A2(
						$elm$core$Maybe$map,
						function (_v1) {
							var from = _v1.a;
							var to = _v1.b;
							return A2(isSelectedPositions, from, to);
						},
						A3($author$project$Common$hoversToPositions, lines, startHover, currentHover)));
			case 2:
				var position = selection.a;
				return _Utils_eq(
					position,
					{ac: column, i: line});
			default:
				var from = selection.a;
				var to = selection.b;
				return A2(isSelectedPositions, from, to);
		}
	});
var $author$project$View$Editor$onHover = function (position) {
	return A2(
		$elm$html$Html$Events$custom,
		'mouseover',
		$elm$json$Json$Decode$succeed(
			{
				gm: $author$project$EditorMsg$Hover(
					$author$project$EditorMsg$HoverChar(position)),
				gE: true,
				g8: true
			}));
};
var $author$project$View$Editor$viewCursor = F2(
	function (position, _char) {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'background-color', 'orange'),
					$author$project$View$Editor$onHover(position)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(_char)
				]));
	});
var $author$project$View$Editor$highlightColorLight = '#d7d6ff';
var $author$project$View$Editor$selectedColor = function (viewMode_) {
	if (!viewMode_) {
		return A2($elm$html$Html$Attributes$style, 'background-color', $author$project$View$Editor$highlightColorLight);
	} else {
		return A2($elm$html$Html$Attributes$style, 'background-color', '#03a199');
	}
};
var $author$project$View$Editor$viewSelectedChar = F3(
	function (viewMode_, position, _char) {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$author$project$View$Editor$selectedColor(viewMode_),
					$author$project$View$Editor$onHover(position)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(_char)
				]));
	});
var $author$project$View$Editor$viewChar = F8(
	function (viewMode_, position, hover, selection, lines, line, column, _char) {
		return (_Utils_eq(position.i, line) && _Utils_eq(position.ac, column)) ? A2(
			$author$project$View$Editor$viewCursor,
			position,
			$elm$core$String$fromChar(_char)) : (((!_Utils_eq(selection, $author$project$EditorMsg$NoSelection)) && A5($author$project$View$Editor$isSelected, lines, selection, hover, line, column)) ? A3(
			$author$project$View$Editor$viewSelectedChar,
			viewMode_,
			{ac: column, i: line},
			$elm$core$String$fromChar(_char)) : A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					$author$project$View$Editor$onHover(
					{ac: column, i: line})
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(
					$elm$core$String$fromChar(_char))
				])));
	});
var $author$project$View$Editor$viewChars = F7(
	function (viewMode_, position, hover, selection, lines, line, content) {
		return A2(
			$elm$core$List$indexedMap,
			A6($author$project$View$Editor$viewChar, viewMode_, position, hover, selection, lines, line),
			$elm$core$String$toList(content));
	});
var $author$project$View$Editor$viewLine_ = F8(
	function (viewMode_, lineHeight, position, hover, selection, lines, line, content) {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'right', '0'),
					A2($elm$html$Html$Attributes$style, 'padding-left', '14px'),
					$author$project$View$Editor$editorBackgroundColor(viewMode_),
					$author$project$View$Editor$editorFontColor(viewMode_),
					A2(
					$elm$html$Html$Attributes$style,
					'height',
					$author$project$View$Editor$px(lineHeight)),
					A2(
					$elm$html$Html$Attributes$style,
					'top',
					$author$project$View$Editor$px(line * lineHeight)),
					$elm$html$Html$Events$onMouseOver(
					$author$project$EditorMsg$Hover(
						$author$project$EditorMsg$HoverLine(line)))
				]),
			(_Utils_eq(position.i, line) && A3($author$project$Common$isLastColumn, lines, line, position.ac)) ? _Utils_ap(
				A7($author$project$View$Editor$viewChars, viewMode_, position, hover, selection, lines, line, content),
				_List_fromArray(
					[
						A2($author$project$View$Editor$viewCursor, position, $author$project$View$Editor$nbsp)
					])) : A7($author$project$View$Editor$viewChars, viewMode_, position, hover, selection, lines, line, content));
	});
var $author$project$View$Editor$viewLine = F8(
	function (viewMode_, lineHeight, position, hover, selection, lines, line, content) {
		return A9($elm$html$Html$Lazy$lazy8, $author$project$View$Editor$viewLine_, viewMode_, lineHeight, position, hover, selection, lines, line, content);
	});
var $author$project$View$Editor$viewLines = F6(
	function (viewMode_, lineHeight, position, hover, selection, lines) {
		return A2(
			$elm$html$Html$div,
			_List_Nil,
			$elm$core$Array$toList(
				A2(
					$elm$core$Array$indexedMap,
					A6($author$project$View$Editor$viewLine, viewMode_, lineHeight, position, hover, selection, lines),
					lines)));
	});
var $author$project$View$Editor$viewContent = function (model) {
	var windowLines = A2($author$project$Window$lines, model.dj, model.p);
	var selection = model.Z;
	var offset = model.dj.bZ;
	var selection2 = A2($author$project$Window$shiftSelection, -offset, selection);
	var hover2 = A2($author$project$Window$shiftHover, -offset, model.cl);
	var cursor = model.d;
	var cursor2 = A2($author$project$Window$shiftPosition, -offset, cursor);
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'position', 'relative'),
				A2($elm$html$Html$Attributes$style, 'flex', '1'),
				A2($elm$html$Html$Attributes$style, 'user-select', 'none'),
				A2($elm$html$Html$Attributes$style, 'user-select', 'none'),
				$author$project$View$Editor$editorBackgroundColor(model.cB),
				$elm$html$Html$Events$onMouseDown($author$project$EditorMsg$StartSelecting),
				$elm$html$Html$Events$onMouseUp($author$project$EditorMsg$StopSelecting),
				$elm$html$Html$Events$onClick($author$project$EditorMsg$GoToHoveredPosition),
				$elm$html$Html$Events$onMouseOut(
				$author$project$EditorMsg$Hover($author$project$EditorMsg$NoHover))
			]),
		_List_fromArray(
			[
				A6($author$project$View$Editor$viewLines, model.cB, model.a6, cursor2, hover2, selection2, windowLines)
			]));
};
var $author$project$View$Editor$borderBackgroundColor = function (viewMode_) {
	return A2($elm$html$Html$Attributes$style, 'background-color', '#252525');
};
var $author$project$View$Editor$borderFontColor = function (viewMode_) {
	return A2($elm$html$Html$Attributes$style, 'color', '#aaa');
};
var $author$project$View$Editor$viewLineNumber = F3(
	function (viewMode_, offset, n) {
		return A2(
			$elm$html$Html$span,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'padding-left', '6px'),
					$author$project$View$Editor$borderBackgroundColor(viewMode_),
					$author$project$View$Editor$borderFontColor(viewMode_)
				]),
			_List_fromArray(
				[
					$elm$html$Html$text(
					$elm$core$String$fromInt(n + offset))
				]));
	});
var $author$project$View$Editor$viewLineNumbers = function (model) {
	var offset = (_Utils_cmp(model.d.i, (2 * model.dj.cV) - 2) < 1) ? model.d.i : (model.d.i - (2 * model.dj.cV));
	var lineHeightString = $elm$core$String$fromFloat(model.a6 + 0.7) + 'px';
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'width', '3.5em'),
				A2($elm$html$Html$Attributes$style, 'text-align', 'left'),
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'column'),
				A2($elm$html$Html$Attributes$style, 'line-height', lineHeightString),
				$author$project$View$Editor$borderBackgroundColor(model.cB),
				$author$project$View$Editor$borderFontColor(model.cB)
			]),
		A2(
			$elm$core$List$map,
			A2($author$project$View$Editor$viewLineNumber, model.cB, offset),
			A2($elm$core$List$range, 1, 4 * model.dj.cV)));
};
var $author$project$View$Editor$view = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'flex-direction', 'row'),
				A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
				A2(
				$elm$html$Html$Attributes$style,
				'font-size',
				$author$project$View$Editor$px(model.bQ)),
				A2(
				$elm$html$Html$Attributes$style,
				'line-height',
				$author$project$View$Editor$px(model.a6)),
				A2($elm$html$Html$Attributes$style, 'white-space', 'wrap'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$author$project$View$Editor$px(
					$author$project$View$Editor$editorHeight(model))),
				A2($elm$html$Html$Attributes$style, 'overflow', 'scroll'),
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$author$project$View$Editor$px(model.hC)),
				A2($elm$html$Html$Attributes$style, 'background-color', '#555'),
				$author$project$Keymap$handle,
				$elm$html$Html$Attributes$tabindex(0),
				A2($author$project$View$Editor$onMultiplelick, $author$project$EditorMsg$SelectGroup, $author$project$EditorMsg$SelectLine),
				$elm$html$Html$Attributes$id('__editor__')
			]),
		_List_fromArray(
			[
				A2(
				$author$project$View$Helper$showIf,
				model.cA,
				$author$project$View$Editor$viewLineNumbers(model)),
				$author$project$View$Editor$viewContent(model)
			]));
};
var $author$project$View$EditorFooter$editModeDisplay = function (model) {
	var message = function () {
		var _v0 = model.dK;
		if (!_v0.$) {
			return 'Standard';
		} else {
			if (!_v0.a) {
				var _v1 = _v0.a;
				return 'Vim';
			} else {
				var _v2 = _v0.a;
				return 'Vim: Insert';
			}
		}
	}();
	return A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'font-style', 'bold'),
				A2($elm$html$Html$Attributes$style, 'font-size', '14px'),
				A2($elm$html$Html$Attributes$style, 'width', '20px'),
				A2($elm$html$Html$Attributes$style, 'margin-left', '4px'),
				A2($elm$html$Html$Attributes$style, 'margin-right', '16px'),
				A2($elm$html$Html$Attributes$style, 'color', '#ee4444')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(message)
			]));
};
var $author$project$View$EditorFooter$footerBackgroundColor = function (viewMode_) {
	if (!viewMode_) {
		return A2($elm$html$Html$Attributes$style, 'background-color', '#557');
	} else {
		return A2($elm$html$Html$Attributes$style, 'background-color', '#557');
	}
};
var $author$project$View$EditorFooter$footerFontColor = function (viewMode_) {
	if (!viewMode_) {
		return A2($elm$html$Html$Attributes$style, 'color', '#f0f0f0');
	} else {
		return A2($elm$html$Html$Attributes$style, 'color', '#f0f0f0');
	}
};
var $elm$core$String$padRight = F3(
	function (n, _char, string) {
		return _Utils_ap(
			string,
			A2(
				$elm$core$String$repeat,
				n - $elm$core$String$length(string),
				$elm$core$String$fromChar(_char)));
	});
var $author$project$Vim$Update$toString = function (vstate) {
	if (!vstate) {
		return 'accumulate';
	} else {
		return '';
	}
};
var $author$project$View$EditorFooter$vimBufferDisplay = function (model) {
	return (_Utils_eq(model.dK, $author$project$EditorModel$StandardEditor) || (!$elm$core$String$length(model.e1.dr))) ? A2($elm$html$Html$span, _List_Nil, _List_Nil) : A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'font-size', '14px'),
				A2($elm$html$Html$Attributes$style, 'width', '400px'),
				A2($elm$html$Html$Attributes$style, 'margin-right', '16px'),
				A2($elm$html$Html$Attributes$style, 'color', '#eee')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text('Buffer: ' + model.e1.dr)
			]));
};
var $author$project$View$EditorFooter$vimStateDisplay = function (model) {
	return _Utils_eq(model.dK, $author$project$EditorModel$StandardEditor) ? A2($elm$html$Html$span, _List_Nil, _List_Nil) : A2(
		$elm$html$Html$span,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'font-size', '14px'),
				A2($elm$html$Html$Attributes$style, 'width', '30px'),
				A2($elm$html$Html$Attributes$style, 'margin-right', '16px'),
				A2($elm$html$Html$Attributes$style, 'color', '#eee')
			]),
		_List_fromArray(
			[
				$elm$html$Html$text(
				$author$project$Vim$Update$toString(model.e1.bC))
			]));
};
var $author$project$View$EditorFooter$view = function (model) {
	var prefix = 'State: ';
	var message = function (y) {
		return A3(
			$elm$core$String$padRight,
			45 - $elm$core$String$length(y),
			' ',
			y);
	}(
		function (x) {
			return _Utils_ap(prefix, x);
		}(
			$author$project$Vim$Update$toString(model.e1.bC)));
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'height', '30px'),
				A2($elm$html$Html$Attributes$style, 'font-size', '14px'),
				A2($elm$html$Html$Attributes$style, 'padding-left', '12px'),
				A2($elm$html$Html$Attributes$style, 'line-height', '30px'),
				$author$project$View$EditorFooter$footerBackgroundColor(model.cB),
				$author$project$View$EditorFooter$footerFontColor(model.cB)
			]),
		_List_fromArray(
			[
				$author$project$View$EditorFooter$editModeDisplay(model),
				$author$project$View$EditorFooter$vimStateDisplay(model),
				$author$project$View$EditorFooter$vimBufferDisplay(model)
			]));
};
var $author$project$View$Help$data = '\n\n## Menu\n\nThe items in the menu bar are\n\n- Help:  toggles this help page\n- (142,  589) or something like that: the number of lines and words\n- Go: enter a line number and press this button\n- brkOn: toggle automatic line-breaking\n\n\n## Key Commands\n\nType `ctrl-H` to toggle this window.\n\n### Search\n\n```nolang\nSearch                ctrl-S\nNext search hit       ctrl-.   (Think >)\nPrevious search hit   ctrl-,   (Think <)\n```\n    \n### Content\n\n```nolang\nUndo       ctrl-Z\nRedo       ctrl-Y\n\nCopy       ctrl-C\nCut        ctrl-X\nPaste      ctrl-V\nClear      ctrl-opt-C\n\nDelete Forward   ctrl-D\n\nKill Line     ctrl-K   (from cursor to end)\nDelete Line   ctrl-U\nPaste         ctrl-V\n\nFor now, Google Chrome only:\nCopy to system clipboard       ctrl-shift-C\nPaste from system clipboard    ctrl-shift-V\n\nIndent     TAB\nDeindent   shift-TAB\n\nType (, [, {, ` and the editor will\nmatch with ), ], }, `.  Works also\nif there is a selection.\n```\n\n### Sync\n\nPress `ctrl-\\` in the source text to sync\nit to the rendered text.  Click in the rendered\ntext to sync to the source text.\n\n### Cursor\n\n```nolang\nUp       ArrowUp\nDown     ArrowDown\nLeft     ArrowLeft\nRight    ArrowRight\n\nPage up     ArrowUp\nPage down   opt-ArrowDown\n```\n\n### Selection\n\nExtend selection using shift + an arrow key (left, right, up, down).\nDouble-click (or ctrl-J) to select a word, triple-click (or ctrl-L)\nto select a line.\n\n### Lines\n\n```nolang\nLine start   opt-ArrowLeft,  ctrl-A\nLine end     opt-ArrowRight, ctrl-E\n\nFirst line   ctrl-opt-ArrowUp\nLast line    ctrl-opt-ArrowDown\n```\n\n### Wrap \n\n```nolang\nWrap selection   ctrl-W\nWrap all         ctrl-shift-W\n```\n\n### Other\n\n```nolang\nToggle dark mode   option-D\nToggle help        ctrl-H\nToggle Vim mode    option-V\n```\n\n### About Vim Mode\n\nVim mode is not yet\noperational and it will be a while before it is.\nSo far I have installed a primitive scaffolding for\nbuilding this feature, but have implemented only the commands listed\nbelow.  I will do a little more, reserving plenty\nof things for the April 25 hackathon in Paris.\n\n### Vim commands implemented so far\n\n```nolang\ni, ESC\nh, j, k, l\n```\n\nFor LaTeX command execution, use sequences like `"= \\pi ="`\nto insert `$\\pi$`.\n\n\n';
var $author$project$View$Help$px = function (p) {
	return $elm$core$String$fromFloat(p) + 'px';
};
var $author$project$Markdown$Render$toHtml = F2(
	function (option, str) {
		return A2(
			$author$project$Markdown$Render$fromAST,
			_Utils_Tuple2(0, 0),
			A3($author$project$Markdown$Parse$toMDBlockTree, 0, option, str));
	});
var $author$project$View$Help$view = function (model) {
	var _v0 = model.dW;
	if (_v0 === 1) {
		return A2($elm$html$Html$div, _List_Nil, _List_Nil);
	} else {
		return A2(
			$elm$html$Html$div,
			_List_fromArray(
				[
					A2($elm$html$Html$Attributes$style, 'position', 'absolute'),
					A2($elm$html$Html$Attributes$style, 'left', '0'),
					A2($elm$html$Html$Attributes$style, 'top', '37px'),
					A2($elm$html$Html$Attributes$style, 'background-color', '#fff'),
					A2($elm$html$Html$Attributes$style, 'z-index', '1000'),
					A2(
					$elm$html$Html$Attributes$style,
					'width',
					$author$project$View$Help$px(model.hC - 20)),
					A2(
					$elm$html$Html$Attributes$style,
					'height',
					$author$project$View$Help$px(model.cV)),
					A2($elm$html$Html$Attributes$style, 'overflow-y', 'scroll'),
					A2($elm$html$Html$Attributes$style, 'padding-left', '20px'),
					A2($elm$html$Html$Attributes$style, 'font-size', '14px'),
					A2($elm$html$Html$Attributes$style, 'line-height', '1.3')
				]),
			_List_fromArray(
				[
					A2($author$project$Markdown$Render$toHtml, 2, $author$project$View$Help$data)
				]));
	}
};
var $author$project$View$Editor$selectedText_ = F3(
	function (selection, currentHover, lines) {
		var positionsToString = F2(
			function (from, to) {
				var numberOfLines = (to.i - from.i) + 1;
				return A2(
					$elm$core$String$join,
					'\n',
					A2(
						$elm$core$List$indexedMap,
						F2(
							function (i, line) {
								return (numberOfLines === 1) ? A2(
									$elm$core$String$left,
									(to.ac - from.ac) + 1,
									A2($elm$core$String$dropLeft, from.ac, line)) : ((!i) ? A2($elm$core$String$dropLeft, from.ac, line) : (_Utils_eq(i, numberOfLines - 1) ? A2($elm$core$String$left, to.ac + 1, line) : line));
							}),
						A2(
							$elm$core$List$take,
							numberOfLines,
							A2(
								$elm$core$List$drop,
								from.i,
								$elm$core$Array$toList(lines)))));
			});
		switch (selection.$) {
			case 0:
				return '';
			case 1:
				var startHover = selection.a;
				return A2(
					$elm$core$Maybe$withDefault,
					'',
					A2(
						$elm$core$Maybe$map,
						function (_v1) {
							var from = _v1.a;
							var to = _v1.b;
							return A2(positionsToString, from, to);
						},
						A3($author$project$Common$hoversToPositions, lines, startHover, currentHover)));
			case 2:
				var line = selection.a.i;
				var column = selection.a.ac;
				return A2(
					$elm$core$String$left,
					1,
					A2(
						$elm$core$String$dropLeft,
						column,
						A2($author$project$Common$lineContent, lines, line)));
			default:
				var from = selection.a;
				var to = selection.b;
				return A2(positionsToString, from, to);
		}
	});
var $author$project$View$Editor$stringFromPosition = function (p) {
	return '(' + ($elm$core$String$fromInt(p.i) + (', ' + ($elm$core$String$fromInt(p.ac) + ')')));
};
var $author$project$View$Editor$stringFromHover = function (hover) {
	switch (hover.$) {
		case 0:
			return 'NoHover';
		case 1:
			var k = hover.a;
			return 'HoverLine: ' + $elm$core$String$fromInt(k);
		default:
			var p = hover.a;
			return 'HoverChar: ' + $author$project$View$Editor$stringFromPosition(p);
	}
};
var $author$project$View$Editor$stringFromSelection = function (sel) {
	switch (sel.$) {
		case 0:
			return 'NoSelection';
		case 1:
			var h = sel.a;
			return 'Hover: ' + $author$project$View$Editor$stringFromHover(h);
		case 2:
			var p = sel.a;
			return 'SelectedChar: ' + $author$project$View$Editor$stringFromPosition(p);
		default:
			var p = sel.a;
			var q = sel.b;
			return 'From ' + ($author$project$View$Editor$stringFromPosition(p) + (' to ' + $author$project$View$Editor$stringFromPosition(q)));
	}
};
var $author$project$View$Editor$viewDebug = function (model) {
	return model.ci ? A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2(
				$elm$html$Html$Attributes$style,
				'max-width',
				$author$project$View$Editor$px(model.hC)),
				A2($elm$html$Html$Attributes$style, 'padding', '8px')
			]),
		_List_fromArray(
			[
				A2(
				$elm$html$Html$pre,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(
						'cursor: ' + $author$project$View$Editor$stringFromPosition(model.d))
					])),
				A2(
				$elm$html$Html$pre,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(
						'hover: ' + $author$project$View$Editor$stringFromHover(model.cl))
					])),
				A2(
				$elm$html$Html$pre,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(
						$author$project$View$Editor$stringFromSelection(model.Z))
					])),
				A2(
				$elm$html$Html$pre,
				_List_Nil,
				_List_fromArray(
					[
						$elm$html$Html$text(
						'selected text:\n' + A3($author$project$View$Editor$selectedText_, model.Z, model.cl, model.p))
					]))
			])) : A2($elm$html$Html$div, _List_Nil, _List_Nil);
};
var $author$project$EditorMsg$AcceptLineToGoTo = function (a) {
	return {$: 39, a: a};
};
var $author$project$EditorMsg$GoToLine = {$: 12};
var $author$project$EditorMsg$ToggleAutoLineBreak = {$: 46};
var $author$project$View$Editor$autoLinBreakTitle = function (model) {
	var _v0 = model.$7;
	if (!_v0) {
		return 'brk ON';
	} else {
		return 'brk OFF';
	}
};
var $author$project$View$Editor$rowButtonLabelStyle = function (width) {
	return _List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'font-size', '14px'),
			A2($elm$html$Html$Attributes$style, 'background-color', '#222'),
			A2($elm$html$Html$Attributes$style, 'color', '#eee'),
			A2(
			$elm$html$Html$Attributes$style,
			'width',
			$elm$core$String$fromInt(width) + 'px'),
			A2($elm$html$Html$Attributes$style, 'height', '26px'),
			A2($elm$html$Html$Attributes$style, 'border', 'none')
		]);
};
var $author$project$View$Editor$rowButtonStyle = _List_fromArray(
	[
		A2($elm$html$Html$Attributes$style, 'font-size', '12px'),
		A2($elm$html$Html$Attributes$style, 'border', 'none')
	]);
var $author$project$View$Editor$rowButton = F4(
	function (width, str, msg, attr) {
		return A2(
			$elm$html$Html$div,
			_Utils_ap($author$project$View$Editor$rowButtonStyle, attr),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$button,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Events$onClick(msg),
						$author$project$View$Editor$rowButtonLabelStyle(width)),
					_List_fromArray(
						[
							$elm$html$Html$text(str)
						]))
				]));
	});
var $author$project$View$Editor$displayStyle = _List_fromArray(
	[
		A2($elm$html$Html$Attributes$style, 'margin-left', '12px'),
		A2($elm$html$Html$Attributes$style, 'font-size', '16px'),
		A2($elm$html$Html$Attributes$style, 'margin-top', '8px')
	]);
var $author$project$View$Editor$statisticsDisplay = function (model) {
	var w = $elm$core$String$fromInt(
		$elm$core$List$sum(
			$elm$core$Array$toList(
				A2(
					$elm$core$Array$map,
					A2($elm$core$Basics$composeR, $elm$core$String$words, $elm$core$List$length),
					model.p))));
	var l = $elm$core$String$fromInt(
		$elm$core$Array$length(model.p));
	return A2(
		$elm$html$Html$span,
		$author$project$View$Editor$displayStyle,
		_List_fromArray(
			[
				$elm$html$Html$text('(' + (l + (', ' + (w + ')'))))
			]));
};
var $author$project$View$Editor$statisticsDisplay2 = function (model) {
	return A2(
		$elm$html$Html$span,
		$author$project$View$Editor$displayStyle,
		_List_fromArray(
			[
				$elm$html$Html$text(
				'(' + ($elm$core$String$fromInt(model.dj.bZ) + (', ' + ($elm$core$String$fromInt(model.d.i) + (', ' + ($elm$core$String$fromInt(model.d.ac) + ')'))))))
			]));
};
var $author$project$View$Editor$textField = F5(
	function (width, str, msg, attr, innerAttr) {
		return A2(
			$elm$html$Html$div,
			attr,
			_List_fromArray(
				[
					A2(
					$elm$html$Html$input,
					_Utils_ap(
						_List_fromArray(
							[
								A2($elm$html$Html$Attributes$style, 'height', '20px'),
								A2(
								$elm$html$Html$Attributes$style,
								'width',
								$elm$core$String$fromInt(width) + 'px'),
								$elm$html$Html$Attributes$type_('text'),
								$elm$html$Html$Attributes$placeholder(str),
								A2($elm$html$Html$Attributes$style, 'margin-right', '8px'),
								$elm$html$Html$Events$onInput(msg)
							]),
						innerAttr),
					_List_Nil)
				]));
	});
var $author$project$View$Editor$textFieldBackgroundColor = function (model) {
	return A2($elm$html$Html$Attributes$style, 'background-color', '#ccc');
};
var $author$project$View$Editor$textFieldFontColor = function (model) {
	return A2($elm$html$Html$Attributes$style, 'color', '#222');
};
var $author$project$EditorMsg$ToggleReplacePanel = {$: 59};
var $author$project$Widget$lightButtonLabelStyle = function (width) {
	return _List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'font-size', '12px'),
			A2($elm$html$Html$Attributes$style, 'color', '#444'),
			A2(
			$elm$html$Html$Attributes$style,
			'width',
			$elm$core$String$fromInt(width) + 'px'),
			A2($elm$html$Html$Attributes$style, 'height', '24px'),
			A2($elm$html$Html$Attributes$style, 'border', 'none'),
			A2($elm$html$Html$Attributes$style, 'text-align', 'left')
		]);
};
var $author$project$Widget$lightRowButton = F4(
	function (width, msg, str, attr) {
		return A2(
			$elm$html$Html$div,
			_Utils_ap($author$project$Widget$rowButtonStyle, attr),
			_List_fromArray(
				[
					A2(
					$elm$html$Html$button,
					A2(
						$elm$core$List$cons,
						$elm$html$Html$Events$onClick(msg),
						$author$project$Widget$lightButtonLabelStyle(width)),
					_List_fromArray(
						[
							$elm$html$Html$text(str)
						]))
				]));
	});
var $author$project$View$Editor$toggleReplacePanel = A4(
	$author$project$Widget$lightRowButton,
	25,
	$author$project$EditorMsg$ToggleReplacePanel,
	'R',
	_List_fromArray(
		[
			A2($elm$html$Html$Attributes$style, 'float', 'left'),
			A2($elm$html$Html$Attributes$style, 'float', 'left'),
			$elm$html$Html$Attributes$title('Toggle replace text panel')
		]));
var $author$project$View$Editor$viewHeader = function (model) {
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'display', 'flex'),
				A2($elm$html$Html$Attributes$style, 'font-family', 'monospace'),
				A2($elm$html$Html$Attributes$style, 'background-color', '#c0c0c0'),
				A2($elm$html$Html$Attributes$style, 'padding-top', '2px'),
				A2($elm$html$Html$Attributes$style, 'padding-bottom', '6px'),
				A2($elm$html$Html$Attributes$style, 'align-items', 'baseline'),
				A2(
				$elm$html$Html$Attributes$style,
				'width',
				$author$project$View$Editor$px(model.hC)),
				$author$project$View$Editor$borderFontColor(model.cB),
				$author$project$View$Editor$borderBackgroundColor(model.cB)
			]),
		_List_fromArray(
			[
				A4(
				$author$project$View$Editor$rowButton,
				60,
				'Help',
				$author$project$EditorMsg$ToggleHelp,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-left', '12px'),
						A2($elm$html$Html$Attributes$style, 'margin-top', '4px')
					])),
				model.dG ? $author$project$View$Editor$statisticsDisplay2(model) : $author$project$View$Editor$statisticsDisplay(model),
				A4(
				$author$project$View$Editor$rowButton,
				32,
				'Search',
				$author$project$EditorMsg$ToggleSearchPanel,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-left', '24px'),
						A2($elm$html$Html$Attributes$style, 'margin-top', '4px'),
						$elm$html$Html$Attributes$title('Toggle search panel')
					])),
				A2($author$project$View$Helper$showIf, model.eP, $author$project$View$Editor$toggleReplacePanel),
				A4(
				$author$project$View$Editor$rowButton,
				32,
				'Go',
				$author$project$EditorMsg$GoToLine,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-left', '24px'),
						A2($elm$html$Html$Attributes$style, 'margin-top', '4px'),
						$elm$html$Html$Attributes$title('Go to line number')
					])),
				A5(
				$author$project$View$Editor$textField,
				56,
				'',
				$author$project$EditorMsg$AcceptLineToGoTo,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-left', '4px'),
						A2($elm$html$Html$Attributes$style, 'margin-top', '4px')
					]),
				_List_fromArray(
					[
						$author$project$View$Editor$textFieldFontColor(model),
						$author$project$View$Editor$textFieldBackgroundColor(model),
						A2($elm$html$Html$Attributes$style, 'font-size', '14px')
					])),
				A4(
				$author$project$View$Editor$rowButton,
				60,
				$author$project$View$Editor$autoLinBreakTitle(model),
				$author$project$EditorMsg$ToggleAutoLineBreak,
				_List_fromArray(
					[
						A2($elm$html$Html$Attributes$style, 'margin-left', '24px'),
						A2($elm$html$Html$Attributes$style, 'margin-top', '4px'),
						$elm$html$Html$Attributes$title('Toggle auto line break/wrap')
					]))
			]));
};
var $author$project$Editor$view = function (_v0) {
	var model = _v0;
	return A2(
		$elm$html$Html$div,
		_List_fromArray(
			[
				A2($elm$html$Html$Attributes$style, 'background-color', '#555'),
				A2(
				$elm$html$Html$Attributes$style,
				'height',
				$elm$core$String$fromFloat(model.cV + 0) + 'px')
			]),
		_List_fromArray(
			[
				$author$project$View$Editor$viewHeader(model),
				$author$project$View$Search$searchPanel(model),
				$author$project$View$Search$replacePanel(model),
				$author$project$View$Editor$view(model),
				$author$project$View$EditorFooter$view(model),
				$author$project$View$Editor$viewDebug(model),
				A2(
				$elm$html$Html$map,
				$author$project$EditorMsg$MarkdownMsg,
				$author$project$View$Help$view(model))
			]));
};
var $author$project$Main$viewEditor = function (model) {
	return $mdgriffith$elm_ui$Element$html(
		A2(
			$elm$html$Html$map,
			$author$project$Model$MyEditorMsg,
			$author$project$Editor$view(model.dL)));
};
var $author$project$Main$view = function (model) {
	return A3(
		$mdgriffith$elm_ui$Element$layoutWith,
		{
			gx: _List_fromArray(
				[
					$mdgriffith$elm_ui$Element$focusStyle($author$project$Style$Element$noFocus)
				])
		},
		_List_fromArray(
			[
				$mdgriffith$elm_ui$Element$Background$color(
				$author$project$Style$Element$gray(0.4)),
				$mdgriffith$elm_ui$Element$width($mdgriffith$elm_ui$Element$fill),
				$mdgriffith$elm_ui$Element$height($mdgriffith$elm_ui$Element$fill)
			]),
		A2(
			$mdgriffith$elm_ui$Element$column,
			_List_fromArray(
				[$mdgriffith$elm_ui$Element$centerX, $mdgriffith$elm_ui$Element$centerY]),
			_List_fromArray(
				[
					A2(
					$mdgriffith$elm_ui$Element$row,
					_List_fromArray(
						[
							$mdgriffith$elm_ui$Element$spacing(0)
						]),
					_List_fromArray(
						[
							A2(
							$mdgriffith$elm_ui$Element$el,
							_List_fromArray(
								[$mdgriffith$elm_ui$Element$alignTop]),
							$author$project$Main$viewEditor(model)),
							A2(
							$mdgriffith$elm_ui$Element$column,
							_List_fromArray(
								[
									$mdgriffith$elm_ui$Element$width(
									$mdgriffith$elm_ui$Element$px(
										$elm$core$Basics$round(model.cI.hC) - 8)),
									$mdgriffith$elm_ui$Element$height(
									$mdgriffith$elm_ui$Element$px(
										$elm$core$Basics$round(model.cI.cV))),
									$mdgriffith$elm_ui$Element$scrollbarY,
									$mdgriffith$elm_ui$Element$Background$color(
									$author$project$Style$Element$gray(1.0)),
									$mdgriffith$elm_ui$Element$Font$size(14),
									$mdgriffith$elm_ui$Element$spacing(18),
									A2($mdgriffith$elm_ui$Element$paddingXY, 12, 12),
									A2($author$project$Main$htmlAttribute, 'white-space', 'normal')
								]),
							A2(
								$elm$core$List$map,
								$mdgriffith$elm_ui$Element$map($author$project$Model$Umuli),
								A2($author$project$Umuli$render, '', model.dC)))
						])),
					$author$project$View$Footer$view(model)
				])));
};
var $author$project$Main$main = $elm$browser$Browser$element(
	{f7: $author$project$Main$init, hc: $author$project$Main$subscriptions, hy: $author$project$Main$update, hA: $author$project$Main$view});
_Platform_export({'Main':{'init':$author$project$Main$main(
	A2(
		$elm$json$Json$Decode$andThen,
		function (width) {
			return A2(
				$elm$json$Json$Decode$andThen,
				function (seed) {
					return A2(
						$elm$json$Json$Decode$andThen,
						function (height) {
							return $elm$json$Json$Decode$succeed(
								{cV: height, b0: seed, hC: width});
						},
						A2($elm$json$Json$Decode$field, 'height', $elm$json$Json$Decode$int));
				},
				A2($elm$json$Json$Decode$field, 'seed', $elm$json$Json$Decode$int));
		},
		A2($elm$json$Json$Decode$field, 'width', $elm$json$Json$Decode$int)))(0)}});}(this));